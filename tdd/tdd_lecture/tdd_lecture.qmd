---
title: "Test-Driven Development"
author: "RichÃ¨l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
bibliography: tdd_lecture.bib
csl: vancouver.csl
css: styles.css
slide-number: true
number-sections: true
---

# The Big Picture ![](CC-BY-NC-SA.png)

<https://github.com/UPPMAX/programming_formalisms/blob/main/tdd/tdd_lecture/tdd_lecture.qmd>

![](programming_formalism_logo_25_cropped.png)

## Breaks

Please take breaks: these are important for learning. Ideally, do something boring @newport2016deep!

## Schedule

| Day | From  | To    | What                  |
|-----|-------|-------|-----------------------|
| Wed | 9:00  | 10:00 | TDD: `is_even`        |
| Wed | 10:00 | 10:15 | Break                 |
| Wed | 10:15 | 11:00 | TDD: `is_odd`         |
| Wed | 11:00 | 11:15 | Break                 |
| Wed | 11:15 | 12:00 | TDD: `is_probability` |
| Wed | 12:00 | 13:00 | Lunch                 |

# Growing code

![](programming_formalism_logo_25_cropped.png)

## Problem

How do you grow/develop your code?

![](thomas_and_hunt_the_pragmatic_programmer.jpg)

## Newbie developers

'Just start somewhere'

![](chaotic_programmer.png)

## Experienced developers

Work systematically

![](organised_female_programmer.png)

## TDD

Short for 'Test-driven development'. A systematic way to grow code, used in academia and industry. It works @martin2011clean!

![](tdd_hat_2.jpg)

## TDD cycle

![](tdd_cycle_2.jpg)

# Example exercise: `is_zero`

-   Only observe, no type-along!
-   Ask questions on the go! When in doubt: ask that question!
-   Time: 15 minutes

## Example exercise: `is_zero`

-   Function name: `is_zero`
-   Output:
    -   Returns `True` if the input is zero
    -   Returns `False` if the input is not zero
    -   :warning: Gives an error when the input is not a number
-   [Zen Of Python: 'Errors should never pass silently'](https://peps.python.org/pep-0020/#the-zen-of-python)

## Example exercise: `is_zero`, social

-   Ping-Pong Pair programming
-   Discuss how and when to switch roles first!
-   Person with first name first in alphabet starts
-   Try to be **an exemplary duo**

## Example exercise: `is_zero` technical

-   Use the GitHub repository for the learners of this course, <https://github.com/programming-formalisms/programming_formalisms_project_autumn_2023>
-   Work on the main branch
-   Work in a file called `learners/[your_name]/is_zero.py`, where `[your_name]` is the person with first name first in alphabet

## Live demo (15 minutes)

-   Only observe, no type-along!

Videos:

-   [**Python video for 'is_zero'**](https://youtu.be/VddlrNOeodg), from 3:02
-   [R video for 'is_one'](https://youtu.be/IPGfW4lrxOc)
-   Or see also slides beyond end

## Reflection

Q: Do developers really do this?

. . .

A: Yes @beck2022test@langr2013modern

![](beck_tdd_by_example.jpg) ![](book_langr.jpg)

# Exercise 1: `is_even`

-   Time: 30 mins

## Exercise 1: `is_even` (30 mins)

-   Develop a function called `is_even`
-   Output:
    -   Returns `True` if the input is even
    -   Returns `False` if the input is not even
    -   :warning: Gives an error when the input is not a number
-   Try to be **exemplary**
-   We'll discuss a random commit history

## Exercise 1: `is_even` social (30 mins)

-   Ping-Pong Pair programming
-   Discuss how and when to switch roles first!
-   Person with first name first in alphabet starts
-   Try to be **an exemplary duo**

## Exercise 1: `is_even` technical (30 mins)

-   Use the GitHub repository for the learners of this course
-   Work on the main branch
-   Create a file called `learners/[your_name]/is_even.py`

Done? Write `is_odd`, then `is_probility`.

## Exercise 1 feedback

-   [ ] Ask for a volunteer for feedback
    -   If none: pick a random folder
-   [ ] Discuss history

## Reflection

Q: Does this really save time?

. . .

A: No, it takes longer

| Study                  | Extra time | Effect                        |
|------------------------|------------|-------------------------------|
| @george2004structured  | 16%        | 18% more black-box tests pass |
| @bhat2006evaluating    | 15%        | 2x higher code quality        |
| @nagappan2008realizing | 15-35%     | 40%-90% less defects          |

## Reflection

Q: Why do TDD?

. . .

A:

-   TDD makes developers more productive @erdogmus2005effectiveness
-   TDD increases quality of the code @erdogmus2005effectiveness @alkaoud2018quality @janzen2006test
    -   There are plenty of costly programming mistakes documented!
-   TDD helps shape the project architecture @mayr2005projekt
-   TDD helps better modularisation @madeyski2010test
-   TDD works great with Xtreme programming and CI

## Reflection

Q: How many tests should I write?

. . .

A: Until you cannot break your function anymore @beck2022test@langr2013modern

![](beck_tdd_by_example.jpg) ![](book_langr.jpg)

# Exercise 2: `is_odd`

-   Time: 30 mins

## Exercise 2: `is_odd` (30 mins)

-   Develop a function called `is_odd`
-   Output:
    -   Returns `True` if the input is odd
    -   Returns `False` if the input is not odd
    -   :warning: Gives an error when the input is not a number
-   Try to be **exemplary**
-   We'll discuss a commit history after the exercise

## Exercise 2: `is_odd` social (30 mins)

-   Ping-Pong Pair programming
-   Discuss how and when to switch roles first!
-   Person with first name first in alphabet starts
-   Try to be **an exemplary duo**

## Exercise 2: `is_odd`, technical (30 mins)

-   Use the GitHub repository for the learners of this course, e.g. https://github.com/programming-formalisms/programming_formalisms_project_autumn_2023
-   Work on the main branch
-   Use a file called `learners/[your_name]/is_odd.py`

Done? Try exercise 3: `is_probability`.

## Exercise 2 feedback

-   [ ] Ask for a volunteer for feedback
    -   If none: pick a random folder
-   [ ] Discuss history

# Exercise 3: `is_probability`

-   Time: 30 mins

## Exercise 3: `is_probability` (30 mins)

-   Develop a function called `is_probability`
-   Output:
    -   Returns `True` if the input is in range \[0.0, 1.0\]
    -   Returns `False` if the input is outside that range
    -   :warning: Gives an error when the input is not a floating point number
-   Try to be **exemplary**
-   We'll discuss a commit history after the exercise

## Exercise 3: `is_probability` social (30 mins)

-   Ping-Pong Pair programming
-   Discuss how and when to switch roles first!
-   Person with first name first in alphabet starts
-   Try to be **an exemplary duo**

## Exercise 3: `is_probability`, technical (30 mins)

-   Use the GitHub repository for the learners of this course
-   Work on the main branch\
-   Use a file called `learners/[your_name]/is_probability.py`

## Exercise 3 feedback

-   [ ] Ask for a volunteer for feedback
    -   If none: pick a random folder
-   [ ] Discuss history

## Extra exercises

Done?

| Exercise | Function name     | Function purpose                             |
|-------------------|-------------------|----------------------------------|
| 4        | `is_number`       | Determines if an object is a number          |
| 5        | `are_numbers`     | Determines if an object is a list of numbers |
| S1       | `is_roman_number` | Determine if a string is a roman number      |
| S2       | `is_prime`        | Determine if a number is a prime number      |

## Bottom line

-   This session, we wrote **unit tests**
-   It is only those your boss may read
-   The literature assumes a responsible programmer writes tests, in C++ @stroustrup2018cpp, R @wickham2019advanced and Python @van2001pep

![](thomas_and_hunt_the_pragmatic_programmer.jpg)

## Weaknesses

-   We only test manually
-   We only test on our own computer
-   We are not sure if our functions are tested completely
-   We do not test the code for style
-   We should consider using a testing framework

These are addressed in the session called 'Testing' :-)

## Questions?

Questions?

## The End

![](dilbert_tdd_4.png)

## TDD cycles in text

-   In both Python and R

## First example: `is_zero`

-   Function name: `is_zero`
-   Output:
    -   Returns `True`/`TRUE` if the input is zero
    -   Returns `False`/`FALSE` if the input is not zero
    -   :warning: Gives an error when the input is not a number

## Cycle 1, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png) ðŸª±

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png) ðŸª±

```{r}
#| echo: true
#| eval: false
library(testthat)
expect_true(is_zero(0))
```
:::
:::

:monocle_face: code that is not run, uses ðŸª±, as a worm cannot run.

## Cycle 1, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(number): 
  return True

assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  TRUE
}

expect_true(is_zero(0))
```
:::
:::

## Cycle 1, blue: refactor and commit

```         
git add .
git commit -m "Add stub of 'is_zero'"
git push
```

![](organised_male_programmer.png)

## Cycle 2, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png) ðŸª±

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
assert not is_zero(42)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png) ðŸª±

```{r}
#| echo: true
#| eval: false
expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(x):
  return x == 0

assert is_zero(0)
assert not is_zero(42)
```

:monocle_face: indent of 2 is non-standard, see [PEP 8](https://peps.python.org/pep-0008/)
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  number == 0
}

expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, blue: refactor and commit

```         
git add .
git commit -m "'is_zero' responds correctly to numbers"
git push
```

![](organised_female_programmer.png)

# Breaks

I put the break slides in the end

## Break 1: 10:00-10:15

![](dilbert_agile_2.png)

## Break 2: 11:00-11:15

![](dilbert_agile_1.png)

## Lunch: 12:00-13:00

![](dilbert_tdd_3.png)

## References
