{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Programming Formalisms course","text":"'Programming Formalisms' course logo, by Jonas S\u00f6derberg and Lars Eklund <p>Course mottos</p> <ul> <li>Turning scripters into computer scientists</li> <li>Add theory to bolster already present practical skills</li> </ul> <p></p> <p>Pre-requirements Intro Schedule Feedback</p> <p> </p> <p> </p>"},{"location":"contact_us/","title":"Contact us","text":"<p>Never hesitate to contact us!</p> Role Name Contact details Course coordinator Lars Eklund Contact details Teacher Rich\u00e8l Bilderbeek Contact details Teacher Bj\u00f6rn Claremar Contact details","tags":["contact","us","email","send","coordinator","teacher","teachers"]},{"location":"course_dates/","title":"Course dates","text":"For teachers <ul> <li>How was this decided? For iteration 6: meeting notes with decision</li> <li>Shared document for teaching dates</li> </ul> Iteration Week Days 6 43 Thursday 2025-10-23 to Friday 2025-10-24 and Monday 2025-10-27 to Wednesday 2025-10-29 7 ?19 To be announced 8 ?43 To be announced","tags":["course","dates","timetable","schedule"]},{"location":"extra/","title":"Extra reading","text":"<p>Info</p> <ul> <li>Here Bj\u00f6rn has collected extra material from earlier instances of the courses.</li> <li>That means that the material is located in another GitHub repo with another look.</li> <li>Observe also that you leave the present web tree.</li> <li>Therefore we suggest you to open the pages in new tabs.</li> </ul>"},{"location":"extra/#software-development-lifecycle-sdlc","title":"Software Development Lifecycle (SDLC)","text":"<p>Software Development Lifecycle (SDLC) models</p>"},{"location":"extra/#git","title":"Git","text":"<p>More about git</p>"},{"location":"extra/#collaboration","title":"Collaboration","text":"<p>More about collaboration</p>"},{"location":"extra/#reproducibility","title":"Reproducibility","text":"<p>More about reproducibility</p>"},{"location":"extra/#sharing","title":"Sharing","text":"<p>More about sharing</p>"},{"location":"extra/#documentation","title":"Documentation","text":"<p>More about documentation</p>"},{"location":"extra/#deployment","title":"Deployment","text":"<p>More about deploying</p>"},{"location":"further_learning/","title":"Further learning","text":"","tags":["further","learning","study"]},{"location":"further_learning/#courses","title":"Courses","text":"<ul> <li>The SCoRe overview of courses   from NAISS, SciLifeLab, ENCCS and more. Lists <code>git</code> and Python courses.</li> </ul>","tags":["further","learning","study"]},{"location":"further_learning/#course-material","title":"Course material","text":"<ul> <li>UML</li> <li><code>git</code> workflow</li> </ul>","tags":["further","learning","study"]},{"location":"further_learning/#literature","title":"Literature","text":"<p>Here are open-access paper that we cite in this course.</p> <ul> <li><code>[Chacon &amp; Straub, 2014]</code> Chacon, Scott, and Ben Straub. Pro git. Springer Nature, 2014.   chacon_and_straub_2014.pdf</li> <li><code>[Bertram, 2009]</code> Bertram, Dane. \"The social nature of issue tracking in software engineering.\" University of Calgary (2009).</li> <li><code>[Gunderloy, 2007]</code> Gunderloy, Mike, ed. Painless project management with FogBugz. Berkeley, CA: Apress, 2007.</li> <li>[Perez-Riverol et al., 2016] Perez-Riverol, Yasset, et al. \"Ten simple rules for taking advantage of Git and GitHub.\" PLoS computational biology 12.7 (2016): e1004947.   perez_riverol_et_al_2016.pdf</li> <li><code>[Ram, 2013]</code> Ram, Karthik.   \"Git can facilitate greater reproducibility and increased transparency in science.\"   Source code for biology and medicine 8 (2013): 1-8.   ram_2013.pdf</li> <li><code>[Stieler &amp; Bauer, 2023]</code> Stieler, Fabian, and Bernhard Bauer. \"Git workflow for active learning-a development methodology proposal for data-centric AI projects.\" (2023).   stieler_and_bauer_2023.pdf</li> <li><code>[Wilson et al., 2017]</code> Wilson, Greg, et al.   \"Good enough practices in scientific computing.\"   PLoS computational biology 13.6 (2017): e1005510.   Article</li> </ul> <p>Other reading material not yet cited.</p> <p><code>[Barker, M., Chue Hong, N.P., Katz, D.S. et al. ]</code>Barker, M., Chue Hong, N.P., Katz, D.S. et al. Introducing the FAIR Principles for research software. Sci Data 9, 622 (2022). Fair4RS</p> <p>Non open-access references</p> <ul> <li><code>[Church, 1941]</code> The  Calculi of lambda-conversion, Princeton, Princeton University Press, Londos: Humphrey Milford Oxford University Press, 1941</li> <li><code>[Dijkstra, 1970]</code> Notes On Structured Programming ,T.H. - Report 70-WSK-03,Second edition April 1970</li> <li><code>[ISO 12207:2017]</code> ISO/IEC/IEEE 12207:2017 Systems and software engineering \u2014 Software life cycle processes</li> <li><code>[Jacobson, 1992]</code> Object-Oriented Software Engineering, a usecase driven approach, Addison-wesley 1992</li> <li><code>[Jones et al., 2001]</code> [Jones JW, Keating BA, Porter CH. Approaches to modular model development. Agricultural Systems. 2001 Nov 1;70(2):421\u201343.] (https://www.sciencedirect.com/science/article/pii/S0308521X01000543)</li> <li><code>[Rumbaugh, 1991]</code> Rumbaugh et. al, Object-oriented modeling and design, Prentice-Hall, Inc. 1991</li> <li><code>[Stroustrup, 1998]</code> Stroustrup B. What is \u201cObject-oriented Programming\u201d? Software, IEEE. 1988 Jun 1;5:10\u201320.</li> <li><code>[Coad et al., 1999]</code> Coad, Peter and Luca, Jeff de and Lefebvre, Eric Java Modeling Color with Uml: Enterprise Components and Process with CD-ROM, Prentice Hall PTR, 1999</li> <li><code>[Ivar Jacobson 1992]</code> Ivar Jacobson et al., Object-Oriented Software Engineering, a use case driven approach, Addison-wesley 1992.</li> <li><code>[Booch 2007]</code> Grady Booch et al.,Object-oriented analysis and design with applications -3rd ed,Addison-wesley 2007.</li> <li><code>[Gamma et al., 1995]</code> Gamma, Erich, et al.   \"Elements of reusable object-oriented software.\" Design Patterns (1995).</li> </ul>","tags":["further","learning","study"]},{"location":"intro/","title":"Introduction of the week","text":"<p>Course mottos</p> <ul> <li>Turning scripters into computer scientists</li> <li>Add theory to bolster already present practical skills</li> </ul>","tags":["intro","introduction"]},{"location":"intro/#course-overview","title":"Course overview","text":"<p>Programming Formalisms goal</p> <p>The goal of the course is to give scientists with some experience in programming and scripting an understanding of formal principles of software development.</p> <p>Only what is used by the student project is course content, with alternatives relevant to academics provided in lecture (or extra material) to what we do (#52). As we need discuss alternatives besides the course content, by definition, all exercises cannot be part of the project (#43). Whenever we give some advice, we will try to supply a references to the literature (#57). You can always give anonymous feedback at any time at the course 'Feedback' page (#75).</p> <p>Teach evidence-based or expert-recommended best practices on how to:</p> <ul> <li>write design documents for a project</li> <li>work as a team</li> <li>share code</li> <li>develop code</li> <li>test code</li> <li>optimize code</li> <li>write reusable code</li> <li>deploy code</li> </ul> <p>Understand and do formal software development practices:</p> <ul> <li>understand, use and create a UML class diagram</li> <li>understand and use a formal git branching model</li> <li>understand and use a formal project workflow</li> <li>understand and practice social coding,   such as pair programming and code reviews</li> <li>understand and use a run-time speed profiler</li> </ul>","tags":["intro","introduction"]},{"location":"intro/#gitgithub-project","title":"Git/GitHub project","text":"<ul> <li>We are going to use a GitHub repository in this course.</li> <li>You'll  also have local git repository of the same project.</li> <li>We'll set up these in the next session!</li> </ul>","tags":["intro","introduction"]},{"location":"intro/#shared-document","title":"Shared document","text":"<ul> <li>HackMD</li> </ul>","tags":["intro","introduction"]},{"location":"learning_outcomes/","title":"Learning outcomes","text":""},{"location":"learning_outcomes/#monday","title":"Monday","text":"<p>Today we:</p> <ul> <li>\u2611 can give a reason of the benefits of following a software development procedure</li> <li>\u2611 can choose the better ones from the different software development models</li> <li>\u2611 can give a reason for the benefits of the different tools for the SDLC</li> <li>\u2611 have practiced starting a projects using Git/GitHub</li> <li>\u2611 have practiced making project analysis</li> </ul> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>Design</li> </ul> </li> <li>\u2610 Testing<ul> <li>Different levels</li> <li>We don't do this today!</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>GitHub</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2610 citation</li> <li>\u2611 licensing</li> </ul> </li> <li>\u2610 Documentation</li> </ul>"},{"location":"learning_outcomes/#tuesday","title":"Tuesday","text":"<ul> <li>can make a simple class diagram</li> <li>can do pair programming for simple assignments</li> <li>understand why pair programming is important</li> <li>describe features of good pair programming</li> <li>describe some benefits of TDD</li> <li>can describe a TDD cycle</li> </ul> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>GitHub</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2610 citation</li> <li>\u2611 licensing</li> </ul> </li> <li>\u2610 Documentation<ul> <li>\u2611 in-code documentation</li> </ul> </li> </ul>"},{"location":"learning_outcomes/#wednesday","title":"Wednesday","text":"<p>Today we:</p> <ul> <li>can work in a simple, formal GitHub workflow</li> <li>can do a simple code review</li> <li>can move basic tests into a formal testing framework</li> <li>understand the benefits of using a formal testing framework</li> </ul> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2610 citation</li> <li>\u2611 licensing</li> </ul> </li> <li>\u2610 Documentation<ul> <li>\u2611 in-code documentation</li> </ul> </li> </ul>"},{"location":"learning_outcomes/#thursday","title":"Thursday","text":"<p>Today we:</p> <ul> <li>have practiced to use good class names</li> <li>have practiced to use classes for increased type safety</li> <li>have practiced to use composition for a 'has-a' relationship</li> <li>can describe what design by contract is</li> <li>have practiced to give good names to algorithms</li> <li>can describe when to use <code>if</code> and <code>assert</code></li> <li>can name some misconceptions on optimisation</li> <li>can describe Amdahl's law</li> <li>can describe what big-O is</li> <li>have practiced to determine the big-O complexity of a function</li> <li>can describe what a run-time speed profile is</li> <li>have practiced to get a run-time speed profile</li> </ul>"},{"location":"learning_outcomes/#friday","title":"Friday","text":"<p>Today we:</p> <ul> <li>can give a reason for refactoring of design</li> <li>can give a reason for refactoring code</li> <li>can give a reason of the benefits of doing modular coding</li> <li>can give the benefits of Design Patterns</li> <li>can identify common mistakes making our software work for others</li> <li>can find more information in how to package you software</li> <li>can identify the needs for different kinds of documentation</li> <li>can find resources for making good documentation.</li> </ul> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2611 citation</li> <li>\u2611 licensing</li> <li>\u2611 deployment</li> </ul> </li> <li>\u2611 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2611 How-to/ Tutorials</li> </ul> </li> </ul>"},{"location":"past_course_dates/","title":"Past course dates","text":"Iteration Week Days 1 ? 2023 summer 2 ? 2023 autumn 3 ? 2024 summer 4 ? 2024 autumn 5 19 Monday 2025-05-05 to and including Friday 2025-05-09"},{"location":"prereqs/","title":"Pre-requirements","text":"<p>These are the prerequisites to follow this course:</p> <ul> <li>Prerequisite 1/6: Have VS Code installed</li> <li>Prerequisite 2/6: Have a Git account configured on your computer</li> <li>Prerequisite 3/6: Have a GitHub account</li> <li>Prerequisite 4/6: Have Python installed</li> <li>Prerequisite 5/6: Know the basics of Python</li> <li>Prerequisite 6/6: Have a good Zoom setup</li> </ul> How can I check if I have done these steps? <ul> <li>See the Frequently Asked Questions 'Prerequisites' section</li> </ul> What if I have another question? <ul> <li>See the Frequently Asked Questions section</li> </ul>","tags":["prereqs","prerequirements","preparation","prep","do before"]},{"location":"schedule/","title":"Schedule","text":"<p>This is a general course schedule, that intends to give a general overview of the course's teaching. For a detailed daily schedule, see the detailed schedule of that day.</p> What are the course dates? <p>See the course dates.</p> Day Time Teacher Subject Thursday 09:00-09:10 Lars Welcome to the course Thursday 09:10-09:50 Bj\u00f6rn Project set-up + Introduction Thursday 10:05-10:55 Bj\u00f6rn Software development tools Thursday 11:10-12:00 Bj\u00f6rn Git/GitHub basics and start project Thursday 13:00-15:40 Lars Define and plan project Thursday 15:40-16:00 Lars Confidence and retrospect Friday 09:00-10:00 Lars Software development life cycle Friday 10:15-11:00 Richel Issues and kanban board Friday 11:15-12:00 Richel assert Friday 13:00-14:00 Richel TDD 1 Friday 14:15-15:00 Richel TDD 2 Friday 15:00-15:40 Richel TDD at a bigger scale Friday 15:40-16:00 Lars Confidence and retrospect Monday 09:00-10:00 Bj\u00f6rn Formal git workflow, branches Monday 10:15-11:00 Bj\u00f6rn Formal git workflow, merge Monday 11:15-12:00 Bj\u00f6rn Formal git workflow, contribute &amp; Social coding and sharing Monday 13:00-14:00 Richel Pair programming Monday 14:15-15:00 Richel Pair programming Monday 15:15-15:40 Richel Formal testing framework Monday 15:40-16:00 Lars Confidence and retrospect Tuesday 09:00-09:45 Richel Function design Tuesday 10:00-10:45 Richel Expressive data type Tuesday 11:00-12:00 Lars Object-oriented design Tuesday 13:00-14:00 Richel Continue, Has-a relation, class design Tuesday 14:15-15:00 Lars Modular programming Tuesday 15:15-15:40 Richel Continuous integration Tuesday 15:40-16:00 Lars Confidence and retrospect Wednesday 09:00-09:45 Richel Implement the project as a package Wednesday 10:00-11:00 Richel Runtime speed profiles, Improve run-time speed Wednesday 11:15-12:00 Bj\u00f6rn Deployment Wednesday 13:00-13:30 Bj\u00f6rn Deployment p2 Wednesday 13:30-13:50 Bj\u00f6rn Documentation Wednesday 14:05-15:00 Bj\u00f6rn Documentation Wednesday 15:15-15:40 Lars Wrap-up Wednesday 15:40-16:00 Lars Confidence and retrospect"},{"location":"shared_document/","title":"Shared document","text":"<p>In the course, we use a shared document.</p> <p>It can be found at this HackMD location.</p>","tags":["shared","document","HackMD","Hack","MD","Markdown"]},{"location":"summary_week/","title":"Summary of whole week","text":"<p>In this week, we:</p> <ul> <li>[ ] practiced designing a project</li> <li>[ ] practiced a formal git branching workflow</li> <li>[ ] practiced a formal GitHub workflow</li> <li>[ ] practiced doing code reviews</li> <li>[ ] can describe facets of a good code review</li> <li>[ ] practiced pair programming</li> <li>[ ] can describe facets of good pair programming</li> <li>[ ] practiced TDD</li> <li>[ ] can describe a TDD cycle</li> <li>[ ] practiced using a formal testing framework</li> <li>[ ] responded to CI scripts</li> <li>[ ] can describe some facets of good function design</li> <li>[ ] can describe some facets of good class design</li> <li>[ ] can describe some misconceptions in optimization</li> <li>[ ] can describe in general terms with Amdahl's Law is</li> <li>[ ] can describe what big-O is</li> <li>[ ] can describe what a run-time profile is</li> </ul>"},{"location":"summary_week/#program","title":"Program","text":"<ul> <li> <p>A program shall be or have content/components that is:</p> <ul> <li>Correct</li> <li>Efficient</li> <li>Reusable</li> <li>Changeable</li> </ul> </li> <li> <p>Software development is both series of steps:</p> <ol> <li>Requirements</li> <li>Analysis and design</li> <li>Development</li> <li>Test</li> <li>Development and maintenance</li> </ol> </li> <li> <p>... and iteration of these</p> </li> </ul> Did we miss anything on the list?"},{"location":"summary_week/#tools","title":"Tools","text":"<ul> <li> <p>Tools to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2611 citation</li> <li>\u2611 licensing</li> <li>\u2611 deployment</li> </ul> </li> <li>\u2611 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2611 How-to/ Tutorials</li> </ul> </li> </ul> </li> </ul> Did we miss anything on the list?"},{"location":"assert/","title":"<code>assert</code>","text":"<p>Learning outcomes</p> <ul> <li>Understand the purpose of <code>assert</code></li> <li>Understand that Python has a debug and release mode</li> <li>Understand that <code>assert</code> is superior to documentation</li> <li>Understand that <code>assert</code> has no reduction in run-time speed   in release mode</li> <li>Understand that <code>assert</code> statements should have no side effects</li> <li>Understand that <code>assert</code> can be used to signal stubs</li> <li><code>assert</code> liberally</li> </ul> For teachers <p>Prior:</p> <ul> <li>When is your code good enough?</li> <li>What are the biggest causes of errors?</li> <li>When have you checked your code good enough?</li> <li>Somewhere in you code, you know something, e.g. <code>x</code> is positive,   and the rest of the code needs that to be true to be able to function.   Should, and if yes, how, this knowledge be written down?</li> <li>What synonymn does 'to assert' have in English?</li> <li>Have you ever used asserts? In R, the equivalent is <code>testthat::expect_</code></li> </ul> <p></p> <p>About the verb 'to assert'</p> <p>From merriam-webster:</p> <ul> <li><code>1a</code>: to state or declare positively and often forcefully   or aggressively</li> </ul> <p>The suspect continued to assert his innocence.</p> <ul> <li><code>1b</code>: to compel or demand acceptance or recognition of   (something, such as one's authority)</li> </ul> <p>the confrontations that inevitably occur [between orangutans] when several males try to assert dominance</p> <ul> <li><code>2a</code>: to demonstrate the existence of</li> </ul> <p>He wished to vindicate himself in some way, to assert his manhood. \u2014James Joyce</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#1-why-use-assertions","title":"1. Why use assertions","text":"<p>If debugging is the process of removing bugs, then programming must be the process of putting them in. Edsger W. Dijkstra</p> <p>You will be writing code with flaws and bugs. Making you assumptions explicit will help you structure your thoughts and reduce the time you spend debugging.</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#2-about-assumptions","title":"2. About assumptions","text":"<p>Assert liberally to document internal assumptions and invariants</p> <p><code>[Sutter &amp; Alexandrescu, 2004]</code>, chapter 68.</p> <p>While coding, we have assumptions. Take, for example, this code:</p> <pre><code>average = sum_of_elements / n_elements\n</code></pre> <p>Here, we assume that <code>n_elements</code> is non-zero, else we cannot calculate an average. We can express that with an <code>assert</code> statement:</p> <pre><code>assert n_elements &gt; 0\naverage = sum_of_elements / n_elements\n</code></pre> Prefer R? <p>In R, the same story hold for the <code>testthat::expect_true</code> (as part of the Tidyverse) function.</p> <p>This <code>assert</code> will terminate the program if the assertion is false. Assert liberally to document assumptions <code>[Sutter &amp; Alexandrescu, 2004; Stroustrup, 1997; McConnell, 2004a]</code> <code>[Liberty, 2001; Lakos, 1996; Stroustrup, 2013a]</code>, even if you think something should never occur <code>[McConnell, 2004b]</code>.</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#21-assertions-in-debug-and-release-mode","title":"2.1. Assertions in debug and release mode","text":"<p>Python scripts can be run in debug mode or release mode:</p> <pre><code>python my_script.py # debug mode\npython -O my_script.py # release mode\n</code></pre> <p>Do not assume that <code>assert</code> is always evaluated <code>[Stroustrup, 2013b]</code>: when running a script in debug mode or release mode, <code>assert</code> has different behavior:</p> <ul> <li>in debug mode: the <code>assert</code>s are active</li> <li>in release mode: the <code>assert</code>s are ignored</li> </ul> <p>This means that there is no drawback in speed when running your script in release mode.</p> <p>It also mean that <code>assert</code> statements:</p> <ul> <li>must not do anything (e.g. modifying a value) <code>[Turner, 2024]</code></li> <li>cannot be used to talk to the user of your code</li> </ul> Parameter Debug mode Release mode Purpose of <code>assert</code> To checking yourself None How to run script <code>python my_script.py</code> <code>python -O my_script.py</code> Behavior of <code>assert</code> Active Ignored Runtime speed Lower Unaffected","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#22-using-assertions-as-a-stub","title":"2.2. Using assertions as a stub","text":"<p><code>assert</code> can be used as a stub, to signal that work that needs to be done. For example, here is a function that aligns any amount of DNA sequences:</p> <pre><code>def align(dna_sequences):\n    \"\"\"Align the DNA sequences\"\"\"\n    assert len(dna_sequences) == 2 # TODO\n    # the actual code\n</code></pre> <p>The developer (you!) has indicated clearly that the function, for now, expects to take two DNA sequences. The <code># TODO</code> is signalling clearly that this will be changed in the future. Use <code>assert</code> to specifify assumption on the input of a function <code>[Stroustrup, 1997][McConnell, 2004a]</code>.</p> <p>Note</p> <p>Specifify: When you have to further define what you are talking about to further explain yourself.</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#23-using-assertions-to-check-a-functions-return-value","title":"2.3. Using assertions to check a function's return value","text":"<p>Lastly, <code>assert</code> can be used to quick check to check if a function return a not-too-crazy value.</p> <p>For example, here is a function that aligns two DNA sequences:</p> <pre><code>def align_two_dna_sequences(dna_sequences):\n    \"\"\"Align the DNA sequences\"\"\"\n    # ....\n    results = [\"AAAA\", \"AAC-\"] # Should be result of calculation\n    assert len(results[1]) == len(results[2])\n    return results\n</code></pre> <p>Here the <code>assert</code> checks if the resulting DNA sequences are equally long, as they should. The resulting DNA sequences may have incorrect content, which likely is to be checked someplace else. But checking for the sequences to be of equal length may help as a first quick test to find bugs. Use <code>assert</code> to specifify assumption on the output of a function <code>[Stroustrup, 1997][McConnell, 2004a]</code>.</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#3-exercises","title":"3. Exercises","text":"","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#31-exercise-1-the-behavior-of-assert-in-debug-and-release-mode","title":"3.1. Exercise 1: the behavior of <code>assert</code> in debug and release mode","text":"<ul> <li>Write a script called <code>my_assert.py</code> with the following content:</li> </ul> <pre><code>assert 1 == 2\n</code></pre> <ul> <li>Run the script, using <code>python my_assert.py</code></li> <li>What is the error message? Why?</li> </ul> Answer <p>This is the error message:</p> <pre><code>$ python my_assert.py\nTraceback (most recent call last):\n  File \"/home/sven/my_assert.py\", line 1, in &lt;module&gt;\n    assert 1 == 2\nAssertionError\n</code></pre> <p>It fails because one is, indeed, not equal to two.</p> <ul> <li>Run the script, now using <code>python -O my_assert.py</code></li> <li>What is the error message? Why?</li> </ul> Answer <p>There is no error message here.</p> <p>There is no error message, as the Python script was run in release mode: in release mode, all <code>assert</code>s are removed</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#32-exercise-2-making-assumptions-explicit","title":"3.2. Exercise 2: making assumptions explicit","text":"<ul> <li>Below is a function that divides two floating point numbers.   How to use it?</li> </ul> <pre><code>def divide_by(numerator, denominator):\n    return (numerator / denominator)\n</code></pre> Answer <p>One can use this function like this:</p> <pre><code>divide_by(1.2, 3.4)\n</code></pre> <p>Put it at the end of your Python file.</p> <ul> <li>Add the assumptions this function makes, either   as comments or as Python code</li> </ul> Answer with comments <pre><code>def divide_by(numerator, denominator):\n    # Numerator is a floating point number\n    # Denominator is a floating point number\n    # Numerator is not zero\n    return (numerator / denominator)\n</code></pre> Answer with Python code <pre><code>def divide_by(numerator, denominator):\n    assert isinstance(numerator, float)\n    assert isinstance(denominator, float)\n    assert(denominator != 0.0)\n    return (numerator / denominator)\n</code></pre> <ul> <li>Run this function with the integer values 3 as the numerator   and 4 as the denominator and observe what happens.   Which two ways are there to solve this?</li> </ul> Answer <p>The code will fail, because the input are not floating point numbers anymore. How to deal with this is a design decision.</p> <p>Here are the options:</p> <ul> <li> <p>Change the use of the function:   change <code>divide_by(3, 4)</code>   to <code>divide_by(3.0, 4.0)</code></p> </li> <li> <p>Change the implementation of the function:</p> </li> </ul> <pre><code>def divide_by_3(numerator, denominator):\n    assert isinstance(numerator, (float, int))\n    assert isinstance(denominator, (float, int))\n    assert type(numerator) == type(denominator)\n    assert(denominator != 0.0)\n    return (numerator / denominator)\n</code></pre> <p>The first puts the responsibility at the user of the function, the second puts it on the author of the function.</p> <ul> <li>Which of the two ways is better?</li> </ul> Answer <p>The first one, because a function should does one thing correctly <code>[Martin, 2009; CppCore F.2; tidyverse style guideline of functions]</code>.</p> <p>Or phrased differently <code>[Martin, 2009]</code>:</p> <p>Functions should do one thing. They should do it well. They should do it only [sic].</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#33-exercise-3-making-assumptions-explicit","title":"3.3. Exercise 3: making assumptions explicit","text":"<ul> <li>Below is a function that reads a file and returns its contents.   How to use it?</li> </ul> <pre><code>def read_file(filename):\n    file = open(filename, \"r\")\n    content = file.read()\n    file.close()\n    return content\n</code></pre> Answer <p>Here is how to use this function:</p> <pre><code>read_file(\"my_file.txt\")\n</code></pre> <p>The function will give an error is the file cannot be found at the path.</p> <ul> <li>Add the assumptions this function makes, either   as comments or as Python code</li> </ul> Answer with comments <pre><code>def read_file(filename):\n    # The path to the filename exists\n    # The file is readable\n    file = open(filename, \"r\")\n    content = file.read()\n    file.close()\n    return content\n</code></pre> Answer with code <pre><code>def read_file(filename):\n    import os\n    assert os.path.isfile(filename)\n    assert os.access(filename, os.R_OK)\n\n    file = open(filename, \"r\")\n    content = file.read()\n    file.close()\n    return content\n</code></pre> <ul> <li>Compare the behavior of the functions without and with <code>assert</code>.   Did we do a better job by adding <code>assert</code>s? If yes: how? If no: why not?</li> </ul> Answer <p>We know we should 'assert liberally to document internal assumptions and invariants' <code>[Sutter &amp; Alexandrescu, 2004, chapter 68]</code> which we did well by adding those <code>assert</code>s.</p> <p>The behavior of our code, however, has not changed much: the error message by either function are readable enough, hence you could argue that we've wasted our time typing out our assumptions.</p> <p>On the other hand, asserting liberally is a good habit, so doing it is fine.</p>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#34-exercise-4-making-assumptions-explicit","title":"3.4. Exercise 4: making assumptions explicit","text":"<ul> <li>Below is a function that reads a non-empty file and returns its contents.   How to use it?</li> </ul> <pre><code>def read_non_empty_file(filename):\n    import os\n    assert os.path.isfile(filename)\n    assert os.access(filename, os.R_OK)\n    file = open(filename, \"r\")\n    content = file.read()\n    file.close()\n    return content\n</code></pre> Answer <p>Here is how to use this function:</p> <pre><code>read_non_empty_file(\"my_file.txt\")\n</code></pre> <p>The function will give an error is the file cannot be found at the path.</p> <ul> <li>Add the missing assumptions this function makes, either   as comments or as Python code</li> </ul> Answer with comments <pre><code>def read_non_empty_file(filename):\n    import os\n    assert os.path.isfile(filename)\n    assert os.access(filename, os.R_OK)\n    file = open(filename, \"r\")\n    content = file.read()\n    # The content is at least one line\n    file.close()\n    return content\n</code></pre> Answer with code <pre><code>def read_non_empty_file(filename):\n    import os\n    assert os.path.isfile(filename)\n    assert os.access(filename, os.R_OK)\n    file = open(filename, \"r\")\n    content = file.read()\n    assert len(content) &gt; 0\n    file.close()\n    return content\n</code></pre> <ul> <li>Compare the behavior of the functions without and with the added   <code>assert</code> statements.   Did we do a better job by adding <code>assert</code>s? If yes: how? If no: why not?</li> </ul> Answer <p>Yes, the <code>assert</code> does a good job here: it guarantees that <code>read_non_empty_file</code> indeed returns something.</p> <p>However, it does so only in debug mode.</p> <p>Sometimes, this is good enough, even in release mode: the new <code>assert</code> can be seen as a stub.</p> <p>For a function <code>read_non_empty_file</code> that does exactly what it says it does, raise an exception instead:</p> <pre><code>def read_non_empty_file(filename):\n    import os\n    assert os.path.isfile(filename)\n    assert os.access(filename, os.R_OK)\n    file = open(filename, \"r\")\n    content = file.read()\n    if len(content) == 0:\n        raise ValueError(\"File has no content\")\n    file.close()\n    return content\n</code></pre>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"assert/#4-references","title":"4. References","text":"<ul> <li><code>[CppCore F.2]</code> C++ Core Guidelines.    F.2: A function should perform a single logical operation,    https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-logical</li> <li><code>[Liberty, 2001]</code> [5] Jesse Liberty. Sams teach yourself C++ in 24 hours.   ISBN: 0-672-32224-2. Hour 24, chapter 'assert()': 'Use assert freely'</li> <li><code>[Lakos, 1996]</code> John Lakos. Large-Scale C++ Software Design. 1996.   ISBN: 0-201-63362-0. Chapter 2.6: 'The use of assert statements can help to   document the assumptions you make when implementing your code</li> <li><code>[Martin, 2009]</code> Martin, Robert C.   Clean code: a handbook of agile software craftsmanship.   Pearson Education, 2009.</li> <li><code>[McConnell, 2004a]</code> Steve McConnell. Code Complete (2nd edition). 2004.   ISBN: -735619670. Chapter 8.2 'Assertions', paragraph 'Guidelines for using   asserts': 'Use assertions to document and verify preconditions and   postconditions'</li> <li><code>[McConnell, 2004b]</code> Steve McConnell. Code Complete (2nd edition). 2004.   ISBN: -735619670. Chapter 8.2 'Assertions', paragraph 'Guidelines for using   asserts': 'Use assertions for conditions that should never occur'.</li> <li><code>[Stroustrup, 1997]</code> Bjarne Stroustrup.   The C++ Programming Language (3rd edition). 1997.   ISBN: 0-201-88954-4. Advice 24.5.18: 'Explicitly express preconditions,   postconditions, and other assertions as assertions'</li> <li><code>[Stroustrup, 2013a]</code> Bjarne Stroustrup.   The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2.   Chapter 30.5. Advice. page 884: '[13] Use static_assert() and assert() extensively'</li> <li><code>[Stroustrup, 2013b]</code> Bjarne Stroustrup.   The C++ Programming Language (4th edition). 2013. ISBN: 978-0-321-56384-2.   Chapter 30.5. Advice. page 884: '[14] Do not assume that assert() is always   evaluated'</li> <li><code>[Sutter &amp; Alexandrescu, 2004]</code> Herb Sutter, Andrei Alexandrescu.   C++ coding standards: 101 rules, guidelines, and best practices. 2004.   ISBN: 0-32-111358-6. Chapter 68: 'Assert liberally to document internal   assumptions and invariants'</li> <li><code>[tidyverse style guideline of functions]</code> https://style.tidyverse.org/functions.html</li> <li><code>[Turner, 2024]</code> Jason Turner, cppbestpractices:   'Never Put Code with Side Effects Inside an assert()'   Source</li> </ul>","tags":["assert","debug","test","check","programmer","develop","dev","self","yourself","documentation"]},{"location":"common_practices/exercises/exercises_code_review/","title":"Code review exercises","text":"","tags":["code","review","exercises"]},{"location":"common_practices/exercises/exercises_code_review/#exercise-1-pair-programming","title":"Exercise 1: pair programming","text":"<p>In this exercise you will try out pair programming using the driver-navigator technique.</p> <p>Remember that:</p> <p>The Driver is the person coding. She is focussed on completing the tiny goal at hand, ignoring larger issues for the moment. A driver should always talk through what she is doing while doing it.</p> <p>The Navigator is in the observer position, while the driver is typing. She reviews the code on-the-go, gives directions and shares thoughts. The navigator also has an eye on the larger issues, bugs, and makes notes of potential next steps or obstacles.</p> <p>Martin Fowler, On Pair Programming</p> <p>In this task you will have to:</p> <ol> <li>Work in pairs and try to code the Fibonacci function or other function suggested by an instructor.</li> <li>Switch navigator/driver roles.</li> <li>Work in pairs and try to code the Tribonacci function or other function suggested by an instructor.</li> </ol> <p>The tribonacci numbers are like the Fibonacci numbers, but instead of starting with two predetermined terms, the sequence starts with three predetermined terms and each term afterwards is the sum of the preceding three terms.</p>","tags":["code","review","exercises"]},{"location":"common_practices/exercises/exercises_code_review/#exercise-2-when-may-i-use-code-reviews","title":"Exercise 2: when may I use Code Reviews?","text":"<p>Now think about how you typically develop code, and how you might institute code review practices within your own working environment. Write down briefly for your own reference (perhaps using bullet points) some answers to the following questions:</p> <ul> <li>Which 2 or 3 key circumstances would code review be most useful for you and your colleagues?</li> <li>Which type of code review would be most useful for each circumstance (and would work best within your own working environment)?</li> <li>Taking one of these circumstances where code review would be most beneficial, how would you organise such a code review?</li> </ul> <ul> <li>Which aspects of the codebase would be the most useful to cover?</li> <li>How often would you do them?</li> <li>How long would the activity take?</li> <li>Who would ideally be involved?</li> <li>Any particular practices you would use?</li> </ul> <p>The Code review exercise (from broken URL <code>https://carpentries-incubator.github.io/python-intermediate-development/41-code-review/index.html</code>) by The Carpentries is licensed under CC BY 4.0. Modifications were made to simplify contents.</p>","tags":["code","review","exercises"]},{"location":"common_practices/exercises/exercises_code_review/#exercise-3-writing-a-code-review","title":"Exercise 3: writing a Code Review","text":"<p>Take the code produced by one of the pair programming pairs in the previous exercise, write a formal code review following the General stuff about code reviews from the NBIS code development guidelines. Share your review with the authors and discuss. Take into consideration the NBIS guidelines when writing reviews.</p>","tags":["code","review","exercises"]},{"location":"common_practices/pages/notes_code_review_long/","title":"Notes on code review","text":"<p>This material is based on the Code Review lecture by The Carpentries:</p> <p>Code Review by The Carpentries is licensed under CC BY 4.0. Modifications were made in several chapters.</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#code-review","title":"Code Review","text":"<p>The most difficult part of writing code is always to make it understandable to other people, including yourself a few months down the track. There\u2019s certainly no shame in finding out that your code wasn\u2019t as easy to understand or use as you\u2019d hoped, so don\u2019t take it personally when it happens (which it always does, at least in my experience), but treat it as an opportunity to improve.</p> <p>Fernando Perez, Code reviews: the lab meeting for code</p> <p>A simple objective of the review process is to catch bugs and elementary errors that might have been missed during the development phase. Code review can also help improve the overall quality while ensuring that code is readable and easy to understand. As a group leader, you can also make sure code is functional and literate as early as possible, and encourage your students to avoid messy \"good enough\" code that causes chaos later.</p> <p>Code review is often done in pairs, with each reviewer also having some of their code reviewed by their partner. Doing this can help programmers to see and discuss issues and alternative approaches to tasks, and to learn new tips and tricks.</p> <p>There are different methods for code review.</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#synchronous-pair-programming","title":"Synchronous - Pair Programming","text":"<p>Helping the student go through their scripts, catch errors and debug side by side</p> <ul> <li>The PI sits down with her PhD student who has been writing a function for cleaning bioinformatics data.</li> <li>The PI knows Python well and takes the opportunity to discuss code while helping their student organise the code better.</li> <li>The student shows the PI some odd errors and so they run some tests with expected outcomes to find what the problem is and solve it.</li> <li>The PhD student learns and applies to test practices to help make code robust.</li> </ul> <p>The problem with synchronous coding sessions is making time for it and whether or not the supervisor has experience with the specific language.</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#synchronous-group-code-tour-or-informal-walkthroughs","title":"Synchronous - Group Code Tour or Informal Walkthroughs","text":"<p>Narrating code and software steps</p> <p>The researcher may present their pipeline to describe the logical steps using documentation, pseudocode, or describing how to run the code.</p> <ul> <li>A postdoc has been working on some analysis that provides statistics results that he hopes to publish soon. During a lab meeting, the postdoc presents the steps of the analysis code as logical steps.</li> <li>The lines of code are shown for those in the meeting that know R, but the postdoc explains the steps verbally as well for those who don't understand R.</li> <li>The group discuss and provides comments on the choices and order of the analysis pipeline, a PhD student notices a jump in logic that wasn't picked up previously, and an advanced R user in the lab makes suggestions about making some parts run faster.</li> </ul> <p>These sessions do not rely on everyone knowing the language, and it is the responsibility of the coder to present their work clearly and logically for everyone to follow. Group discussions can be very informative for everyone involved and put the analysis under scrutiny.</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#suggestions-for-the-meeting-leader","title":"Suggestions for the meeting leader","text":"<ul> <li>Keep it a safe environment, i.e. make sure chastising is relatively gentle even when deserved (but do point out when code doesn\u2019t meet the required standard \u2013 frame it as a learning experience though).</li> <li>Make sure there\u2019s a core of vocal participants so it isn\u2019t always you.</li> <li>Make it clear when you\u2019re presenting yourself that your code isn\u2019t perfect, point out some of those imperfections yourself if the audience is slow to do so, and do present yourself.</li> <li>Patiently explain when things are not wrong but just stylistic differences (but make it clear that some styles are bad, often helpful e.g. asking people to guess what a function returns from its name).</li> </ul> <p>Shared by Rob Knight with Fernando Perez in the post Code reviews: the lab meeting for code</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#asynchronous-ill-get-back-to-you-on-that","title":"Asynchronous - I'll get back to you on that","text":"<p>Making sure everyone is free at the same time for a lab meeting can be challenging. Hence, asynchronous code review practices are more suitable for busy supervisors or collaborators in different time zones.</p> <p>The asynchronous review process allows others to run the code themselves using a reproducible environment, or simply reads through the scripts and share their feedback asynchronously.</p> <p>Consider a scenario:</p> <p>A postdoc has created a model in Python and creates a Binder with all the dependencies necessary. She sends the file to her supervisor who can run the code within her browser, no installation is required. The supervisor can then run the code herself to review it and check the individual parts over the next week. The supervisor adds a commented version of the script to the postdoc's repo with a merge request.</p> <p>Reviewing code in small chunks incrementally as the project is developing can help make the code review process a lot more efficient. Asynchronous feedback removes the time pressure but can be easily forgotten!</p> <p>Reviewing more than 400 lines of code (LoC) can have an adverse impact on your ability to find bugs, and in fact, most are found in the first 200 lines. - Recommendation from Code Review at Cisco Systems</p> <p>5 code review best practices. Work Life by Atlassian, Usman Ghani**</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#multiple-people-can-also-review-the-code-asynchronously","title":"Multiple people can also review the code asynchronously","text":"<p>Turing Way: Recommendations for Code Reviewing</p> <p>Unlike traditional, \u201cacademic-style\u201d peer review, most code review systems have several advantages: they\u2019re rarely anonymous, they\u2019re public-facing, and without the broker of an editor, contact between reviewer and reviewee can be direct and rapid. This means code review is typically a fast, flexible, and interactive process.</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#github-features-to-help-with-code-review-click-to-see","title":"Github features to help with code review (Click to see)","text":"<p>Commit changes: uploading snapshots when the code changes. The history of all changes are therefore saved and can be reverted.</p> <p></p> <p>Branching: keep a version of the code separate while making experimental changes or keeping track of collaborative work. Can try out new functionality or edit in parallel without impacting the code base.</p> <p></p> <p>Pull Request: Bring the changes made on a branch over to the main code base. Can be used to request a code review (see Reviewers on the right panel)</p> <p></p> <p>Review: A pull request can be reviewed and commented on.</p> <p></p> <p>Author: Lydia France (Junior Data Scientist, The Alan Turing Institute, UK)</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#reviewing-is-not-about-creating-more-work-nor-the-pi-rewriting-everything","title":"Reviewing is not about creating more work, nor the PI rewriting everything","text":"<p>Instead, it is just another part of peer review and accountability within the scientific process. It is also an opportunity for everyone to learn better practices from each other, and solve issues that have plagued one person for weeks!</p> <p>Scientists are very aware that their understanding of code dissipates over time and that this is a large hidden cost. Equally, they suspect that they spend a lot of time reinventing wheels. They may not know how code review will help with that, but they hope that it will.</p> <p>One of the mentors expected scientists to overhaul complete code bases. The advice from one mentor was cogent: if you check the docstring and write a test every time you touch a method, the code improvements will accumulate over time with minimal effort.</p> <p>Someone who isn\u2019t intimately involved with your project should understand from the module documentation and the comments what you are trying to do, what approach you\u2019re taking, and why they should expect it to work.</p> <p>Take some time to prepare a presentation about your code that will answer the above questions even for someone who hasn\u2019t read the code. You\u2019re more likely to get useful feedback, rather than nitpicking about syntax, if the audience can see the big picture.</p> <p>Keep it a safe environment, i.e. make sure chastising is relatively gentle even when deserved (but do point out when code doesn\u2019t meet the required standard \u2013 frame it as a learning experience though).</p> <p>Marian Petre and Greg Wilson. \"Code review for and by scientists: preliminary findings.\" (2014).</p> <p>For further considerations in code review, please read Code Reviewing Process chapter in The Turing Way.</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#what-to-look-for-during-code-review","title":"What to look for during Code Review","text":"<p>Reviewing code makes a big difference. Knowledge of the language is not always necessary!</p> <p>These are very common, everyone does this.</p> <p>Bugs/Potential bugs</p> <ul> <li>Repetitive code</li> <li>Code saying one thing, documentation saying another</li> <li>Off-by-one errors</li> <li>Making sure each function does one thing only</li> <li>Lack of tests and sanity checks for what different parts are doing</li> <li>Magic numbers (a number hardcoded in the script)</li> </ul> <p>Unclear, messy code</p> <ul> <li>Bad variable/method names</li> <li>Inconsistent indentation</li> <li>The order of the different steps</li> <li>Too much on one line</li> <li>Lack of comments and signposting</li> </ul> <p>Fragile and non-reusable code</p> <ul> <li>Tailor-made and manual steps</li> <li>Only works with the given data</li> </ul> <p>Modified from What to look for when code reviewing</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#benefits-of-code-review","title":"Benefits of Code Review","text":"<p>In a group of 11 programs developed by the same group of people, the first 5 were developed without reviews. The remaining 6 were developed with reviews. After all the programs were released to production, the first 5 had an average of 4.5 errors per 100 lines of code. The 6 that had been inspected had an average of only 0.82 errors per 100. Reviews cut the errors by over 80 percent.</p> <p>Code Complete by Steve McConnell</p> <p>The main benefit is finding problems, and finding them early enough that there aren't frustrating consequences. The penalty for finding a bug once all the figures have been produced and conclusions drawn, or, worst-case scenario, after a publication, is much higher than the penalty for taking the time to review.</p> <p>Important things to bear in mind:</p> <p>Code reviews should not be used to evaluate individuals and their skill levels. An open and safe environment where revealing mistakes and errors should not come with penalties or shame. Code reviews should also be done early and often, to normalise this practice in the research team.</p> <p>In their book Peer Reviews in Software: A Practical Guide, Karl E. Wiegers says:</p> <p>The temptation to perfect the product before you allow another pair of eyes to see it. This is an ego-protecting strategy: you won\u2019t feel embarrassed about your mistakes if no one else sees them. ...review [is not] a seal of approval but rather in-process quality-improvement activity. Such reluctance has several unfortunate consequences. If your work isn\u2019t reviewed until you think it\u2019s complete, you are psychologically resistant to suggestions for changes.</p> <p>If the program runs, how bad can it be? You are likely to rationalise away possible bugs because you believe you\u2019ve finished and you\u2019re eager to move on to the next task. Relying on your own desk checking and unit testing ignores the greater efficiency of a peer review for finding many defects*</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#writing-code-collaboratively-also-benefit-directly-your-team-members","title":"Writing code collaboratively also benefit directly your team members","text":"<ul> <li>Less time redoing work or refactoring</li> <li>Increased productivity</li> <li>Greater confidence in own work</li> <li>Learning better techniques</li> <li>Reduced time debugging alone</li> <li>Knowledge exchange and group cohesion</li> </ul>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#for-a-group-leader-the-benefits-include","title":"For a group leader, the benefits include","text":"<ul> <li>Better understanding of the projects</li> <li>More maintainable and better-documented code that is easy to understand and modify</li> <li>Better insight into any problems with data</li> <li>Earlier visibility of quality issues</li> <li>Group reviews reduce the work burden</li> <li>More robust analysis pipelines that can be reused and modified</li> <li>High-quality code that can be released</li> </ul>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#group-code-writing","title":"Group Code Writing","text":"<p>As well as reviewing specific scripts and analyses written by a single individual, can be very beneficial to solving programming problems as a team. Setting aside an afternoon to work as a group will help teach less experienced members of the group and more efficiently solve very difficult problems.</p> <p>Groups of people working on a specific problem are often known as \"Hackathons\" in programming. These can last multiple days (hopefully with downtime!). With very large groups, people can work in pairs or small groups with delegated parts of the problem to solve and regularly meet back together to discuss and evaluate. If there is a complex solution in computational methods that most people in the group need, it makes sense to find it together.</p> <p>Similarly, documentation sprints are useful to dedicate time to regularly bring a codebase to a good minimum standard. Splitting the task across the team as an event, creating documentation and working examples for code repos and releasing it can help others use your computational methods and tools to increase the impact of your work. Having regularly updated documentation also reduces onboarding time for new members picking up the shared methods in the lab.</p> <p>Group work shares the burden and allows knowledge exchange and support within the team.</p>","tags":["notes","code","review"]},{"location":"common_practices/pages/notes_code_review_long/#references","title":"References","text":"<ul> <li>The Turing Way Community. (2021). The Turing Way: A handbook for reproducible, ethical and collaborative research (1.0.1). Zenodo. https://doi.org/10.5281/zenodo.5671094. Code Reviewing Process Chapter.</li> <li>Fernando Perez, Code reviews: the lab meeting for code</li> </ul>","tags":["notes","code","review"]},{"location":"common_practices/slides/","title":"How to generate the slides","text":"<pre><code>marp --html --pdf &lt;name_of_slide&gt;.md\n</code></pre>","tags":["how","generate","slides","create","pdf"]},{"location":"common_practices/slides/notes_code_review/","title":"Notes code review","text":"<p>What are Code Reviews and how can they help us?</p>"},{"location":"common_practices/slides/notes_code_review/#making-code-understandable","title":"Making code understandable","text":"<p>The most difficult part of writing code is always to make it understandable to other people, including yourself a few months down the track. There\u2019s certainly no shame in finding out that your code wasn\u2019t as easy to understand or use as you\u2019d hoped, so don\u2019t take it personally when it happens (which it always does, at least in my experience), but treat it as an opportunity to improve.</p> <p>Fernando Perez, Code reviews: the lab meeting for code</p>"},{"location":"common_practices/slides/notes_code_review/#synchronous-pair-programming","title":"Synchronous - Pair Programming","text":"<p>Consider the following scenario:</p> <ul> <li> <ol> <li>The PI sits down with her student.</li> </ol> </li> <li> <ol> <li>They discuss how the code could better.</li> </ol> </li> <li> <ol> <li>They find and solve issues together.</li> </ol> </li> <li> <ol> <li>The student learns something new.</li> </ol> </li> <li> <ol> <li>The code becomes more reusable.</li> </ol> </li> </ul>"},{"location":"common_practices/slides/notes_code_review/#pair-programming-driver-and-navigator","title":"Pair Programming - Driver and Navigator","text":"<p>Martin Fowler, On Pair Programming</p>"},{"location":"common_practices/slides/notes_code_review/#pair-programming-ping-pong","title":"Pair Programming - Ping Pong","text":"<p>Martin Fowler, On Pair Programming</p>"},{"location":"common_practices/slides/notes_code_review/#pair-programming-strong-style-pairing","title":"Pair Programming - Strong-Style Pairing","text":"<p>Keith McDonald, Strong Style Pairing</p>"},{"location":"common_practices/slides/notes_code_review/#pair-programming-benefits-and-challenges","title":"Pair Programming - Benefits and challenges","text":""},{"location":"common_practices/slides/notes_code_review/#benefits","title":"Benefits","text":"<ul> <li>We can produce better code working together</li> <li>We will ship fast for a longer time</li> <li>We build a \"default\" collaborative workflow in the group</li> <li>Less interruptions and happier people</li> <li>Recovering the flow becomes easier</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#challenges","title":"Challenges","text":"<ul> <li>??</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#pair-programming-the-pomodoro-technique","title":"Pair Programming - The Pomodoro technique","text":"<p>Martin Fowler, On Pair Programming</p>"},{"location":"common_practices/slides/notes_code_review/#synchronous-group-code-tour","title":"Synchronous - Group Code Tour","text":"<p>Consider the following scenario:</p> <ul> <li> <ol> <li>During a lab meeting, the student presents the steps of her code as logical steps.</li> </ol> </li> <li> <ol> <li>The code is explained both to R programmers and non-experts.</li> </ol> </li> <li> <ol> <li>The group discuss together and improve the code</li> </ol> </li> </ul>"},{"location":"common_practices/slides/notes_code_review/#suggestions-for-the-meeting-leader","title":"Suggestions for the meeting leader","text":"<ul> <li>Keep it a safe environment</li> <li>Facilitate participation in the session</li> <li>Make it clear that your code isn\u2019t perfect</li> <li>Patiently explain when things are not wrong but just not ideal</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#asynchronous-ill-get-back-to-you-on-that","title":"Asynchronous - I'll get back to you on that","text":"<p>Consider the following scenario:</p> <ul> <li> <ol> <li>A postdoc has created a model in Python</li> </ol> </li> <li> <ol> <li>She sends the instructions to test it to her supervisor</li> </ol> </li> <li> <ol> <li>The supervisor can then review it over the next week</li> </ol> </li> <li> <ol> <li>The supervisor makes a PR to the repo with improvements</li> </ol> </li> </ul>"},{"location":"common_practices/slides/notes_code_review/#branching","title":"Branching","text":"<p>Branching: keep a version of the code separate while making experimental changes or keeping track of collaborative work.</p> <p></p>"},{"location":"common_practices/slides/notes_code_review/#pull-requests","title":"Pull Requests","text":"<p>Pull Request: a code review request prior to merging the changes made on a branch over to the main branch.</p> <p></p>"},{"location":"common_practices/slides/notes_code_review/#reviewing-is-not-about-creating-more-work","title":"Reviewing is not about creating more work","text":"<ul> <li>Part of the scientific process</li> <li>An opportunity for everyone to learn better practices</li> <li>Reviews are rarely anonymous</li> <li>Often public-facing</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#where-to-put-the-focus-i","title":"Where to put the focus? (I)","text":"<ul> <li>Repetitive code</li> <li>Code saying one thing, documentation saying another</li> <li>Off-by-one errors</li> <li>Making sure each function does one thing only</li> <li>Lack of tests and sanity checks</li> <li>Magic numbers</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#where-to-put-the-focus-ii","title":"Where to put the focus? (II)","text":"<ul> <li>Bad variable/method names</li> <li>Inconsistent indentation</li> <li>The order of the different steps</li> <li>Lack of comments and signposting</li> <li>Tailor-made and manual steps</li> <li>Only works with the given data</li> </ul> <p>Modified from What to look for when code reviewing</p>"},{"location":"common_practices/slides/notes_code_review/#who-should-do-it","title":"Who should do it?","text":"<p>\"Anyone\" should be able to perform code reviews.</p> <p></p>"},{"location":"common_practices/slides/notes_code_review/#benefits-a-case-study","title":"Benefits - a case study","text":"<ul> <li>In a group of 11 programs developed by the same group of people, the first 5 were developed without reviews.</li> <li>The remaining 6 were developed with reviews. After all the programs were released to production, the first 5 had an average of 4.5 errors per 100 lines of code.</li> <li>The 6 that had been inspected had an average of only 0.82 errors per 100. Reviews cut the errors by over 80 percent.</li> </ul> <p>Code Complete by Steve McConnell</p>"},{"location":"common_practices/slides/notes_code_review/#benefits-software-developers","title":"Benefits - software developers","text":"<ul> <li>Less time redoing work or refactoring</li> <li>Increased productivity</li> <li>Greater confidence in own work</li> <li>Learning better techniques</li> <li>Reduced time debugging alone</li> <li>Knowledge exchange and group cohesion</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#benefits-team-leaders","title":"Benefits - team leaders","text":"<ul> <li>Better understanding of the projects</li> <li>Maintainable and better-documented code</li> <li>Earlier and better visibility of issues</li> <li>Group reviews reduce work burden</li> <li>Reusability and modification</li> <li>High-quality code that can be released</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#to-bear-in-mind","title":"To bear in mind","text":"<ul> <li>Should not be used to evaluate individuals</li> <li>Revealing mistakes should not come with penalties or shame.</li> <li>Should also be done early and often</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#potential-obstacles","title":"Potential obstacles","text":"<ul> <li>Conflicts of interest</li> <li>Strong personal views about non crucial matters</li> <li>Misunderstandings and/or misinterpretations</li> <li>Code ownership</li> <li>Psychological safety</li> </ul>"},{"location":"common_practices/slides/notes_code_review/#references","title":"References","text":"<p>This material is based on the Code Review lecture by The Carpentries.</p> <ul> <li>Code Review by The Carpentries is licensed under CC BY 4.0. Modifications were made in several chapters.</li> <li>The Turing Way Community. (2021). The Turing Way: A handbook for reproducible, ethical and collaborative research (1.0.1). Zenodo. https://doi.org/10.5281/zenodo.5671094. Code Reviewing Process Chapter.</li> <li>Fernando Perez, Code reviews: the lab meeting for code</li> <li>Martin Fowler, On Pair Programming</li> </ul>"},{"location":"communication/","title":"Communication","text":"<p>The communication with our learners.</p> Index Course 1 . 2 . 3 . 4 . 5 Summer 2025 6 Autumn 2025"},{"location":"communication/autumn_2025/","title":"Communication autumn 2025","text":"Date sent Document 2025-10-17 welcome_letter.md"},{"location":"communication/autumn_2025/welcome_letter/","title":"Welcome letter","text":"<ul> <li>Email title: Programming Formalisms course letter</li> </ul> <p>Hi and welcome to the Programming formalisms course!</p> <p>We are getting ready for the course which starts on <code>[MONTH] [STARTDATE]</code> and is online.</p> <p>The course and all materials relevant to the course are available on GitHub for reuse. There will be a course project which is also on GitHub. The use of git and tools like it are a valuable part of the toolkit of a professional developer and the use of these tools in the course is an active choice as part of the learning experience.</p> <p>Course material: https://uppmax.github.io/programming_formalisms/ Course repo: https://github.com/UPPMAX/programming_formalisms/ Project repo: <code>&lt;https://github.com/programming-formalisms/programming_formalisms_project_[XXX]&gt;</code></p> <p>Make sure you have followed the https://uppmax.github.io/programming_formalisms/prereqs/ so that you are set up to start the course.</p> <p>We will meet you at the zoom : <code>https://uu-se.zoom.us/j/NNNNNNNN</code> with Passcode: <code>NN_NN</code></p> <p>We always start sharp at 09.00 and the zoom is always open 30 min before the course starts. If you feel like, hanging out or have questions feel free to show up early.</p> <p>Looking forward to see you at the course, Best regards from the course team Lars, Rich\u00e8l and Bj\u00f6rn</p>"},{"location":"communication/summer_2025/","title":"Communication summer 2025","text":"Date sent Document 2025-04-29 welcome_letter.md"},{"location":"communication/summer_2025/welcome_letter/","title":"Welcome letter","text":"<ul> <li>Email title: Programming Formalisms course letter</li> </ul> <p>Hi and welcome to Programming Formalisms, we are getting ready for the course which starts on 5th of May and is online, the course page https://uppmax.github.io/programming_formalisms/ The course and all materials relevant to the course are available on GitHub for reuse there will be a course project which is also GitHub. The use of <code>git</code> and tools like it are a valuable part of the toolkit of a professional developer and the use of these tools in the course is an active choice as part of the learning experience.</p> <p>Check the following prereqs before we start on the first course day:</p> <p>https://uppmax.github.io/programming_formalisms/prereqs/</p> <p>We always start sharp at 09:00 and the Zoom is always open 30 minutes before the course starts. If you feel like, hanging out or have questions feel free to show up early.</p> <p>Make sure you have followed the https://uppmax.github.io/programming_formalisms/prereqs/ so that you are set up to start the course.</p> <p>We will meet you at the zoom :</p> <p><code>[URL]</code></p> <p>with Passcode: <code>[passcode]</code></p> <p>Looking forward to see you at the course, Best regards from the course team</p> <p>Lars, Bj\u00f6rn and Rich\u00e8l</p>"},{"location":"continuous_integration/","title":"Continuous integration","text":"<p>Learning outcomes</p> <ul> <li>Understand what continuous integration is</li> <li>Understand why continuous integration is important</li> <li>I can find the continuous integration errors</li> <li>I can fix an error given by a CI script</li> </ul> For teachers <p>Priors:</p> <ul> <li>Someone pushes code to <code>main</code> and the project breaks.   How can this be prevent?</li> <li>Someone pushes code to <code>main</code> that has a spelling mistake.   How can this be prevent?</li> <li>Someone pushes code to <code>main</code> that has untested code.   How can this be prevent?</li> <li>You want to measure the runtime speed of the project   in time, to see which changes cause a dip in performance.   How would you do this?</li> </ul> <p>Lesson plan:</p> <ul> <li> <p>5 mins: prior knowledge</p> <ul> <li>When do you trust your code?</li> <li>When do you trust code written by others?</li> <li>How do you convince other developers of a bug?</li> </ul> </li> <li> <p>5 mins: presentation</p> </li> <li>10 mins: demonstration <code>is_zero</code></li> <li>25 mins: challenge</li> <li>10 mins: feedback</li> </ul>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#why","title":"Why?","text":"<p>You want things to happen upon a <code>git push</code> or a <code>git merge</code>. Continuous integration scripts let you do just that!</p>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#use-case-1-test-the-build-in-a-cleanindependent-environment","title":"Use case 1: test the build in a clean/independent environment","text":"<p>You push/merge new code to <code>main</code> and you don't realize is that the project does not work anymore, as it depended on a file or operating system that only you have. Wouldn't it be great if code could be tested automatically in a clean/independent environment?</p>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#use-case-2-measure-code-coverage","title":"Use case 2: measure code coverage","text":"<p>You wonder how much of your code is tested. Wouldn't it be great if code coverage could be measured automatically after a push?</p>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#use-case-3-enforce-coding-standard","title":"Use case 3: enforce coding standard","text":"<p>A team member (or external contributor) is a sloppy code. You told him/her to follow the coding standards multiple times and now have grown tired of doing so. Wouldn't it be great if code could be tested to follow a coding standard automatically before merging?</p>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#use-case-4-measure-run-time-speed","title":"Use case 4: measure run-time speed","text":"<p>You want to measure the run-time speed of your project in a clean/independent environment. Wouldn't it be great if code could be tested for run-time speed automatically after a push?</p>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#how-continuous-integration-looks-like","title":"How Continuous Integration looks like","text":"<p>'Continuous Integration' is to continuously integrate new code with existing code (i.e. without human formal approval steps). This is quite an obvious definition, more interesting is to read how CI looks like (from <code>[Beck, 1999]</code>): Continuous integration [is that new] code is integrated with the current system after no more than a few hours. When integrating, the system is built from scratch and all tests must pass or the changes are discarded.</p> <p>Scripts that are triggered when <code>push</code>ing code.</p> <p>Assures quality:</p> <ul> <li>Tests pass</li> <li>Code has consistent style</li> <li>Links are valid (i.e. not broken)</li> <li>Spelling is correct</li> <li>[your check here]</li> </ul>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#features-of-continuous-integration","title":"Features of Continuous Integration","text":"<ul> <li>CI significantly increase the number of bugs exposed <code>[Vasilescu et al., 2015]</code></li> <li>CI increases the speed at which new features are added <code>[Vasilescu et al., 2015]</code></li> </ul>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#code-coverage","title":"Code coverage","text":"<ul> <li>Percentage of code tested</li> <li>Correlates with code quality <code>[Horgan et al., 1994][Del Frate et al., 1995]</code></li> <li>100% mandatory to pass a code peer-review by rOpenSci <code>[Hart et al., 2013]</code></li> <li>Break the build if test coverage is too low   <code>[Henney, 2010, chapter 'Automate Your Coding Standard']</code></li> </ul>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#coding-style","title":"Coding style","text":"<ul> <li>Following a consistent coding style improves software quality <code>[Fang, 2001]</code><ul> <li>Python: PEP8 <code>[PEP 8]</code></li> <li>R: Tidyverse <code>[Wickham, 2019]</code></li> </ul> </li> <li>Use static code analysis tools to scan the code for unwanted antipatterns   <code>[Henney, 2010, chapter 'Automate Your Coding Standard']</code></li> <li>The cyclomatic complexity of code is part of the coding style,   where more complex code is likelier to have more bugs   <code>[Abd Jader et al., 2018][Chen, 2019][Mens et al., 2008]</code></li> <li>If an antipattern is found, break the build   <code>[Henney, 2010, chapter 'Automate Your Coding Standard']</code></li> </ul> <p>A 'linter' is program that tests code for style.</p> <p>Some Python linters:</p> Name VSCode plugin? Features <code>ruff</code> Yes Fastest, active development, can replace Flake8, Black, isort, pydocstyle, pyupgrade, autoflake, and more <code>mypy</code> Yes Only checks on data type hints Black No Many checks Pylint Yes Slow, checks on data type Flake8 Yes Many checks <code>autopep8</code> No Named after PEP8 <p>Sometimes, you will disagree with a linter. All linters allow you to turn it off temporarily.</p> <p>For example, this code will trigger the <code>ruff</code> linter:</p> <pre><code>import random\ni = random.randint(0, 1)\n</code></pre> <p>The linter gives a S311 error), which means that the <code>random.randint</code> is too quick-and-dirty to its taste. However, if you need exactly that (e.g. in a test), you can disable the linter for in that line like this:</p> <pre><code>i = random.randint(0, 1) # noqa: S311\n</code></pre> <p>You will need to defend this in a code review :-)</p>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#exercises","title":"Exercises","text":"","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#exercise-1-look-at-the-results-of-our-ci-scripts","title":"Exercise 1: look at the results of our CI scripts","text":"<ul> <li>Go to the learners' project</li> <li>Click on the 'Actions' tab</li> </ul> Where is the 'Actions' tab? <p>It is here:</p> <p></p> <ul> <li>You now see all the Actions. 'Actions' are the names of the   continuous integration scripts.</li> </ul> How does that look like? <p>This is how it looks like:</p> <p></p> <ul> <li>What are the actions in the learners' project?</li> </ul> Answer <p>Actions are:</p> <ul> <li>Check code style</li> <li>Check links</li> <li>Check markdown</li> <li>Check package</li> <li>Check spelling</li> <li>Measure codecov</li> </ul> <ul> <li>Click on the workflow (a GitHub term) with 'Check spelling'   in the second line</li> </ul> Where to click exactly? <p>Click here:</p> <p></p> <ul> <li>Click on the <code>check_spelling</code> job (another GitHub term)</li> </ul> Where to click exactly? <p>Click here:</p> <p></p> <ul> <li>You will be shown the results of the spell check</li> </ul> How does that look like? <p></p> <p>Fixing this is beyond this exercise (but it is in the next :-) ).</p>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#exercise-2-practice-with-ci-errors","title":"Exercise 2: practice with CI errors","text":"<p>In this exercise we will develop clean code.</p> <p>Pick something at your level, in the relevant folder:</p> What Which folder A simple function <code>src/learners</code> An try-out of the analysis of the data <code>src/learners</code> An analysis of the data <code>src/weather</code> <p>When uploading your code, check the results of the CI scripts regularly:</p> <ul> <li>Go to the learners' project</li> <li>Click on the 'Actions' tab</li> <li>Look for an Action that fails. Which actions do you see?</li> </ul> Answer <ul> <li>'Check code style'</li> <li>'Check package'</li> <li>'Check links'</li> <li>'Check spelling'</li> <li>'Measure codecov'</li> </ul> <ul> <li>What would you guess that these do?</li> </ul> Answer <ul> <li>'Check code style': checks for Python style, will improve your   Python grammar</li> <li>'Check package': checks if the repo can be built into a package,   has the most diverse range of Python problems</li> <li>'Check links': checks for links, straightforward</li> <li>'Check markdown': checks for markdown style, will improve   your markdown grammar</li> <li>'Check spelling': spellcheck, straightforward</li> <li>'Measure codecov': checks if the code can be tested   practice writing, has a diverse range of Python problems</li> <li>The codecov percentage:   needs to be 100%, practice writing tests</li> </ul> <ul> <li>What is the most important action?</li> </ul> Answer <p>'Check package' is the most important action: if the package cannot be created, the code is broken.</p> <ul> <li>Pick your favorite action and try to fix 1 error, see below for hints</li> </ul> <p>Pick your favorite action</p> <ul> <li>'Check code style': will improve your Python grammar</li> <li>'Check package': has the most diverse range of Python problems</li> <li>'Check links': straightforward</li> <li>'Check markdown': will improve your markdown grammar</li> <li>'Check spelling': straightforward</li> <li>'Measure codecov': has a wide range of problems</li> <li>The codecov percentage: practice writing tests</li> </ul> How to fix 'Check code style'? <p>The errors given are diverse and commonly show the solution as well.</p> <p>For example, take this error:</p> <pre><code>src/learners/probability.py:13:5: RET505 [*] Unnecessary `else` after `return` statement\n   |\n11 |     if (x&gt;0.0) &amp; (x&lt;1.0):\n12 |         return True\n13 |     else:\n   |     ^^^^ RET505\n14 |         return False\n</code></pre> <p>The error occurs in the file <code>src/learners/probability.py</code> at line 13. In this case, there is an unnecessary <code>else</code> after <code>return</code> statement, which has error code <code>RET505</code>. Googling for <code>ruff RET505</code> takes you to the corresponding ruff documentation. Here you can read how to fix it.</p> <p>In this case, rewrite the existing code ...</p> <pre><code>if (x&gt;0.0) &amp; (x&lt;1.0):\n    return True\nelse:\n    return False\n</code></pre> <p>to</p> <pre><code>if (x&gt;0.0) &amp; (x&lt;1.0):\n    return True\nreturn False\n</code></pre> <p>It is possible that <code>ruff</code> has some new errors too. Here is a version that <code>ruff</code> will guide you to:</p> <pre><code>return x &gt; 0.0 &amp;&amp; x &lt; 1.0\n</code></pre> How to fix 'Check links  '? <p>Search the error logs for the word <code>error</code>. You will find a link that considered to be broken.</p> <p>If indeed the link is broken, either remove the link or point it to another URL.</p> <p>If the link is misdiagnosed to be broken, add it to <code>mlc_config.json</code>.</p> <p>For example, here is an example <code>mlc_config.json</code>:</p> <pre><code>{\n  \"aliveStatusCodes\": [200, 403, 418, 429, 503],\n  \"ignorePatterns\": [\n    {\n      \"pattern\": \"https://www.sciencedirect.com/science/article/pii/S0308521X01000543\"\n    }\n  ]\n}\n</code></pre> <p>To add a link to ignore it (in this example <code>https://www.my_link.sv</code>, change it to:</p> <pre><code>{\n  \"aliveStatusCodes\": [200, 403, 418, 429, 503],\n  \"ignorePatterns\": [\n    {\n      \"pattern\": \"https://www.sciencedirect.com/science/article/pii/S0308521X01000543\"\n    },\n    {\n      \"pattern\": \"https://www.my_link.sv\"\n    }\n  ]\n}\n</code></pre> How to fix 'Check markdown'? <p>The errors given are diverse.</p> <p>For example, take this error:</p> <pre><code>Error: requirements.md:29:81 MD013/line-length Line length [Expected: 80; Actual: 209]\n</code></pre> <p>This error is caused in file <code>requirements.md</code>, line 29. To find a better explanation Google for <code>markdownlint MD013</code> and you'll find the markdownlint documentation on MD13</p> <p>There are multiple ways to fix it.</p> <p>If possible, split up the line in multiple lines.</p> <p>If not, you can locally ignore <code>markdownlint</code> errors by adding this around the offending lines:</p> <pre><code>&lt;!-- markdownlint-disable MD013 --&gt;\n\n[the line that is too long]\n\n&lt;!-- markdownlint-enable MD013 --&gt;\n</code></pre> How to fix 'Check package'? <p>This is the most important test: if this fails, it means the code of our project is broken. You will see a Python error that needs fixing, for example:</p> <pre><code>ImportError: Failed to import test module: tests.test_sven\nTraceback (most recent call last):\n  File \"/usr/lib/python3.10/unittest/loader.py\", line 436, in _find_test_path\n    module = self._get_module_from_name(name)\n  File \"/usr/lib/python3.10/unittest/loader.py\", line 377, in _get_module_from_name\n    __import__(name)\n  File \"/home/runner/work/programming_formalisms_project_summer_2025/programming_formalisms_project_summer_2025/\n  tests/test_sven.py\", line 23\n    def test_prime_numbers(self)\n                                ^\nSyntaxError: expected ':'\n\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (errors=2)\n</code></pre> <p>This error occurs in file <code>tests/test_sven.py</code> at line 23. It is a syntax error that can be fixed by fixing the Python code in that file.</p> How to fix 'Check spelling'? <p>Take a look at the words that triggered the spellcheck, for example:</p> <pre><code>Misspelled words:\n&lt;htmlcontent&gt; learners/sven/design/requirements.md: html&gt;body&gt;table\n--------------------------------------------------------------------------------\nProgramm\n</code></pre> <p>This means that in the file <code>learners/sven/design/requirements.md</code> the misspelled word <code>Programm</code> was found.</p> <p>In this case, this is a valid spelling error, which is fixed by fixing the file.</p> <p>However, the error may be a false positive, e.g. the very common ( ;-) ):</p> <pre><code>Misspelled words:\n&lt;htmlcontent&gt; README.md: html&gt;body&gt;table\n--------------------------------------------------------------------------------\nRich\u00e8l\n</code></pre> <p>In such a case, add the offending word to the whitelist that is in file <code>.wordlist.txt</code> at the root folder of our repo.</p> How to fix 'Measure codecov'? <p>This is the one-but-most important test: if this fails, it means the testing of our project is broken. You will see a Python error that needs fixing, for example:</p> <pre><code>ImportError: Failed to import test module: tests.test_sven\nTraceback (most recent call last):\n  File \"/usr/lib/python3.10/unittest/loader.py\", line 436, in _find_test_path\n    module = self._get_module_from_name(name)\n  File \"/usr/lib/python3.10/unittest/loader.py\", line 377, in _get_module_from_name\n    __import__(name)\n  File \"/home/runner/work/programming_formalisms_project_summer_2025/programming_formalisms_project_summer_2025/\n  tests/test_sven.py\", line 23\n    def test_prime_numbers(self)\n                                ^\nSyntaxError: expected ':'\n\n\n----------------------------------------------------------------------\nRan 7 tests in 0.001s\n\nFAILED (errors=2)\n</code></pre> <p>This error occurs in file <code>tests/test_sven.py</code> at line 23. It is a syntax error that can be fixed by fixing the Python code in that file.</p> How to fix the code coverage percentage? <p>One can only improve the code coverage if 'Mesaure codecov' passes: if our package's testing is broken, we cannot measure code coverage.</p> <p>See 'How to fix 'Measure codecov'' on how to do that.</p> <p>If the package and tests can be built successfully, click on the codecov badge at the front page of the learners' project:</p> <p></p> <p>This will take you to a https://about.codecov.io/ site. Look for functions that are not tested 100% and click on those. You will then see in red which lines are not tested.</p> <p>Then use your judgement to either:</p> <ul> <li>Write tests to trigger those lines</li> <li>Remove the lines that are not triggered</li> </ul>","tags":["CI","Continuous integration"]},{"location":"continuous_integration/#references","title":"References","text":"<ul> <li><code>[Abd Jader et al., 2018]</code> Abd Jader, Marwa Najm, and Riyadh Zaghlool Mahmood.   \"Calculating McCabe's cyclomatic complexity metric and its effect on the   quality aspects of software.\"</li> <li><code>[Beck, 1999]</code> Beck, Kent.   \"Embracing change with extreme programming.\" Computer 32.10 (1999): 70-77.</li> <li><code>[Booch, 1990]</code> Booch, Grady. Object oriented design with applications.   Benjamin-Cummings Publishing Co., Inc., 1990.</li> <li><code>[Chen, 2019]</code> Chen, Changqi.   \"An Empirical Investigation of Correlation between Code Complexity and Bugs.\"   arXiv preprint arXiv:1912.01142 (2019).</li> <li><code>[Del Frate et al., 1995]</code> Del Frate, Fabio, et al.   \"On the correlation between code coverage and software reliability.\"   Proceedings of Sixth International Symposium on Software Reliability   Engineering. ISSRE'95. IEEE, 1995.</li> <li><code>[Fang, 2001]</code> Fang, Xuefen.   \"Using a coding standard to improve program quality.\" Proceedings Second   Asia-Pacific Conference on Quality Software. IEEE, 2001.</li> <li><code>[Hart et al., 2013]</code> Hart, Edmumd, et al.   \"rOpenSci-a collaborative effort to develop R-based tools for facilitating   Open Science.\" figshare (2013): 791569.</li> <li><code>[Henney, 2010]</code> Henney, Kevlin.   97 things every programmer should know: collective wisdom from the experts. \"   O'Reilly Media, Inc.\", 2010.</li> <li><code>[Mens et al., 2008]</code> Mens, Tom, et al.   \"Empirical studies of open source evolution.\"   Software evolution (2008): 263-288.</li> <li><code>[PEP 8]</code> Van Rossum, Guido, Barry Warsaw, and Nick Coghlan.   \"PEP 8\u2013style guide for python code.\" Python. org 1565 (2001): 28.</li> <li><code>[Horgan et al., 1994]</code> Horgan, Joseph R., Saul London, and Michael R. Lyu.   \"Achieving software quality with testing coverage measures.\"   Computer 27.9 (1994): 60-69.</li> <li><code>[Vasilescu et al., 2015]</code> Vasilescu, Bogdan, et al.   \"Quality and productivity outcomes relating to continuous integration in   GitHub.\" Proceedings of the 2015 10th joint meeting on foundations of   software engineering. 2015.</li> <li><code>[Wickham, 2019]</code> Wickham, Hadley.   Advanced R. chapman and hall/CRC, 2019.</li> </ul>","tags":["CI","Continuous integration"]},{"location":"data/","title":"Data","text":"<p>Data being collected during the course.</p> Course iteration Number of learners 1 Summer 2023 2 Autumn 2023 3 Summer 2024 4 Autumn 2024","tags":["data","collected"]},{"location":"data/counts/2023_autumn/","title":"Counts","text":"","tags":["data","counts","count","experiment"]},{"location":"data/counts/2023_autumn/#other-data","title":"Other data","text":"<ul> <li>Number of registrations: 40</li> </ul>","tags":["data","counts","count","experiment"]},{"location":"data/counts/2023_summer/","title":"Counts","text":"","tags":["data","counts","count","experiment"]},{"location":"data/counts/2023_summer/#other-data","title":"Other data","text":"<ul> <li>Number of registrations: 43</li> </ul>","tags":["data","counts","count","experiment"]},{"location":"data/counts/2024_autumn/","title":"Counts","text":"<p>Goal of this experiment is to see how important camera usage is for keeping learners in an online course.</p>","tags":["data","counts","count","experiment","camera usage"]},{"location":"data/counts/2024_autumn/#data-description","title":"Data description","text":"<code>[date]_counts.csv</code> field Description <code>time</code> Time <code>n_cam_on</code> Number of learners with the camera on. This excludes teacher(s) and assistants <code>n_cam_off</code> Number of learners with the camera on. This excludes teacher(s) and assistants","tags":["data","counts","count","experiment","camera usage"]},{"location":"data/counts/2024_autumn/#other-data","title":"Other data","text":"<ul> <li>Number of registrations: 23</li> </ul>","tags":["data","counts","count","experiment","camera usage"]},{"location":"data/counts/2024_autumn/#conclusions","title":"Conclusions","text":"<p>The amount of learners present throughout the course was around 8 (mostly 9, but 7 on Friday). Hence, we should expect <code>n_registrations / 3</code> active participants.</p>","tags":["data","counts","count","experiment","camera usage"]},{"location":"data/counts/2024_summer/","title":"Counts","text":"<p>Goal of this experiment is to see how important camera usage is for keeping learners in an online course.</p>","tags":["data","counts","count","experiment","camera usage"]},{"location":"data/counts/2024_summer/#data-description","title":"Data description","text":"<code>[date]_counts.csv</code> field Description <code>time</code> Time <code>n_cam_on</code> Number of learners with the camera on. This excludes teacher(s) and assistants <code>n_cam_off</code> Number of learners with the camera on. This excludes teacher(s) and assistants","tags":["data","counts","count","experiment","camera usage"]},{"location":"data/counts/2024_summer/#other-data","title":"Other data","text":"<ul> <li>Number of registrations: 33</li> </ul>","tags":["data","counts","count","experiment","camera usage"]},{"location":"data/counts/2025_autumn/","title":"Counts","text":"<p>Goal of this experiment is to see how important camera usage is for keeping learners in an online course.</p>"},{"location":"data/counts/2025_autumn/#data-description","title":"Data description","text":"<code>[date]_counts.csv</code> field Description <code>time</code> Time <code>n_cam_on</code> Number of learners with the camera on. This excludes teacher(s) and assistants <code>n_cam_off</code> Number of learners with the camera on. This excludes teacher(s) and assistants"},{"location":"data/counts/2025_autumn/#other-data","title":"Other data","text":"<ul> <li>Number of registrations: 15</li> </ul>"},{"location":"data_structures/","title":"Data structures","text":"<p>Learning outcomes</p> <ul> <li>Practice to use classes for expression</li> <li>Practice to use classes for type safety</li> <li>Practice to use composition for a 'has-a' relationship</li> </ul>","tags":["data structures","class","classes","composition"]},{"location":"data_structures/#why","title":"Why?","text":"<p>You want to model the real world. The real world consists out of things. You need to convert those things into code.</p> <p>You want to use data structures.</p>","tags":["data structures","class","classes","composition"]},{"location":"data_structures/#good-data-structures","title":"Good data structures","text":"<p>Good data structures:</p> <ul> <li>Increase expressiveness</li> <li>Bundles data that belongs together</li> <li>Ensures correct state of the program</li> </ul> <p>Good example data structures are built-in data structures.</p>","tags":["data structures","class","classes","composition"]},{"location":"data_structures/#discussion","title":"Discussion","text":"<ul> <li>Structures increase expressiveness of code</li> <li>The design of data structures has implications</li> <li>Structures are useful to bundle data</li> <li>It is rare that structures match the real world</li> </ul>","tags":["data structures","class","classes","composition"]},{"location":"data_structures/#structure-versus-class","title":"structure versus class","text":"Parameter structure class Python keyword <code>class</code> <code>class</code> R object type S3 class S4, R5, R6 All states are valid Yes No Maintains a valid state No Yes Example A number for an x coordinate A string for a DNA sequence Invalid when Never Sequence holds an invalid nucleotide letter","tags":["data structures","class","classes","composition"]},{"location":"data_structures/built_in_data_structures/","title":"Built-in data structures","text":"<p>Learning outcomes</p> <ul> <li>.</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>.</li> </ul> <p>Teaching goals are:</p> <ul> <li>.</li> </ul> <p>Prior:</p> <ul> <li>.</li> </ul> <p>Lesson plans:</p> <pre><code>gantt\n  title Lesson plan pair programming 1\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 15s\n  Feedback 1: feedback_1, after exercise_1, 5s\n  Theory 2: theory_2, after feedback_1, 5s\n  Exercise 2: crit, exercise_2, after theory_2, 10s\n  Exercise 2 after the break: crit, after exercise_2, 5s</code></pre>","tags":["data structures","built-in","data types","standard"]},{"location":"data_structures/built_in_data_structures/#problem","title":"Problem","text":"<p>Are there classes that can help me solve problems more elegantly?</p>","tags":["data structures","built-in","data types","standard"]},{"location":"data_structures/built_in_data_structures/#python-classes","title":"Python classes","text":"<ul> <li><code>list</code>: heterogeneous container</li> <li><code>tuple</code>: immutable <code>list</code></li> <li><code>set</code>: sets</li> <li><code>dict</code>: dictionary</li> <li>Regular expressions: text patterns</li> </ul> <p>From Python 'Data Structures' documentation</p>","tags":["data structures","built-in","data types","standard"]},{"location":"data_structures/built_in_data_structures/#set","title":"<code>set</code>","text":"<p>Sorted collection of unique elements.</p> <pre><code>data = [3, 1, 4, 1, 5]\ns = set(data)\nassert 3 in s\nassert list(s) == [1, 3, 4, 5]\n</code></pre> <ul> <li>No need to check for elements existing twice</li> </ul>","tags":["data structures","built-in","data types","standard"]},{"location":"data_structures/built_in_data_structures/#dict","title":"<code>dict</code>","text":"<p>A dictionary:</p> <pre><code>periodic_table = dict({1: \"Hydrogen\", 2: \"Helium\", 3: \"Lithium\"})\nperiodic_table[2] = \"helium\"\nassert periodic_table[2] == \"helium\"\n</code></pre> <ul> <li>Commonly uses as a look-up table</li> <li>A look-up table can store the results of earlier calculations</li> </ul>","tags":["data structures","built-in","data types","standard"]},{"location":"data_structures/built_in_data_structures/#regular-expressions","title":"Regular expressions","text":"<p>A state-machine for a pattern in text</p> <pre><code>import re\ndna_regex = re.compile(\"^[ACGT]*$\")\nassert dna_regex.match(\"\")\nassert dna_regex.match(\"A\")\nassert dna_regex.match(\"CA\")\nassert dna_regex.match(\"GCA\")\nassert dna_regex.match(\"TGCA\")\nassert dna_regex.match(\"TGCAAAAAA\")\nassert not dna_regex.match(\"nonsense\")\n</code></pre> <ul> <li>https://docs.python.org/3/library/re.html</li> </ul>","tags":["data structures","built-in","data types","standard"]},{"location":"data_structures/class_design/","title":"Class design","text":"<p>Learning outcomes</p> <ul> <li>Understand what an invariant is</li> <li>Write a class that protects an invariant</li> </ul> For teachers <p>Prior:</p> <ul> <li>What are classes?</li> <li>When to use classes, or when not?</li> </ul>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#why","title":"Why?","text":"<p>You are modeling something in the real world as code. You want to use the same world in your code as in the real world and you want it to be natural to use in your code.</p> <p>This is a goal of class design.</p>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#example","title":"Example","text":"<p>Here we see some code where a user constantly checks if his/her stays positive:</p> <pre><code>positive_number = 42\nassert positive_number &gt;= 0\n\npositive_number = do_something_with_it(positive_number)\nassert positive_number &gt;= 0\n\npositive_number = do_something_else_with_it(positive_number)\nassert positive_number &gt;= 0\n</code></pre> <p>Wouldn't it be great if <code>positive_number</code> itself could check if it is positive, instead of us <code>assert</code>ing this at every step?</p> <p>For that, we could write a class for exactly that, with a name such as <code>PositiveNumber</code>.</p>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#benefits-from-object-oriented-development","title":"Benefits from object-oriented development","text":"<p>Benefits from object-oriented development (from <code>[Booch, 2008]</code>):</p> <ul> <li>Appeals to the working of human cognition</li> <li>Leads to systems that are more resilient to change</li> <li>Encourages the reuse of software components</li> <li>Reduces development risk</li> <li>Exploits the expressive power of object-oriented programming languages</li> </ul>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#an-invariant","title":"An invariant","text":"<p>An invariant is something that must always be. Some examples:</p> <ul> <li>a persons' age must always be positive</li> <li>a persons' total height must be longer than a persons' arms' length</li> </ul> <p>Use a class if the class has an invariant <code>[CppCore C.2]</code>.</p> <p>For example, here we have a class with an invariant:</p> <pre><code>classDiagram\n  class Range{\n    -lowest\n    -highest\n  }</code></pre> What is the invariant in the <code>Range</code> class? <p>The invariant is that <code>highest</code> must be bigger or equal to <code>lowest</code>.</p>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#writing-a-good-class","title":"Writing a good class","text":"<p>A good class guarantees that its stored data is valid. For example, the class <code>DnaSequence</code> is probably a string of one or more A, C, G and T</p> <ul> <li>the quality requirements for a function, among others a good interface</li> <li>writing a design, documentation and tests all help</li> </ul>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#general-class-anatomy","title":"General class anatomy","text":"<ul> <li>A constructor: all data needed to create it</li> <li>Private member variables</li> <li>Public member functions</li> </ul> Prefer R? <p>Class anatomy in R:</p> <ul> <li>R has four class types (S3, S4, R5, R6)</li> <li>S3 classes are closest to structures</li> <li>R6 classes are real classes</li> </ul>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#a-dnasequence-class","title":"A <code>DnaSequence</code> class","text":"<p>Here is how to implement a class for a DNA sequence:</p> <pre><code>class DnaSequence:\n    def __init__(self, sequence):\n        assert is_dna_string(sequence)\n        self._sequence = sequence\n\n    def get_str(self):\n        return self._sequence\n\na = DnaSequence(\"ACGT\")\nassert a.get_str() == \"ACGT\"\n</code></pre> <p>The <code>init</code> method (also known as a constructor) checks if the input is indeed a valid DNA string, using an <code>assert</code>. After that, the sequences is stored inside of the class, in a member variable called <code>_sequence</code>. The underscore signals (by social convention) that the value must be treated as 'do not touch' and that the only class itself will keep it valid.</p> <p>However, nothing stops you from doing this:</p> <pre><code>a._sequence = \"XXX\" # No! Breaks the invariant!\nassert a.get_str() == \"XXX\"\n</code></pre> <p>On the other hand, a Python developer can at least see that this convention was broken.</p> <p>Note that some other programming languages completely disallows you from modifying a so-called 'private' member variable.</p>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#exercise","title":"Exercise","text":"","tags":["class design","architecture"]},{"location":"data_structures/class_design/#exercise-write-a-class-with-an-invariant","title":"Exercise: write a class with an invariant","text":"<ul> <li>Pick a class at your skill level:</li> </ul> Easiest: a class for a positive number <p>Here is an example how to use it:</p> <pre><code>x = PositiveNumber(3)\nassert x.get_value() == 3\nPositiveNumber(-1) # Must raise an exception\n</code></pre> <p>Work in <code>src/learners</code>.</p> Medium: a class for a range, e.g 'a range from 3 to 10' <p>Here is an example how to use it:</p> <pre><code>x = Range(3, 10)\nassert x.get_lowest() == 3\nassert x.get_highest() == 10\nRange(100, 10) # Must raise an exception\n</code></pre> <p>Work in <code>src/learners</code></p> Hard: your own class <p>Come up with a class you may need yourself and try to write it.</p> <p>Work in <code>src/learners</code></p> <ul> <li>Write the class that protects its invariant</li> </ul> Answer for a positive number <pre><code>class PositiveNumber:\n    def __init__(self, any_positive_number):\n        assert any_positive_number &gt;= 0\n        self._value = any_positive_number\n    def get_value(self):\n        return self._value\n</code></pre> Answer for range <pre><code>class Range:\n    def __init__(self, any_lowest, any_highest):\n        assert any_lowest &lt;= any_highest\n        self._lowest = any_lowest\n        self._highest = any_highest\n    def get_lowest(self):\n        return self._lowest\n    def get_highest(self):\n        return self._highest\n</code></pre>","tags":["class design","architecture"]},{"location":"data_structures/class_design/#references","title":"References","text":"<ul> <li><code>[Booch, 2008]</code> Booch, Grady, et al. \"Object-oriented analysis and design with applications.\" ACM SIGSOFT software engineering notes 33.5 (2008): 29-29.</li> <li>Python classes</li> <li>C++ Core Guidelines</li> <li><code>[CppCore C.2]</code> C.2: Use class if the class has an invariant; use struct   if the data members can vary independently   https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-struct</li> <li><code>[CppCore C.8]</code> C.8: Use class rather than struct if any member is non-public   https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c8-use-class-rather-than-struct-if-any-member-is-non-public</li> <li><code>[Gamma et al., 1995]</code> Gamma, Erich, et al.   \"Elements of reusable object-oriented software.\" Design Patterns (1995).</li> </ul>","tags":["class design","architecture"]},{"location":"deployment/deploy/","title":"Deploy your code","text":"<p>Questions</p> <ul> <li>How to make your program work for others?</li> <li>How to start a git repo from existing code project?</li> </ul> <p>Learning outcomes of 'Deployment'</p> <ul> <li>I can mentalize the installation needs from the users' perspective</li> <li>I can initialize a new project</li> </ul> <p>Content</p> <ul> <li>We will prepare for user installation of our code</li> <li>But also...<ul> <li>some theory of packages</li> <li>some theory of containers</li> <li>starting a git repo from existing code project</li> </ul> </li> </ul> Instructor notes <p>Prerequisites are:</p> <ul> <li>Package</li> </ul> <p>Lesson Plan:</p> <ul> <li>Total 75 min</li> <li>Theory 20+10</li> <li>Exercises 30+15 min</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#introduction","title":"Introduction","text":"<ul> <li>It's about Distribution!</li> </ul> <p>Note</p> <ul> <li>Many projects/scripts start as something for personal use, but expands to be distributed.</li> <li>Let's start in that end and be prepared.</li> <li>The following steps can be very valuable for you in a couple of months as well as you revisit your code and don't know what it does or why you did this and that.</li> </ul> <p>Tip</p> <ul> <li>Make your program or workflow work for others and yourself in the future.</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#to-make-sure-about-needed-dependencies","title":"To make sure about needed dependencies","text":"<ul> <li>Reproducibility: We can control our code but how can we control dependencies?</li> <li>10-year challenge: Try to build/run your own code that you have created 10 (or less) years ago. Will your code from today work in 5 years if you don\u2019t change it?</li> <li> <p>Dependency hell: Different codes in the same environment can have conflicting dependencies.</p> </li> <li> <p>2 levels of dependencies</p> </li> </ul> System libraries <ul> <li>Nowadays platforms are less important, still \"system files\" may differ among OS platforms and Linux distributions<ul> <li>will your program require specific \"system files\"</li> <li>are these typically not installed already?</li> <li>in the best world test on Windows/Mac and Linux platforms<ul> <li>and with as empty as possible environment</li> </ul> </li> </ul> </li> </ul> packages, like in Python <ul> <li>Python packages</li> <li>R packages</li> <li>Julia packages</li> <li>Matlab Add-ons</li> </ul> Shared services like HPC clusters <ul> <li>What about Shared services like a cluster where users and most staff do not have writing privileges ('sudo' rights) for system installations?</li> </ul> Discussion: Where do you run your program? <ul> <li>From a terminal?<ul> <li>Linux, Mac, Windows?</li> </ul> </li> <li>From IDE?<ul> <li>VSCode, RStudio, MATLAB, Jupyter, Spyder, Idle</li> </ul> </li> <li>On different computers<ul> <li>Using several platforms</li> </ul> </li> <li>On a cluster?<ul> <li>NAISS resources, other?</li> </ul> </li> </ul> <p>We need to</p> <ul> <li>Inform what is needed to run the software in the README file (Next session)</li> <li>Or provide them with everything needed (file )<ul> <li>hopefully not interfering with other software they are using</li> </ul> </li> </ul> Ways to distribute <ul> <li>Python packages:<ul> <li>pip (PyPI)</li> <li>conda</li> </ul> </li> <li>R:<ul> <li>R repos like CRAN and GitHub (devtools)</li> <li>conda</li> </ul> </li> <li>Compiled languages:<ul> <li>built binaries (platform specific)</li> <li>install from source<ul> <li>manual</li> <li>make</li> <li>CMake</li> </ul> </li> </ul> </li> <li>General tools<ul> <li>Containers</li> </ul> </li> </ul> Conda &amp; pip <p>These Python-related tools try to solve the following problems:</p> <ul> <li>Defining a specific set of dependencies, possibly with well-defined versions</li> <li>requirements.txt...</li> <li>Installing those dependencies mostly automatically</li> <li>Recording the versions for all dependencies</li> <li>Isolated environments (venv, virtualenv)<ul> <li>On your computer for projects so they can use different software.</li> <li>Isolate environments on computers with many users (and allow self-installations)</li> <li>Using different Python/R versions per project??</li> <li>Provide tools and services to share packages</li> </ul> </li> </ul> <ul> <li>Let's focus here on PyPI!<ul> <li>Remember we made a package this morning!</li> </ul> </li> <li>We'll briefly cover the other tools after the exercise.</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#recording-dependencies","title":"Recording dependencies","text":"<ul> <li>Start with empty environment</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#principle-using-python-pip-in-a-virtual-environment","title":"Principle using python pip in a virtual environment","text":"<ul> <li>We can make other users aware of the dependencies for our Python project.</li> <li>One can state those specifically as a list in a README</li> <li>Or, we can make a ready file (in python)</li> </ul> <p>Save your requirements as a file</p> <ul> <li>You may have developed your Python program with your existing python modules environment. You may have installed some new packages during the development but did not track it in a good way.</li> <li>We need to identify what python packages a user (or you on another computer) will need, to make the program work!<ul> <li>There are many packages distributed in the \"base\" installation of Python so it is not just to look at the import lines in the code.</li> <li>You may also be hard to get an overview because you have too many import lines, also distributed among files if you worked in a modular way</li> </ul> </li> </ul> <p>Example</p> <ul> <li>requirements.txt</li> </ul> Demo with planet <pre><code>    git switch -c venv\n    python -m venv venv\n    source venv/Scripts/activate # Mac/Linux has venv/bin/activate\n    pip freeze  #should be empty\n    ls\n    cd code\n    ls\n    python planet_main.py\n        import numpy as np\n        ModuleNotFoundError: No module named 'numpy'\n\n    pip install numpy\n    python planet_main.py\n        ModuleNotFoundError: No module named 'matplotlib'\n    pip install matplotlib\n    pip freeze\n    pip freeze &gt; requirements.txt\n    deactivate # deactivate the virtual environment\n\n    git add requirements.txt\n    git commit -m \"add requirements.txt\"\n    git push\n    git switch main\n    git merge venv\n    git push\n</code></pre>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#ignoring-files-and-paths-with-gitignore","title":"Ignoring files and paths with <code>.gitignore</code>","text":"<p>Compiled and generated files are not committed to version control. There are many reasons for this:</p> <ul> <li>Your code could be run on different platforms.</li> <li>These files are automatically generated and thus do not contribute in any meaningful way.</li> <li>The number of changes to track per source code change can increase quickly.</li> <li>When tracking generated files you could see differences in the code although you haven't touched the code.</li> </ul> <p>For this we use a <code>.gitignore</code> file (put in root folder)</p> <ul> <li> <p>Read more</p> </li> <li> <p>Our course repo</p> </li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#exercise-1-identify-lacking-packages-15-20-min","title":"Exercise 1: Identify lacking packages (15-20 min)","text":"<p>Tip</p> <ul> <li>Work individually locally (in VS Code)</li> <li>Help each-other if getting stuck</li> <li>2-3 per group</li> </ul> Step 1: Start an EMPTY python virtual environment <ul> <li>Git pull!</li> <li>Go to the dir <code>learners/&lt;your-name&gt;</code> locally</li> <li>Check that you can run python from the commandline!</li> </ul> <pre><code>which python     # must point to the python belonging to the virtual environment\n</code></pre> Don't find it? <ul> <li>If not found, and you have installed Conda/miniconda, \"source activate Conda\"</li> </ul> <p>Examples, please try to find your solution from these or combination of these.</p> Mac/Linux and minicondaWindows and Anaconda <pre><code>source /Users/[username]/miniconda3/bin/activate base\n</code></pre> <pre><code>source C:/Users/[username]/AppData/Local/anaconda3/Scripts/activate base\n</code></pre> <p>Note that in Windows the activate source file is in the directory <code>Scripts</code> not the usual <code>bin</code> directory.</p> <ul> <li>Test <code>which python</code> again!</li> </ul> <ul> <li>Create a virtual environment, called <code>usertest</code></li> </ul> <pre><code>python -m venv usertest\n</code></pre> <ul> <li>This creates an empty virtual environment located in <code>usertest</code> directory</li> <li>Activate</li> </ul> Mac/LinuxWindows <pre><code>source usertest/bin/activate\n</code></pre> <pre><code>source usertest/Scripts/activate\n</code></pre> <ul> <li>Note the <code>(usertest)</code> in the beginning of the prompt! Could be together with the conda <code>(base)</code> environment as well.</li> <li>Check versions</li> </ul> <pre><code>which python     # must point to the python belonging to the virtual environment\npython -V        # note this version (same as you started the virtual environment from)\nwhich pip        # must point to the pip belonging to the virtual environment\n</code></pre> <ul> <li>Check it is empty with the command <code>pip list</code></li> <li>It should just show</li> </ul> <pre><code>Package    Version\n---------- -------\npip        23.2.1\nsetuptools 65.5.0\n</code></pre> <ul> <li>and some notes.</li> </ul> Step 2: Run the <code>analysis.py</code> script in <code>/src/example</code> and look for missing packages <ul> <li>Go to the <code>/src/example</code> directory where <code>analysis.py</code> is</li> <li>Run the program</li> </ul> <pre><code>python main.py\n</code></pre> <ul> <li>It may give you errors of missing packages</li> <li>Install it with</li> </ul> <pre><code>python3 -m pip install [package name]  # \n</code></pre> How do I install packages in virtual environments <ul> <li>Do NOT use <code>--user</code>, since it should be installed in the virtual environment only.</li> </ul> how to install <code>uppsalaweather</code> <pre><code>pip install -i https://test.pypi.org/simple/ uppsalaweather==0.9\n</code></pre> <p>(note the blank space before the package name!</p> <ul> <li> <p>Test run the program again</p> </li> <li> <p>If more packages are needed, errors will still show up</p> </li> <li> <p>Do pip installations until your program works!</p> </li> <li> <p>Otherwise continue to next step</p> </li> </ul> Step 3: Save your requirements as a file that user can run to get the needed dependencies <ul> <li>Check what is installed by:</li> </ul> <pre><code>pip freeze\n</code></pre> <ul> <li>You will probably recognise some of them, but some may be more obscure and were installed automatically as dependencies.</li> <li>Save your requirements as a file in your learners folder.</li> </ul> <pre><code>pip freeze &gt; /learners/[name]/requirements.txt\n</code></pre> <ul> <li> <p>Other users can then install the same packages with:</p> <pre><code>pip install --user -r requirements.txt\n</code></pre> </li> <li> <p>End the isolated environment</p> </li> </ul> <pre><code>deactivate\n</code></pre> <ul> <li>Push the changes</li> </ul> (Optional) Step 4: Test the requirements file in a new environment <ul> <li> <p>Double-check it works by:</p> </li> <li> <p>Create another virtual environment</p> </li> </ul> <pre><code>python -m venv usertest2\n</code></pre> <ul> <li>Activate</li> </ul> Mac/LinuxWindows <pre><code>source usertest2/bin/activate\n</code></pre> <pre><code>source usertest2/Scripts/activate\n</code></pre> <ul> <li>Note the <code>(usertest2)</code> in the beginning of the prompt!</li> </ul> <pre><code>pip install --user -r requirements.txt\n</code></pre> <ul> <li>Run the program!</li> </ul> <p>No errors should show up!</p> (Optional) Step 5: Add the folder to <code>.gitignore</code> <ul> <li>Add test directory to <code>.gitignore</code> file (root folder in repository)</li> </ul> Push changes <ul> <li>Git push!</li> <li>You should all have a requirements file in your folder</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#follow-up","title":"Follow up","text":"Requirements file enabling test packages to be found <pre><code>--index-url https://test.pypi.org/simple/\n--extra-index-url https://pypi.org/simple\n--pre\nuppsalaweather==0.9\n</code></pre> <ul> <li>possibly not all of the 3 upper lines are needed</li> </ul> (One person): Move a working requirements file to the <code>src/learners</code> folder <ul> <li>Move the requirements file to the <code>learners/source</code> folder</li> <li>This will be the \"official\" requirements file</li> <li>That person git commit and pushes to GitHub!</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#going-further-with-deployment","title":"Going further with deployment","text":"Python for scientific computing <p>Course advertisement</p> <ul> <li>Python for scientific computing</li> <li>Python packaging session.</li> </ul> Possibilities for other languages can be <ul> <li>C/C+<ul> <li>CMake</li> <li>Conda</li> </ul> </li> <li>Fortran<ul> <li>Fortran package manager</li> </ul> </li> <li> <p>Julia</p> <ul> <li>Pkg.jl</li> </ul> </li> <li> <p>More info</p> </li> <li>The tools</li> </ul> Compiled language, course <ul> <li>Build Systems Course</li> </ul> Containers <ul> <li> <p>Containers let you install programs without needing to think about the computer environment, like</p> <ul> <li>operative system</li> <li>dependencies (libraries and other programs) with correct versions</li> </ul> </li> </ul> <p></p> <p>From Nextlabs:</p> <p>Info</p> <ul> <li> <p>2(3) types</p> <ol> <li>Singularity/Apptainer perfect for HPC systems</li> <li> <p>Docker that does not work on HPC-systems</p> <ul> <li>But docker images can be used by Singularity and Apptainer</li> </ul> </li> </ol> </li> <li> <p>Everything is included</p> </li> <li> <p>Workflow:</p> <ul> <li>Download on Rackham or local computer</li> <li>Transfer to Bianca</li> <li>Move to from wharf to any place in your working folders on Bianca</li> </ul> </li> <li> <p>Draw-backs</p> <ul> <li>you install also things that may be already installed</li> <li>therefore, probably more disk space is needed</li> </ul> </li> </ul> <p>More info</p> <ul> <li>Singularity course</li> <li>Environments by CodeRefinery</li> <li>Containers in the extra material</li> </ul> Workflows <p>Learn more</p> <ul> <li>Workflow management by CodeRefinery</li> <li>Snakemake by CodeRefinery</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#quality-of-life","title":"Quality of life","text":"<ul> <li> <p>Run a python script without the <code>python</code> before in a linux environment!</p> </li> <li> <p>This line helps in the top of the main script:</p> </li> </ul> <pre><code>#!/bin/env python\n</code></pre> <ul> <li> <p>Then the python active in \"PATH\" will automatically be used</p> <ul> <li>especially important on a shared system where python is not in the typical <code>/usr/bin/python</code> path.</li> </ul> </li> <li> <p>Run from command line as:</p> </li> </ul> <pre><code>./pythonscript\n</code></pre> <p>See also</p> <ul> <li>Collection of (Academic) software repo links</li> <li>Awesome list of Research Software Registries</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#start-a-gitgithub-repo-from-personal-existing-project","title":"Start a Git/GitHub repo from personal existing project","text":"<ul> <li>Many projects/scripts start as something for personal use, but expands to be distributed.</li> <li>Let's start in that end and be prepared.</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#principle","title":"Principle","text":"<ul> <li>Initiate git project<ul> <li>Browse to right root directory (the folder containing all the project-related files)</li> </ul> </li> <li>Stage and commit</li> <li>upload to github</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#optional-exercise-2-10-15-minutes","title":"(Optional) Exercise 2: 10-15 minutes","text":"<ul> <li>Let's say you have some code you have started to work with</li> </ul> <p>Tip</p> <ul> <li>Work individually locally (in VS Code or terminal)</li> <li>Help each-other if getting stuck</li> <li>Start with 1A OR 1B<ul> <li>1a goes to Breakout room 1</li> <li>1b goes to Breakout room 2</li> </ul> </li> </ul> Exercise 1A: Identify existing project <ul> <li>Just use an existing programming project you already have</li> <li>Browse to right root directory (the folder containing all the project-related files)</li> </ul> Exercise 1B: Make a code base for a new test project <ul> <li>Make a <code>test_project</code> directory in a good place (like a local <code>Programming formalisms</code> course folder)</li> </ul> In VS Code? <ul> <li>Make a new window</li> <li> <p>Open Folder</p> <p></p> </li> <li> <p>Create new Folder with name <code>test_project</code></p> </li> <li>Select folder</li> <li>Create and save a file <code>hello.py</code> with the following code base and the in-code documentation answering the question \"why\".</li> </ul> <pre><code># We just want some output from a simple program\nprint('Hello world!')\n</code></pre> Exercise 2: Initiate the project VS CODE <p></p> <ul> <li> <p>RECOMMENDED Publish to GitHub diectly and you are done!</p> <ul> <li>You may change the name of the repo for the GitHub instance, but not recommended.</li> <li>Include the file(s) (in this case the hello.py file) in the repo!</li> <li>Double check it was created on GitHub!<ul> <li>It should show up under repos in your user space</li> </ul> </li> </ul> </li> <li> <p>ALTERNATIVE: Initialize and then continue with step 3.</p> </li> </ul> Terminal <ul> <li>Be in a terminal and go to the <code>project</code> folder, which will be the project repository (repo)</li> <li>run <code>git init</code></li> <li> <p>make sure that there is a <code>.git</code> directory created</p> <ul> <li>you have to show hidden files, in bash terminal with <code>ls -a</code></li> </ul> </li> <li> <p>Now you have a git repo called <code>test_project</code></p> </li> <li>Check with the command: <code>git status</code><ul> <li>It is always a safe command to run and in general a good idea to do when you are trying to figure out what to do next.</li> </ul> </li> </ul> (If needed) Exercise 3: Add and commit the content <ul> <li>So far, there is no content. We have to manually add the content to the repo.</li> <li>Add and Commit your changes</li> </ul> VS Code <p>We do this all the time! :)</p> Terminal <pre><code>git add\ngit commit -m 'first commit'\n</code></pre> (If needed) Exercise 4: Upload to GitHub In VS Code <ul> <li>There is an opportunity to directly publish on GitHub</li> </ul> From GitHub <ul> <li>Make sure that you are logged into GitHub.</li> <li>You can use this for both VS Code and terminal</li> </ul> <p></p> <ul> <li> <p>To create a repository we either click the green button \"New\" (top right corner).</p> </li> <li> <p>Or if you see your profile page, there is a \"+\" menu (top right corner).</p> </li> </ul> <p></p> <ul> <li> <p>On this page choose a project name, e.g. <code>test_project</code> or a project name suiting your existing project.</p> </li> <li> <p>NOTE It is not necessary to have the same name but it makes things easier to know what is what when syncing between GitHub and git.</p> </li> <li> <p>For the sake of this exercise do NOT select \"Initialize this repository with a README\"</p> </li> <li>and NO Licence</li> </ul> <p></p> <p>Example project</p> <ul> <li>Press \"Create repository\"</li> </ul> <p></p> <ul> <li>Choose html</li> <li>Copy-paste the code for \"\u2026or push an existing repository from the command line\"</li> <li>Go to local git terminal and go to the git project you started above</li> <li> <p>Paste the code</p> </li> <li> <p>Did it work??</p> </li> <li>Reload the GitHub page and see the files present locally is also present there.</li> </ul> <p>Done!</p>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#what-we-did","title":"What we did","text":"Workflow <pre><code>graph TB\n\nP[\"Project idea\"] --&gt;|git init| Node2\nP[\"Project idea\"] --&gt; hello.py --&gt;|git add| Node4\nNode4 --&gt; |git commit| Node1\nNode2 --&gt; |git push| Node5\n\n%% C[Uncommited changed hello.py] --&gt;|commit button| R\nR &lt;--&gt; Node5\n       subgraph \"Local Git\"\n        Node2[project]\n        Node1[hello.py]\n        Node1 &lt;--&gt; Node2\n\n        end\n\n        subgraph \"staging area\"\n        Node4[hello.py]\n        end\n\n        subgraph \"GitHub\"\n        Node5[project]\n        R[hello.py]\n        end\n</code></pre> <p>About releases</p> <p>About releases on GitHub</p>","tags":["deployment","deploy","code"]},{"location":"deployment/deploy/#summary","title":"Summary","text":"<p>Key points</p> <p>Make sure it works for others or yourself in the future!</p> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>GitHub as remote backup</li> <li>inititalize from existing project</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2610 Sharing<ul> <li>\u2611 open science</li> <li>\u2610 citation</li> <li>\u2610 licensing</li> <li>\u2611 deploying</li> </ul> </li> <li>\u2610 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2610 finish documentation</li> </ul> </li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/documentation/","title":"Ending documentation","text":"<p>Questions</p> <ul> <li>How can the user understand how to run your program and what it does?</li> </ul> Learning outcomes of 'Documentation' <p>learners</p> <ul> <li>know the most important sections for a full public README</li> <li>can make a installation instruction</li> <li>can make citation info</li> <li>know how to find instruction of going to more sophisticated documentation</li> </ul> Content <ul> <li> <p>content of README</p> <ul> <li>installation</li> <li>get started</li> <li>test</li> <li>citation</li> </ul> </li> <li> <p>Revisit licence</p> </li> <li> <p>View other possibilities</p> <ul> <li>Wiki</li> <li>GitHub pages/ReadTheDocs</li> <li>MkDocs/sphinx</li> </ul> </li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#revisiting-documentation","title":"Revisiting documentation","text":"<p>Documentation comes in different forms</p> <ul> <li>Tutorials: learning-oriented, allows the newcomer to get started</li> <li>How-to guides: goal-oriented, shows how to solve a specific problem</li> <li>Explanation: understanding-oriented, explains a concept</li> <li>Reference: information-oriented, describes the machinery</li> <li>In-code documentaion \u2014 docstrings</li> </ul> <p>Not to forget</p> <ul> <li>Project documentation:<ul> <li>requirements: what is the goal of the software, risks, platforms</li> <li>the analysis: pseudocode and UML</li> <li>risk analysis</li> </ul> </li> </ul> <p>There is no one size fits all: often for small projects a <code>README.md</code> can be enough (more about md format later).</p>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#where-are-we","title":"Where are we?","text":"<p>DONE</p> <ul> <li>\u2611 In-code documentation</li> <li>\u2611 Project documentation:<ul> <li>requirements: what is the goal of the software, risks, platforms</li> <li>the analysis: pseudocode and UML</li> <li>risk analysis</li> </ul> </li> </ul> <p>Finalize today</p> <ul> <li>\u2610 README<ul> <li>\u2610 Installation instruction</li> <li>\u2610 Tutorial: get started</li> <li>\u2610 Citation</li> </ul> </li> </ul> <p>Further documentation for future projects</p> <ul> <li>\u2610 License</li> <li>\u2610 Tutorials: learning-oriented, allows the newcomer to get started</li> <li>\u2610 How-to guides: goal-oriented, shows how to solve a specific problem</li> <li>\u2610 Explanation: understanding-oriented, explains a concept</li> <li>\u2610 Reference: information-oriented, describes the machinery</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#markdown","title":"Markdown","text":"<ul> <li>One of the most popular lightweight markup languages.</li> <li>File extension <code>.md</code> makes it render directly in GitHub!</li> </ul> How does it look like? <pre><code># This is a section heading in Markdown\n\n## This is a subsection header\n\nNothing special needed for a normal paragraph.\n\n    This is a code block\n\n\n**Bold** and *emphasized*.\n\nA list:\n\n- this is an item\n- another item\n\nA numbered list:\n\n1. this is an item\n1. items are numbered automatically\n\nThere is more:\n![images](link to file),\n[links](URL),\nA|B|C\n-|-|-\n1|x|y\n2|m|n\n</code></pre> Read more <p>reStructuredText and Markdown</p>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#the-readme","title":"The README","text":"","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#example-content","title":"Example content","text":"<ul> <li>About</li> <li>Installation (with dependencies and testing)</li> <li>Get started</li> <li>Use cases</li> <li>Citation</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#about","title":"About","text":"<ul> <li>About the software</li> <li>What does it do?</li> <li>One (Punch-)line describing what it does.<ul> <li>Also in GitHub in upper right corner!</li> </ul> </li> <li>More information below below the first description</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#installation-section","title":"Installation section","text":"<p>Let's take a look at different READMEs</p> <ul> <li>Also interesting: Is there any test that makes sure it is correctly installed?</li> </ul> <p>Example</p> <ul> <li>R: https://github.com/KamilSJaron/smudgeplot/tree/v0.3.0?tab=readme-ov-file#install-the-whole-thing</li> <li>Conda: https://github.com/biobakery/MetaPhlAn</li> <li>pip: https://github.com/deeptools/HiCExplorer</li> <li>pip: https://github.com/caleblareau/mgatk?tab=readme-ov-file</li> <li>binaries/executable: https://github.com/dougspeed/LDAK?tab=readme-ov-file#how-to-obtain-ldak</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#get-started","title":"Get started","text":"<ul> <li>This session can be \"running some test data\" to get an overview of what the program can perform.</li> <li>It may describe how to get test data</li> <li>Example: https://github.com/KamilSJaron/smudgeplot/tree/v0.3.0?tab=readme-ov-file#runing-this-version-on-sacharomyces-data</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#use-cases","title":"Use cases","text":"<ul> <li> <p>This may sometimes be merged with the previous section</p> </li> <li> <p>How-to guide: goal-oriented, shows how to solve a specific problem</p> </li> <li>May be a sub-set of the most important commands, depending on how wide the program is.</li> <li>Example: https://github.com/KamilSJaron/smudgeplot/tree/v0.3.0?tab=readme-ov-file#runing-this-version-on-sacharomyces-data</li> </ul> would it be needed for your project?","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#contributions","title":"Contributions","text":"<ul> <li>How to contribute?</li> <li>Example: https://github.com/KamilSJaron/smudgeplot/tree/v0.3.0?tab=readme-ov-file#runing-this-version-on-sacharomyces-data</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#licensing","title":"Licensing","text":"<ul> <li>We use GPL-3 in the project</li> </ul> <p>Strong copyleft share-alike (GPL, AGPL) Derivative work is free software and derivative work extends to the combined project If the licenses of components are strong copyleft, one must use the same license</p> <ul> <li> <p>We can click on the license and a image will also show up!</p> <ul> <li>LICENSE</li> </ul> How does that look like? <p></p> </li> </ul> <p>See also</p> <p>Extra material about licensing</p>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Add references that inspired or added algorithms to your code</li> <li>Example: https://github.com/KamilSJaron/smudgeplot/tree/v0.3.0?tab=readme-ov-file#acknowledgements</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#referencescitation","title":"References/Citation","text":"<ul> <li>Think the same as for a scientific paper</li> </ul> Practical recommendations <ul> <li>Get a DOI using Zenodo or similar services.</li> <li>Open source license can't demand citation, but it is required by science ethics anyway.</li> <li>Make it as easy as possible! Clearly say what you want cited.</li> <li>Make it easy for scripts and tools, use the Citation File Format.</li> <li>GitHub now supports CITATION.cff files</li> </ul> Example with NextFlow <pre><code>nextflow -version\n\n  N E X T F L O W\n  version 24.10.2 build 5932\n  created 27-11-2024 21:23 UTC (22:23 CEST)\n  cite doi:10.1038/nbt.3820\n  http://nextflow.io\n</code></pre> Recommended format for software citation <ul> <li>Creator</li> <li>Title</li> <li>Publication venue</li> <li>Date</li> <li>Identifier</li> <li>Version</li> <li>Type</li> </ul> <p>Katz, Chue Hong, Clark, 2021:</p> This is an example of a simple <code>CITATION.cff</code> file <pre><code>cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: Druskat\n    given-names: Stephan\n    orcid: https://orcid.org/0000-0003-4925-7248\ntitle: \"My Research Software\"\nversion: 2.0.4\ndoi: 10.5281/zenodo.1234\ndate-released: 2021-08-11\n</code></pre> <p>DOI and Zenodo</p> <ul> <li>Digital object identifiers (DOI) are the backbone of the academic reference and metrics system.</li> <li>CodeRefinery has an exercise to see how to make a GitHub repository   citable by archiving it on the Zenodo archiving service.   If you are interested,   have a look   at this Coderefinery webpage</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#full-examples","title":"Full examples","text":"<p>Examples of README files</p> <ul> <li>R: https://github.com/KamilSJaron/smudgeplot/tree/v0.3.0?tab=readme-ov-file#install-the-whole-thing</li> <li>Conda: https://github.com/biobakery/MetaPhlAn</li> <li>pip: https://github.com/deeptools/HiCExplorer</li> <li>pip: https://github.com/caleblareau/mgatk?tab=readme-ov-file</li> <li>binaries/executable: https://github.com/dougspeed/LDAK?tab=readme-ov-file#how-to-obtain-ldak</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#exercises","title":"Exercises","text":"","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#exercises-30-40-min","title":"Exercises 30-40 min","text":"<ul> <li>We already have a file called <code>README.md</code> in <code>/learners</code> folder, that is used for information for the course participants.</li> <li>Let's work with a README file for potential users. We can call it <code>README-EXT.md</code></li> <li>(External) users should be able to install and use the the complete tool, including dependencies</li> </ul> <p>Intro</p> <ul> <li>Repo work<ul> <li>Work on GitHub!</li> <li>When modifying repo, use a group specific branch</li> <li>When done, merge/pull request</li> </ul> </li> <li>In the end we do code review together of the merging conflicts</li> </ul> Markdown Cheat-Sheet <pre><code># This is a section heading in Markdown\n\n## This is a subsection header\n\nNothing special needed for a normal paragraph.\n\n    This is a code block\n\n**Bold** and *emphasized*.\n\nA list:\n- this is an item\n- another item\n\nThere is more:\n![images](link to file),\n[links](URL),\n\nA|B|C\n-|-|-\n1|x|y\n2|m|n\n</code></pre>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#first-steps-for-all","title":"First steps for ALL","text":"<ul> <li>Work together in group of 2-3</li> <li>1 person types directly in GitHub</li> <li>Do <code>git push</code> first from local command-line, everyone!</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#group-1-make-installation-instruction-in-groups","title":"Group 1: Make 'installation instruction' in groups","text":"Hints FIX <ul> <li>The main program <code>main.py</code> is in the repo.</li> <li><code>weather</code> is a python package needed by <code>main.py</code></li> <li>available here: https://test.pypi.org/project/weather/1.0.1/</li> </ul> Make 'installation instruction' <ul> <li>Create branch <code>installation</code></li> <li>Open the file <code>learners/README-EXT.md</code></li> <li>Be inspired by the examples above</li> <li>Include the sections \"Dependencies\" and \"Installing\"</li> <li>When done, make pull request to main</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#group-2-formulate-an-about-section","title":"Group 2 Formulate an 'About' section","text":"Make 'About' and 'Getting started' <ul> <li>Create branch <code>about</code></li> <li> <p>Open the file <code>learners/README-EXT.md</code></p> </li> <li> <p>Be inspired by the examples above</p> </li> <li>Include the section \"About\" which should give some background of what the program does and how to run it.</li> <li> <p>Include the section 'Getting started'</p> </li> <li> <p>When done, make pull request to main</p> </li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#group-3-formulate-sharing-sections","title":"Group 3: Formulate \"Sharing sections\"","text":"Make sections about 'Citation', 'License' and 'Authors' <ul> <li>Create branch <code>sharing</code></li> <li>Work with a CITATION(.cff) file</li> </ul> How? <p>Easier</p> <p>Create a learners/CITATION file (no file extension) with most of the following lines</p> <ul> <li>Creator</li> <li>Title</li> <li>Publication venue</li> <li>Date</li> <li>Identifier</li> <li>Version</li> <li>Type</li> </ul> <p>Harder</p> <ul> <li>open the file <code>learners/CITATION.cff</code> file</li> <li>Fill it in</li> </ul> How can it look like? <p>```yaml cff-version: 1.2.0 message: \"If you use this software, please cite it as below.\" authors:   - family-names: Druskat     given-names: Stephan     orcid: https://orcid.org/0000-0003-4925-7248 title: \"My Research Software\" version: 2.0.4 doi: 10.5281/zenodo.1234 date-released: 2021-08-11</p> <ul> <li>Open the file <code>learners/README-EXT.md</code></li> <li>Be inspired by the examples above</li> <li> <p>Include the sections</p> <ul> <li>'Citation', link to the CITATION(.cff) file</li> <li>'License' link to the license<ul> <li>try relative or absolute path!</li> </ul> </li> <li>'Authors', List of the involved learners</li> <li>'Acknowledgements'<ul> <li>Add references that inspired or added algorithms to your code</li> <li>Example</li> </ul> </li> </ul> </li> <li> <p>When done, make pull request to main</p> </li> </ul> Example solution from last course <p>programming_formalisms_project_autumn_2024</p>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#discussion-of-the-readme-file","title":"Discussion of the README file","text":"Discussion: Describe what you've done and why? <ul> <li>We go through the README!</li> <li>Teacher makes Code review if needed</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#going-further-with-documentation","title":"Going further with documentation","text":"","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#wikis","title":"Wikis","text":"<ul> <li>Popular solutions (but many others exist):<ul> <li>MediaWiki</li> <li>Dokuwiki</li> <li>These typically needs to be hosted and maintained</li> </ul> </li> <li>Also on GitHub!<ul> <li>About wikis</li> <li>Adding or editing wiki pages</li> <li>Example with WRF weather model</li> </ul> </li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#html-static-site-generators","title":"HTML static site generators","text":"<p>There are many tools that can turn RST or Markdown into beautiful HTML pages:</p> <ul> <li>Jekyll<ul> <li>Generates HTML from Markdown.</li> <li>GitHub supports this without adding extra build steps.</li> </ul> </li> <li>Sphinx<ul> <li>Generate HTML/PDF/LaTeX from RST and Markdown.</li> <li>Read the docs style</li> <li>HICexplorer documentation</li> </ul> </li> <li>MkDocs \u2190 this is how this lesson material is built<ul> <li>Generates HTML from Markdown.</li> <li>Example: Programming formalisms course</li> </ul> </li> </ul> <p>There are many more ...</p> Do you like one style more? <ul> <li>Read the docs style 1</li> <li>Read the docs style 2</li> <li>MkDocs materials style</li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#deployment-on-servers","title":"Deployment on servers","text":"<p>GitHub, GitLab, and Bitbucket make it possible to serve HTML pages:</p> <ul> <li>GitHub Pages (GH-pages) \u2190 this is what we and many others use for course and tutorial material<ul> <li>Easy to set up. Part of GitHub Actions and CI</li> </ul> </li> <li>Bitbucket Pages</li> <li>GitLab Pages</li> <li>Read the docs \u2190 this is what NBIS uses for some course material<ul> <li>hosts public Sphinx documentation for free!</li> <li>Somewhat more possibilities, like having several versions of documentation to switch between. Good for different version releases of a software</li> <li>Example: NBIS Introduction to Git</li> </ul> </li> </ul>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#summary","title":"Summary","text":"<p>Key points</p> <p>Make sure it works for others or yourself in the future!</p>","tags":["documentation","doc","end","ending"]},{"location":"deployment/documentation/#we-are-done","title":"We are done","text":"<p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>Branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2611 citation</li> <li>\u2611 licensing</li> <li>\u2611 deploying</li> </ul> </li> <li>\u2611 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2611 finish documentation</li> </ul> </li> </ul> <p>See also</p> <p>Documentation by CodeRefinery</p>","tags":["documentation","doc","end","ending"]},{"location":"deployment/img/","title":"Some images","text":""},{"location":"deployment/spring2024/deploy/","title":"Deploy your code","text":"<p>Questions</p> <ul> <li>How to make your program work for others?</li> </ul> <p>Content</p> <ul> <li>We will prepare for use of your code</li> <li>But also...<ul> <li>some theory of packages</li> <li>some theory of workflows</li> <li>some theory of containers</li> <li>get some hands on</li> </ul> </li> </ul> <p>Learning outcomes of 'Deployment'</p> <ul> <li>learners can mentalize the installation needs from the users perspective</li> <li>learners can evaluate different available tools for reproducibility and installations</li> <li>learners can prepare for different users: local computer, Cluster</li> </ul> Instructor notes <p>Prerequisites are:</p> <ul> <li>...</li> </ul> <p>Lesson Plan: FIX</p> <ul> <li>Total 30 min</li> <li>Theory 20</li> <li>Discussions 10 min</li> </ul> TOC <ul> <li>Overview<ul> <li>Recording dependencies</li> <li>workflows</li> <li>containers</li> </ul> </li> <li>Make a package</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#introduction","title":"Introduction","text":"<ul> <li>It's about Distribution!</li> </ul> <p>Note</p> <ul> <li>Many projects/scripts start as something for personal use, but expands to be distributed.</li> <li>Let's start in that end and be prepared.</li> <li>The following steps can be very valuable for you in a couple of months as well as you revisit your code and don't know what it does or why you did this and that.</li> </ul> <p>Attention</p> <ul> <li>Make your program or workflow work for others and yourself in the future.</li> <li>Let people understand how to use your program/tool</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#to-make-sure","title":"To make sure","text":"<ul> <li>Start with empty environment<ul> <li>good to do this from beginning</li> </ul> </li> <li>Nowadays platforms are less important, still \"system files\" may be differ among OS platforms and Linux distributions<ul> <li>will your program require specific \"system files\"</li> <li>are these typically not installed already?</li> <li>in the best world test on Windows/Mac and Linux platforms<ul> <li>and with as empty as possible environment</li> </ul> </li> </ul> </li> <li>What about  Shared services like a cluster where users and most staff do not have writing privileges ('sudo' rights) for system installations?</li> </ul> <p>Discussion: Where do you run your program?</p> <ul> <li>From a terminal?</li> <li>On different computers?</li> <li>On a cluster?</li> </ul> <p>Discussion: One-time usage towards distributed package</p> <ul> <li>Have others used your code?</li> <li>Did you plan it from beginning?</li> <li>Did you take actions somehow?</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#recording-dependencies","title":"Recording dependencies","text":"<ul> <li>Reproducibility: We can control our code but how can we control dependencies?</li> <li>10-year challenge: Try to build/run your own code that you have created 10 (or less) years ago. Will your code from today work in 5 years if you don\u2019t change it?</li> <li>Dependency hell: Different codes on the same environment can have conflicting dependencies.</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#conda-anaconda-pip-virtualenv-pipenv-pyenv-poetry-requirementstxt","title":"Conda, Anaconda, pip, Virtualenv, Pipenv, pyenv, Poetry, requirements.txt \u2026","text":"<p>These Python-related tools try to solve the following problems:</p> <ul> <li>Defining a specific set of dependencies, possibly with well-defined versions</li> <li>Installing those dependencies mostly automatically</li> <li>Recording the versions for all dependencies</li> <li>Isolated environments<ul> <li>On your computer for projects so they can use different software.</li> <li>Isolate environments on computers with many users (and allow self-installations)</li> <li>Using different Python/R versions per project??</li> <li>Provide tools and services to share packages</li> </ul> </li> </ul> <p>Python packaging.</p> <ul> <li> <p>Make Python packages of your code.</p> </li> <li> <p>Possibilities for other languages can be</p> <ul> <li>C/C+<ul> <li>CMake</li> <li>Conda</li> </ul> </li> <li>Fortran<ul> <li>Fortran package manager</li> </ul> </li> <li>Julia<ul> <li>Pkg.jl</li> </ul> </li> </ul> </li> <li> <p>More info</p> </li> <li> <p>The tools</p> </li> </ul> <p>Course advertisement Python for scientific computing</p>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#containers","title":"Containers","text":"<p>Popular container implementations:</p> <ul> <li>Docker</li> <li>Singularity (popular on high-performance computing systems)</li> <li>Apptainer (popular on high-performance computing systems, fork of Singularity)</li> <li>Docker images can be converted to Singularity/Apptainer images</li> <li> <p>Singularity Python can convert Docker files to Singularity definition files</p> </li> <li> <p>Environments by CodeRefinery</p> </li> <li>Containers in the extra material</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#workflows","title":"Workflows","text":"<p>See also</p> <p>Learn more Workflow management by CodeRefinery Snakemake by CodeRefinery</p>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#misc","title":"Misc","text":"<ul> <li>Make a file executable by its own</li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#example-python","title":"Example Python","text":"<ul> <li>make a header so that user can decide which python to use</li> <li>especially important on a shared system where python is not in the typical /usr/bin/python path.</li> <li>This line helps in the top of the main script:</li> </ul> <pre><code>#!/bin/env python\n</code></pre>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#record-our-environment-for-other-users","title":"Record our environment for other users","text":"","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#principle-using-python-pip-in-a-virtual-environment","title":"Principle using python pip in a virtual environment","text":"<ul> <li>We can make other users aware of the dependencies for our Python project.</li> <li>One can state those specifically as a list in a README</li> <li>Or, we can make a ready file (in python)</li> </ul> <p>Save your requirements as a file</p> <ul> <li>You may have developed your Python program with your existing python modules environment. You may have installed some new packages during the development but did not track it in a good way.</li> <li>We need to identify what python packages a user (or you on another computer) will need, to make the program work!<ul> <li>There are many packages distributed in the \"base\" installation of Python so it is not just to look at the import lines in the code.</li> <li>You may also be hard to get an overview because you have too many import lines, also distributed among files if you worked in a modular way</li> </ul> </li> <li> <p>So here are some steps:</p> </li> <li> <p>Start a python virtual environment.</p> <ul> <li>you can do this outside the git repo to not pollute it</li> </ul> </li> </ul> <pre><code>python -m venv PATH/Example\n</code></pre> <ul> <li>This creates an empty virtual environment located in PATH/Example directory</li> <li>Activate</li> </ul> <pre><code>source PATH/Example/bin/activate\n</code></pre> <ul> <li>In Windows you may have to instead do:</li> </ul> <pre><code>source PATH/Example/Scripts/activate\n</code></pre> <ul> <li>Note the (Example) in the beginning of the prompt!</li> <li>Do note the python version and you may inform users that you know that this version is known to work!</li> </ul> <pre><code>which python        #should point to the python belonging to the virtual environment\npython -V            # note this version\n</code></pre> <ul> <li>You can switch to the directory where you have your code and test to run it</li> <li>It will give you errors of missing packages</li> <li>Install them with <code>pip install &lt;package name&gt;</code>. No need to use \u00b4\u00b4--user``, since it will be installed in the virtual environment only.</li> <li>Do this until your program works</li> <li>Check what is installed by:</li> </ul> <pre><code>pip freeze        #pip list works as well\n</code></pre> <ul> <li> <p>You will probably recognise some of them, but some may be more obscure and were installed automatically as dependencies.</p> </li> <li> <p>Save your requirements as a file that user can run to get the same dependencies as you</p> </li> </ul> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <ul> <li>Other users can then install the same packages with:</li> </ul> <pre><code>pip install -user -r requirements.txt\n</code></pre> <ul> <li>Continue</li> </ul> <pre><code>deactivate # deactivate the venv!\n</code></pre>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#demo-with-planet","title":"Demo with planet","text":"<pre><code>git switch -c venv\npython -m venv venv\nvenv/Scripts/activate\npip freeze  #should be empty\nls\ncd code\nls\npython planet_main.py\n    import numpy as np\n    ModuleNotFoundError: No module named 'numpy'\n\npip install numpy\npython planet_main.py\n    ModuleNotFoundError: No module named 'matplotlib'\npip install matplotlib\npip freeze\npip freeze &gt; requirements.txt\ngit add requirements.txt\ngit commit -m \"add requirements.txt\"\ngit push\ngit switch main\ngit merge venv\ngit push\n</code></pre>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#exercise-with-project","title":"Exercise with project","text":"Discuss: what format is suitable for our course project? Discuss: what are the steps need to make the program complete?","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/deploy/#ignoring-files-and-paths-with-gitignore","title":"Ignoring files and paths with .gitignore","text":"<p>Compiled and generated files are not committed to version control. There are many reasons for this:</p> <ul> <li>Your code could be run on different platforms.</li> <li>These files are automatically generated and thus do not contribute in any meaningful way.</li> <li>The number of changes to track per source code change can increase quickly.</li> <li>When tracking generated files you could see differences in the code although you haven't touched the code.</li> </ul> <p>For this we use <code>.gitignore</code> files.</p> <ul> <li>Read more https://uppmax.github.io/programming_formalisms_intro/git_deeper.html</li> </ul> <p>From our project repo</p> <p>programming_formalisms_project_summer_2024/blob/main/.gitignore&gt;</p> <p>Key points</p> <p>Make sure it works for other or you in the future!</p> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2610 Sharing<ul> <li>\u2611 open science</li> <li>\u2610 citation</li> <li>\u2611 licensing</li> <li>\u2611 deploying</li> </ul> </li> <li>\u2610 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2610 finish documentation</li> </ul> </li> </ul>","tags":["deployment","deploy","code"]},{"location":"deployment/spring2024/documentation/","title":"Ending documentation","text":"<p>Questions</p> <ul> <li>How can the user understand how to run your program and what it does?</li> </ul> <p>Content</p> <ul> <li>We will prepare for use of your code</li> <li>Update the README</li> <li>Update a Doc Index</li> <li>Revisit licence</li> <li>But also...<ul> <li>some theory of packages</li> <li>some theory of workflows</li> <li>some theory of containers</li> <li>some info about Tutorials/Reference/HowTo guides</li> </ul> </li> </ul> Learning outcomes of 'Documentation' <ul> <li>learners can finalize the documentation of the project</li> </ul> <p>Instructor notes</p> <p>Prerequisites are:</p> <ul> <li>...</li> </ul> <p>Lesson Plan: FIX</p> <ul> <li>Total 30 min</li> <li>Theory 20</li> <li>Discussions 10 min</li> </ul> <p>TOC</p> <ul> <li>In-code documentation review</li> <li>Documentation<ul> <li>tutorials/howto/reference</li> <li>project doc</li> <li>html site generators</li> <li>deployment on servers</li> </ul> </li> <li>Hands-on<ul> <li>update README</li> <li>installation procedure</li> <li>update license</li> <li>update citation</li> <li>update index</li> </ul> </li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#readme-example","title":"README example","text":"<pre><code># Planets\n## About\n\nThis program ...\n\n## Installation\n\n- This tool has been successfully tested in python-3.11.5\n\n- Clone this repository\n\n    git clone ...\n\n- Install dependencies (``numpy`` and ``matplotlib``)\n\n\n    pip install --user -r requirements\n\n- run from code directory\n\n    ./planet_main.py\n</code></pre>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#licensing","title":"Licensing","text":"","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#copyright","title":"Copyright","text":"<ul> <li>Protects creative expression</li> <li>Automatically created</li> <li>Derivative works usually inherit copyright of the thing derived</li> <li>Time frame: essentially forever (lifetime + X years)</li> </ul> <p>When can you use?</p> <ul> <li>When there is a license saying you can</li> <li>Limited other cases (private use, fair use: context dependent)</li> <li>In practice: people do many things, but then can't share their output if license does not allow it or is not clarified</li> </ul> <p>A little more about licensing</p> <ul> <li> <p>Copyleft is the legal technique of granting certain freedoms over copies of copyrighted works with the requirement that the same rights be preserved in derivative works.</p> </li> <li> <p>Custom/closed/proprietary</p> <ul> <li>Derivative work typically not possible</li> <li>Unusual in academics</li> </ul> </li> <li>Permissive (MIT, BSD, Apache)</li> <li>Derivative work does not have to be shared</li> <li>Weak copyleft share-alike (LGPL, MPL)</li> <li>Derivative work is free software but is limited to the component</li> <li>Strong copyleft share-alike (GPL, AGPL)</li> <li>Derivative work is free software and derivative work extends to the combined project</li> </ul> <p>Read more</p>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#software-citation","title":"Software Citation","text":"<ul> <li>Think the same as for a scientific paper</li> <li> <p>Software citation</p> </li> <li> <p>Citation bullets</p> <ul> <li>Creator</li> <li>Title</li> <li>Publication venue</li> <li>Date</li> <li>Version</li> <li>Type</li> </ul> </li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#in-code-documentation","title":"In-code documentation","text":"<ul> <li>Comments, function docstrings, ...</li> <li>Advantages<ul> <li>Good for programmers</li> <li>Version controlled alongside code</li> <li>Can be used to auto-generate documentation for functions/classes</li> </ul> </li> <li>Disadvantage<ul> <li>Probably not enough for users</li> </ul> </li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#documentation-outside-code","title":"Documentation outside code","text":"<ul> <li>Documentation comes in different forms - what is documentation?<ul> <li>Tutorials: learning-oriented, allows the newcomer to get started</li> <li>How-to guides: goal-oriented, shows how to solve a specific problem</li> <li>Explanation: understanding-oriented, explains a concept</li> <li>Reference: information-oriented, describes the machinery</li> </ul> </li> <li>Not to forget<ul> <li>Project documentation:<ul> <li>requirements: what is the goal of the software, risks, platforms</li> <li>the analysis/design: pseudocode and UML</li> <li>risk analysis</li> </ul> </li> </ul> </li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#html-static-site-generators","title":"HTML static site generators","text":"<p>There are many tools that can turn RST or Markdown into beautiful HTML pages:</p> <ul> <li>Sphinx<ul> <li>Generate HTML/PDF/LaTeX from RST and Markdown.</li> <li>Read the docs style</li> <li>Earlier Intro day for this course</li> </ul> </li> <li>Jekyll<ul> <li>Generates HTML from Markdown.</li> <li>GitHub supports this without adding extra build steps.</li> </ul> </li> <li>MkDocs \u2190 we will exercise this, this is how this lesson material is built<ul> <li>Generates HTML from Markdown.</li> <li>Example: Programming formalisms course</li> </ul> </li> </ul> <p>There are many more ...</p>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#deployment-on-servers","title":"Deployment on servers","text":"<p>GitHub, GitLab, and Bitbucket make it possible to serve HTML pages:</p> <ul> <li>GitHub Pages (GH-pages) \u2190 this is what we and many others use for course and tutorial material</li> <li>Bitbucket Pages</li> <li>GitLab Pages</li> <li>Read the docs \u2190 this is what NBIS uses for some course material<ul> <li>hosts public Sphinx documentation for free!</li> <li>Example: NBIS Introduction to Git</li> </ul> </li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#github-pages","title":"GitHub pages","text":"<ul> <li>Easiest. Everything is local to GitHub</li> <li>This lesson material</li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#read-the-docs","title":"Read the Docs","text":"<ul> <li>Somewhat more possibilities, like having several versions of documentation to switch between.</li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#wikis","title":"Wikis","text":"<ul> <li> <p>Popular solutions (but many others exist):</p> <ul> <li>MediaWiki</li> <li>Dokuwiki</li> <li>Also on GitHub!</li> <li>Typically needs to be hosted and maintained</li> </ul> </li> <li> <p>Example with WRF weather model</p> </li> </ul> <p>See also</p> <p>Documentation by CodeRefinery</p>","tags":["end","ending","doc","documentation"]},{"location":"deployment/spring2024/documentation/#optional-last-hands-on-your-documentation","title":"(Optional) Last hands on your documentation","text":"<ul> <li>Some inspiration Beagle</li> </ul> <p>Git/GitHub Repo </p> <ul> <li>README.md<ul> <li>with citation info</li> </ul> </li> <li>License</li> <li>Figures<ul> <li>figure outputs</li> </ul> </li> <li>Src<ul> <li>License (here or in the 1st level)</li> <li>Requirements.txt</li> <li>python files</li> </ul> </li> <li>Doc<ul> <li>index</li> <li>planning documents</li> </ul> </li> </ul> (Optional) Update your documentation <ul> <li>You can now work in GitHub directly</li> <li>Do <code>git push</code> first from local command-line!</li> <li>Revisit your README and update it with info after all our commits<ul> <li>About</li> <li>Installation</li> </ul> </li> <li>Users should be able to install the required python packages with:     <code>pip install -r requirements.txt</code> (depending on system <code>--user</code> may be added)</li> <li>Citing</li> <li>License</li> <li>Lastly, you may, if time allows, update the doc/index.md file that should describe the content</li> <li>Do a <code>git pull</code> to have the same version of your project repo locally!</li> </ul> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>Branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2611 citation</li> <li>\u2611 licensing</li> <li>\u2611 deploying</li> </ul> </li> <li>\u2611 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2611 finish documentation</li> </ul> </li> </ul>","tags":["end","ending","doc","documentation"]},{"location":"design_develop/OO_development/","title":"Object Oriented development","text":"<p>The most important thing for your Design and Analysis Documents</p> <p>A Design document or Requirements document must be kept up to date with your code, If you during coding realize that you need another class or feature these should be added to the documentation do not be afraid to refactor your designs.</p> <p>Learning outcomes</p> <ul> <li>Understand the benefits of object-oriented development, including smaller semantic gaps for improved understanding and easier modification of models.</li> <li>Learn the definition and characteristics of an object, including its ability to save state and perform operations.</li> <li>Comprehend the principles of object-oriented development, such as information hiding, encapsulation, and message passing.</li> <li>Understand the definition and structure of a class as a collection of objects with common traits and behaviors.</li> <li>Recognize the importance of relationships between classes, including association, composition, in class diagrams.</li> </ul> For teachers <p>Prior:</p> <ul> <li>What is a Object orientation?</li> <li>What is a semantic gap?</li> <li>What do we mean when we say a programming language is object oriented?</li> </ul> Read the material(10 min) <p>we now read the material down till exercises</p> <p>Why do we suggest that Object Oriented design is still relevant. Ivar Jacobson one of the Inventors of the UML language and the object oriented software engineering method OOSE states</p> <p>\"People regard their environment in terms of objects\" <code>[Jacobson 1992]</code></p> What is the impact of objects on the Semantic gap <p>Object leads to a smaller semantic gap as they are a more natural abstraction of data in the world which gives two major benefits</p> <ul> <li> <p>Understanding The semantic gap(The distance form input to understanding) between reality and model is smaller making the risk of misunderstanding less.</p> </li> <li> <p>Modification     The model tends to be local resulting from a individual item. Each of these are represented by a single object.</p> </li> </ul>","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"design_develop/OO_development/#objects-and-classes","title":"Objects and Classes","text":"What is an object? <p>An object is an entity that is defined by being able to save state(Information) and a number of operations(Behavior).</p> <p>Object Orientation is a paradigm, not a language feature</p> <ul> <li> <p>Mariam-webster defines a Paradigm as:   philosophical and theoretical framework of a scientific school or discipline within which theories, laws, and generalizations and the experiments performed in support of them are formulated</p> </li> <li> <p>Stanford Encyclopedia of Philosophy cites the work of Thomas Kuhn The Structure of Scientific Revolutions in where a work of Paradigm is not only the key theories and laws, but also\u2014and this is what makes them paradigms\u2014the applications of those theories in the solution of important problems</p> </li> </ul> <p>Principles of object orientated development</p> <p>1: Information Hiding     No unit outside of the object shall know the internal workings of the object;     Or as Jacobson states \"they hide their internal structure from their surroundings\"<code>[Ivar Jacobson 1992]</code></p> <p>2: The concept of Encapsulation     The behavior and information are encapsulated in the object     <code>[Ivar Jacobson 1992]</code></p> <p>3: The concept of message passing     Each object has a external interface through which it interacts with other objects, it is the carriers of messages public(access qualifier, see below) methods of the Classes are the implementation of message passing.</p> What is a Class <p>A class is a set of objects that share a common structure, common behavior, and common semantics. <code>[Booch 2007]</code></p> <p>The modeling software company Visual Paradigm has a guide in some common roles between object such as Association. \"If two classes in a model need to communicate with each other, there must be a link between them, and that can be represented by an association (connector).\"</p> <p>Composition implies a relationship where the child cannot exist independent of the parent. Example: House (parent) and Room (child). Rooms don't exist separate to a House.</p> <pre><code>classDiagram\n    direction TD\n    Owner --&gt; Animal: cares for\n    Dog*--\"1\"Head\n    Dog*--\"1\"Body\n    Dog*--\"0..1\"Tail\n    Owner o--\"0..*\"Animal\n    Animal &lt;|-- Dog</code></pre> <p>Further reading: UML Association vs Aggregation vs Composition</p> Is a programming language object oriented? <p>Object-oriented programming is a technique for programming \u2013 a paradigm for writing 'good' programs for a set of problems. If the term 'object-oriented programming language' means anything it must mean 'a programming language that provides mechanisms that support the object-oriented style of programming well'. <code>[Stroustrup B. 1998]</code></p> <p>Techniques for Object oriented programming</p> <p>Decide which classes you want; provide a full set of operations for each class; make commonality explicit by using inheritance. <code>[Stroustrup B. 1988]</code></p> <p>Why do we Break the rule?</p> <p>In this course we do not go into the concept of inheritance in implementation as this is makes for a more complicated structure. We only concern our selfs with the \"has a\" relation ship rather than \"is a\" relation ship. we work with the composite and the aggregate relationships</p>","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"design_develop/OO_development/#exercise","title":"Exercise","text":"Explore Mermaid (5 min) <p>Open the Mermaid page click on Try Playground, make a object diagram either use a flowchart with each object as a box. This is quite common the other option is to use a class diagram. This should show some object structure</p> An answer <pre><code>\n    classDiagram\n        direction TD\n        Owner --&gt; Animal :\"cares for\"\n        Dog*--\"1\"Head : \"has a\"\n        Dog*--\"1\"Body : \"has a\"\n        Dog*--\"0..1\"Tail : \"has a\"\n        Owner o--\"0..*\"Animal : \"has a\"\n        Animal &lt;|-- Dog : \"is a\"</code></pre> <pre><code>    flowchart TD\n        Owner --&gt;|cares for| Dog\n        Dog ---|has a| Head\n        Dog ---|has a| Body\n        Dog ---|has a| Tail</code></pre> Objects (5 min) <p>Write a object description for Uppsala Weather station An object description can be done either using plain text A combination of plaintext and mermaid diagram either a flowchart or a class diagram, in the case of flowchart the behavior and properties or write them separately in your markdown</p> <p>what to add</p> <p>Add objects that we need for our weather project such as Display, Graph, user interface etc. look in your features and requirements</p> Where to find requirements? <p>References to the requirements found either in the teacher example requirements document (A requirements document is often referred to as an SRS - System/Software Requirement Specification ) or in your own requirements document. Also check your issues for features you want to include</p> A solution <pre><code>    flowchart TD\n\n    DownloadService --&gt; UserInterface\n    Graph ---&gt; UserInterface\n    StatisticsData --&gt; UserInterface\n    DataSource --&gt; StatisticsData\n    DataSource --&gt; DownloadService\n    DataSource --&gt; Graph\n    StatisticsData --&gt; Graph\n    weatherStationData --&gt; DataSource</code></pre> Make an refactoring and extension of your class diagrams (10 min) <p>Make an refactoring and extension of your class diagrams from Expressive data types</p> <p>Refactoring is basically reorganization to match or improve your design.</p> example of a weather station analysis class diagram <pre><code>classDiagram\n    direction TD\n    namespace WeatherStationAnalyzer {\n\n        class UserInterface {\n            +start()\n            +MsgGetDownload()\n            +MsgApplyFilter(FilterType)\n            +MsgPlotData()\n            +MsgAnalyzeStats()\n        }\n\n        class DataController {\n            +applyTimeFilter()\n            +applyDateFilter()\n            +applyRegionFilter()\n        }\n\n        class PlotService {\n            +drawTimeSeries()\n            +drawHistogram()\n            +drawBoxPlot()\n        }\n\n        class StatsService {\n            +computeAverage()\n            +computeMin()\n            +computeMax()\n            +computeMedian()\n            +computeMode()\n        }\n\n        class DownloadService {\n            +exportRawData()\n            +exportFilteredData()\n            +exportPlot()\n            +exportStats()\n        }\n\n        class GitHubDataSource {\n            +loadData()\n            +verifyData()\n        }\n    }\n    %% relations\n    UserInterface --&gt; DataController\n    DataController --&gt; PlotService\n    DataController --&gt; StatsService\n    UserInterface --&gt; DownloadService\n    DownloadService --&gt; GitHubDataSource\n\n    %% color clean classes green\n    style UserInterface fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style DataController fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style PlotService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style StatsService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style DownloadService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style GitHubDataSource fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n</code></pre>","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"design_develop/OO_development/#further-studiesself-study","title":"Further studies(Self study)","text":"","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"design_develop/OO_development/#inheritanceself-study","title":"Inheritance(Self study)","text":"<p>The concept of inheritance \"is a\" relation ship although central to many design structures is not necessary to uphold the tenants of Object orientation. The basic concept of inheritance is the parent to child relationship in OO the child has all the properties and behavior of the parent, it either extends or limits(specializes) the parent object(or class).</p> <p>The way we discover inheritance in OO is usually when we see a set of object that share properties or behavior we abstract those behaviors and properties into a parent this usually happens when we transition from object design to class design and are looking to group similar objects together. A common case where we utilize the power of inheritance, is when we have a group of objects that share a common interface. the interface is then implemented as an abstract class(a class that cannot be instantiated into and object.) which the other classes inherits. This common set of behavior and properties needed to convey information to a class but lets the child classes deal with the information as it will, this is a common practice when designing multiple UI for example if the CLI and the graphical UI interact with the controller class in a similar way passing messages(data) between the analysis unit and the UI this can easily be implemented as a inheritance structure.</p> <p>an example of how an Abstract(Interface) is utilized to allow for multiple behaviors without coupling the classes</p> <pre><code>classDiagram\n direction TD\n namespace WeatherAnalysis {\n\n    class UserInterface {\n        &lt;&lt;Abstract&gt;&gt;\n        +start()*\n    }\n\n    class WebApp {\n        +start()\n    }\n    class CLI {\n        +start()\n    }\n\n    class DataController {\n        +applyTimeFilter()\n        +applyDateFilter()\n        +applyRegionFilter()\n    }\n\n    class PlotService {\n        +drawTimeSeries()\n        +drawHistogram()\n        +drawBoxPlot()\n    }\n\n    class StatsService {\n        +computeAverage()\n        +computeMin()\n        +computeMax()\n        +computeMedian()\n        +computeMode()\n    }\n\n    class DownloadService {\n        +exportRawData()\n        +exportFilteredData()\n        +exportPlot()\n        +exportStats()\n    }\n\n    class GitHubDataSource {\n        +loadData()\n        +verifyData()\n    }\n}\n    %% relations\n    UserInterface --&gt; DataController\n    DataController --&gt; PlotService\n    DataController --&gt; StatsService\n    UserInterface --&gt; DownloadService\n    DownloadService --&gt; GitHubDataSource\n    CLI --|&gt; UserInterface : implements\n    WebApp --|&gt; UserInterface : implements\n\n    %% color clean classes green\n    style UserInterface fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style DataController fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style PlotService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style StatsService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style DownloadService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style GitHubDataSource fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n\n    note for WebApp \" concrete user interface that implements the behavior of the User interface class \"\n    note for CLI \" concrete user interface that implements the behavior of the User interface class\"\n    note for UserInterface \"De couples behavior and visualization\"\n    note for DataController \"Single Responsibility: handles filtering only\"\n    note for PlotService \"Separate concern: visual rendering\"\n    note for StatsService \"Separate concern: statistical computation\"\n    note for DownloadService \"Exports only\"\n    note for GitHubDataSource \"Isolated backend logic\"</code></pre>","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"design_develop/OO_development/#design-pattersself-study","title":"Design patters(self study)","text":"Learning outcomes of Design Patterns <ul> <li>The learners know of the \"zero line\" code and how it relates to software design \"Zero line\" Design</li> <li>The learners can describe the general parts of a design pattern and why we use them.</li> <li>The Learners should be able to understand the \"Decorator pattern\" and what problem it solves</li> <li>Explore the concept of design patterns as blueprints for solving common software design problems.</li> </ul> <p>The zero line code is the most optimal code there for the zero line design must be the most optimal?</p> <p>The zero line code/design simply refers do not make something that some one else already has coded unless warranted by either security concerns (the source is not trusted such as untested code )or for learning.</p> <p>Zero line Design is optimal in the sense that if some one already figure out a tried a tested method to do something don't do it yourself. Zero line design means using a tried and tested design.</p> What is a Design Pattern? <p>Design patterns are typical solutions to common problems in software design. Each pattern is like a blueprint that you can customize to solve a particular design problem in your code. from refactoring.guru</p> <p>Gamma et al. starts describing a design pattern with a quote from Christopher alexander \"Each pattern describes a problem which occurs over and over again in our environment,and then describes the core of the solution to that problem in such away that you can use this solution a million time over , without doing it the same way twice\" which is a quote about buildings and towns, but they go on to claim that this is applicable in object design as well<code>[Gamma et al., 1995]</code></p> Why do we use Design Patterns? <p>The truth is that you might manage to work as a programmer for many years without knowing about a single pattern. A lot of people do just that. Even in that case, though, you might be implementing some patterns without even knowing it. So why would you spend time learning them?</p> <p>Design patterns are a toolkit of tried and tested solutions to common problems in software design. Even if you never encounter these problems, knowing patterns is still useful because it teaches you how to solve all sorts of problems using principles of object-oriented design.</p> <p>Design patterns define a common language that you and your teammates can use to communicate more efficiently. You can say, \u201cOh, just use a Singleton for that,\u201d and everyone will understand the idea behind your suggestion. No need to explain what a singleton is if you know the pattern and its name. from refactoring.guru</p>","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"design_develop/OO_development/#exercise_1","title":"Exercise","text":"Design Patterns <p>Read the Decorator pattern is there a function or Class that would fit this particular problem?</p> <p>Something that must be done differently but belong together</p> <p>when looking for pattern it is always good to go through what you have design or code so far and check if something just changes how a thing looks. Or when you need to access multiple data formats in one way</p> Answer <p>The temperature converter in utils is an excellent case where generalization by a decorator that lets you add as many converters to the system as you like</p> Extra assignment <p>Using refactoring.guru find an design Describe in a design document a pattern that is useful for the weather project</p>","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"design_develop/OO_development/#references","title":"References","text":"<ul> <li><code>[Ivar Jacobson 1992]</code> Ivar Jacobson et al., Object-Oriented Software Engineering, a use case driven approach, Addison-wesley 1992.</li> <li><code>[Booch 2007]</code> Grady Booch et al.,Object-oriented analysis and design with applications -3rd ed,Addison-wesley 2007.</li> <li><code>[Stroustrup B. 1998]</code> Stroustrup B. What is \u201cObject-oriented Programming\u201d? Software, IEEE. 1988 Jun 1;5:10\u201320.</li> <li><code>[Gamma et al., 1995]</code> Gamma, Erich, et al.   \"Elements of reusable object-oriented software.\" Design Patterns (1995).</li> </ul>","tags":["OOP","OOD","object-oriented","object oriented","programming","development"]},{"location":"development/","title":"Development","text":"<p>Development is</p>"},{"location":"development_design/Needleman_Wunsch_activity/","title":"BLAST: A real-world example","text":"<p>\"In bioinformatics, BLAST basic local alignment search tool Links to an external site. is an algorithm and program for comparing primary biological sequence information, such as the amino-acid sequences of proteins or the nucleotides of DNA and/or RNA sequences.\" (https://en.wikipedia.org/wiki/BLAST_(biotechnology)#cite_note-KarlinObit.NYT-2)</p> <p>First copy the pseudo code into the markdown code ticks</p> <pre><code>for i in length(A):\n   F(i,0) = p * i\nfor j in length(B):\n   F(0,j) = p * j\nfor i in length(A):\n   for j in length(B):\n      match = F(i-1, j-1) + S(A(i), B(j))\n      delete = F(i-1, j) + p\n      insert = F(i, j-1) + p\n      F(i,j) = max(match, delete, insert)\n</code></pre> <pre><code>@startuml\nstart\nrepeat: i in length(A);\n   -F(i,0) = p * i\nrepeat while\nrepeat: j in length(B);\n   -F(0,j) = p * j\nrepeat while\nrepeat: i in length(A);\n    repeat: j in length(B);\n        -match = F(i-1, j-1) + S(A(i), B(j))\n        -delete = F(i-1, j) + p\n        -insert = F(i, j-1) + p\n        - F(i,j) = max(match, delete, insert)\n    repeat while\nrepeat while (i &lt; length(A)) is (true) not(F(i,j))\nstop\n@enduml\n</code></pre> <pre><code>@startuml\n\n@enduml\n</code></pre>","tags":["BLAST","example"]},{"location":"development_design/ReadmatSoftware/","title":"Software development processes","text":"","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#sdlc","title":"SDLC","text":"<p>SDLC ,or the Software Development Life Cycle, is a model describing the process of bringing a piece of software to market and maintaining it. The basic steps or as they are know phases each encompass different tasks needed to be completed as the software goes from idea to fruition.</p> <p>  Generalized SDLC phases as a cycle of steps where the circle is traversed multiple times, there is a week correlation between cycles and versions</p> <p>You will if you google around many variations of this and the phases can change some what but the general idea stays constant. The following illustrations show both a variation of the common lifecycle model and  the ISO/IEC 12207 model described in ISO/IEC TR 24748-1:2010   </p> <p>  Illustration of the generalize SDLC, from the IEEE Guide\u2014Adoption of ISO/IEC TR 24748-1:2010 Systems and Software Engineering\u2014Life Cycle Management\u2014Part 1: Guide for Life Cycle Management</p> <p>The early models where depicted as circles stemming from the water fall model.  </p> <p>  Illustration waterfall model from https://commons.wikimedia.org/wiki/File:Waterfall_system_model.jpg </p> <p>After the 80s models tend  to focus on the iterative nature of development. One way of thinking about the iterative nature of development while keeping the incremental cost of iteration is as a helix. Where a change in the design in a lower spiral incurs the cost of the previous spirals, eventually the cost of introducing change into the next step will be larger that what is profitable for the project, at which time the efforts into the project usually trickles down rather than following the theoretical step of retirement.  </p> <p> The helix model of SDLC, concept: Lars Eklund, NBIS/UPPMAX, Uppsala University art: Jonas S\u00f6derberg, NBIS/UPPMAX, Uppsala University image is released under CC-BY license </p> <p>Iterative models like RUP or Spiral model will emphasise that a software is developed in iterative steps where you may spend more or less time in any give phase, usually earlier iteration focus on planing and later on development and maintenance. Each time a change is introduced the impact on the cost increases with number of iteration and phases. Evolutionary software development like the Living Software Development Process takes inspiration from genetic algorithms and genetic programming to build a library of models from which to work.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#recommended-reading","title":"Recommended reading","text":"<ul> <li> <p>SDLC stands for Software Development Life Cycle at www.tutorialspoint.com</p> </li> <li> <p>Towards a Tool Support for a Living Software Development Process</p> </li> <li> <p>Evolutionary software engineering, a review</p> </li> </ul> <p>Depending on the chosen method or methodology these steps are generally named slightly different dependent on model but in general these steps fulfill the standard SDLC.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#phases-of-the-sdlc","title":"PHASES OF THE SDLC","text":"<p>In our five phased version of SDLC we section the development into five phases which are somewhat arbitrary as most development is more fluid than the fixed models that have evolved from the waterfall model while the ISO/IEC version of SDLC has nine phases below is an attempt to map the phases to each other.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#first-phase-planning","title":"First phase Planning","text":"<p>In the first phase one needs to determine what Trauth et.al call Perception of need, Feasibility and Analysis The ISO/IEC standard 12207 calls this Needs Determination after the needs, the initial requirements, have been determined through the above mentions process they are then fleshed out in the Concept and Exploration according to the SDLC_ISO_IEC_12207 this is the time to make a risk analysis of your development strategy, and then adopt that strategy, such as a once through(waterfall), iterative(such as RUP) or evolutionary software model(Living Software Development Process) Most models cover some form of risk assessment, involved in the requirements gathering process. In the Spiral model the concept of risk assessment is essential while in models like RUP it has a lesser role.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#risk-assessment","title":"Risk assessment","text":"<p>This table does not render correctly in preview mode see the github pages for a complete view</p> Probability/Severity S1 S2 S3 S4 S5 P5 <p>5</p>Supplementary issue      <p>10</p>Issue      <p>15</p>Unacceptable      <p>20</p>Unacceptable      <p>25</p>Unacceptable      P4 <p>4</p>Acceptable      <p>8</p>Supplementary issue      <p>12</p>Issue      <p>16</p>Unacceptable      <p>20</p>Unacceptable      P3 <p>3</p>Acceptable     <p>6</p>Supplementary issue      <p>9</p>Supplementary issue      <p>12</p>Issue      <p>15</p>Unacceptable      P2 <p>2</p>Acceptable      <p>4</p>Acceptable      <p>6</p>Supplementary issue      <p>8</p>Supplementary issue      <p>10</p>issue      P1 <p>1</p>Acceptable      <p>2</p>Acceptable      <p>3</p>Acceptable      <p>4</p>Acceptable      <p>5</p>Supplementary issue      <p>A good resource for risk assessment templates are is https://openregulatory.com/ which has some templates for ISO 13485, IEC 62304, ISO 14971 and IEC 62366.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#second-phase-design","title":"Second phase   Design","text":"<p>This stage corresponds to the third phase in the ISO/IEC standard Demonstration and Evaluation where we flesh out and create the system that will full fill the identified requirements put on the system. This is where we most often use visual diagrams and pseudo-code to describe our system. The design phase should be detailed enough that you can plan and execute a coherent development, but it is important to note that doing more than what you need is as bad as doing to little(well a little less :-) ) but still it is important to not over-engineer when you and your team have a clear picture of what you want to develop that is when we step to the next phase. At the end of this stage we have our first iteration of the Design documents, after we should in a structured manner set up the project planning and transfer of Design Documentation to actionable pseudocode, if we are using Git this can be set up as git issues as demonstrated by Rich\u00e8l in this youtube video</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#third-phase-development","title":"Third phase  Development","text":"<p>This stage corresponds to the fourth phase in the ISO/IEC standard Engineering/Development is the stage where you use processes to implement your software system that is this is the coding step.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#fourth-phase-deploymenttesting","title":"Fourth phase Deployment/Testing","text":"<p>The forth phase corresponds to phases of Production/manufacturing where you verify your product, and Deployment/Sale  where the product is released to the intended customers/audience</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#fifth-phase-maintenancedeployment-and-maintenance","title":"Fifth phase Maintenance/Deployment and  Maintenance","text":"<p>Operations , Maintenance and support as well as the Retirement phase of the ISO/IEC standard</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#development-processes","title":"Development Processes","text":"<p>Below some descriptions of Development process, what model should be chosen should according to ISO/IEC 12207 be determined through a risk analysis and then risk minimised,but in practice the choice is often determined by the culture of the development team and organisation policy.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#spiral-model","title":"Spiral model","text":"<p>The spiral model was developed in 1986 by Barry Boehm in his paper A Spiral Model of Software Development and Enhancement The focus of the spiral model is to identify risk</p> <p>  Illustration of the spiral model as presented by Boehm 1988 , from <code>https://commons.wikimedia.org/wiki/File:Spiral_model_(Boehm,_1988).png</code></p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#rup-rational-unified-process","title":"RUP, Rational Unified Process","text":"<p>Rational Unified Process is a software development method based on iterative object-oriented development. The idea is that you tailor the development method to fit the project, this however is not without cost as adapting and formulating templates take time. It is important to note that development models of this type are not in contrast to Agile development but some concessions to the iterative flow may have to be made as the image depicts RUP follows the phases of design as SDLC (with the addition of a 0th step Business modeling), Each phase in RUP is a complete iteration of the design steps Inception, Elaboration,Construction and Transition</p> <pre><code>graph LR\n    A[Manager] --&gt; B(Define Project Vision)\n    A --&gt; C(Create Business Case)\n    A --&gt; D(Gather User Feedback)\n    A --&gt; E(Perform Lessons Learned)\n\n    B --&gt; F{Develop Use Case Model}\n    C --&gt; G{Create Analysis Model}\n    E --&gt; H{Design System Architecture}\n\n    F --&gt; I{Develop Iteration Plan}\n    G --&gt; I\n\n    H --&gt; J(Implement System Components)\n    I --&gt; J\n\n    J --&gt; K(Perform Unit Testing)\n    K --&gt; L(Integrate System Components)\n    L --&gt; M(Perform System Testing)\n    M --&gt; N(Deploy System)\n\n    D --&gt; O(Release Software)\n    O --&gt; P(Perform Lessons Learned)\n\n    style A fill:#f9f,stroke:#000,stroke-width:2px\n    style B fill:#ccf,stroke:#333,stroke-width:1px\n    style C fill:#ccf,stroke:#333,stroke-width:1px\n    style D fill:#ccf,stroke:#333,stroke-width:1px\n    style E fill:#ccf,stroke:#333,stroke-width:1px\n    style F fill:#ccf,stroke:#333,stroke-width:1px\n    style G fill:#ccf,stroke:#333,stroke-width:1px\n    style H fill:#ccf,stroke:#333,stroke-width:1px\n    style I fill:#ccf,stroke:#333,stroke-width:1px\n    style J fill:#ccf,stroke:#333,stroke-width:1px\n    style K fill:#ccf,stroke:#333,stroke-width:1px\n    style L fill:#ccf,stroke:#333,stroke-width:1px\n    style M fill:#ccf,stroke:#333,stroke-width:1px\n    style N fill:#ccf,stroke:#333,stroke-width:1px</code></pre> <p>What follows next is an emphasis diagram which describes where the focus of the work should be put in at which time of the project. It is common to have a signoff at the end of each phase before starting the next one.</p> <p> Image contributed from  Wikimedia Commons and was originally made Jakob Farian Krarup and released to the public domain under cc 0 </p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#inception-i1","title":"Inception (I1)","text":"<p>The focus of the inception stage is to identify the user needs to initial use case development</p> <ul> <li>The purpose of the project</li> <li>The scheduled time frame for its completion</li> <li>The resources required for its completion</li> <li>The success criteria</li> <li>The estimated cost, and</li> <li>The estimated risk assessment, among others</li> </ul> <p>By the end of the Inception phase you should have determined the following:</p> <ul> <li>The General vision of the project</li> <li>The Project Plan and goal</li> <li>The Project scope</li> <li> <p>Initial business suit from financial analysis, could be replaced by the scientific motivation, proposal for the project.</p> </li> <li> <p>Requirements understanding, through use case design.</p> </li> </ul>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#elaboration-e1e2","title":"Elaboration (E1,E2)","text":"<p>The elaboration phase is focused on the refinement of requirements the design of the software and test that are to be run through the project iteration lifetime. Deliverables of the Elaboration phase is:</p> <ul> <li>A full model with functional and non-functional requirements</li> <li>A complete software architecture description</li> <li>A stable project plan</li> <li>Actual resource cost versus planned resource cost, etc.</li> </ul>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#construction-c1-c4","title":"Construction (C1-C4)","text":"<p>Is the development of the software and the creation of the deployment modules that are needed Deliverables are:</p> <ul> <li>A user manual</li> <li>A fully completed software system</li> </ul>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#transition-t1t2","title":"Transition (T1,T2)","text":"<p>The transition phase T1 and T2 is when you take your product to market maintain the current iteration and plan for the next iteration during this phase the Buisning modeling done regards to the future effects transitions in the organisation might bring on future organisation the requirements gathering is commonly extracted from bug reports, design is almost never changed during the transition phase while Testing and deployment have mayor focus in this phase. Deliverables:</p> <ul> <li>Beta testing execution(firs iteration only)</li> <li>Marketing and distributing of the product</li> <li>User training</li> <li>Converting existing data</li> <li>Assessments based on user experience</li> </ul> <p>Further reading RUP and examples of applied RUP:</p> <ul> <li> <p>The Rational Unified Process--An Introduction., Kruchten, Philippe. (2000).</p> </li> <li> <p>Real world example RUP as used by volvo, \u00c5sa Nordin( Master Thesis, Trollh\u00e4ttan 2003)</p> </li> <li>Using Rational Unified Process in an SME \u2013 A Case Study,  Hansen et. al (springer 2005)</li> </ul>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#rad-rapid-application-development","title":"RAD Rapid Application Development","text":"<p>Using Prototyping and minimal design to generate fast development cycles, this has the disadvantage to generating very little structure and for larger or more complex systems the risk of derailing projects or unmaintainable solutions are high.</p> <p>Suitable parameters for using a RAD process:</p> <ul> <li>Focused project scope where business objectives are well defined and narrow.</li> <li>Data for the project already exists (completely or in part). The project largely comprises analysis or reporting of the data.</li> <li>Decisions can be made by a small number of people who are available and preferably co-located.</li> <li>Project team is small, preferably six people or less.</li> <li>Technical architecture is defined and clear and the key technology components are in place and tested.</li> <li>Technical requirements e.g response times, throughput, database sizes, etc. are reasonable and well within the capabilities of the used technologies. Targeted performance preferably less than 70% of the published limits of the used technologies.</li> </ul> <p>Unsuitable parameters for using RAD processes</p> <ul> <li>Broad project scope where the business objectives are obscure or broad.</li> <li>Complex and voluminous data must be analyzed, designed and created within the scope of the project.</li> <li>Many people must be involved in the decisions on the project, the decision makers are not available on a timely basis or they are geographically dispersed.</li> <li>The project team is large or there are multiple teams whose work needs to be coordinated.</li> <li>The technical architecture is unclear and much of the technology will be used for the first time within the project.</li> <li>Technical requirements are tight for the equipment to be used.</li> </ul> <p>further reading for RAD (Rapid Application Development</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#extreme-programming","title":"eXtreme Programming","text":"<p> The loops of eXtremeProgramming </p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#tdd-test-driven-development","title":"TDD Test Driven Development","text":"<p>Test-Driven Development (TDD) is a methodology in software development that focuses on an iterative development cycle where the emphasis is placed on writing test cases before the actual feature or function is written. The iterative cycle in TDD is often referred to as the RED-GREEN-REFACTOR were code first fails the test, the code is then modified until it succeeds the test, lastly the code is refactored   </p> <p>  image contributed from Xarawn, CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0, via Wikimedia Commons and released to the public domain with the aforementioned license The three laws of TDD:</p> <ol> <li>You are not allowed to write any production code unless it is to make a failing unit test pass.</li> <li>You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.</li> <li>You are not allowed to write any more production code than is sufficient to pass the one failing unit test.</li> </ol> <p>From the clean coder Robert C. Martin aka Uncle Bob</p> <p>The following Use Case model describes some common steps followed when developing according to TDD, in this scenario only one developer actor is present but this can be several people holding the role of developer when      they interact with the model. In TDD pair programming is very common and  a practice of writing tests for your colleague is common practice. So one developer works on the code and one developer is working on the test and then they switch.</p> <pre><code>---\nconfig:\n  theme: neutral\n---\n\nflowchart TD\n    A@{icon: \"fa:circle-user\"}\n    A[Developer]:::dev\n    B(Write Test):::test\n    C(Run Test):::test\n    D(Write Code):::code\n    E(Refactor Code):::ref\n    G(Analyze Requirements):::test\n    H(Design Test):::test\n    I(Implement Test):::test\n    J(Execute Test):::test\n    K(Evaluate Test Results):::decision\n    L(Test Failed):::fail\n    M(Test Passed):::pass\n    A --&gt; D\n    A --&gt; B\n    D --&gt; C\n    B --&gt; G\n    G --&gt; H\n    H --&gt; I\n    B --&gt; C\n    C --&gt; J\n    J --&gt; K\n    K --&gt; L\n    K --&gt; M\n    L --&gt; E\n    M --&gt; D\n    E --&gt; C\n    %% Node styles\n    classDef dev fill:#CAE5FF,stroke:#0C4F8A,stroke-width:2px;\n    classDef test fill:#E6F9E8,stroke:#238B45,stroke-width:2px;\n    classDef code fill:#F3F6FC,stroke:#0A8A0A,stroke-width:2px;\n    classDef ref fill:#CAE5FF,stroke:#0C4F8A,stroke-width:2px;\n    classDef loop fill:#FBE9FF,stroke:#900080,stroke-width:2px;\n    classDef decision fill:#F3F6FC,stroke:#304FFE,stroke-width:2px;\n    classDef pass fill:#D0FFD0,stroke:#0A8A0A,stroke-width:2px;\n    classDef fail fill:#FFD6D6,stroke:#B00020,stroke-width:2px;\n\n    class A dev;\n    class B,I,C,J test;\n    class D code;\n    class E ref;\n    class F loop;\n    class K,G,,H decision;\n    class L fail;\n    class M pass;\n</code></pre> <p>In this diagram, a relatively detailed representation of the TDD process has been rendered:</p> <ul> <li>Write Test: The developer goes through three sub-steps:<ul> <li>Analyze Requirements: The developer analyzes the requirements or user stories to understand the desired behavior.</li> <li>Design Test: The developer designs the test case(s) based on the requirements, ensuring complete coverage.</li> <li>Implement Test: The developer writes the test code without implementing the corresponding functionality in the system.</li> </ul> </li> <li>Run Test: The developer proceeds with two sub-steps:<ul> <li>Execute Test: The developer runs the test case(s) against the system or the code being developed.</li> <li>Evaluate Test Results: The developer evaluates the test results to determine if the test case(s) passed or failed.</li> </ul> </li> </ul> <p>Test Failed or Test Passed: Based on the evaluation, the test can either fail or pass. If the test failed, the developer goes back to \"Write Test\" to create a new or modified test case that will capture the desired behavior. This iteration ensures that the system is designed to pass the new test case.</p> <p>If the test passed, the developer moves on to \"Write Code\" to implement the necessary functionality that will make the test pass.</p> <p>After writing code, the developer can choose to either \"Run Test\" to ensure the new functionality works as expected or \"Refactor Code\" to improve the code's structure without changing its functionality.</p> <p>If the code is refactored, the developer repeats the \"Run Test\" and \"Write Test\" steps to ensure the refactoring did not introduce any issues.</p> <p>The diagram illustrates the iterative nature of TDD, where the process repeats until all the desired functionality is implemented, and all test cases pass.</p> <p>Please note that this diagram is still a simplified representation of the TDD process and can be customized further based on specific requirements or methodologies followed in different contexts.</p> <p>TDD will be covered in detail in other parts of the material, but the general idea of TDD is to generate robust solutions through the use of test for the whole life cycle.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#agile-development-and-the-the-agile-manifesto","title":"AGILE Development and the The AGILE manifesto","text":"<p>Manifesto for Agile Software Development</p> <p>We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:</p> <p>Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan</p> <p>That is, while there is value in the items on the right, we value the items on the left more. https://agilemanifesto.org</p> <p>Kent Beck Mike Beedle Arie van Bennekum Alistair Cockburn Ward Cunningham Martin Fowler James Grenning Jim Highsmith Andrew Hunt Ron Jeffries Jon Kern Brian Marick Robert C. Martin Steve Mellor Ken Schwaber Jeff Sutherland Dave Thomas</p> <p>\u00a9 2001, the above authors this declaration may be freely copied in any form, but only in its entirety through this notice.</p> <p>This manifesto was first conceived at the Snowbird meeting in Utah in early 2001</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#devops","title":"DevOps","text":"<p>The DevOps Loop includes both the traditional SDLC and the Organisational tasks of the release From the GitLab DevOps page</p> <p>DevOps can be best explained as people working together to conceive, build and deliver secure software at top speed. DevOps practices enable software developers (devs) and operations (ops) teams to accelerate delivery through automation, collaboration, fast feedback, and iterative improvement.</p> <p>Stemming from an Agile approach to software development, a DevOps delivery process expands on the cross-functional approach of building and shipping applications in a faster and more iterative manner. In adopting a DevOps development process, you are making a decision to improve the flow and value delivery of your application by encouraging a more collaborative environment at all stages of the development cycle. DevOps is a combination of software developers (dev) and operations (ops). It is defined as a software engineering methodology which aims to integrate the work of software development and software operations teams by facilitating a culture of collaboration and shared responsibility. The DevOps methodology comprises four key principles that guide the effectiveness and efficiency of application development and deployment. These principles, listed below, center on the best aspects of modern software development.</p> <ul> <li>Automation of the software development lifecycle</li> <li>Collaboration and communication</li> <li>Continuous improvement and minimization of waste</li> <li>Hyperfocus on user needs with short feedback loops</li> </ul> <p>By adopting these principles, organizations can improve code quality, achieve a faster time to market, and engage in better application planning.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#tools-and-methodologies","title":"Tools and methodologies","text":"<p>The tools and methodologies are too numerous to describe in any complete way, and they are always evolving as developers find issues with the models and methodologies they are currently using. The trends in software development is to find the \"latest and greatest\" method a silver bullet of development, this is of course not a reachable goal. It is better to find a method that is good enough for the task you need to achieve. First we need to define, A system can be defined as any structure of concepts that helps categorize a concept. This definition is quite broad and not very helpful the definitions of systems but they get more useful as we lower the degree of abstraction, for example when we talk about a biological system or a information system. An information system is a system consisting of organisation, hardware and software that help convey information between a sender and receiver. Further refined we can talk about a software system as the delimiter between components that make up some software. As our scope narrows the concept of system goes from the abstract to the concrete. The best way to approach which methodology one should use is to look at the development requirements of the system that you wish to create and choose the one that lets you do the least amount of work for the highest value.</p> <p>In this course we will present a few methodologies which are in no way or form the best or only methods out there but is a start.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#paradigms-of-design","title":"Paradigms of Design","text":"","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#modular-developmentprogramming","title":"Modular development/programming","text":"<p>A software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules.Each module contains everything necessary to execute only one aspect of the desired functionality of the software. Each module fits together like pieces of lego. A derivation of modular programming is interface programming which uses OOP/OOD to implement the concept of modules in a language that have support for objects but not for modules. The principles of modular programming was introduced in the 1960s by Larry LeRoy Constantine with the proposal of adding modules to ALGOL68 to ALGOL68-R being the concrete application of the modular development paradigm.</p> <p>Code labs introduction to modular programming state the following principles regarding modular programming: There are two types of module, program control modules which are purposely and only designed for controlling the flow of the program. This is usually where the main functionality of a program is defined. Specific task modules A module that carries the data transfer amid the initial module and other modules. Specific task modules carries the functionality of the program and have a set of predefined data transmission options:</p> <ul> <li>no communication in with no communication out</li> <li>no communication in with some communication out</li> <li>some communication in with some communication out</li> <li>some communication in with no communication out</li> </ul> <p>The point of designing with modular development is to enforce information hiding which in this case mainly makes the development independent of the specific development team and enables code reuse. At a higher state a modular design achieve the same interchangeability over the design space.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#additional-material-on-practical-implementation-of-modular-design","title":"Additional material on Practical implementation of modular design","text":"<p>The following is a reference to practical applied modular development and design of Agri software it has a good practice described. Jones JW, Keating BA, Porter CH. Approaches to modular model development. Agricultural Systems. 2001 Nov 1;70(2):421\u201343.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#object-orientation","title":"Object Orientation","text":"<p>Object orientation is primarily a design paradigm unlike Imperative,procedural,functional and declarative programming which focuses on how you code. One can use any number of programming paradigms to implement the object-oriented design.</p> <p>An object is the representation of a thing or concept, that encapsulates both data and the actions performed on it. A key concept of an object is that it interacts with the world through message passing of its parameters.</p> <p>An object is characterised by a number of operations and a state which remembers the effect of these operations.</p> <p>An object oriented model is comprised of a number of objects which are clearly delimited parts of the system. Objects also carry any association to other objects in their states. These relationships are categorised as either static or dynamic. Two objects with static relationships are associated but have no direct communication that is they know of each other but to not pass messages between each other. A dynamic object relationship on the other hand implies two or more objects that actually communicate with each other</p> <p>An object can be composed of other object, such can be achieved either through composition in the way that a person is composed by its parts head, arms, legs and body to give an example. Key concepts in achieving these relationships are the relationships:</p> <ul> <li>The concept of Information Hiding</li> <li>The concept of Encapsulation</li> <li>The concept of message passing</li> </ul> <p>Once a set of objects have been identified it is common to abstract these through the process of classification, a process where we abstract a given object into its concepts, as we build out our classes some concepts that have no connection to the objects of our design. These classes are commonly known as utility classes. Once the classification and message passing have been designed our classes are generally instantiated as objects again which are the interacting entities of our software.</p> <p>The act of classification is when you take behavior of an object and describe it as a general method that works for all objects of that type and the properties of the objects are abstracted to class properties, remember each property is should in pure OO only be accessible to the object itself that is to any one instance of a class. In the classification of an object sometimes it is advantageous to make a class that is a class whose purpose is to define a common interface for their subclasses and therefor can not be instantiated.</p> <p>The concept of message passing  Each object has a external interface through which it interacts with other objects, it is the carriers of messages public(access qualifier, see below) methods of the Classes are the implementation of message passing.</p> <p>Inheritance Inheritance is the carrier of behavior between similar objects. When we implement the object model into a class model of common behavior one of the most important features of object orientation(OO) is that it allows us to define the is a relationship such as a dog is a mammal this represented as en extension of the class where the subclass(dog) has all the characteristics of the parent (mammal)</p> <pre><code>@startuml\nclass parent{\n   operations()\n   }\nclass child {}\nclass mammal{}\nclass dog{}\nparent&lt;|--child:extends\nmammal&lt;|-d-dog:is a\n@enduml\n</code></pre> <p>The concept of Information Hiding is about making sure that each time in the execution any part of the program only has the information it needs, the helps with establishing modularity and makes each part of the program atomic. This is something we want because it reduces the risk of side-effects and it allows for multiple developers to work on the project without risking to step on each others toes. Information hiding further lets you implement each parts without knowing how the internal data structure or algorithm implements the interface. This is accomplished through the use of access qualifier of the parameter/property or method. The levels of privacy are generally defined as: private, protected and public in increasing accessibility to the inheritance structure and other classes or objects. A private property is only accessible to the object itself, the protected are accessible to objects and classes in the same inheritance structure and public are accessible to any class or object in the software</p> <p>Additional material (From one of the Icons in OO): Stroustrup B. What is \u201cObject-oriented Programming\u201d? Software, IEEE. 1988 Jun 1;5:10\u201320.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#paradigms-of-programming","title":"Paradigms of Programming","text":"","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#structural-programming","title":"Structural programming","text":"<p>The concept of structural programming is from 1950s with the aim of improving clarity and quality of software, by the introduction of structured control flow and block structures that is clearly defined areas of computation. Edsger W. Dijkstra coined the term in his</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#imperative-programming","title":"Imperative programming","text":"<p>Imperative programming is a software development paradigm where functions are implicitly coded in every step required to solve a problem. In imperative programming, every operation is coded and the code itself specifies how the problem is to be solved, which means that pre-coded models are not called on.</p> <p>Imperative programming requires an understanding of the functions necessary to solve a problem, rather than a reliance on models that are able to solve it. The focus of imperative programming is how the problem should be solved, which requires a detailed step-by-step guide. Because the written code performs the functions instead of models, the programmer must code each step.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#procedural-programming","title":"procedural programming","text":"<p>Derived from Imperative programming, the basic concept of a procedure call where a procedure is a routine or subroutine which contains the computational steps to be carried out.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#object-oriented-programming","title":"object oriented programming","text":"<p>The evolution of programming languages that support the object oriented design paradigm is long and branched with different amounts of support for the different concepts. Any language can be used to code object oriented but the effort of doing so may not be useful or cost effective.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#functional-programming","title":"Functional programming","text":"<p>In functional programming, based of the lambda calculus of Alonzo Church during the 1930s, the idea of pure functions, are meant to have no side effects is implemented as a design strategy, the second concept that needs to be implemented is the concept of recursion which functions as the mechanism of iteration in functional programming.</p> <p>Programming languages like Haskell, LISP, IPL are languages that represent languages that implement the functional paradigm to varying degrees, but as most design paradigms any language that allows for recursive high order functions will allow for functional programming.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#declarative-programming","title":"Declarative programming","text":"<p>A problem is solved is not specifically defined, but instead focuses on what needs to be solved. Declarative programming provides a constant to check to ensure the problem is solved correctly, but does not provide instructions on how to solve the problem. The exact manner in which the problem is solved is defined by the programming language\u2019s implementation through models. Declarative programming is also called model-based programming. Functional, domain-specific (DSL) and logical programming languages fit under declarative programming, such as SQL, HTML, XML and CSS.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#tools","title":"Tools","text":"","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#uml","title":"UML","text":"<p>The Unified modelling language was first standardized in November 1997 as [UML-98]. It has its origin in Rumbaugh OMT and Jacobsens efforts with the OOSE (object oriented software engineering). It is by that nature very good at describing the Rational Unified Process (RUP), see below, created by Rumbaugh, Booch and Jacobsen in the late 90s. Today the UML standard is maintained by the omg standard development organisation. A brief history of the development of UML and other modeling languages which primarily are for object-oriented modeling(observe that the UML standard also works well for describing other models using such things as activity diagrams and sequence diagram to describe algorithms or interactions between sections of your code.)   Model language history from https://commons.wikimedia.org/wiki/File:OO_Modeling_languages_history.jpg <p>plantuml.com a way of using UML graphs and charts in markdown, and to specify the relationship between objects using text/pseudo code. The reason we chose plantuml is for its cross-platform integration and its integration with github and markdown. There are many other software with more advanced features and that can be interacted through graphical user interfaces. The traditional method is to use some sort of modeling software, a complete modeling software allows for at least forward engineering from models to code. There are of course great commercial versions but also some decent free ones. mermaid same as above draw.io Graphical tool for diagram drawing online Papyrus Eclipse Papyrus \u2122 Modeling environment is a graphical modeling environment closely coupled to the Eclipse IDE</p> <p>Markdown Diagrams is available both as chrome extension and as firefox extension. To see the diagrams the extension has to be loaded.</p> <pre><code>\ngraph LR\n    classDef actor fill:#f9f,stroke:#333,stroke-width:2px\n    classDef usecase fill:#ffc,stroke:#333,stroke-width:2px\n\n    A[Lecturer &lt;&lt; Actor &gt;&gt;] -- Presents --&gt; B((Present slides on UML))\n    C[Participant &lt;&lt; Actor &gt;&gt;] -- Learns --&gt; B\n\n    class A actor;\n    class B usecase;\n    class C actor;\n</code></pre> <pre><code>\nclassDiagram\n\nclass class01 {\n    Time : Date\n    + method02()\n}\n\nclass class02\n\nclass class03\n\nclass class04\n\nclass class05\n\nclass class06\n\nclass class07\n\nclass class08\n\nclass class09\n\nclass class10\n\nclass01 &lt;|-- class02 : inheritance\nclass03 --* class04  : aggregation\nclass05 --o class06  : composition\nclass07 &lt;|-- class08  : inheritance\nclass07 &lt;|-- class09  : inheritance\nclass09 &lt;|-- class10  : inheritance\nclass01 &lt;-- class10 : dependency\nclass02 -- class03 : association\n</code></pre> <pre><code>\nclassDiagram\n\n  class class01 {\n    -var01 : Integer\n    Time : Date\n    #method01()\n    +get_var01()\n }\n\n class01 &lt;|-- class02\n class03 *-- class04\n class05 o-- class06\n class01 --- class03 : knows\n\n</code></pre> <p>Activity diagrams have changed and there are a legacy style uml se image below, this traditional flowchart style can be almost replicated in mermaid using flowcharts as mermaid diagram tools do not include activity diagrams </p> <p>The new style(image below) has a slightly different approach to how selection is diagramed. as you can se it has a selection start node and end node where as the legacy style does not, this more closely depicts underlying pseudocode.</p> <p></p> <p>Which is produced using plantUML a diagram tool(see code snippet below) that is much more extensive than mermaid but requires more setup to work.</p> <p>@startuml !theme amiga start :activity 1; -&gt; data; if (stuff?) then (true)   :action 2; else(false) endif stop @enduml</p> <p>Unified modeling language is defined and managed by the OMG(object management group)(omg.org), which is a standards developments organization with 27 countries and more than 230 organizations which produces standards for business development and the software industry. UML is divided into Diagram types these types are supplemental, behavioral and structural - modeling. The Supplemental modeling is Use Cases, Deployments and Information flows. The Behavioral models include state machines, activities and interactions and are based on actions and common behavior. Structural modeling models Values, Classifiers and Packages and describe the common structure of the software. Structural modeling is vital to discover proper abstraction of classes and interaction models help you find the methods needed to run an object oriented design. Activities and state machines are great for describing the flow of a program and to supplement pseudo code when visualizing processes or algorithms.</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#diagrams","title":"Diagrams","text":"<p> The different diagram types. https://upload.wikimedia.org/wikipedia/commons/6/6f/Uml_hierarchie_des_diagrammes.png </p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#structure-diagrams","title":"Structure Diagrams","text":"<ul> <li>Class Diagram</li> </ul> <p>Class diagrams are the most common diagrams used in UML. Class diagram consists of classes, interfaces, associations, and collaboration. Class diagrams basically represent the object-oriented view of a system, which is static in nature.    Class diagram represents the object orientation of a system. Hence, it is generally used for development purpose. This is the most widely used diagram at the time of system construction. * Object Diagrams</p> <p>Object diagrams can be described as an instance of class diagram. Thus, these diagrams are more close to real-life scenarios where we implement a system.    The usage of object diagrams is similar to class diagrams but they are used to build prototype of a system from a practical perspective</p> <ul> <li>Component Diagram</li> </ul> <p>Component diagrams represent a set of components and their relationships. These components consist of classes, interfaces, or collaborations. Component diagrams represent the implementation view of a system.    During the design phase, software artifacts (classes, interfaces, etc.) of a system are arranged in different groups depending upon their relationship. Now, these groups are known as components.    Component diagrams can also be used to represent modules in modular development view.    Finally, it can be said component diagrams are used to visualize the implementation. * composite structure diagram * Deployment diagram</p> <p>Deployment diagrams are a set of nodes and their relationships. These nodes are physical entities where the components are deployed.    Deployment diagrams are used for visualizing the deployment view of a system. This is generally used by the deployment team. * Package Diagram</p> <p>Package diagram, a kind of structural diagram, shows the arrangement and organization of model elements in the project. Package diagram can show both structure and dependencies between sub-systems or modules, showing different views of a system, for example, as multi-layered or multi-tiered application   The purpose of these diagrams are to:     * Simplify complex class diagrams     * collect and organize diagrams and documents and key deliverables into a collection.     * A package is a collection of logically related UML elements     * Packages are depicted as file folders.</p> <ul> <li>Note  \u2212 If the above descriptions and usages are observed carefully then it is very clear that all the diagrams have some relationship with one another. Component diagrams are dependent upon the classes, interfaces, etc. which are part of class/object diagram. Again, the deployment diagram is dependent upon the components, which are used to make component diagrams.</li> </ul>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#behavior-diagrams","title":"Behavior Diagrams","text":"<ul> <li> <p>Activity Diagram Activity diagram describes the flow of control in a system. It consists of activities and links. The flow can be sequential, concurrent, or branched. Activities are nothing but the functions of a system. Numbers of activity diagrams are prepared to capture the entire flow in a system. Activity diagrams are used to visualize the flow of controls in a system. This is prepared to have an idea of how the system will work when executed. Activity diagrams are also excellent to describe Algorithms, in conjunction with pseudo code.</p> </li> <li> <p>Note Due to that the dynamic nature of a system is very difficult to capture. UML has provided features to capture the dynamics of a system from different angles. Sequence diagrams and collaboration diagrams are isomorphic, hence they can be converted from one another without losing any information. This is also true for Statechart and activity diagram</p> </li> <li> <p>Use Case diagram    A set of use cases, actors, and their relationships. They represent the use case view of a system. The intention of using a use case view and not just text to describe the use cases of your system is so you can describe the relationship between different stake holders, controllers (Actors)    A use case represents a particular functionality of a system. It is used to describe the relationships among the functionalities and their internal/external controllers.</p> </li> <li> <p>State Machine Diagram  Any real-time system is expected to be reacted by some kind of internal/external events. These events are responsible for state change of the system. Statechart diagram is used to represent the event driven state change of a system. It basically describes the state change of a class, interface, etc. State chart diagram is used to visualize the reaction of a system by internal/external factors</p> </li> <li> <p>Interaction diagrams</p> <ul> <li> <p>Sequence diagram  A sequence diagram is an interaction diagram. From the name, it is clear that the diagram deals with some sequences, which are the sequence of messages flowing from one object to another.   Interaction among the components of a system is very important from implementation and execution perspective. Sequence diagram is used to visualize the sequence of calls in a system to perform a specific functionality.</p> </li> <li> <p>Communication diagram or collaboration diagram</p> </li> </ul> <p>It represents the structural organization of a system and the messages sent/received. Structural organization consists of objects and links. The purpose of collaboration diagram is similar to sequence diagram. However, the specific purpose of collaboration diagram is to visualize the organization of objects and their interaction.  A MVC model describing a financial system from visual-paradigm-com</p> <ul> <li> <p>Note Plant UML can not do Communication diagram/collaboration diagrams</p> </li> <li> <p>Interaction overview diagram</p> </li> </ul> <p>UML Interaction Overview Diagrams provide a high level of abstraction an interaction model. It is a variant of the Activity Diagram where the nodes are the interactions or interaction occurrences.</p> <ul> <li>Timing Diagram</li> </ul> <p>Timing diagrams are UML interaction diagrams used to show interactions when a primary purpose of the diagram is to reason about time.</p> <pre><code>@startuml\n   robust \"Web Browser\" as WB\n   concise \"Web User\" as WU\n   @0\n   WU is Idle\n   WB is Idle\n@100\nWU is Waiting\nWB is Processing\n@300\nWB is Waiting\n@enduml\n</code></pre> </li> </ul>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#pair-programming","title":"Pair Programming","text":"<p>A tool for rapid development is the so called Pair Programming where two developers code on the same code simultaneously one as the \"Driver\" and one as the \"Navigator\"</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#design-patterns","title":"Design Patterns","text":"<p>A design pattern is a collection of best practices to solve a given design problem. Such as window management on your computer. One such pattern is the Model View Control pattern developed by  first introduced in 1979 by computer scientist Trygve Mikkjel Heyerdahl Reenskaug it describes the partition of a system into three components Model(the Data of the system and data interactions), the Controller/Control(the process control flow of the program) and the View (The User interface and external communications of the program)</p> <p> MVC model describing the interactions between program interface, control and data(Model) Some examples of where this pattern has been implemented in modern times are: <ul> <li>Ruby on Rails</li> <li>ASP.NET MVC Microsoft Active Server Pages in the .NET framework</li> <li>Laravel PHP framework</li> <li>Angular is built using TypeScript A good source for learning Design patterns and using as a reference material is Design Patterns, Elements of Reusable Object-Oriented Software by Gamma Et.al 1994</li> </ul>","tags":["SDLC","software","development","processes"]},{"location":"development_design/ReadmatSoftware/#ai-assisted-programmingai-vibe-coding","title":"AI assisted programming/AI (Vibe Coding)","text":"<p>With the emergence of more complex AI and especially the use of LLM (Large Language Models) in AI has given us a new development tool in AI assisted coding.  This may result in high quality coding solutions outside of our current solution space. One of the issues is that whenever we employ AI or construct AI we need to be aware of the particular ethics surrounding this, As it stands we as developers and writers have the soul accountability for any development don on and with ai. A good starting point in these ethics are the RDA guidelines from the AIDV working group that will be presented in full in may, until then another good source is the UNESCO recommendations on AI ethics These comprehensive recommendations basically states that in all development done with or on ai we need to keep a view of what is good for humanity in perspective. One hard issue in the scientific endeavor when using AI assisted development is credit. How do we credit. So how can we use AI in development, In the design and development phase Traditionally we seek the requirements as described above, but we can get a head start and generate a discussion point. In traditional requirements gathering we usually take the plain English project brief and sort out verbs and subjects, The verbs generally specify a feature the software needs to do and the subject something it has to provide or that it has. Once the requirements have been gathered and refined and checked against the test case. Test case for requirement documents generally are written on the form of does R have correspondence in the Project brief or technical requirement that follows the brief? There are quite a lot of references to code from natural sentence structure Microsoft chief engineer has written a short article to summarise some of the work https://news.microsoft.com/source/features/ai/how-ai-makes-developers-lives-easier-and-helps-everybody-learn-to-develop-software/ When presented with these options it is tempting to skip some of the steps in the SDLC, and go directly from Idea to production code, I caution against this as it will lead to less maintainable code where you as the developer have less understanding of issues arising. I instead recommend using ai assistance through out the development process and to view it as a partner that assists you both in design and implementation and testing. There is a risk that when presented with the \"Answer\" we feel we as developers should not touch \"Their\"(the AI) solution, this should be overcome as in all design work rework and reconceptualisation is inevitable.</p> <p>Since Feb 2025 the term Vibe Coding was introduced by Andrej Karpathy of OpenAI,</p> <p>Wikipedia describes the term Vibe Coding \"Vibe coding is an artificial intelligence-assisted software development technique popularized by Andrej Karpathy in February 2025.[1][2][3] The term was listed in the Merriam-Webster Dictionary the following month as a \"slang &amp; trending\" term.[4]</p> <p>Vibe coding describes a chatbot-based approach to creating software where the developer describes a project or task to a large language model (LLM), which generates code based on the prompt. The developer does not review or edit the code, but solely uses tools and execution results to evaluate it and asks the LLM for improvements. Unlike traditional AI-assisted coding or pair programming, the human developer avoids examination of the code, accepts AI-suggested completions without human review, and focuses more on iterative experimentation than code correctness or structure.</p> <p>Advocates of vibe coding say that it allows even amateur programmers to produce software without the extensive training and skills required for software engineering.[5][6] Critics point out a lack of accountability, maintainability, and the increased risk of introducing security vulnerabilities in the resulting software.[6][1]\"</p> <p>This term for describing AI assisted coding has been growing in popularity and is now the defacto term used for coding assisted by an LLM</p>","tags":["SDLC","software","development","processes"]},{"location":"development_design/excercise_1_Design/","title":"Discuss Risks and Requirements","text":""},{"location":"development_design/excercise_1_Design/#exercise-1","title":"exercise 1","text":"<p>Given the below project brief we are to create a rudimentary requirement specification and risk analysis</p> Exercise <p>Discuss risks and requirements (A short Needs Analysis) for the program above.</p> <p>The brief</p> <p>Do some analysis on data from an Uppsala weather station.</p> for the teachers <p>Needs update</p> <p>This project is based of the works of Bergstr\u00f6m and Moberg Bergstr\u00f6m and Moberg 2002, using the Uppsala \"dygnsv\u00e4rdes\" temperature data (link to the data set).</p> <p>The students will use some other data for Uppsala that have the same format for other weather stations in Sweden. Thus, the analysis can be extended to other sites.</p> <p>The outline of the project ...</p> <ul> <li>needs analysis and risk assessment</li> <li>uses Python and matplotlib plot the data</li> <li>uses <code>scipy</code> and <code>numpy</code> alternatively writing the functions from   scratch, depending on the needs in Algorithms and TDD sections.</li> <li>uses modular design to be able to swap out the prediction functions.</li> <li>uses object oriented design and development</li> </ul> <p>Details</p> <ul> <li>You have a temperature data file (Uppsala)</li> <li>Build a program that performs and presents some analysis<ul> <li>graph of running means</li> <li>other statistics<ul> <li>daily maximums/min</li> <li>yearly maximums/min</li> </ul> </li> <li>meta data extraction<ul> <li>name of station</li> <li>dates , times and variable from which column</li> </ul> </li> <li>presentation<ul> <li>header of graphs (name)</li> <li>axis labels</li> </ul> </li> </ul> </li> <li>When the program is run, user should be able to decide which analysis to perform, for instance with arguments from the commandline.</li> <li>Make sure to that it can load other data.</li> </ul> How? <ul> <li>Modular design</li> <li>Start with Uppsala file</li> <li>If time allows make program more general:<ul> <li>make possible to read other files (defined by)</li> <li>there is a document that connects filenames to stations</li> <li>argument can be station name and the program reads the right file</li> </ul> </li> </ul> <p>Hints for needs</p> <ul> <li>Think about what the user needs from your application</li> <li>Think about how the user interacts</li> </ul> <p>Hints for risks</p> <ul> <li> <p>specify the Risk in the requirements specification as Risk Probability,Risk severity  and Risk value (PxS)</p> </li> <li> <p>Risk is defined in ISO Guide 73:2009 as 'The effect of uncertainty on objectives'.</p> <ul> <li>This has an attached Note 1: 'An effect is a deviation from the expected \u2014 positive and/or negative'.</li> <li>A positive risk is commonly known as an opportunity, and can be addressed within the Risk Management process.</li> </ul> </li> </ul> <p>Investigate</p> <ul> <li>what the risks are in terms of access, legality</li> <li>risks of data loss etc.</li> <li>requirements on users' system</li> </ul> <p>A short checklist of categories:</p> <ul> <li>Uncontrolled System Access</li> <li>Ineffective Security Practices</li> <li>Data loss</li> <li>Program Errors<ul> <li>such as yielding the wrong result</li> <li>causing unintended system behavior</li> </ul> </li> </ul>"},{"location":"development_design/excercise_1_Design/#answers","title":"Answers","text":"One possible answer <p>Start with a look at the user needs and risk involved in the project</p> <p>Summary of the brief:</p> <ul> <li>Do some analysis on data from an Uppsala weather station and possibly other weather stations.</li> </ul> <p>Answer</p> <p>First! We ask ourself what is the scope and magnitude of this project</p> <ul> <li>This is a small project expected for the team to finish in about one week</li> <li>The project will be driven and implemented by a small team of distributed developers.</li> <li> <p>The aim of the project is to teach the team the SDLC process</p> </li> <li> <p>Conclusion:</p> <ul> <li>The project needs and goes through more formalized steps than a regular project of similar size.</li> <li>The projects needs a minimal risk assessment and needs determination.</li> </ul> </li> </ul> <p>Second! Determination of business and legal space.</p> <ul> <li>The project operates inside an open non-profit open source scope.</li> <li>The Data Protection Impact assessment is not needed for this data set since it is open and readily available, it is non sensitive non personal data with minimal economic impact.</li> <li>This project is conducted inside a educational setting in Sweden and therefore the legal space is simple.</li> <li>With that out of the way (Usually not conducted for small project but included here for completeness).</li> </ul> <p>Third! First iteration of Needs gathering</p> <ul> <li>Start by assessing the brief and determined legal and business space. These should be taken into consideration when evalutating the needs.</li> <li>The SRS (Software Requirments Specification) can be structured as seen below.</li> <li>An SRS is considered complete according to the following statement from the IEEE recomended practises <code>[Board &amp; ICSSES, 1998]</code></li> <li>An SRS is correct if, and only if, every requirement stated therein is one that the software shall meet.</li> </ul> Requirement ID Requirement Description Acceptance Criteria Test Cases R1 Open source development the development process follows the principles of open-source development In each step evaluate the accessability and openness R2 Program that performs and presents some analysis related to temperature - - R3 The software should be able to read and parse the data in the SMHI station data csv files - - R4 Load Dataset Load the Uppsala temperature dataset from the provided zip file. The dataset is successfully loaded into memory and is in the correct format (CSV or similar). R5 Preprocess Data Process the dataset to handle missing data, and approximate hourly or daily temperatures. Data is processed to fill missing records and approximate hourly temperature values. - R6 Temperature Data Visualization Use Matplotlib to create a graph displaying the recorded temperature data over time. A graph is created where the temperature is on the y-axis and time (dates) on the x-axis. R7 Calculate Average Temperature Curve Compute the average temperature curve to smooth the data and reduce noise. Plot this curve on the same graph as the original data. The average temperature curve is calculated and displayed on the graph. R8 Modular Design for Prediction Functions The system should allow different prediction functions (such as interpolation or trendline fitting) to be swapped out modularly. Code is written in a way that allows easy swapping of prediction algorithms. R9 Use of SciPy and NumPy Utilize SciPy and NumPy for numerical calculations, with some algorithms written from scratch when necessary. Appropriate use of SciPy/NumPy, or custom-written functions depending on the task. R10 Object-Oriented Design Implement the system using object-oriented principles. Different system components should be encapsulated in classes. The system follows an object-oriented structure, with clear separation of concerns (e.g., a class for data processing, one for plotting, etc.). R11 Risk Assessment and Error Handling Conduct a risk assessment to identify potential failure points (e.g., corrupted data, missing files) and implement error handling. The system gracefully handles errors, such as missing data, invalid file formats, or incorrect processing. R12 Performance Optimization Ensure the system performs efficiently, especially when processing large datasets. The system processes and visualizes the data within acceptable performance limits. R13 Clear Documentation of functionality Provide simple documentation or user interface elements for users to interact with the data and view the visualizations. Documentation is provided that explains how to run the system and interact with the visualization. R14 The software shall be developed in python , derived requirment from R9 Use of python as developement language The programm uses .py files to implement its function R15 Scalability The system must be able to handle a range of dataset sizes, from small subsets to the full dataset. The system works seamlessly with both small and large datasets. R16 User Interface (UI) Provide a simple and intuitive user interface for visualizing the temperature data and average curve. The UI should allow users to interact with the graph and adjust visualization options. R17 Code Quality and Maintainability The code should be modular, well-commented, and follow best practices for maintainability. Code is structured, commented, and adheres to object-oriented principles. R18 Documentation and Reporting Provide clear documentation for developers, including setup instructions, code comments, and user manuals. The documentation is complete and easy to follow, explaining how to use and modify the system. - <p>Fourth! Risks</p> <ul> <li>Remember to think of both primary and secondary/derived risks</li> <li>We start looking at the Risk involved in the software project.<ul> <li>Over engineering</li> <li>In this kind of small project the risk of a project failing is increased with the risk of making the solutions significantly more complicated than they need to be</li> <li>risk of miss read data probability 3 and severity 4 PxS=12 probability of a read mistake could easily arise if not properly care fore and it would result in the program not functioning therefore the severity is 4 and not addressing this risk will aversely affect the ability to run the program at all.</li> </ul> </li> </ul> <p>Fifth! Second iteration of needs analysis</p> <ul> <li>Now that we have established the risks we can go over our original table of requirements and revise them based on the risk evaluation.</li> </ul>"},{"location":"development_design/excercise_1_Design/#references","title":"References","text":"<ul> <li><code>[Board &amp; ICSSES, 1998]</code> Board, I. S. S., and ICSSES Committee.   \"IEEE recommended practice for software requirements specifications.\"   Institute of Electrical and Electronics Engineers. 1998.   Article</li> <li><code>ISO 12207:2018</code></li> <li><code>ISO 73:2009</code></li> <li><code>ISO 15271:1998</code></li> <li>Effective Methods for Software Testing: Includes Complete Guidelines,   Checklists, and Templates 3rd Edition</li> </ul>"},{"location":"emails/","title":"Emails","text":"<p>These are the emails sent out by this course</p> <ul> <li> <li> <li>","tags":["emails","communication"]},{"location":"emails/certificates/","title":"Certificates","text":"<p>Text for course certificate. Use https://rshiny.nbis.se/shiny-server-apps/shiny-certificate/ to create certificate, then change the dates in brackets</p> <pre><code>&lt;&lt;name&gt;&gt;\n\nhas participated in the NBIS workshop Programming Formalisms\nheld in Online during [[April 22 \u2013 26 2024]]\nThe workshop consisted of 40 hours of lectures and computer exercises.\nThis full 5-day workshop aims to g\nan understanding of the underlying principles of software development,\ndesign, and programming.\n\nThis included the following topics:\n\n    Introduction to programming formalism\n    Source control and GitHub\n    Introduction to UML using plantUML\n    Introduction to Algorithms\n    Data types and data structures\n    Introduction to Software Development Lifecycle\n    common models\n    planning\n    source/version control\n    documentation\n    reproducibility and sharing\n    collaboration\n    testing\n    Introduction to Modular programming and the modular programming paradigm\n    Introduction to Social Coding\n    Pair Programming\n    Introduction to Object orientation and Object oriented design\n    Introduction to Test Driven Design and Testing (TDD)\n    including to GitHub Actions\n    automated testing\n    Introduction Software re-usability through component based and Modular programming\n    Optimization, measuring and common pitfalls\n\nCourse Leader | Lars Eklund, PhD\nApplications Expert UPPMAX/NBIS\nNBIS | Uppsala University\n</code></pre>","tags":["certificates"]},{"location":"emails/intake_form/","title":"Intake form","text":"<p>This is the intake form as voted for.</p> <ul> <li>Your name</li> <li>Your email</li> <li>Affiliation</li> <li>How did you learn about this course?</li> </ul>","tags":["email","first contact","intake","communication"]},{"location":"emails/onboarding/","title":"Onboarding","text":"<ul> <li>Email title: Programming Formalisms: preparation and start</li> </ul> <p>Welcome!</p> <p>We are happy that you have chosen to participate in the Programming Formalisms course, where we turn scripters into computer scientists.</p> <p>Prepare yourself by going through the pre-requirements at https://uppmax.github.io/programming_formalisms/prereqs/: there is a checklist there. If you struggle or are uncertain with a pre-requirement: the onboarding session is there to help you out!</p> <p>Minimal schedule (with full schedule at https://uppmax.github.io/programming_formalisms/intro/#schedule):</p> <ul> <li><code>[date][day][time]</code> (optional) Onboarding</li> <li><code>[date]</code> Monday 9:00 (sharp!): start of lessons</li> </ul> <p>See you at the optional onboarding or Monday 9:00 (sharp!) at the Programming Formalisms course, in the Zoom room below.</p> <p>Cheers, the Programming Formalisms team</p> <p>[Zoom invite here]</p>","tags":["email","onboarding","first contact","welcome","letter","communication","newsletter"]},{"location":"emails/welcome_email/","title":"Welcome email","text":"<p>Welcome, we are so happy that you have chosen to participate in <code>[edition]</code> edition of the Course Programming formalisms.</p> <p>We hope to provide an good introduction to Programming formalisms and current practical software development methods</p> <p>Our course motto is turning scripters into computer scientists and to add theory to bolster already present practical skills</p> <p>This means that we will try to give some idea of why we develop the way we develop as we show you one practical way of making a software project from requirements gathering to deployment methods.</p> <p>We will start at</p> <ul> <li>(optional) <code>[onboarding data]</code> with an on-boarding session: here we'll   help you get ready for the course</li> <li><code>[course start data]</code> the course starts at 9:00 sharp</li> </ul> <p>We will use the same Zoom room and password through out the course</p>","tags":["email","onboarding","first contact","welcome","letter","communication","newsletter"]},{"location":"evaluations/","title":"Evaluations","text":"<p>These are our unedited evaluation results. We use multiple types of evaluations, such as Retrospects or anonymous forms.</p> Where is the form for anonymous feedback? <p>It is at the feedback page of this course</p> Where is the form for the Retrospect? <p>It is at the shared document of this course</p> <p>No checks here</p> <p>We choose only to edit evaluations when we have to (i.e. privacy regulation).</p> <p>This means these evaluations will not be checked for correct spelling.</p> Index Course 1 2023 summer 2 2023 autumn 3 2024 summer 4 2024 autumn 5 2025 summer 6 2025 autumn 7 2026 summer 8 2026 autumn","tags":["evaluations"]},{"location":"evaluations/2023_autumn/","title":"Retrospectives autumn 2023","text":"<ul> <li>Retrospective day 2</li> <li>Retrospective day 3</li> <li>Retrospective day 4</li> <li>Retrospective day 5</li> <li>Retrospective course, done at the end of the course</li> </ul>","tags":["retrospectives"]},{"location":"evaluations/2023_autumn/retrospective_results_course/","title":"Retrospective course","text":"<p>Here we have a Retrospective on the course as a whole. This retrospective was done at the end of day 5.</p> <p>Please, no pointing fingers (I am sure Jon would want me to say that :-) )</p>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_course/#what-went-well","title":"What went well?","text":"<ul> <li>Pair programming +3</li> <li>Lots of exercises +2</li> <li>Windows XP background -1</li> <li>Github workflow (CI) +2</li> <li>Hand-on demos that can be used in the future +3</li> <li>Provided an opportunity for more social programming, including working in a live github repository where other people are working +1</li> <li>Frequent breaks +3</li> <li>Time for questions and answers</li> <li>teachers are enthusiastic and seem to know what they're talking about</li> <li>Good level of social interaction +1</li> <li>Well expereicned teachers +1</li> <li>chatting during breaks +1</li> <li>cats +4</li> <li>providing references</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_course/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Lars rushed through the last parts of his lectures</li> <li>Too low tempo, especially in the lectures. +1</li> <li>Some excercises could be explained better. We spent a lot of time just discussing what we were supposed to do. +1</li> <li>Unclear desciption and explanation of exercises +5</li> <li>(Still) too many lectures -- Zoom fatigue</li> <li>Some parts of the pair programming seems not needed</li> <li>Presentations</li> <li>Balance between lectures and exercises.</li> <li>Skipping over content throughout the course; it gets confusing</li> <li>might be helfpul to do the git stuff all together</li> <li>too often told to not point fingers :finger_gun:</li> <li>less reading documents after Wed.</li> <li>too manny cats -6</li> <li>Different levels of preparation, everyone does not fulfill course prerequisites or preparations from last friday</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_course/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>If exercises or examples are related with published papers</li> <li>Personally, I felt that the course was held at too low level. I was expecting more details and technical discussion, especially in the algorithm and data structure sections and I was familiar with most of the course content. In the future I would suggest that you should make it more clear what level of material to expect. +1 (but in the opposite direction - found a lot was very technical)</li> <li>More focus on a project to try out all the things taught in the course. Design -&gt; Tests -&gt; Implementation -&gt; Iterations</li> <li>If there is an opportunity giving small group project and make presentation at the final day</li> <li>The course website should be keep maintaining</li> <li>No need to attempt completeness, one week is not enough -- material on top of what is discussed in documentation on GitHub -- more exercises, less lectures</li> <li>provide the correct/complete presentation PDFs on GitHub</li> <li>The coures was 'top-heavy'. The beginning (in my opinion) should be more interactive and with more utilities, like git, being taught. After the first day, then you can bring in more and more theory.</li> <li>I think when it is online, the course is limited in several certain ways. MAybe consider on-sote class?</li> <li>it would be nice to survey attendees beforehand for their favourite languages and experience with specific parts of the course - e.g some are gitmasters, some have never used git before and found it confusing af - and tailor classes appropriately</li> <li>Show more \"good\" github repos</li> <li>\ud83d\udc31\ud83d\udc31\ud83d\udc31 more cats \ud83d\udc31\ud83d\udc31\ud83d\udc31 +2</li> <li>additional animals +3</li> <li>Additional materials</li> <li>more dogs </li> <li>more on design of larger program projects</li> <li> <p>More examples of how these things are practiced in an academic setting</p> </li> <li> <p>if possible, work only on example project (no planets,no bacteria)</p> </li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_2/","title":"Retrospective day 2","text":"<p>Copied literally.</p>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_2/#what-went-well","title":"What went well?","text":"<ul> <li>Interactive activities were great hands-on experience</li> <li>Nice to live-view pair programming! +2</li> <li>Right amount of content in lectures, not too dense</li> <li>pair programming is fun +1</li> <li>Exposure myself to the new environment(pair-programming) +1</li> <li>More theories and practice of software development</li> <li>Pair programming</li> <li>Pair programming has a lot of fun!</li> <li>I think it is nice to try out with people from different field. +1</li> <li>More interactivity, less pure lecturing</li> <li>presentation slides available</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_2/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Some of the lectures were too long with little opportunity to discuss<ul> <li>Thanks for the feed back, this is somthing we will be working on</li> </ul> </li> <li>Still a bit too little practice time +2</li> <li>It was a bit difficult to follow the slides on pair programming</li> <li>Technichal issues (sharing code, )</li> <li>I couldn't find the slides for pair programming (PDF)</li> <li>First time forking repo during pair programming exercise +1</li> <li>As a beginner, fixing the environmnt and knowlage gap for pair-programming.</li> <li>No time for exercise 2 and 3 during the morning +1<ul> <li>Thank you this is one of the main issues I will look into</li> </ul> </li> <li>Less detailed documentation on GitHub than yesterday, though topics more complex</li> <li>Pair-programming exercise could have been better guided (suggest platforms before sending to breakout rooms)</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_2/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>When discussing programming paradigms in the morning, it would be interesting to hear about how the different strategies are viewed and have been viewed by programmers over time, especially since they are to some extent not compatible with each other.</li> <li>Tell exactly where to find the material on github (-1)</li> <li>SSH stopped working for me :(</li> <li>The content from the lectures this morning looked interesting but too dense for beginners. I think a reduced version would have been more effective.</li> <li>Some of the 'handover' for the activities were unclear. We spent 5 minutes or so trying to figure what we were supposed to be doing. (+1)</li> <li>Summary of content from slides, key takeaway points.</li> <li>Have a summary session in the end of each day? I was absent for a session and would be good to know. (-1)</li> <li>Would be good to have more bathroom breaks (+2)</li> <li>If there is a an on and off suppervision, which can facilitate or enhance the coding in abetter way.</li> <li>Some breakout rooms could be cut in favor of longer discussions, alternatively menti first and discussions afterward</li> <li>make it clear when we are moving to Menti</li> </ul> <p>x</p>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_3/","title":"Retrospective day 3","text":"","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_4/","title":"Retrospective day 4","text":"<p>Copied literally.</p>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_4/#what-went-well","title":"What went well?","text":"<ul> <li>The pull request part was really imprssive</li> <li>Found the pull request aspect of the practical useful +1</li> <li>Git pairing is more efficient</li> <li>.</li> <li>Hands on</li> <li>Refelcting on earlier feedback +1</li> <li>CI is quite cool. HackMD is good for discussion</li> <li>Testing proper git workflow +1</li> <li>Practising with opening issues, assigning them, opening pull requests on GitHub, as well as dealing with merge conflicts</li> <li>Interactive</li> <li>enthusiastic teaching! +2</li> <li>Nice practice time and pair coding</li> <li>Going back to revise the pull requests. I learnt alot from that. +1</li> <li>Responded to feedback</li> <li>Frequent breaks. +1</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_4/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Made a mistake on a pull request and got time shortage for merge part</li> <li>PR opened when the develop branch failed seems not update automatically when develop was fixed</li> <li>correct pull request was overwirtten</li> <li>exercise goals not always clear</li> <li>Material should be more informative</li> <li>Screensharing on linux</li> <li>[Richel moved this to here] I couldn't start my own HackMD doc for live coding with subscribing.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_4/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>Speed a litte bit to make decrease in the lecture part</li> <li>More discussion around appopriate classes/structs for solving project.</li> <li>Work with an established exercise</li> <li>I would have liked more indept discussion about data structures and algorithms. Here you didn't say much more than that they are concepts you can use. (+1)</li> <li>write some light program thats can actually do something, e.g., visualize the bacteria moving?</li> <li>explain how to setup CI locally? so it automatically check the sutomation before push</li> <li>It may sometimes make sense to be in groups of 3 (vs 2) - but I guess this is subjective</li> <li>HackMD pages for shared coding? Maybe I missed it but I think it could be better than screensharing. - Students get thier own mini projects to go thru all the practices. Rather than scattered excercises.</li> <li>state goals before each break out room</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_5/","title":"Retrospective day 5","text":"<p>Only Day 5 here :-)</p> <p>Please, no pointing fingers (I am sure Jon would want me to say that :-) )</p>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_5/#what-went-well","title":"What went well?","text":"<ul> <li>Pairing works much better +1</li> <li>Using HackMD for UML was very nice. +2</li> <li>learning what modules are</li> <li>nice too have R examples +1</li> <li>Using HackMD to code rather than screen sharing +3</li> <li>Activity diagram +2</li> <li>Once it worked, plantUML in VS code was very nice</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_5/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Still material and exercise description</li> <li>The presentation is less informative to follow on</li> <li>did not finish all of morning lecture +1</li> <li>some changes are not staged after Git pulling. No change..</li> <li>More info about use-cases/activity diagrams. Use, differences etc.</li> <li>morning exercises rushed</li> <li>maybe somewhat unclear difference between use-case and activity diagrams +1</li> <li>UML issues +3</li> <li>too little time for material and exercises of morning session</li> <li>profiling part was a little diffuse</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_autumn/retrospective_results_day_5/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>spend more time on use-case and activity diagrams +3</li> <li>provide the uml code for diagram examples in lecture</li> <li>Written instructions for exercises</li> <li>talk more about design patterns +1 or maybe share some nice tutorials</li> <li>Have a mini start-to-end exercise after the course where we can spend half the day running through a small piece of coding. Practise all of it.</li> <li>Be clearcut on what to do in the exercise.</li> <li>examples for optimisation showing well- and poorly-optimised examples +1</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2023_summer/","title":"Retrospectives of 2023-05-29","text":"Link Result Day 1 retro PDF Day 2 retro PDF Day 3 retro PDF Day 4 retro PDF Day 5 retro PDF","tags":["retrospectives"]},{"location":"evaluations/2024_autumn/","title":"Evaluation autumn 2024","text":"<ul> <li>Reflections: Richel</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/#monday","title":"Monday","text":"<ul> <li>Retrospect</li> <li>Confidences per question as tally</li> <li>Confidences per question as average</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/#tuesday","title":"Tuesday","text":"<ul> <li>Retrospect</li> <li>Confidences per question as tally</li> <li>Confidences per question as average</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/#wednesday","title":"Wednesday","text":"<ul> <li>Retrospect</li> <li>Confidences per question as tally</li> <li>Confidences per question as average</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/#thursday","title":"Thursday","text":"<ul> <li>Retrospect</li> <li>Confidences per question as tally</li> <li>Confidences per question as average</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/#friday","title":"Friday","text":"<ul> <li>Retrospect</li> <li>Teacher comments</li> <li>Confidences per question as tally</li> <li>Confidences per question as average</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/20241118/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li>2024-11-18</li> <li>Distilled from shared document of same date</li> </ul>","tags":["shared","document"]},{"location":"evaluations/2024_autumn/20241118/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Good discussions in breakout rooms, great support, diverse experience of audience, frequent breaks</li> <li>A: Discussion</li> <li>A: Discussions in breakout rooms</li> <li>A: Really well developed documentation with instructions and examples, hints etc</li> <li>A: Discussions</li> <li>A: The explanations and discussions</li> <li>A: Answering quickly on the team sessions to questions</li> <li>A: Having clear example on what to do help us to finish and understand the exercises better</li> <li>A: Discussions on real-life situations</li> <li>A: Having access to examples of done documents.</li> <li>A: Interactive discussions, input from everyone.</li> </ul>","tags":["shared","document"]},{"location":"evaluations/2024_autumn/20241118/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: In some cases lack of concrete examples, the project itself wasn't that integrated into some of the exercises, sometimes not clear how to apply to research, often topics are more applicable to rly large projects, lecture closely matched course document</li> <li>A:</li> <li>A:Short times in the breakout rooms</li> <li>A: Sometimes goals werent super clear (ie how to write requirements from scratch)</li> <li>A:Clearer documentation in some points</li> <li>A:Not getting used to the abbreviations quick enough and then not knowing what was being discussed</li> <li>A: course content in the website changing when it was already needed</li> <li>A:Unclear instructions on the assignments</li> <li>A: No clear instruction on what to do. Having example will help.</li> <li>A:Unclear directions</li> <li>A: For some discussions there was very limited time in breakout rooms</li> <li>A: Limited time</li> <li>A: Not accurate information (links, instructions) in the course documents.</li> </ul>","tags":["shared","document"]},{"location":"evaluations/2024_autumn/20241118/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A:Write a clearer documentation in some points and perhaps a \"dictionary\" for main terms</li> <li>A:More examples</li> <li>A:Write tasks more clearly (for example \"Task 1: Do this or that\")</li> <li>A: More hidden hints with correct answers</li> <li>A: Have a terminology section where abbreviations or more technical terms are defined in a clear and easy to find manner</li> <li>A:Separate presentation and course document, more info on how to apply to 1-person research (esp. risk section), Prepare a gold-standard requirements file so all participants can be on same page</li> <li>A: Since we are a small group, we could work independently and share with everyone, instead of breakout rooms</li> <li>A: Hints with instructions and directions for technical parts and possible issues</li> <li>A: Make a concrete example not specifically related to the exercise, especially given a limited time to do it.</li> <li>A:Phrase the exercises concisely already in the course website</li> <li>A:Give an example before move into the assignment</li> </ul>","tags":["shared","document"]},{"location":"evaluations/2024_autumn/20241118/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>[Lars] - Go back to separate Lecture and Website documentation</li> <li>[Lars] - Double check Formatting of website markdown</li> <li>[Lars] - Add examples directly into hints.</li> <li>[Lars] - Clear tasks with hidden do a, then b then c.</li> <li>[Lars] - clearer links to example documentation gold-standard project.</li> <li>[Lars] add examples of how this helps if you are a solo developer.(Long term, as current examples are more team focused)</li> <li>[Lars] relate to more concrete resarch focused examples.</li> <li>[Lars] Examples don't need to read the text.</li> </ul>","tags":["shared","document"]},{"location":"evaluations/2024_autumn/20241119/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li>2024-11-19</li> <li>Distilled from shared document of same date</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241119/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Was interesting to discuss and read more, and figure it out by ourselves.</li> <li>A: Teamwork and discussions was good</li> <li>A: Having practical example really help and discuss it. Video helps too.</li> <li>A:</li> <li>A: Examples in the form of screenshots</li> <li>A: Examples in the documentation, the interaction activity between teacher and student, the discussion.</li> <li>A:</li> <li>A: Working together on problems</li> <li>A: Having examples in the information pages, and answers</li> <li>A: Better examples and clearer instructions</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241119/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: A very fast pace, at times there was too much info to absord (ie unit testing)</li> <li>Having to juggle both doing something for the project and also focusing on the exercises at the same time</li> <li>A: Lack of time to complete the exercises.</li> <li>A:Not knowing form the start exactly what to do during the exercises</li> <li>A: Little time to work on exercises after understanding all the info</li> <li>A: Laggy teaching video</li> <li>A: From simple example to applying it to project design in a short period of time is quiet challenging.</li> <li>A: Not knowing where to find certain things (kambam board, the correct learners folder etc)</li> <li>A: Not knowing from where to start and to where to go</li> <li>A: Not enough time for the exercises, not knowing the time limit for the exercises.</li> <li>A: Teaching video not working properly, wasn't able to see the code properly because of this.</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241119/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Give more time to absorb information before having to apply it on a big project</li> <li>A: Either focus on simpler exercises and learning or focus on project work</li> <li>A: More clear tasks</li> <li>A: Focusing on less topics and working on those more deeply and with more time</li> <li>A: take into account the time that these feedback sessions need (second day that the last exercise session is cut short)</li> <li>A: In the teaching video show both the code and where it is being copied from, for clarity</li> <li>A: Give more time</li> <li>A: Maybe more time or simpler(focused) exercises.</li> <li>A:</li> <li>A: Tell us how much time we have for completing all exercises. Helps us to not spend too much time on just one of the exercises and then the time is up without us knowing.</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241119/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>[ ] Fix video</li> <li>[ ] More time (in multiple forms):<ul> <li>Discuss with team: should I/we reduce my/own content and/or remove the project?<ul> <li>RB: I volunteer to reduce content and suggest to keep the project</li> </ul> </li> </ul> </li> <li>[ ] Mix of simple exercises and project work:<ul> <li>Discuss with team: should I/we remove the project or schedule it as project hours?<ul> <li>RB: I volunteer to schedule some of my hours as project hours</li> </ul> </li> </ul> </li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241120/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li>2024-11-20</li> <li>Distilled from shared document of same date</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241120/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: More time to finish exercises</li> <li>A: Working in pairs and doing exercises together</li> <li>A: Taking a longer time to do exercises and learn and understand what we are doing</li> <li>A:Very nice graphics for helping do exercises today</li> <li>A:Getting clearer examples on the formal testing</li> <li>A:Clear instructions and more time to finish.</li> <li>A:Appropriate time to complete the exercises and having goos resources by hand to check theory and examples.</li> <li>A: Having enough time to understand and to work together the exercise really help a lot to understand and finish the task.</li> <li>A: Working together, discussion, exercises.</li> <li>A: Pair programming exercise was really nice, testing documentation was great</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241120/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Testing could've been a bit deeper. Covering things like mocking. No idea how good pair programming is supposed to look like in practice (only in theory).</li> <li>A: Such lack in code knowledge.</li> <li>A: Didn't know exactly how to do the formal testing in pycharm</li> <li>A: Certain knowledge gaps when it comes to python coding</li> <li>A: Unit testing being a difficult concept</li> <li>A: the pull request exercise and the pretend code review exercise were very similar.</li> <li>A: VS code not cooperating with the testing module</li> <li>A: Some exercises was a bit confusing (ex Exercise 2: put example code to fit the testing framework)</li> <li>A: Coding knowledge influence the speed to do the exercises and how much we understan.</li> <li>A: The morning lectures seem didn't explain clearly</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241120/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe perform a quick round of pair programming with the teachers, to me it was not clear how to behave as navigator and I felt like I was micromanaging and being a bad navigator. Refer to online documents for further research in testing (maybe I just missed it). Distribute a cheat sheet after each day summarizing most important?</li> <li>A: Include tutorial link or something to get testing to work in another IDE than vs code, instead of just saying \"try to get it to work in your IDE\".</li> <li>A:</li> <li>A: More examples for each topic</li> <li>A: If possible simplify things even further, or expand on rationale behind each step not just \"big picture\"</li> <li>A: Maybe have a example on testing the code.</li> <li>A:Having \"extra\" exercises that are more difficult that one can try when done with the regular exercises.</li> <li>A: Make the lecture clear and concise. Better to give a practical examples than just explain the concept.</li> <li>A: Give more practical examples of git forking and branching and when it is appropriate to use them.</li> <li>A: Maybe more practical examples.</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241120/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>See Richel's reflection of the day</li> </ul>","tags":["shared doc"]},{"location":"evaluations/2024_autumn/20241121/","title":"Programming formalisms","text":"<ul> <li>2024-11-21</li> <li>Distilled from shared document of same date</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/20241121/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Good with range in difficulty. Group exercises are great!</li> <li>A: Bigger range in difficulty of exercises</li> <li>A: Group learning is always fun. Frequent brakes. The reading for a few minutes into discussion is nice if you call someone out!   otherwise it drags a bit bc no one dares to speak first</li> <li>A: The tips and code snippets for helping do exercises</li> <li>A: Range of difficulties help assess first the things you understand. Pair programming really help.</li> <li>A: Designated time for reading is good!</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/20241121/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Not following schedule is a bit confusing, I think we worked on thursday, tuesday and wednesday today.</li> <li>A: felt like some topics were almost skipped over (obviously due to time).   But if we dont have time for them maybe we do not need to bring them up.</li> <li>A: The concepts themselves being very abstract and difficult</li> <li>A: Some of the topics are hard to learn while not actually applying them.   E.g. while I think I have a good grasp of what modular programming is   I'm not sure I could recognize it.</li> <li>A: Applying the lesson directly to the field that you are not familiar with   kinda need more time. Additionally, just watching lecture video for a   specific topic to learn sometimes is not helpful cause there are concept   introduce that was not mentioned in class.</li> <li>A: Starting the day with the most difficult part of the day   (before properly waking up haha)</li> <li>A: The youtube lecture was a bit hard to follow,   could be better with more examples and images.</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/20241121/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe use the workflow: individual reading -&gt; discussion   -&gt; exercises in group for stuff like modular programming.   Also be more clear with the schedule   I got lost a few times today after zoning out.</li> <li>A: Give more concrete examples for the abstract concepts   (like what are objects in the programming world)</li> <li>A: The function design discussion was nice,   maybe follow that format more.</li> <li>A: Maybe have a table of definitions and their equivalent names in   object oriented programming and non-object-oriented, including the   relationsnhips between them. (classes, methods, functions etc)</li> <li>A: Give code examples of modular programming and refactoring</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/20241121/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>Changing schedule is a problem<ul> <li>[ ] Explain we do student-centered learning on Day 1 of the course   #111</li> </ul> </li> <li>[ ] Make list of definitions #112</li> <li>[ ] More code examples #113</li> <li>[ ] Remove YouTube video for modular programming   #114</li> <li>[ ] Give more concrete examples for the abstract concepts in OOP   #115</li> </ul>","tags":["evaluation"]},{"location":"evaluations/2024_autumn/20241122/","title":"Programming formalisms","text":"<ul> <li>2024-11-21</li> <li>Distilled from shared document of same date</li> </ul>","tags":["evaluations"]},{"location":"evaluations/2024_autumn/20241122/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Great references for future use</li> <li>A: Exercises, group work</li> <li>A: Having the code snippets up on the course website to use and those snippets having explanations too.</li> <li>A: The exercises help me understand the lectures. Working in groups is really good.</li> <li>A: Working in groups to test out the theory was super useful</li> <li>A: Working in groups, the examples and discussions.</li> <li>A: Group work</li> </ul>","tags":["evaluations"]},{"location":"evaluations/2024_autumn/20241122/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Windows code snippets not working, took a lot of time from the exercises</li> <li>A: Not all the commands working on Windows</li> <li>A: Not knowing where to make the exercise files, was not specified in instructions</li> <li>A: Some of the  provided commands did not seem to work for windows. Had to improvise.</li> <li>A: Felt like the goals were not as clear today. Difficult to transfer the topics from today in a lecture. Felt like the project was not complex/functional enough to write proper documentation</li> <li>A: Unclear guide in the exercises (specifically in the documentation)</li> <li>A: Some things were very fast for me.</li> </ul>","tags":["evaluations"]},{"location":"evaluations/2024_autumn/20241122/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Have a more functional project for which writing documentation actually provides worth. Installation/requirements/etc were not extensive enough for the exercises imo. Also maybe resetting the state of the project Github so everyone is on same page?</li> <li>A: Adding commands that work on windows as well as mac/linux</li> <li>A: Put everything practical that we are supposed to do within the exercises. It's a bit confusing when some parts are in the \"theory part\" with code that we are supposed to use and some parts are in \"exercises\"</li> <li>A: Have more realizable project. Make the guide much clearer.</li> <li>A: Early on ask about experience level amongst the group and group people based on their experience to enable more difficult exercises to be done.</li> <li>A: More clear exercises, specifying some points such as direction, folder etc. Something like step-by-step as well as in some examples and exercises.</li> </ul>","tags":["evaluations"]},{"location":"evaluations/2024_summer/","title":"Evaluations","text":"Day Evaluation 1 2024-04-22 2 2024-04-23 3 2024-04-24 4 2024-04-25 5 2024-04-26","tags":["evaluations"]},{"location":"evaluations/2024_summer/20240422/","title":"20240422","text":"","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240422/#retrospective","title":"Retrospective","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240422/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>The content of all lectures was great and the starting level was perfect (for me at least).</li> <li>Really clear material, easy to follow. I really enjoyed the exercises in the breakout rooms, it makes it easier to work and put in practice what we learnt today.</li> <li>It was clear instructions and easy to follow the lectures. Very interesting content.</li> <li>Learned how to find the requirements for the software development from a particular topic.</li> <li>Breakout room exercises and discussions</li> <li>Orientations on the course. structure of the course, format of the organization. theory combine with practice. interactive teaching is also good.</li> <li>I have learned a lot in the first day. The instruction was very well.</li> <li>Exercises with breakout rooms, setting up group github repository</li> <li>Clear instructions on the course materials</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240422/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>Time allocation works fine for all sections</li> <li>The schedule was fine.</li> <li>The schedule was ok, we had enough time.</li> <li>The exercises were well scheduled.</li> <li>more time for break.</li> <li>Every section had ample time</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240422/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>some technical issues with connecting github account to the course.</li> <li>More reading materials and relevant recipes for exercises</li> <li>I have enough time to understand all session</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240422/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<ul> <li>More content on the HPC workflow management?</li> <li>Yes I agree with that, some more on how to write workflows</li> <li>Maybe present the exercise before a break so we have the time to read the intructions on what to do? It was kind of hard to grasp on the fly what to do. At least for the last one. However, the breakout room session compensated for it because the things that I did not get my breakout roomies explained to me and vice versa.</li> <li>Agre with the upper comment on the exercise instructions.</li> <li>More exercises and materials</li> <li>Instructions on combining different languages into one software</li> <li>How to use pytest</li> <li>Actually there was a lot of information to consume in a certain time is kinda hard and Every topic is very importent. so sometime it takes a lot of effort to take it all in that time.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240422/#action-points-by-teachers","title":"Action points by teachers","text":"<ul> <li>We agree that breaks should be for breaks</li> <li>We think it would be good that learners don't read instructions in breaks</li> <li>Already done: session 'Deployment' has HPC, where one does not have sudo rights</li> <li>Already done: session 'Testing' uses a testing framework ('unittest' instead   of PyTest, but hey, it's a formal testing framework)</li> <li>We don't have workflows in the course yet.   We often discuss what to put in yes/no   and we feel now the other topics are even more important</li> <li>We don't have instructions on combining different languages in the course yet.   We often discuss what to put in yes/no   and we feel now the other topics are even more important</li> <li>There is indeed a lot of information.   We often discuss what to put in yes/no.   We could not settle on an algorithm to determine what is to be in the content.   The 'why'/'what'/'when'/'where' should be there</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240423/","title":"Retrospective 2024-04-23","text":"","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240423/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Pair programming</li> <li>Exercises sessions were dynamic and fun</li> <li>Pair programming was very instructive and fun.</li> <li>All the parts were a new way of seeing the process take form   so I think all the exercises went well.</li> <li>Really fun with pair programming and learn from eachother.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240423/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>All was okay</li> <li>All exercises were very stressful since you have to do a reset/context switching everytime we change breakout rooms.   Spend time on finding correct files and material.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240423/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>I didnt feel anything hold us back today</li> <li>Maybe too simple of exercises</li> <li>Technical issues. Not so much time to spend on the actual exercise.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240423/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<ul> <li>A small section about what merge conflicts are and how to resolve them</li> <li>I didnt have any issue that has to be inprove.It went well.</li> <li>I think the first pair programming exercise was a little confusing   since we did not have to both work on a same document.   Maybe task to create a simple for loop where we individually   have to contribute to a single def?</li> <li>Add some complementary exercises if there is available time</li> <li>I think it was very interesting</li> <li>More time to read through the exercise.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240423/#action-points-by-teachers","title":"Action points by teachers","text":"<ol> <li>All exercises were very stressful since you have to do a reset/context switching everytime we change breakout rooms. Spend time on finding correct files and material.</li> <li>More time to read through the exercise.</li> </ol> <p>We understand that this can be felt like that. We do think this is worth it above the alternative of not using different partners. Maybe we should have been more clear that it is perfectly fine and expected that it tales to find the correct files and material..</p> <ul> <li>TODO: Richel mentions this tomorrow</li> </ul> <ol> <li>Maybe too simple of exercises</li> <li>Add some complementary exercises if there is available time</li> </ol> <p>We wonder what this is about. Here we discuss for each teacher:</p> <ul> <li>Lars: more complex design structure would water down the exercise</li> <li>Richel: I am happy to hear this! My exercises should be simple,   as it is the workflow (indeed, with many technical problems)   that is the goal of the exercise</li> </ul> <p>We do agree that one can feel that the exercises too simple!</p> <ul> <li>[ ] TODO: Richel mentions this tomorrow</li> <li>[ ] TODO: Lars adds a second tier of exercises</li> </ul> <ul> <li>A small section about what merge conflicts are and how to resolve them</li> </ul> <p>We agree, this should have been discussed on Monday</p> <ul> <li>[ ] TODO: Bj\u00f6rn: consider discussing merge conflicts on Monday</li> </ul> <p>I think the first pair programming exercise was a little confusing since we did not have to both work on a same document. Maybe task to create a simple for loop where we individually have to contribute to a single def?</p> <p>Completely agree! Richel will restructure this better, as indeed, it feels (and he said so too!) unnatural.</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240424/","title":"20240424","text":"","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240424/#retrospective","title":"Retrospective","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240424/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Creating and using branches on github</li> <li>Github repetitions was good practice</li> <li>Working with branches on git and how to deal with conflicts.</li> <li>Doing testing. Listening to awesome lectures. Learning new things!</li> <li>Can unsderstand well the git workflow now and enjoy how to doing test</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240424/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240424/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>Switching between VS-code and github caused some trouble   in updating the branches on the terminal,   causing some confusion in merging branches (solving conflicts)</li> <li>Short time for unittesting exercise, felt rushed</li> <li>Switching between users in pair-programming takes time. So maybe more time might be needed.</li> <li>More time for the testing exercises, not enough time to really try the testing.</li> <li>Need to pratise more in the testing exercises</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240424/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240424/#action-points-by-teachers","title":"Action points by teachers","text":"<ul> <li>Switching between VS-code and github caused some trouble   in updating the branches on the terminal,   causing some confusion in merging branches (solving conflicts)</li> </ul> <p>This is a technical issue we cannot help. We hope there is enough time to fix the expected unexpected problems.</p> <ul> <li>Short time for unittesting exercise, felt rushed</li> </ul> <p>Agree, that is why we continue tomorrow :-)</p> <ul> <li>Switching between users in pair-programming takes time.   So maybe more time might be needed.</li> </ul> <p>Agreed that this takes time. We hope there is enough time to do so.</p> <ul> <li>More time for the testing exercises,   not enough time to really try the testing.</li> </ul> <p>Agree, that is why we continue tomorrow :-)</p> <ul> <li>Need to pratise more in the testing exercises</li> </ul> <p>Agree, that is why we continue tomorrow :-)</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240425/","title":"20240425","text":"","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240425/#retrospective","title":"Retrospective","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240425/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Most of the pair programming and TDD went well.   Really enjoyed todays topics and exercises.   I just had a great day with learning (from both teachers and other learners).   WE really got a chance to practice the workflow.</li> <li>Exercises were really fun, I really enjoyed today's exercises.   I really appreciate that we had more time for hands-on exercises.</li> <li>Good lectures and a lot of good exercices to get use to GitHub</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240425/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>I think we had enough time for most exercises.   However, at this point you also know when it is fine to not finish an exercise.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240425/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>The groups were switched too often, which in turn,   broke the continuity of lessons since everyone was doing somewhat different things.</li> <li>Expected to have more on Data structures and algorithms</li> <li>Too much GitHub, interesting but maybe it should be a separate course</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240425/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<ul> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240425/#action-points-by-teachers","title":"Action points by teachers","text":"<ul> <li>I think we had enough time for most exercises.   However, at this point you also know when it is fine to not finish an exercise.</li> </ul> <p>Maybe we should mention more clearly that exercises are often time limited and it is OK to not finish: we (try to) make sure you've done all that was needed, while also catering for the faster learners.</p> <ul> <li>The groups were switched too often, which in turn,   broke the continuity of lessons since everyone was doing somewhat different things.</li> </ul> <p>We understand this. The idea is that if you are in a pair that does not work well, you'll switch soon enough. Indeed, this also breaks good pairs. Next iteration of the course, I'll try 2 hour sessions.</p> <ul> <li>Expected to have more on Data structures and algorithms</li> </ul> <p>We agree. Richel decided to prioritize getting more experience in for tomorrow. We teachers agree that should not have been needed and we look for ways to streamline the course better: it should have been in, also Optimization!</p> <ul> <li>[ ] TODO: discuss Monday being the formal workflow day</li> </ul> <ul> <li>Too much GitHub, interesting but maybe it should be a separate course</li> </ul> <p>We agree. We really need GitHub to offer a context in which the theoretical concepts start making sense.</p> <p>We discuss: should we make the NBIS GitHub course a prerequisite?</p> <ul> <li>[ ] TODO: add to evaluation of tomorrow:</li> </ul> <pre><code>We use a lot of GitHub, although GitHub is not part of the course goals.\nWe do need to use GitHub, to give a context in which theoretical\nconcepts start making sense.\n\nHowever, we could require that our learners have followed the NBIS GitHub\ncourse (or something similar) before the course.\n\nShould we? Should we add this requirement?\n</code></pre>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/","title":"20240426","text":"","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#retrospective-day-5","title":"Retrospective Day 5","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Mixing teachers and topics during the last day.   At least I feel that my brain is a bit soaked in information   so it was nice to have this last day with different topiscs   so you could stay alert.</li> <li>Everything went well</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>I think we had enough time to at least get the concept of each exercise   even if we could do more.</li> <li>I think we had enough time.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#question-should-a-github-course-be-a-prerequisite","title":"Question: should a GitHub course be a prerequisite?","text":"<p>In the course we spend a lot of time on GitHub as we use/need it. However, there are plenty of GitHub courses (e.g. NBIS has one). Should having followed a GitHub course be a prerequisite?</p> <ul> <li>Yes, but then reduce the load of GitHub exercises</li> <li>Maybe its a good idea to at least write in the pre-req that github will be used a lot.</li> <li>Yes, at least the basic stuff (how to create an issue, create a branch, etc.).</li> <li>Probably, but it might be a reducing factor for applicants. I can only take one course per year. So having another course as a pre-requisite would probably make it a bit hard for me to attend.</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>For me it was too many new tools and I didn\u00b4t have enough time   during the exercises to switch between mermaid and github ..</li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<p>[nothing]</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#course-evaluation","title":"Course evaluation","text":"<p>&amp;TLDR: write something about the course</p> <p>The course motto is 'turning scripters into computer scientists', by 'adding theory to bolster already present practical skills'. The purpose of the shared project is to give a realistic/complex environment where the theoretical concepts can be experienced (e.g. branching, code reviews).</p> <ul> <li>How can we better achieve those goals?<ul> <li>The course was very good overall   and gave a good perspective on software design,   but I missed some other application outside developing a package,   such as how to apply those software development techniques   to developing analysis workflows.   For example, should we use TDD for workflows? or are classes also useful in workflow contexts?</li> </ul> </li> <li>Where did we do a good job and where could we do better?<ul> <li>The course structure was very good. We can do better for exercises.</li> <li>It was a very good course with very clear documentation.   The exercises were also very good eventhough there was not always enough time.</li> <li>I think it could be more clearly stated in the beginning of the course   that we were not supposed to actually build a complete software.   The first days I got really stressed when I didn't finished   the exercises and when I couldn't handle all the new tools.   After a couple of days I figured out that that was not purpose. Then I could relax a bit and focus more on learning instead of stressing about the practical parts.</li> </ul> </li> <li>What would you keep and what would you change?<ul> <li>Love all the practical exercises, but the GitHub was a bit too much.   Would have focuses on the software design exercise more.</li> <li>I enjoyed all the git-hubbing but I have some experience   from before so it mostly gave me the tools   to develop my already exixstig skills.</li> </ul> </li> <li>If you want to do more of something, what should be done less of?<ul> <li>Modularity and data structure, less practice about git issue</li> <li>More testing, less flowcharts.</li> </ul> </li> </ul>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#write-something-about-the-course-1","title":"Write something about the course 1","text":"<p>I enjoyed the course. Now I have more background to able to code a program for others who can use. I love the pair programming. This is more interecting than I think. Thank you very much!</p>","tags":["retrospective"]},{"location":"evaluations/2024_summer/20240426/#write-something-about-the-course-2","title":"Write something about the course 2","text":"<p>The course was very good. Really nice material and easy to follow. There has been a lot of information to digest but I think it will be easy to later go to the website and read through again all the excellent material. The pair programming was really fun and very instructive, I really enjoyed it. I think everything went fine during the course but sometime we didn't have enought time to complete the exercises, it felt a bit rushed. In terms of content, I missed more practical exercises on how to optimise the code. But as a summary a really nice course :)</p>","tags":["retrospective"]},{"location":"evaluations/2025_autumn/","title":"Evaluations Autumn 2025","text":"Day Evaluations 1 Evaluation 2 Evaluation 3 Evaluation 4 Evaluation 5 Evaluation"},{"location":"evaluations/2025_autumn/20251023/","title":"Evaluation","text":"<ul> <li>Date: 2025-10-23</li> <li>Day: 1</li> </ul>"},{"location":"evaluations/2025_autumn/20251023/#retrospect","title":"Retrospect","text":""},{"location":"evaluations/2025_autumn/20251023/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Real examples to explain the the theory. Small size groups</li> <li>A:</li> <li>A:Real-life examples and practicals</li> <li>A:</li> <li>A:Examples and direct explanations, Exercises</li> <li>A:</li> <li>A:Real examples and exercises/explanations</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"evaluations/2025_autumn/20251023/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Technical issues with git/VS, having to check own VS and shared zoom window at the same time (on one screen), never used VS before, too little use of terminal. Assigments not discussed together/explained too well before delving into them.</li> <li>A:Unfamiliar with VSCode, confusing git intro because everyone tried to commit at the same time</li> <li>A:</li> <li>A:</li> <li>A:I appreciate the industry examples but sometimes I find it hard to translate it into the academic context. x2 the unfamiliarity with VS Code. I would rather see the raw <code>git</code> commands first rather than getting lost in the many options of the graphical interphase.</li> <li>A:</li> <li>A: Sometimes the assignements are unclear (most of the time they are though)</li> <li>A:Too fast on the first git commit as I had to create a new branch cause someone had already commited and pushed changes</li> <li>A: Some examples/concepts are clear for SWE but when I applied to AI/ML/stats projects it is not as inuitive</li> <li>A: Sometimes the pace is too fast in the small groups</li> </ul>"},{"location":"evaluations/2025_autumn/20251023/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: State clearly what the assigment is before letting the students delve into it, use terminal instead of VS code.Otherwise, explain the VS interface at least once before using it. A bit confusing as well with the GitHub notes instead of more structured course material - like slides.</li> <li>A:Explain the structure of the repo before hand. I think the people that ended up in the \"advanced\" git session were not explained that there was a \"learners\" folder and that became confusing later on. 5</li> <li>A: </li> <li>A:Sometimes it is difficult to follow because people are on different levels, would need better explanation. Intro to VSCode, not everyone is familiar</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"evaluations/2025_autumn/20251023/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>Lars clearify excersises</li> <li>Time management, make morning session more hands on less theory</li> <li>Change from twice a year to only spring. to allow for more prep time for teachers.</li> <li>Define clear roles before.</li> </ul>"},{"location":"evaluations/2025_autumn/20251023/#confidence-report-10min","title":"Confidence Report: (10min)","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can connect to the course repo:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:5</li> <li>A:</li> <li>A:</li> </ul> <p>I can find the needs/buissnes requirments:</p> <ul> <li>A: 1</li> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 2</li> <li>A: 4</li> <li>A: 2</li> <li>A: 3</li> </ul> <p>I can do a simple FMEA:</p> <ul> <li>A: 2</li> <li>A: 2</li> <li>A:2</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what FMEA stands for:</p> <ul> <li>A: 0</li> <li>A: 4</li> <li>A:4</li> <li>A:4</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I can make an issue in the project:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A:5</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know basic Git:</p> <ul> <li>A: 5</li> <li>A: 4</li> <li>A:5</li> <li>A:5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what a Requirement is:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 3</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know how to write a formal requiremnts documentation:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know how a remote repo works: </p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know why we specify requirments:</p> <ul> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know the purpose of formalism in Computer Science:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what are the outcomes of a program:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what are the steps of development:</p> <ul> <li>A: 4</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what is the Software development life cycle:</p> <ul> <li>A: 3</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what is the importance of Documentation:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what is the different kinds of documentation:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"evaluations/2025_autumn/20251024/","title":"Evaluation","text":"<ul> <li>Date: 2025-10-24</li> <li>Day: 2</li> </ul>"},{"location":"evaluations/2025_autumn/20251024/#analysis","title":"Analysis","text":"<ul> <li>Learning outcomes in a better readable format</li> <li>Analysis script</li> <li>The calculated average confidences</li> <li>Success score by Richel: 73%</li> </ul>"},{"location":"evaluations/2025_autumn/20251024/#retrospect","title":"Retrospect","text":""},{"location":"evaluations/2025_autumn/20251024/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Interaction during explanations</li> <li>A: Better instructions for exercises compared to yesterday</li> <li>A:The practical exercises were really great !</li> <li>A: Richel's enthusiasm :-)</li> <li>A: Individual feedback for exercises</li> <li>A:nice explanations and instructions for the tutorials, easy to follow, always there for questions</li> <li>A:The exercises were helpful! Practising it and getting feedback is good!</li> <li>A:The live examples. It was helpful to get an explanation of the structure of the lesson before starting. Having a chance to ask questions in the individual breaking room.</li> </ul>"},{"location":"evaluations/2025_autumn/20251024/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Sometimes the assignements are unclear</li> <li>A: No live examples for TDD, I would have appreciated at least one live demonstration of the methods before the exercises, and not just discussing it theoretically - it is a bit counterintuitive.</li> <li>A: Too little knowledge in python to be able to feel confident in writing tests correctly - are you sure the initial requirements for the course are really enough?</li> <li>A: rather similar examples, not really sure how this expand (especially TDD) to more complex settings, How easy is it to find tests then?</li> <li>A: I got issues with git in VS code but that probably comes down to my inexperience.</li> </ul>"},{"location":"evaluations/2025_autumn/20251024/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Better defined assignements ?</li> <li>A: Give at least one live example of TDD before letting the students tackle the challenge by themselves. Or maybe suggest to watch one of the videos first? </li> <li>A:Maybe a bit more hands-on exercise is good. Something a little complex.</li> <li>A:Also, how to relate these good practices in our programming for our disciplines, for example assert and stuff won't work for simulations and other programming.</li> <li>A: Do the first TDD example as a team and not individually - one good example would save from waisting time on pracitising the wrong method</li> <li>A: Showcasing an exemplary more complex example</li> <li>A:A way to communicate with the teacher when inside breakout rooms!</li> <li>A:3 minutes for the retrospective questions is too long, we always end up answering the next questions during the first one :). maybe 2min? 2:30?</li> <li>A:A bit more use case discussion on issues - like a how does it look like for a sample/real life project</li> <li></li> </ul>"},{"location":"evaluations/2025_autumn/20251024/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>Lars clearify excersises</li> <li>Time management, make morning session more hands on less theory</li> <li>Change from twice a year to only spring. to allow for more prep time for teachers.</li> <li>Define clear roles before.</li> </ul>"},{"location":"evaluations/2025_autumn/20251024/#confidence-report-10min","title":"Confidence Report: (10min)","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can create, assign and close an issue\"</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 3</li> <li>A: 5</li> <li>A:4</li> </ul> <p>I can use TDD to develop functions</p> <ul> <li>A: 3</li> <li>A: 2</li> <li>A: 4</li> <li>A:3</li> <li>A: 2</li> </ul> <p>I can use a kanban board</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 3</li> <li>A: 4</li> <li>A:3</li> </ul> <p>I know how to  make a risk for a requirment</p> <ul> <li>A: 2 (but I missed that part unfortunately)</li> <li>A: 3</li> <li>A: 3</li> <li>A: 2</li> <li>A:2</li> </ul> <p>I know the major parts of a development cycle</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A:4</li> </ul> <p>I know the major technical risks with a SW project</p> <ul> <li>A: 2 (also missed that part)</li> <li>A: 3</li> <li>A: 2</li> <li>A:2</li> <li>A: what does SW stand for, again? </li> </ul> <p>I know where to find the 'latest' best practices</p> <ul> <li>A: 2</li> <li>A: 1</li> <li>A: 2</li> <li>A: 4</li> <li>A:2</li> </ul> <p>I understand what SDLC is</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A:2</li> </ul> <p>I know what a Feature is</p> <ul> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A:3</li> </ul> <p>I understand how features relate to Requirments</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A:4</li> </ul> <p>I understand why TDD is important</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 2</li> <li>A: 5</li> <li>A:4</li> </ul> <p>I understand why <code>assert</code> is important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:3</li> <li>A: 3</li> </ul> <p>I understand why a kanban board is important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:3</li> <li>A: 5</li> </ul> <p>I understand why issues are important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:4</li> </ul>"},{"location":"evaluations/2025_autumn/20251027/","title":"Evaluation","text":"<ul> <li>Date: 2025-10-27</li> <li>Day: 3</li> </ul>"},{"location":"evaluations/2025_autumn/20251027/#analysis","title":"Analysis","text":"<ul> <li>Learning outcomes in a better readable format</li> <li>Analysis script</li> <li>The calculated average confidences</li> <li>Success score by Richel: 81%</li> </ul>"},{"location":"evaluations/2025_autumn/20251027/#retrospect","title":"Retrospect","text":""},{"location":"evaluations/2025_autumn/20251027/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:</li> <li>A:The live-examples and the exercises were very helpful. I appreciated the example from big to small programming. (I also appreciate the breaks!)</li> <li>A:</li> <li>A: I was happy with the pair programming concepts and the last group exercises.</li> <li>A: Live examples and pair programming very funny !</li> <li>A: pair exercises and live examples</li> <li>A:</li> <li>A:Exercises in pairs</li> <li>A:Thorough explanation of TDD method to create the weather code</li> <li>A:</li> <li>A:Good way to learn TDD through Pair programming!</li> <li>A:Today's session had more pratical exercises which helped us learn hands-on! Good job to the instructors!</li> </ul>"},{"location":"evaluations/2025_autumn/20251027/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A:</li> <li>A: Nothing to declare.</li> <li>A:</li> <li>A: I can't think of anything </li> <li>A: Still some issues with VSCode, but it worked in the end. Time for group exercises and off topic questions were a bit short. </li> <li>A: Technical issue in the morning with Git website rendering - don't know how that could be avoided though</li> <li>A: Using GitHub web interface and git commands and VS code, I think we should agree on one single method, or at least mostly use one</li> <li>A:</li> <li>A: Maybe some more time with the group exercises would be appreciated!</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"evaluations/2025_autumn/20251027/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe bit more on how to integrate these in our discipline specific programming would be appreciated, like some of us work on data analysis/exploration where the data might not be a spefic value but a dataframe or numpy array, how do we integrate the assert to such cases? Also, most of us work involves data cleaning and others, but how do we check if the data is cleaned or not?</li> <li>A:</li> <li>A: Maybe some more clarity in stating the purpose/methods to be used in the morning exercises - but it might as well just be me not functioning on Monday morning </li> <li>A:</li> <li>A: Can't think of anything</li> <li>A:</li> <li>A: Was a good session!</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: Good session overall!</li> <li>A:</li> </ul>"},{"location":"evaluations/2025_autumn/20251027/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":""},{"location":"evaluations/2025_autumn/20251027/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can create, switch and delete a git branch locally</p> <pre><code>- A: 5\n- A: 5\n- A:5\n- A: 5\n- A: 5\n- A:\n- A:\n</code></pre> <p>I can do Pull requests</p> <pre><code>- A: 5\n- A: 5\n- A: 5\n- A:5\n- A:5\n- A:\n- A:\n</code></pre> <p>I can do a code review (in GitHub)</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:4\n- A:\n- A:4\n</code></pre> <p>I can explain and evaluate the usefulness of branches</p> <pre><code>- A: 5\n- A: 5\n- A: 4\n- A:4\n- A:\n- A:4\n- A:\n</code></pre> <p>I can manage merge conflicts locally</p> <pre><code>- A: 5\n- A:\n- A: 5\n- A: 3\n- A:5\n- A:\n- A:4\n</code></pre> <p>I can manage merge conflicts on GitHub</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:5\n- A:\n- A:4\n</code></pre> <p>I can merge locally</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:5\n- A:4\n- A:\n</code></pre> <p>I can merge on GitHub</p> <pre><code>- A: 5\n- A:\n- A: 4\n- A: 4\n- A:5\n- A:\n- A:4\n</code></pre> <p>I feel confidence and motivation in making my code open-source</p> <pre><code>- A: 5\n- A: 4\n- A: 5\n- A:\n- A:5\n- A:5\n- A:\n</code></pre> <p>I have an idea about how to contribute as an external contributor</p> <pre><code>- A: 4\n- A: 5\n- A: 4\n- A:\n- A:4\n- A:4\n- A:\n</code></pre> <p>I understand when a forked workflow is recommended</p> <pre><code>- A: 5\n- A: 5\n- A:4\n- A: 4\n- A:4\n- A:\n- A:\n</code></pre> <p>I understand how to do TDD at a larger scale</p> <pre><code>- A: 4\n- A: 4\n- A:4\n- A: 2\n- A:5\n- A:\n- A:\n</code></pre> <p>I understand why pair programming is important</p> <pre><code>- A: 5\n- A: 5\n- A: 4\n- A:5\n- A:\n- A:\n- A:4\n</code></pre> <p>I understand what good pair programming looks like</p> <pre><code>- A: 4\n- A: 4\n- A: 4\n- A:\n- A:3\n- A:4\n- A:\n</code></pre>"},{"location":"evaluations/2025_autumn/20251028/","title":"Evaluation","text":"<ul> <li>Date: 2025-10-28</li> <li>Day: 4</li> </ul>"},{"location":"evaluations/2025_autumn/20251028/#analysis","title":"Analysis","text":"<ul> <li>Learning outcomes in a better readable format</li> <li>Analysis script</li> <li>The calculated average confidences</li> <li>Success score by Richel: 73%</li> </ul>"},{"location":"evaluations/2025_autumn/20251028/#retrospect","title":"Retrospect","text":"<p>What helped us learn (let us move forward) 2 min</p> <ul> <li>A: As usual, group exercises</li> <li>A: The possibility to ask questions and get extensive answers. Thank you for your patience!</li> <li>A: </li> <li>A:Group work, practical exercises</li> <li>A: </li> <li>A: Continous Integration and group work</li> <li>A: Nice group work.</li> <li>A: The team exercises, in particular for writing clases. The session on automated testing workflows within GitHub (and locally) were very interesting.</li> <li>A: </li> <li>A:</li> <li>A: the testing exercise was good! Finding out the options to automate the testing was nice.</li> <li>A: Ruff - was a good extension</li> </ul> <p>What stopped us from learning (What held us back) 2 min\u00b6</p> <ul> <li>A: Maybe the schedule was a bit messy today, I would gladly have had class design before OOD</li> <li>A:</li> <li>A: I found some text, in particular the Object-oriented programming section, hard to read because of typos. I wish it wasn't so much like bullet points. It often asks us about a concept and only give bullet points but we have to go to some alternative reading material to find the answer. Many concepts were remain a bit abstract even after the explanations...I also got lost with many exercises because they were a bit vague or use terms before getting explanations about it (e.g., refactoring)</li> <li>A: Maybe some more clarifications about object oriented programming would have been helpful. Less theory and more examples.</li> <li>A:</li> <li>A: assignments were not always clear, confused about what we should actually do...</li> <li>A: a bit confused about the reverseb classroom situtation, since we didn't have time to read up upon it before (and text didn't alwyas provide the answers that were asked there)</li> <li>A:</li> <li>A: Most concepts introduced today was a hard to intrepret in our discipline specific examples</li> <li>A: The concepts of object and class were a little hard.</li> <li>A: Time, short answers, no too deep explainations and typos in documentation. -A: </li> <li>A: Unit test lessons were unclear</li> <li>A: Little time to complete all the exercises, would have appreciated less to do but with more time to focus</li> </ul> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <ul> <li>A: I think in general it would be beneficial to focus on easier tasks and not too much on the weather exercise, with more discussion. Baby steps and more time to digest.</li> <li>A:</li> <li>A: Better material with less bullet points and more structure and explanations would help</li> <li>A: As much as I appreciate working with teams, sometimes I wish I could read on my own without other people around. I find it distracting because I feel pressure to finish faster. I prefer when we get examples explained by the teacher before diving into the exercises.</li> <li>A: more explanation of terms and basic \"vocabulary\", more straigth forward assignments, clearer instructions</li> <li>A:</li> <li>A: More examples before working on our own, sometimes it is hard to figure out everything on your own</li> <li>A:</li> <li>A: Also, sometimes the concepts are too simple and feels difficult to relate to our discipline, maybe more examples to show how it looks would be appreciated</li> <li>A: Maybe a solid example/exercises on object &amp; class diagrams would be good</li> <li>A:</li> <li>A: More self-contained examples with answers that we can revisit later on. Add more links to external videos on hands-on coding for every or most concepts.</li> </ul> <p>What will we do(Act) [Teachers only]\u00b6</p>"},{"location":"evaluations/2025_autumn/20251028/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I understand why Continuous Integration is useful</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: 4</li> </ul> <p>I can find the error messages given by the Continuous Integration tests</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:4</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: 5</li> </ul> <p>I can (choose to) write code that is Good Enough</p> <ul> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A:3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: 5</li> <li>A:</li> </ul> <p>I understand what a Semantic gap is?</p> <ul> <li>A: 4</li> <li>A: 1</li> <li>A: 3</li> <li>A:</li> <li>A:1</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A:</li> </ul> <p>I Comprehend the principles of object-oriented development, such as information hiding</p> <ul> <li>A: 5</li> <li>A:</li> <li>A: 4</li> <li>A:</li> <li>A: 3</li> <li>A: 3</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what modular programming is</p> <ul> <li>A: 3</li> <li>A: 5</li> <li>A: 3</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I have an idea when use classes is worth it (and when not)</p> <ul> <li>A: 3</li> <li>A:</li> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I can give some features of good class design</p> <ul> <li>A: 4</li> <li>A: 2</li> <li>A:</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I can write a simple class</p> <ul> <li>A: 4</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:3</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A: 4</li> <li>A:</li> <li>A:</li> </ul> <p>I understand the type of relation 'composition'</p> <ul> <li>A: 3</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A:</li> <li>A: 1</li> <li>A:</li> <li>A:</li> </ul> <p>Iterative refactoring</p> <ul> <li>A: 5</li> <li>A: 2</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A: 1</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: </li> </ul> <p>Learn about common interfaces, protocols, and their role in modular programming.</p> <ul> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A: 1</li> <li>A:</li> <li>A:  1</li> <li>A:</li> <li>A:1</li> <li>A:</li> <li>A: 1</li> <li>A:</li> <li>A:</li> </ul> <p>Learn the definition and characteristics of an object, </p> <ul> <li>A: 5</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A: 4 (after intensive discussion with Lars)</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>Recognize and address tight coupling in code to improve modularity.</p> <ul> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A: 1</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A: </li> </ul> <p>Recognize the importance of relationships between classes including coposition and association</p> <ul> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A: 1</li> <li>A: 1</li> <li>A:</li> <li>A: 2</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>Understand the benefits of object-oriented development</p> <ul> <li>A: 4</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A: 4</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: </li> </ul> <p>Understand the concept of code smells and design smells</p> <ul> <li>A: 5</li> <li>A: 4</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>Understand the definition and structure of a class as a collection of objects </p> <ul> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A: 4</li> <li>A: 2</li> <li>A:</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"evaluations/2025_autumn/20251029/","title":"Evaluation","text":"<ul> <li>Date: 2025-10-29</li> <li>Day: 5</li> </ul>"},{"location":"evaluations/2025_autumn/20251029/#analysis","title":"Analysis","text":"<ul> <li>Learning outcomes in a better readable format</li> <li>Analysis script</li> <li>The calculated average confidences</li> <li>Success score by Richel: 86%</li> </ul>"},{"location":"evaluations/2025_autumn/20251029/#day-5-retrospect","title":"Day 5 Retrospect","text":"<p>What helped us learn (let us move forward) 2 min</p> <p>-A: Exercises, specially the testing time with cprofile. I liked hearing about creating packages, and also about ReadTheDocs and similar options. -A: create and upload a package to pypi -A: As always, the exercises: they help staying active -A:Testing the performance of the code with the cprofile was useful! Along with their rules - super useful in improving our programming! -A:The group exercise were helpful! Documentation tasks, Licensing, README documentations were super helpful.</p> <p>What stopped us from learning (What held us back) 2 min</p> <p>-A:In general, I think it would be better if some more actual explanation was introduced, together with practical examples, instead of reading and highlighting the online material. Sometimes attention is hard to keep for prolonged time, if the teacher is reading. -A:Hard to grasp some concepts on build. -A: I had the feelings sometimes the teacher were distracted or not sure \"what was next\" (but honestly, aren't we all tired?) -A: Some teachers seem to be in a rush all the time. They explain at a superficial level. -A: very time-constrained course; it feels like virtual environments are introduced very late in the course, even though they would be already useful in the beginning (before installing anything in base, helps also in cleaning up after the course is done); it often felt like the teachers are just reading the page and then run out of time for questions/exercises -A: Short time for some tasks/topics</p> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <p>-A: Perhaps because I've wrote READMEs for my GitHub repositories before, I wish less time had been spent on that, and instead I wish we could hear more about creating Wikis and ReadTheDocs-like documentation. I was also often confused with the exercises instructions. -A: Be prepared to teach, no just read.  In every section, I got something like \"we do not have time to cover the topic A, so we move on\" -A: better time management, I think it would actually be more helpful to spend time more time on basics with going through examples and thorough explanations and time for questions than rushing through that we can cover all the topics that are planned (because the content is anyway on the page and you can just refer to it and if people are interested can have a look on their own and ask about it because there is the additional time to do so) -A: Quite time-constrained, maybe having a the course for 2 days in week for 3/4 weeks would be great! -A: I would have liked to see less reading and more interaction, more space for questions and active discussion on exercises. Sometimes how exercises were introduced was still unclear (but better than previous sessions).  -A: Some discipline specific examples would be appreciated, for example with simulation data or codes -A: More interactive sessions or handsn exercises rather than reading (which can be pre-read before the lectures) -A: Really liked the group exercises, which we can increase in the future!</p>"},{"location":"evaluations/2025_autumn/20251029/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I am confidant that...:</p> <ul> <li> <p>I can put the code of a project into a Python package -A: 4 -A: 4 -A: 5 -A: 5 -A: -A: -A:4</p> </li> <li> <p>I can upload my Python package on PyPI -A: 4 -A: -A: 4 -A: 5 -A: 5 -A: -A:4</p> </li> <li> <p>I can methodically optimize the runtime speed of my code -A: -A: 3 -A: -A: 4 -A: 4 -A: 4 -A:4</p> </li> <li> <p>I can create a runtime speed profile -A: -A:  5 -A: 4 -A: 5 -A: 4 -A:4 -A:</p> </li> <li> <p>I can read a runtime speed profile -A: 5 -A: -A: 5 -A: 5 -A: 5 -A: -A:4</p> </li> <li> <p>I am able to distinguish bad from good advice regarding runtime speed optimization -A: -A: 4 -A:4 -A: 3 -A: 4 -A: -A: 5</p> </li> <li> <p>I can mentalize the installation needs from the users' perspective:</p> </li> </ul> <p>-A: 3 -A:4 -A: 5 -A: -A: 4 -A: 5 -A:</p> <ul> <li>I can initialize a new project:</li> </ul> <p>-A: -A: 4 -A: 5 -A: 5 -A:4 -A: 3 -A:</p> <ul> <li>I know the most important sections for a full public README:</li> </ul> <p>-A: 5 -A: -A: 5 -A: 4 -A: 3 -A:4 -A:</p> <ul> <li>I can make an installation instruction for potential users:</li> </ul> <p>-A: 3 -A:4 -A:  -A: 4 -A: -A: 5 -A:</p> <ul> <li>I can make citation info:</li> </ul> <p>-A: -A: 3 -A: 3 -A: 3 -A: -A:4 -A:</p> <ul> <li>I know how to find instruction of going to more sophisticated documentation: The course met my expectations:</li> </ul> <p>-A: -A: 2 -A: -A: 4 -A: 2 -A: -A:4</p> <ul> <li>I learned a lot of new things about software development as a process:</li> </ul> <p>-A: -A: 5 -A: 5 -A: 5 -A: 5 -A: -A:4</p> <ul> <li>I will use what I learned in my projects:</li> </ul> <p>-A: -A: 5 -A: 5 -A: 5 -A: 4 -A:5 -A:</p>"},{"location":"evaluations/2025_autumn/20251029/#extended-questions-10-min","title":"Extended questions (10 min)","text":"<ul> <li>Imagine you are boss. How would you improve the Programming Formalisms course? Do consider that if you want more of something, what would you want less of?</li> </ul> <p>-A: More:: Add some text about good practices about writing classes. Explain more with some examples about composition, inherence, etc. - Provide more links to video tutorials.  - Creating video contents that students can watch to complement the training.    Less:: Teachers reading what everyone at this level can read. Use the text as a guide.  -A: First of all I wanted to thank you all for this great course! All the following critics are just small to make the course even better. There was a lot of group work where it was actually not needed, I don't need to be in a breakout room with someone just to ask questions, seems a bit unnecessary.    Also an time expectation of the real group work and a better outline of what we should actually do would be great (for some of the tasks that is actually already very well implemented). Some of the topics are actually falling short, e.g. about classes/object oriented programming and modules I didn't really catch the grip and feel similarly unsure about it than before the course (also the course page is rather short and doesn't really provide further information).    Time could definitely be saved when not only the pages get read to us and the teachers stumble upon mistakes but just by either reciting it shortly or letting us read ourselves. Also a proper flipped classroom could work, just tell us to read up on a topic the day before and then discuss it or do exercises (I mean we are all voluntarily taking this course and want to learn something, so I think it wouldn't be an issue to put the extra time in.) -A: I really enjoyed the course! Thank you all for that! But I learned more through the hands-on exercises than reading, so maybe I would arrange more group sessions where the teams worked together, so that they can fail and learn! Pushing them into the project first (maybe give them some resources to read on first) and then letting them review their project work would be my approach. Maybe also, ask the students to bring their own data (discipline specific data) and work on them and review them in group, so that students can understand how to use these tools/tips in their discipline data. -A: Thank you for the course.  I think I would in general increase the prerequisites for taking the course to a higher level. I started the course with the exact python/git requirements as stated in the UPPMAX web page, but I still found some sessions quite hard - or maybe too advanced for my level, or that they served a purpose that is too advanced for what I am working on at the moment. I took the course early in my phd thanks to the suggestion of my supervisor and of a fellow phd student, but maybe it  would have been more useful to take it with more pior experience in programming in general.    That said, it was very useful to see how software development works in a formal way. It's super useful to see that there are guidelines/ good practises to be followed, which could be good to learn very early in my career. Also, I am very happy that I can go back to the course materiak and revise topics.    What I personally found the most useful as a beginner was collaborating on git, understanding how to use tests and asserts to make code stronger from the beginning,  continuous integration and classes. I wished we had seen more function design as well.    Regarding teaching style, I really appreciated exercises, as they really help tpo stay focus. Sometimes I wished we had clearer instructions before each exercise, but I think this got better during the course. I also liked the video tutorials when available, as they helped a lot when a full example was needed before practising hands-on.   What I think could be improved were some explanations and timing. Topics were often skipped, not covered or covered too fast. It may be good to reduce the course content a bit and focus on the most appreciated/needed sessions.   Something I didn't understand fully was the purpose of having the 'weather project'. I guess it is to provide a full-cycle software development example, but since we ended up not really working on that, I would have rather had more small exercises, which help strenghtening the broad understanding.    Last, I suggest adding a video tutorial on the use of VS code with git, and then always stick to that method. Or always work from terminal. It can become confusiong if people use different methods.</p>"},{"location":"evaluations/2025_summer/","title":"Evaluations Summer 2025","text":"Day Evaluations 1 Evaluation 2 Evaluation 3 Evaluation 4 Evaluation 5 Evaluation"},{"location":"evaluations/2025_summer/20250505/","title":"Evaluation 2025-05-05","text":"<ul> <li>Day 1</li> </ul>"},{"location":"evaluations/2025_summer/20250505/#confidence-and-retrospect","title":"Confidence and retrospect","text":"<p>What helped us learn (let us move forward) 3 min</p> <pre><code>- A: Hands-on exercises\n- A: zoom!\n- A: exercises\n- A: available course materials\n- A: Group exercises with a specific project\n- A: Coffee\n- A: Online resources to follow along\n- A: Helped eachother\n- A: Teachers always available for questions!\n- A: very detailed information on the course website\n</code></pre> <p>What stopped us from learning (What held us back) 3 min\u00b6</p> <pre><code>- A: technical issues (with the initial set up)\n- A: the course's website structure is a bit complicated\n- A: getting stuck at a previous exercise\n- A: vague phrasing sometimes (in the course materials)\n- A: unclear goals for the tasks/what we want to do\n- A: Lack of examples as a guideline\n- A: Reluctance to ask questions/participate in discussions\n- A: collaborating is more difficult on zoom\n- A: Understanding how to edit in hackmd.io\n</code></pre> <p>What could we do to improve learning (What can we invent) 3 min\u00b6</p> <pre><code>- A:\n- A: icebreaker to get to know each other better\n- A: more visuals and examples in the course material (supplementing the texts) This!!\n- A: Clearer learning goals for the different course sections\n- A: more information about the goal of the project (different person: description of the project dataset in instructions)\n- A:\n- A: Simple home excercises prior to the course start (except for the prerequisites) that would help to test functionality of the (probably) new tools\n- A: be more specific about what exact level of github set up you need (the ssh key etc...) in the course prerequisites\n</code></pre> <p>What will we do(Act) [Teachers only]\u00b6</p> <ul> <li>We were divided about doing an icebreaker on day 1. Some agree to do it, as it was given here,   where others have read that it should be avoided on day 1</li> <li>Add the learners to the learners' project, so they can actually use that GitHub repository</li> <li>Lars should show in text that requirements should be uploaded to GitHub</li> </ul>"},{"location":"evaluations/2025_summer/20250505/#confidence-report-10min","title":"Confidence Report: (10min)","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can connect to the course repo:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> </ul> <p>I can do a simple FMEA:</p> <ul> <li>A: 0</li> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> <li>A: 4</li> <li>A:</li> </ul> <p>I know what FMEA stands for:</p> <ul> <li>A: 1</li> <li>A: 2</li> <li>A: 0</li> <li>A: 5</li> <li>A: 4</li> <li>A: 0</li> <li>A: 4</li> </ul> <p>I can find the needs/buissnes requirments:</p> <ul> <li>A: 1</li> <li>A: 3</li> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 2</li> <li>A: 4</li> </ul> <p>I can make an issue in the project:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 3</li> <li>A: 1</li> <li>A: 3</li> </ul> <p>I know basic Git:</p> <ul> <li>A: 5</li> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> </ul> <p>I know what a Requirement is:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A: 4</li> </ul> <p>I know how to write a formal requiremnts documentation:</p> <ul> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> <li>A: 2</li> <li>A: 2</li> <li>A: 4</li> <li>A: 4</li> </ul> <p>I know how a remote repo works: </p> <ul> <li>A: 5</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 5</li> </ul> <p>I know why we specify requirments:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> </ul> <p>I know the purpose of formalism in Computer Science:</p> <ul> <li>A: 2</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A: 2</li> <li>A: 4</li> </ul> <p>I know what are the outcomes of a program:</p> <ul> <li>A: 2</li> <li>A: 4</li> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> </ul> <p>I know what are the steps of development:</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A: 4</li> <li>A: 2</li> <li>A: 3</li> </ul> <p>I know what is the Software development life cycle:</p> <ul> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A: 4</li> <li>A: 3</li> <li>A: 2</li> <li>A: 2</li> </ul> <p>I know what is the importance of Documentation:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> </ul> <p>I know what is the different kinds of documentation:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A: 3</li> </ul>"},{"location":"evaluations/2025_summer/20250506/","title":"Evaluation 2025-05-06","text":"<ul> <li>Day 2</li> <li>Lesson plan</li> <li>Evaluation</li> <li>Reflection</li> </ul>"},{"location":"evaluations/2025_summer/20250506/#confidence-and-retrospect-tuesday","title":"Confidence and retrospect Tuesday","text":"<p>What helped us learn (let us move forward) 2 min</p> <pre><code>- A: The active, hands-on approach, the letting us explain concepts, working in smaller groups\n- A:\n- A: interaction; helping each other; structured exercises\n- A: Working in a group, material, instructors, copilot\n- A: more coding than yesterday\n- A: A lot of coding time\n- A: Enough material for people at different levels\n- A:\n- A: exercises (that include breaking things intentionally), good level of complexity (directory structure, using git(hub), testing exercises), breakout rooms (being able to ask for help/compare)\n- A: The exercises, practical coding from scratch and not just filling out pre-existing files\n- A: Interaction with teachers: questions asked and questions answered\n- A: Hand-on practice\n</code></pre> <p>What stopped us from learning (What held us back) 2 min\u00b6</p> <pre><code>- A:\n- A: Technical issues\n- A: Missed big part of the first day, Github access gave me a slow start but was possible to get into it with help of colleagues. It's an extensive\n- A:\n- A: Not so much feedback on exercises\n- A:\n- A: VS Code configuration sometimes confusing (Git config, testing setup)\n- A: Not clear what we wanted to achieve during the lectures, specially the first one\n- A: not enough time to digest/review\n- A: the requirements for the project are a bit unclear to me, so creating suitable issues was challenging\n- A: A bit rushed \"theory\" part (just a little: nothing that couldn't be figured out on our own)\n- A:\n</code></pre> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <pre><code>- A:\n- A: Show how a topic connects to the other topics or when it would be useful in the course (or if this is not the case)\n- A: I like the theorical background, a bit more would be neat\n- A: Have some time reserved in the schedule for self study and QA\n- A:\n- A: I think there are two requirements/design files?\n- A: Could be good with a summary session to see that everyone got the important points from the exercises\n- A: Clearer goals, such as, are we doing this for the next steps or just as a generic example? E.g: the requirements file\n- A:\n- A: Could have been useful with a recap after the exercises\n- A: Have a clear (and finished) file for the project requirements\n- A: Extend the course time or crop the program a bit to give more time for labs/digesting/lecturing\n</code></pre> <p>What will we do(Act) [Teachers only]\u00b6</p> <ul> <li>RB improves feedback on exercises</li> <li>RB also wants to experiment with a 5-mins-to-read   exercise</li> <li>Lars rework hour one</li> <li>Mix theory and practice more</li> <li>Consider moving one hour to \"Pardigms and SDLC MDD features lecture\"</li> </ul>"},{"location":"evaluations/2025_summer/20250506/#confidence-report-10min","title":"Confidence Report: (10min)","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can create, assign and close an issue\"</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> </ul> <p>I can use TDD to develop functions</p> <ul> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> <li>A: 5</li> <li>A: 3</li> <li>A: 5</li> </ul> <p>I can use a kanban board</p> <ul> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> </ul> <p>I know how to  make a risk for a requirment</p> <ul> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A: 4</li> <li>A: 1</li> <li>A: 5</li> </ul> <p>I know the major parts of a development cycle</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A: 1</li> <li>A: 5</li> </ul> <p>I know the major technichal risks with a SW project</p> <ul> <li>A: 3</li> <li>A: 3</li> <li>A: 2</li> <li>A: 2</li> <li>A: 3</li> <li>A: 0</li> <li>A: 4</li> <li>A: 0</li> <li>A: 0</li> </ul> <p>I know where to find the 'latest' best practices,3.375</p> <ul> <li>A: 0</li> <li>A: 2</li> <li>A: 2</li> <li>A: 2</li> <li>A: 0</li> <li>A: 0</li> <li>A: 2</li> <li>A: 0</li> <li>A: 0</li> </ul> <p>I understand what SDLC is</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A: 5</li> <li>A: 0</li> <li>A: 5</li> </ul> <p>I know what a Feature is</p> <ul> <li>A: 4</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 3</li> <li>A: 5</li> <li>A: 5</li> <li>A: 2</li> <li>A: 4</li> </ul> <p>I understand how features relate to Requirments</p> <ul> <li>A: 4</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A: 2</li> <li>A: 4</li> </ul> <p>I understand why TDD is important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> </ul> <p>I understand why <code>assert</code> is important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> </ul> <p>I understand why a kanban board is important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 4</li> <li>A: 5</li> </ul> <p>I understand why issues are important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> </ul>"},{"location":"evaluations/2025_summer/20250507/","title":"Evaluation 2025-05-07","text":"<ul> <li>Day 3</li> <li>Lesson plan</li> <li>Evaluation</li> <li>Reflection</li> </ul> <p>What helped us learn (let us move forward) 2 min</p> <pre><code>- A:\n- A:a lot of practice\n- A:\n- A:\n- A:\n- A:\n- A:\n- A:\n- A:Interaction with classmates, material, hands-on exercises\n- A:\n</code></pre> <p>What stopped us from learning (What held us back) 2 min\u00b6</p> <pre><code>- A: Not enough time to test all the ideas, depending on how long it takes to organize the pair and how to do things\n- A: Getting used to all the options in Git and what order to do things (Issue, pull, assign people, etc.)\n- A: lack of time\n- A: unclear division of labor on learners project\n- A: Did not have many examples of the role of the observer so it was difficult to practice that role\n- A: Lack of experience with Python, but got the content regarding the skills intended (Github, Git, Pair programming etiquette)\n- A:\n- A:\n- A: Guidance on github was restricted to answering questions asked individually\n- A: the Fowler article on pair programming was too long for 10min reading+discussion\n</code></pre> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <pre><code>- A: focus more on our Weather project\n- A: More examples how to do the exercies using git on the command line\n- A: make separate time slots to work on the project and use exercises as examples only\n- A: assign the beginning of the learners project early to a confident group so that there is more stuff to work on sooner for everyone\n- A: perhaps do some of the practice using git branches, merging, code review directly on the project\n- A:\n- A:\n- A: Have a very detailed or pre-defined method to follow, could help to start the more relevant parts directly (instead of discussing how to do it)\n- A:\n- A: Simple hands-on examples on how things work (what is where and what buttons to press) on github prior to excercises (maybe a less effective learning, but more practical from the time point of view)\n</code></pre> <p>What will we do(Act) [Teachers only]\u00b6</p> <ul> <li>RB: Use the weather project in all exercises</li> <li>RB: Make sure that 'FAIR' instead of 'FIND' is used in the confidence measure</li> <li>L: From next year build from welformed requirments provided from teachers. from tuesday.Weather project</li> </ul>"},{"location":"evaluations/2025_summer/20250507/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can create, switch and delete a git branch locally</p> <pre><code>- A: 5\n- A: 4\n- A:\n- A: 4\n- A: 5\n- A: 5\n- A:5\n- A: 4\n- A:\n- A: 4\n</code></pre> <p>I can do Pull requests</p> <pre><code>- A: 5\n- A: 5\n- A: 4\n- A: 5\n- A: 5\n- A: 4\n- A:\n- A:\n- A:4\n- A: 3\n</code></pre> <p>I can do a code review (in GitHub)</p> <pre><code>- A: 5\n- A: 3\n- A:\n- A: 5\n- A: 4\n- A: 5\n- A: 1\n- A:3\n- A:\n- A: 3\n</code></pre> <p>I can explain and evaluate the usefulness of branches</p> <pre><code>- A: 5\n- A: 5\n- A: 5\n- A:\n- A: 3\n- A: 4\n- A: 5\n- A:5\n- A:\n- A: 5\n</code></pre> <p>I can manage merge conflicts locally</p> <pre><code>- A: 5\n- A:\n- A:3\n- A: 4\n- A: 4\n- A: 4\n- A: 4\n- A: 4\n- A:\n- A: 3\n</code></pre> <p>I can manage merge conflicts on GitHub</p> <pre><code>- A: 5\n- A:\n- A: 4\n- A: 4\n- A: 3\n- A:3\n- A: 5\n- A: 4\n- A:\n- A: 2\n</code></pre> <p>I can merge locally</p> <pre><code>- A: 5\n- A:\n- A:3\n- A: 3\n- A: 3\n- A: 4\n- A:\n- A: 3\n- A: 4\n- A: 5\n</code></pre> <p>I can merge on GitHub</p> <pre><code>- A: 5\n- A:\n- A:4\n- A: 4\n- A: 5\n- A:\n- A: 5\n- A:\n- A: 2\n- A: 5\n</code></pre> <p>I can pair program</p> <pre><code>- A:\n- A: 5\n- A: 5\n- A: 4\n- A: 3\n- A: 5\n- A: 3\n- A:4\n- A:\n- A: 4\n</code></pre> <p>I can put the files of my code in the right locations</p> <pre><code>- A:\n- A: 5\n- A: 4\n- A: 4\n- A:4\n- A: 4\n- A: 5\n- A: 4\n- A: 5\n- A:\n</code></pre> <p>I can write tests using a formal testing framework</p> <pre><code>- A:\n- A: 4\n- A: 3\n- A: 5\n- A: 3\n- A: 4\n- A: 3\n- A: 4\n- A: 4\n- A:\n</code></pre> <p>I feel confidence and motivation in making my code open-source</p> <pre><code>- A: 5\n- A:\n- A: 4\n- A: 4\n- A: 5\n- A: 5\n- A:\n- A: 5\n- A: 5\n- A: 5\n</code></pre> <p>I have an idea about how to contribute as an external contributor</p> <pre><code>- A:\n- A: 5\n- A: 4\n- A: 3\n- A: 4\n- A: 4\n- A: 4\n- A: 4\n- A:\n- A: 3\n</code></pre> <p>I understand the FIND concept</p> <pre><code>- A: 0\n- A:\n- A: 0\n- A: 4\n- A: 5\n- A: 0\n- A: 0\n- A: 1\n- A:\n- A: 0\n</code></pre> <p>I understand the benefit of using a testing framework</p> <pre><code>- A: 4\n- A: 5\n- A: 5\n- A: 5\n- A: 5\n- A: 4\n- A:\n- A: 3\n- A: 5\n- A:\n</code></pre> <p>I understand what continuous integration is</p> <pre><code>- A:\n- A: 1\n- A: 4\n- A: 1\n- A: 3\n- A: 4\n- A: 2\n- A:\n- A: 1\n- A: 1\n</code></pre> <p>I understand what good pair programming looks like</p> <pre><code>- A: 3\n- A: 5\n- A:\n- A: 4\n- A: 5\n- A: 3\n- A: 5\n- A:\n- A: 4\n- A: 3\n</code></pre> <p>I understand when a forked workflow is recommended</p> <pre><code>- A: 5\n- A:\n- A: 5\n- A: 5\n- A: 5\n- A: 4\n- A:\n- A: 4\n- A: 4\n- A: 5\n</code></pre> <p>I understand why pair programming is important</p> <pre><code>- A: 5\n- A: 5\n- A: 5\n- A: 4\n- A: 5\n- A: 4\n- A: 4\n- A:\n- A: 4\n- A:\n</code></pre> <p>create, switch and delete a git branch on GitHub</p> <pre><code>- A:\n- A: 5 (?)\n- A: 5\n- A: 5\n- A: 5\n- A: 4\n- A: 5\n- A: 5\n- A: 3\n- A:\n</code></pre> <p>for the testing framework to find them</p> <pre><code>- A: 4 (?)\n- A:\n- A: 2\n- A: 2\n- A: 5\n- A:\n- A: ?\n- A: 2\n- A: ?\n- A:\n</code></pre>"},{"location":"evaluations/2025_summer/20250508/","title":"Evaluation 2025-05-08","text":"<ul> <li>Day 4</li> <li>Lesson plan</li> <li>Evaluation</li> <li>Reflection</li> </ul> <p>What helped us learn (let us move forward) 2 min</p> <pre><code>- A: exercises related to the project; pair programming\n- A: group work\n- A: presence of the teachers in the breakout rooms\n- A: group work, interaction with instructors, material, Copilot\n- A: pair programming, building on work from previous days\n- A: Introduction of different tools that can be used (e.g Mermaid)\n- A:\n- A: practical exercises, continuing to use issues and branches\n- A: Small group of 2 work better in online interactions (easier to share responsibilities)\n- A: Practice, Pair-programming together with teachers helping\n</code></pre> <p>What stopped us from learning (What held us back) 2 min\u00b6</p> <pre><code>- A: not enough time to finish excercises\n- A: getting tired from reading\n- A: not having enough time to test to implement the different concepts presented, starting to look at the answers for the exercises too late\n- A: already familiar with basic object-oriented programming principles so it wasn't much new stuff, exercises went pretty quick\n- A:\n- A: lack of comprehension of concepts, there were some parts that I needed to ask Copilot to help\nme understand. There wa\n- A: Trying to perform the prievous steps (Open issue, create new branch, assign work...) can take much time and reduces the direct work that we should actually do\n- A: Quite a bit of content to go through in the time slots available\n- A: too many errors to handle in CI workflows\n- A: Lack of time to finish excercises, especially, after questions asked or interesting discussions\n</code></pre> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <pre><code>- A:\n- A: illustrate all these concepts on our Weather station project\n- A:\n- A: maybe have an hour reserved every day to try out what we learned and implement things on the project\n- A: make a wider range of difficulty for the classes we are supposed to implement\n- A: if we progressed more on the project it might have been easier to understand how to use things when you are trying to solve a \"real\" problem\n- A:\n- A: More examples for some cases (just having them available in the documentation for later reading would help). Maybe a full example in the end of a topic to summarize the points.\n- A: All the sources for reading are good and can be kept for home reading while for the classes reworked(shortened/fused/restructured) text could be prepared. To keep essense and spare time\n- A:\n</code></pre> <p>What will we do(Act) [Teachers only]\u00b6 -L lars will write a complete project for weather project with lots of code smell and design smell</p>"},{"location":"evaluations/2025_summer/20250508/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>Comprehend the principles of object-oriented development, such as information hiding</p> <pre><code>- A:\n- A: 5\n- A:\n- A: 4\n- A:\n- A: 3\n- A: 4\n- A:\n- A: 5\n- A: 4\n</code></pre> <p>I know what modular programming is</p> <pre><code>- A: 4\n- A: 5\n- A: 3\n- A: 4\n- A:\n- A: 3\n- A:\n- A: 5\n- A:\n- A:\n</code></pre> <p>I can criticise functions   </p> <pre><code>- A: 4\n- A: 5\n- A: 5\n- A: 5\n- A: 4\n- A:\n- A: 5\n- A:\n- A:\n- A:\n</code></pre> <p>I can give a function a proper name </p> <pre><code>- A:\n- A: 4\n- A: 4\n- A: 5\n- A: 5\n- A:\n- A: 5\n- A:\n- A: 5\n- A:\n</code></pre> <p>I can give some features of good function design</p> <pre><code>- A:\n- A: 4\n- A: 4\n- A: 4\n- A: 5\n- A:\n- A: 4\n- A:\n- A: 5\n- A:\n</code></pre> <p>I can write a class to express what the data it contains</p> <pre><code>- A: 5\n- A:\n- A: 4\n- A: 3\n- A: 3\n- A: 3\n- A:\n- A: 5\n- A:\n- A:\n</code></pre> <p>I understand the type of relation 'composition'</p> <pre><code>- A:\n- A: 0\n- A: 2\n- A: 3\n- A: 5\n- A: 3\n- A:\n- A: 4\n- A:\n- A:\n</code></pre> <p>I understand why function design is important</p> <pre><code>- A:\n- A: 4\n- A: 5\n- A: 5\n- A: 5\n- A: 5\n- A:\n- A:\n- A: 4\n- A:\n</code></pre> <p>Iterative refactoring</p> <pre><code>- A:\n- A: 3\n- A: 4\n- A: 4\n- A:\n- A: 3\n- A: 3\n- A:\n- A: 4\n- A:\n</code></pre> <p>Learn about common interfaces, protocols, and their role in modular programming.</p> <pre><code>- A: 1\n- A:\n- A: 3\n- A: 5\n- A: 3\n- A: 4\n- A:\n- A:\n- A: 4\n- A:\n</code></pre> <p>Learn the definition and characteristics of an object,</p> <pre><code>- A:\n- A: 4\n- A: 3\n- A: 4\n- A: 3\n- A:\n- A: 5\n- A:\n- A: 5\n- A:\n</code></pre> <p>Recognize and address tight coupling in code to improve modularity.</p> <pre><code>- A:\n- A: 3\n- A: 3\n- A: 3\n- A: 4\n- A: 3\n- A:\n- A: 4\n- A:\n- A:\n</code></pre> <p>Recognize the importance of relationships between classes including coposition and association</p> <pre><code>- A:\n- A: 3\n- A: 5\n- A: 2\n- A: 4\n- A: 2\n- A:\n- A: 5\n- A:\n- A:\n</code></pre> <p>Understand the benefits of object-oriented development</p> <pre><code>- A: 4\n- A:\n- A: 5\n- A: 4\n- A:\n- A: 5\n- A: 5\n- A: 5\n- A:\n- A:\n</code></pre> <p>Understand the concept of code smells and design smells</p> <pre><code>- A: 5\n- A: 3\n- A:\n- A: 5\n- A: 4\n- A:\n- A: 5\n- A:\n- A: 5\n- A:\n</code></pre> <p>Understand the definition and structure of a class as a collection of objects</p> <pre><code>- A:\n- A: 5\n- A: 5\n- A: 5\n- A: 3\n- A:\n- A: 5\n- A:\n- A: 5\n- A:\n</code></pre>"},{"location":"evaluations/2025_summer/20250508/#feedback-by-email","title":"Feedback by email","text":"<p>From a learner:</p> <p>Hi Richel (and Lars and Bj\u00f6rn). Just popping in to say that I won't be able to attend the rest of the course. Entirely due to bad planning on my behalf. I like the 1.5 days I joined. The materials are fantastic. Have a good rest of the week!</p>"},{"location":"evaluations/2025_summer/20250509/","title":"Evaluation 2025-05-09","text":"<ul> <li>Day 5</li> <li>Lesson plan</li> <li>Evaluation</li> <li>Reflection</li> </ul> <p>What helped us learn (let us move forward) 2 min</p> <ul> <li>A: The practical work, discussions within groups, wrap-up was a good reflection on lessons learned</li> <li>A: working in groups and example exercises with a good level of complexity</li> <li>A:group work</li> <li>A:</li> <li>A:group work, shared expertise among classmates, discussions, working examples</li> <li>A: Open discussions in groups, trying different ideas, seeing different approaches, dealing with unexpected errors/behaviours</li> <li>A:</li> <li>A: individual exercise about making a package and deploying it</li> <li>A: Discussion with teachers when they asked questions incl. the last summary session</li> <li>A: Work in larger groups worked well</li> <li>A: real-world examples of for example documentation, hands-on exercises</li> <li>A: Good examples in the documentation</li> </ul> <p>What stopped us from learning (What held us back) 2 min\u00b6</p> <ul> <li>A: already familiar with some of the exercises</li> <li>A: Exact exercise not always clear</li> <li>A: tight schedule so not so much time to ask questions/discuss</li> <li>A: some parts felt rushed and not practiced enough</li> <li>A: lack of time</li> <li>A: not enough time to finish the task on uploading the python package. It would have helped to have either extra time, or very explicit instructions on how to do it.</li> <li>A:</li> <li>A: too large group when working on the documentation</li> <li>A:</li> <li>A: groups with more than two (maybe three) people in zoom meetings can be chaotic and hard to discuss</li> </ul> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <ul> <li>A: stick to developing the weather project so that it would be fully functional in the end (would be more fun to write docs too)</li> <li>A: some quizzes before the course to raise motivation to read up on the literature before the course :)</li> <li>A: Less concise description of exercises, smaller groups</li> <li>A: tasks regarding the use of Git/Github were a bit repetitive in the sense t</li> <li>A: extend the schedule to have more time for practice and revision</li> <li>A: Make the teaching material more concentrated: some topics had too many (interesting and insightfull, though) details. Keep core knowledge. This could help save time for practice.</li> <li>A: present an overview of the different parts/tasks in the project in the beginning to have a clear idea what to acheive</li> <li>A: Stay in a single project, maybe updating the files we use each day to be consistent (since we cannot do everything). For example, having a single Requirements file was better than using the two rushed options we had during group work. This could maybe be the same for all steps</li> <li>A: maybe consider having an in-person iteration of this course. so much group work on zoom is difficult and at least in my experience it would be more productive in person.</li> <li>A: fix phrasing/typos in some tasks/questions</li> </ul> <p>What will we do(Act) [Teachers only]\u00b6</p> <p>Confidence Report: (maximum 10min) You can leave when you are done. Give you confidence levels of the following statements, using this scale:</p> <p>0: I don't know even what this is about \u2026? 1: I have no confidence I can do this 2: I have low confidence I can do this 3: I have some confidence I can do this 4: I have good confidence I can do this 5: I absolutely can do this! I am confidant that\u2026:</p> <p>I can put the code of a project into a Python package</p> <p>A: 5</p> <p>A: 5 A: 3</p> <p>A: 3</p> <p>A:2</p> <p>A: 3</p> <p>A: 3</p> <p>A: 4</p> <p>I can upload my Python package on PyPI</p> <p>A: 5</p> <p>A: 3</p> <p>A: 3</p> <p>A: 3</p> <p>A: 3</p> <p>A: 3</p> <p>A: 4</p> <p>I can methodically optimize the runtime speed of my code</p> <p>A: 4</p> <p>A: 5</p> <p>A: 5</p> <p>A: 5</p> <p>A: 4</p> <p>A: 4</p> <p>A: 5</p> <p>I can create a runtime speed profile</p> <p>A: 5</p> <p>A: 5</p> <p>A: 5</p> <p>A: 5</p> <p>A: 5</p> <p>A: 5</p> <p>I can read a runtime speed profile</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li> <p>A: I am able to distinguish bad from good advice regarding runtime speed optimization</p> </li> <li> <p>A: 4</p> </li> <li>A:</li> <li>A:</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A: 4</li> <li> <p>A: 4 I can mentalize the installation needs from the users' perspective,I am confidant that\u2026:</p> </li> <li> <p>A: 5</p> </li> <li>A: 3</li> <li>A:</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A: 4</li> <li>A: 4</li> <li>A:</li> <li>A: 3</li> <li> <p>A: I can initialize a new project,I am confidant that\u2026:</p> </li> <li> <p>A: 5</p> </li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 5</li> <li>A:</li> <li> <p>A: I know the most important sections for a full public README,I am confidant that\u2026:</p> </li> <li> <p>A: 4</p> </li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 4</li> <li>A:</li> <li>A: 5</li> <li>A:</li> <li>A: 4</li> <li> <p>A: I can make an installation instruction for potential users,I am confidant that\u2026:</p> </li> <li> <p>A: 4</p> </li> <li>A: 3</li> <li>A: 5</li> <li>A: 4</li> <li>A:</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 4</li> <li>A:</li> <li> <p>A: I can make citation info,I am confidant that\u2026:</p> </li> <li> <p>A: 3</p> </li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A: 4</li> <li>A: 5</li> <li>A: 3</li> <li>A:</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li> <p>A: I know how to find instruction of going to more sophisticated documentation,I am confidant that\u2026: The course met my expectations,I am confidant that\u2026:</p> </li> <li> <p>A: 5</p> </li> <li>A: 4</li> <li>A: 5</li> <li>A:</li> <li>A: 5</li> <li>A: 4</li> <li>A:</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li> <p>A: I learned a lot of new things about software development as a process:</p> </li> <li> <p>A: 5</p> </li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A: 5</li> <li>A:</li> <li>A: I will use what I learned in my projects:</li> </ul> <p>A: 5 A: 5 A: 5 A: 5 A: A: 5 A: A: 4 A: 5 A: A:</p>"},{"location":"expressive_data_type/","title":"Expressive data types","text":"<p>Learning outcomes</p> <ul> <li>Practice to use classes for expression</li> <li>Practice to use classes for type safety</li> <li>Practice to use composition for a 'has-a' relationship</li> </ul> For teachers <p>Prior:</p> <ul> <li>What is a class?</li> <li>Why are classes important?</li> <li>Can you work without classes?</li> <li>What makes a well-written class?</li> </ul>","tags":["data type","expressive"]},{"location":"expressive_data_type/#why","title":"Why?","text":"<p>You want to combine your variables into bigger things. You want those 'bigger things' to work well with the rest of your code.</p>","tags":["data type","expressive"]},{"location":"expressive_data_type/#terminology","title":"Terminology","text":"Term Description Class constructor A function (called <code>__init__</code>) to create an (initialized) class Class definition The complete class Class <code>init</code> function A function (called <code>__init__</code>) to create an (initialized) class Class <code>repr</code> function A function (called <code>__repr__</code>) to create an string to show the class name Class <code>str</code> function A function (called <code>__str__</code>) to create an string to show the class' member values Class name The name of the class Class member variable A variable that is part of the class Class member function A function that is part of the class Class method A function that is part of the class Class procedure A function that is part of the class, that has no arguments Free function A function that is not part of a class","tags":["data type","expressive"]},{"location":"expressive_data_type/#when-a-list-is-not-good-enough-anymore","title":"When a <code>list</code> is not good enough anymore","text":"<p>Data structure are 'ways to organize your data'.</p> <p>For simple data structures, using a <code>list</code> can be considered 'good enough':</p> <pre><code>position = [1.2, 3.4]\ndef get_x(position): return position[0]\ndef get_y(position): return position[1]\n</code></pre> Is it indeed 'good enough'? Why? <p>A reason that this is 'good enough' is because it is hard to confusion people. Most people expect a 2D position to have an x and y position. Storing the x and y in a <code>list</code> with two elements in that order will be something close to what most people expect.</p> <p>However, storing parameters as a <code>list</code> is not 'good enough' anymore:</p> <pre><code>parameters = [42, 1000, 'uniform', 'uniform']\ndef get_n_bacteria(parameters): return parameters[0]\ndef get_n_timesteps(parameters): return parameters[1]\ndef get_gradient_type(parameters): return parameters[2]\ndef get_bacteria_initialization(parameters): return parameters[3]\n</code></pre> Why is this no longer 'good enough'? <p>There is no logical order to expect the parameters to be in:</p> <ul> <li>Why would the first value be the number of bacteria, instead   of the number of timesteps the simulation will take?</li> </ul> <p>Also, reading such a list is too uninformative: which <code>uniform</code> belong to which parameter?</p> <p>Using a dictionary (<code>dict</code>) can be considered good enough, until you've read up about classes:</p> <pre><code>parameters = {\n    'n_bacteria': 42,\n    'n_timesteps': 1000,\n    'gradient_type': 'uniform',\n    'bacteria_initialization': 'uniform'\n}\ndef get_n_bacteria(parameters):\n    return parameters['n_bacteria']\ndef get_n_timesteps(parameters):\n    return parameters['n_timesteps']\ndef get_gradient_type(parameters):\n    return parameters['gradient_type']\ndef get_bacteria_initialization(parameters):\n    return parameters['bacteria_initialization']\n</code></pre> <p>When having read up on classes, one understands these are dictionaries with extra properties, such as a name.</p>","tags":["data type","expressive"]},{"location":"expressive_data_type/#good-data-structures-increase-expressiveness","title":"Good data structures increase expressiveness","text":"<p>This is what (part of) the literature states:</p> <ul> <li>Express ideas directly in code <code>[CppCore P.1]</code></li> <li>Explicit is better than implicit <code>[PEP 20]</code></li> </ul> <p>Here is the code to create a 'something', print it and print its data type:</p> <pre><code>a = get_a()\nprint(a)\nprint(type(a))\n</code></pre> Prefer R? <pre><code>a &lt;- get_a()\na\nclass(a)\n</code></pre> <p>The output looks like:</p> <pre><code>[3.14, 2.72]\n&lt;class 'list'&gt;\n</code></pre> <p>We cannot read what <code>a</code> is exactly. We cannot express this as a <code>list</code> or a <code>dict</code>. Instead, we can express this is a <code>class</code>.</p> <p>Here we put our 'something' into a class. Here is the design:</p> <pre><code>classDiagram\n  class Position{\n    +x\n    +y\n  }</code></pre> <p>Here is the code:</p> <pre><code>class Position:\n    def __init__(self, any_x, any_y):\n        self.x = any_x\n        self.y = any_y\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n</code></pre> What does this code all mean again? <pre><code>class Position:\n</code></pre> <p>now I am going to define a class called <code>Position</code>.</p> <pre><code>def __init__(self, any_x, any_y):\n    self.x = any_x\n    self.y = any_y\n</code></pre> <p>To create a <code>Position</code>, the use need to give two things, called <code>any_x</code> and <code>any_y</code>. These are stored inside of the class as <code>x</code> and <code>y</code>.</p> <pre><code>def __str__(self):\n    return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n</code></pre> <p>When asked for its value, return the <code>x</code> and <code>y</code> between braces separated by a comma.</p> <p>Using the implementation of <code>get_a</code> like this:</p> <pre><code>def get_a():\n    return Position(3.14, 2.72)\n</code></pre> <p>Then running the same code again:</p> <pre><code>a = get_a()\nprint(a)\nprint(type(a))\n</code></pre> <p>Now results in</p> <pre><code>(3.14, 2.72)\n&lt;class '__main__.Position'&gt;\n</code></pre> This does not show the word 'Position'? <p>Then add this to the class:</p> <pre><code>def __repr__(self):\n    return \"Position\"\n</code></pre> <p>Resulting in the complete class:</p> <pre><code>class Position:\n    def __init__(self, any_x, any_y):\n        self.x = any_x\n        self.y = any_y\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n    def __repr__(self):\n        return 'Position'\n</code></pre> <p>When asked for its data type, return the word 'Position'.</p> <p>Aha, <code>a</code> is a position!</p> <p>We can even test that:</p> <pre><code>assert str(type(a)) == \"&lt;class '__main__.Position'&gt;\"\n</code></pre>","tags":["data type","expressive"]},{"location":"expressive_data_type/#exercise-1-use-your-own-class","title":"Exercise 1: use your own class","text":"<ul> <li> <p>Pick a class to design at your skill level:</p> <ul> <li>Easiest: the worked-out position class, work in <code>src/learners</code></li> <li>Medium: the parameters class as shown above, work in <code>src/learners</code></li> <li>Hardest: one in the learners' project, work in <code>src/weather</code></li> </ul> </li> <li> <p>Write the tests and definition of your class</p> </li> </ul> Answer for the position class <p>This is the code of the class:</p> <pre><code>class Position:\n    def __init__(self, any_x, any_y):\n      self.x = any_x\n      self.y = any_y\n    def __repr__(self):\n        return \"Position\"\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\nassert len(str(Position(1.2, 3.4))) &gt; 0\nassert len(type(Position(1.2, 3.4))) &gt; 0\nassert Position(1.2, 3.4).x == 1.2\nassert Position(1.2, 3.4).y == 3.4\n</code></pre> Answer for the parameters class <p>Modify the <code>Position</code> class :-)</p> <ul> <li>Use the class in a function, e.g. <code>create_test_x</code></li> </ul> Answer for the position class <p>This is the code:</p> <pre><code>def create_test_position():\n    return Position(3.14, 2.72)\n\na = create_test_position()\nprint(a)\nprint(type(a))\n</code></pre> Answer for the learners project <p>No answer here, as I cannot read your mind :-)</p>","tags":["data type","expressive"]},{"location":"expressive_data_type/#references","title":"References","text":"<ul> <li><code>[CppCore P.1]</code> P.1. Express ideas directly in code</li> <li><code>[PEP 20]</code> PEP 20: 'Explicit is better than implicit'</li> </ul>","tags":["data type","expressive"]},{"location":"extra_bc/collab_deeper/","title":"More about collaboration","text":"<p>Different types of remotes:</p> <ul> <li>If you have a server you can ssh to, you can use that as a remote.</li> <li>GitHub is a popular, closed-source commercial site.</li> <li>GitLab is a popular, open-core   commercial site.  Many universities have their own private GitLab servers   set up.</li> <li>Bitbucket is yet another popular commercial site.</li> <li>Another option is NotABug</li> </ul>"},{"location":"extra_bc/collab_deeper/#centralized-workflow","title":"Centralized workflow","text":"<p>```{figure} img/centralized.svg :alt: Centralized layout :width: 50%</p> <p>Centralized layout. Red is the repository on GitHub.  Blue is where all contributors work on their own computers. <pre><code>- Centralized workflow is often used for remote collaborative work.\n- `origin` refers to where you cloned from (but you can relocate it).\n- `origin/mybranch` is a read-only pointer to branch `mybranch` on `origin`.\n- These read-only pointers only move when you `git fetch`/`git pull` or `git push`.\n\n## Distributed version control and Forking workflow\n\n```{figure} img/forking-overview.svg\n:alt: Centralized layout\n:width: 50%\n\nForking workflow.  **Red** is the central repository, where only\nowners have access.  **Green** are *forks* on Github (copy for a\nsingle user to work on).  **Blue** are local copies where contributors\nwork on their own computer.\n</code></pre></p> <p>In the forking layout described above we work with multiple remotes, in this case two remotes: One remote refers to the \"central\" repository, and the other remote refers to the fork.</p> <ul> <li>Working with multiple remotes is not as scary as it might look.</li> <li><code>origin</code> is just an alias/placeholder.</li> <li>We can add and remove remotes.</li> <li>We can call these aliases/placeholders as we like.</li> <li>We typically synchronize/updates remotes via the local clone.</li> <li>To see all remotes use <code>git remote -v</code>.</li> <li>If you are more than one person contributing to a project, consider using code review.</li> </ul>"},{"location":"extra_bc/collab_deeper/#how-to-contribute-changes-to-somebody-elses-project","title":"How to contribute changes to somebody else's project","text":"<ul> <li>Avoid frustration and surprises by first discussing and then coding.</li> </ul>"},{"location":"extra_bc/collab_deeper/#contributing-very-minor-changes","title":"Contributing very minor changes","text":"<ul> <li>Fork repository</li> <li>Create a branch</li> <li>Commit and push change</li> <li>File a pull request or merge request</li> </ul>"},{"location":"extra_bc/collab_deeper/#if-you-observe-an-issue-and-have-an-idea-how-to-fix-it","title":"If you observe an issue and have an idea how to fix it","text":"<ul> <li>Open an issue in the repository you wish to contribute to</li> <li>Describe the problem</li> <li>If you have a suggestion on how to fix it, describe your suggestion</li> <li>Possibly discuss and get feedback</li> <li>If you are working on the fix, indicate it in the issue so that others know that somebody is working on it and who is working on it</li> <li>Submit your fix as pull request or merge request which references/closes the issue</li> </ul> <pre><code>- Communicate and discuss before coding massive changes.\n- **Cross-reference discussions, proposals, and code changes**.\n</code></pre>"},{"location":"extra_bc/deploy_deeper/","title":"More about deploying","text":"<p><code>{admonition} Learn more &lt;https://coderefinery.github.io/reproducible-research/workflow-management/&gt; &lt;https://nbis-reproducible-research.readthedocs.io/en/course_2104/snakemake/&gt;</code></p>"},{"location":"extra_bc/deploy_deeper/#containers","title":"Containers","text":"<p>Popular container implementations:</p> <ul> <li> <p>Docker</p> </li> <li> <p>Singularity (popular on high-performance computing systems)</p> </li> <li> <p>Apptainer (popular on high-performance computing systems, fork of Singularity)</p> </li> <li> <p>podman</p> </li> </ul> <p>They are to some extent inter-operable:</p> <ul> <li> <p>podman is very close to Docker</p> </li> <li> <p>Docker images can be converted to Singularity/Apptainer images</p> </li> <li> <p>Singularity Python can convert Docker files to Singularity definition files</p> </li> </ul> <p>https://coderefinery.github.io/reproducible-research/environments</p>"},{"location":"extra_bc/deploy_deeper/#singularity-course","title":"Singularity course","text":"<p>October?</p>"},{"location":"extra_bc/deploy_deeper/#reproducible-publications","title":"Reproducible publications","text":"<ul> <li>Git (overleaf, authorea), HackMD, manuscripts.io, google docs</li> <li>Scholarly output reproducible: rrtools, jupyter, binder, research compendia</li> <li>Reprohack</li> </ul>"},{"location":"extra_bc/documentation_deeper/","title":"More about documentation","text":""},{"location":"extra_bc/documentation_deeper/#restructuredtext-and-markdown","title":"reStructuredText and Markdown","text":"<ul> <li>Two of the most popular lightweight markup languages.</li> <li>reStructuredText (RST) has more features than Markdown but the choice is a matter of taste.</li> <li>Markdown convenient for smaller documents,   but for larger and more complicated documents RST may be a better option.</li> <li>There are (unfortunately) many flavors of Markdown.</li> </ul> <pre><code># This is a section in Markdown   This is a section in RST\n                                  ========================\n\n## This is a subsection           This is a subsection\n                                  --------------------\n\nNothing special needed for        Nothing special needed for\na normal paragraph.               a normal paragraph.\n\n                                  ::\n\n    This is a code block          This is a code block\n\n\n**Bold** and *emphasized*.        **Bold** and *emphasized*.\n\nA list:                           A list:\n- this is an item                 - this is an item\n- another item                    - another item\n\nThere is more: images,            There is more: images,\ntables, links, ...                tables, links, ...\n</code></pre> <p>Experiment with Markdown:</p> <ul> <li>Learn Markdown in 60 seconds</li> <li>https://dillinger.io</li> <li>https://stackedit.io</li> </ul> <p>To convert between MD and RST (and many other formats):</p> <ul> <li>Pandoc</li> </ul>"},{"location":"extra_bc/documentation_deeper/#html-static-site-generators","title":"HTML static site generators","text":"<p>There are many tools that can turn RST or Markdown into beautiful HTML pages:</p> <ul> <li> <p>Sphinx \u2190 we will exercise this, this is how this lesson material is built</p> <ul> <li>Generate HTML/PDF/LaTeX from RST and Markdown.</li> <li>Basically all Python projects use Sphinx but Sphinx is not limited to Python</li> <li>Read the docs hosts public Sphinx documentation for free!</li> <li>Also hostable anywhere else, like Github pages. **\u2190 this is what we use for this lesson</li> <li>API documentation possible</li> </ul> </li> <li> <p>Jekyll</p> <ul> <li>Generates HTML from Markdown.</li> <li>GitHub supports this without adding extra build steps.</li> </ul> </li> <li> <p>pkgdown</p> <ul> <li>Popular in the R community</li> </ul> </li> <li> <p>MkDocs</p> </li> <li>GitBook</li> <li>Hugo</li> <li>Hexo</li> <li>Zola \u2190 this is what CodeRefinery use for their project website and workshop websites</li> </ul> <p>There are many more ...</p>"},{"location":"extra_bc/documentation_deeper/#deployment","title":"Deployment","text":"<p>GitHub, GitLab, and Bitbucket make it possible to serve HTML pages:</p> <ul> <li> <p>GitHub Pages (GH-pages) \u2190 this is what we and CR use for some course material</p> </li> <li> <p>Bitbucket Pages</p> </li> <li>GitLab Pages</li> <li>Read the docs \u2190 this is what NBIS use for some course material</li> </ul>"},{"location":"extra_bc/documentation_deeper/#github-pages","title":"Github pages","text":"<ul> <li>Easiest. everything is local to GitHub</li> <li>This lesson material</li> </ul>"},{"location":"extra_bc/documentation_deeper/#read-the-docs","title":"Read the Docs","text":"<ul> <li>Somewhat more possibilities, like having several versions of documentation to switch between.</li> <li>Example</li> </ul>"},{"location":"extra_bc/documentation_deeper/#wikis","title":"Wikis","text":"<ul> <li>Popular solutions (but many others exist):<ul> <li>MediaWiki</li> <li>Dokuwiki</li> </ul> </li> <li>Advantage<ul> <li>Barrier to write and edit is low</li> </ul> </li> <li>Disadvantages<ul> <li>Typically disconnected from source code repository (reproducibility)</li> <li>Difficult to serve multiple versions</li> <li>Difficult to check out a specific old version</li> <li>Typically needs to be hosted and maintained</li> </ul> </li> </ul>"},{"location":"extra_bc/documentation_deeper/#other-generators","title":"Other generators","text":""},{"location":"extra_bc/documentation_deeper/#latexpdf","title":"LaTeX/PDF","text":"<ul> <li>Advantage<ul> <li>Popular and familiar in the physics and mathematics community</li> </ul> </li> <li>Disadvantages<ul> <li>PDF format is not ideal for copy-paste ability of examples</li> <li>Possible, but not trivial to automate rebuilding documentation after every Git push</li> </ul> </li> </ul>"},{"location":"extra_bc/documentation_deeper/#doxygen-c-c-java-etc","title":"Doxygen (C, C++, Java etc...)","text":"<ul> <li>Auto-generates API documentation</li> <li>Documented directly in the source code   see Doxygen Github Repo</li> <li>Can be deployed to GiHub/GitLab/Bitbucket Pages</li> </ul>"},{"location":"extra_bc/documentation_deeper/#for-fortran","title":"For Fortran","text":"<ul> <li>Fortran Documenter (FORD)</li> </ul>"},{"location":"extra_bc/documentation_deeper/#for-julia","title":"For Julia","text":"<ul> <li>Franklin: static site generator</li> <li>Documenter.jl</li> </ul>"},{"location":"extra_bc/documentation_deeper/#for-markdown","title":"For Markdown","text":"<ul> <li>Quarto converts markdown to websites, pdfs, eBooks and many other things</li> </ul>"},{"location":"extra_bc/documentation_deeper/#demo-these-pages","title":"Demo These pages","text":"<p>``````{challenge} Demo: Git repo -  Sphinx - GitHub - GitHub Actions - GH-pages</p> <ul> <li>We will go behind the scenes of this documentation.</li> <li>You can do this checkout whenever you want.</li> </ul> <p>The basic steps are: (also presented in the 'Sphinx' session of a CodeRefinery course - Start locally in repo with name describing the project - You can generate Sphinx documentation in an existing code project (may be a git repo) - Install python package: <code>sphinx</code> - <code>sphinx-quickstart</code> to generate directories and files - <code>index.rst</code> is first page and includes the Table of contents (TOC) to be seen in a menu and the .md and/or .rst files to make up your web pages. - <code>config.py</code>contains configurations like Sphinx extensions. (these python packages may have to be installed as well) - You can build locally and view results in a web browser</p> <p>To use GH-pages - push to the GitHub remote and continue working from there. - Add the GitHub Action - Create a new file at <code>.github/workflows/documentation.yaml</code> - Enable GitHub Pages:   - Go to <code>https://github.com/&lt;username&gt;/&lt;repo&gt;/settings/pages</code>   - In the \u201cSource\u201d section, choose \u201cgh-pages\u201d in the dropdown menu and click save - That\u2019s it! Your site should now be live on https://uppmax.github.io/programming_formalisms_intro/index.html.</p> <p>Every time you commit the GH Actions will render your source code to html and deploy it to your new web page! ``````</p> <p><code>{Admonition} Read more    [CodeRefinery](https://coderefinery.github.io/documentation/)</code></p>"},{"location":"extra_bc/documentation_deeper/#summary","title":"Summary","text":"<p>````{Keypoints}   - Think that everything is worth to be part of documentation (like Github directory tree)   - Document in code, answering why, not how.   - Make a README.txt for an overview of the software. Make use of Markdown on Github for easier formatting. It should include:     - Overview     - How to install and setup     - Quick setup     - Licensing and how to cite   - Documentation should be tracked with the corresponding code in the same repository.   - Full documentation or tutorial     - Make use of Sphinx or MkDocs to render standard markup languages like markdown or reStructuredText to HTML.   - Deploy wat GH-pages or ReadTheDocs or other.</p> <p>````</p>"},{"location":"extra_bc/git_deeper/","title":"More about git","text":"<pre><code>This material is based on or inspired by the material from [NBIS](https://nbis-reproducible-research.readthedocs.io/en/course_2104/git/) and [CodeRefinery](https://coderefinery.github.io/git-intro/)\n\n```{note}\n- We will cover the most basic things with Git such that you can use it this week.\n- For deeper understanding and hands-on on branching etcetera, please confer the course material of [NBIS](https://nbis-reproducible-research.readthedocs.io/en/course_2104/git/) and [CodeRefinery](https://coderefinery.github.io/git-intro/).\n</code></pre>"},{"location":"extra_bc/git_deeper/#git","title":"Git","text":"<ul> <li>We will start with our own repository.</li> <li>branching and merging (locally)</li> <li>and a brief introduction to pushing to remotes.</li> <li>In the separate collaborative Git lesson, we teach more use of remote repositories and good collaborative workflows.</li> </ul> <pre><code>   -  **Git and GITHUB should be configured prior to the course**\n      following [https://coderefinery.github.io/installation](https://github.com/UPPMAX/programming_formalism/blob/main/setup.md)).\n   -  Being comfortable with the command line. No expertise is required,\n      but the lesson will be mostly taken from the command line.\n   -  Students should be familiar with using a **text editor** on their\n      system. Emacs and Vim are excellent choices if you know how to use\n      them but Nano or Notepad on Windows are sufficient.\n</code></pre>"},{"location":"extra_bc/git_deeper/#what-is-git-and-what-is-a-git-repository","title":"What is Git, and what is a Git repository?","text":"<ul> <li>Git is a version control system: can record/save snapshots and track the content of a folder as it changes over time.</li> <li>Every time we commit a snapshot, Git records a snapshot of the entire project, saves it, and assigns it a version.</li> <li>These snapshots are kept inside a sub-folder called <code>.git</code>.</li> <li>If we remove <code>.git</code>, we remove the repository and history (but keep the working directory!).</li> <li><code>.git</code> uses relative paths - you can move the whole thing somewhere else and it will still work</li> <li>Git doesn't do anything unless you ask it to (it does not record anything automatically).</li> <li>Multiple interfaces to Git exist (command line, graphical interfaces, web interfaces).</li> </ul>"},{"location":"extra_bc/git_deeper/#recording-a-snapshot-with-git","title":"Recording a snapshot with Git","text":"<ul> <li>Git takes snapshots only if we request it.</li> <li>We will record changes always in two steps (we will later explain why this is a recommended practice).</li> <li>Example (we don't need to type yet):</li> </ul> <pre><code>git add somefile.txt\ngit commit\n\ngit add file.txt anotherfile.txt\ngit commit\n</code></pre> <ul> <li>We first focus (<code>git add</code>, we \"stage\" the change), then shoot (<code>git commit</code>):</li> </ul>"},{"location":"extra_bc/git_deeper/#before-we-start-we-need-to-configure-git","title":"Before we start we need to configure Git","text":"<pre><code>- Start your terminal of choice\n   - MAC terminal\n   - iTerm\n   - WSL environment in\n     - MobaxTerm\n     - Visual Studio Code\n   - Git BASH\n   - PowerShell\n</code></pre> <p>If you haven't already configured Git, please follow the instructions in the installation instructions.</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email yourname@example.com\ngit config --global core.editor nano\n</code></pre> <p>Verify with:</p> <pre><code>git config --list\n</code></pre>"},{"location":"extra_bc/git_deeper/#type-along","title":"Type-along","text":""},{"location":"extra_bc/git_deeper/#create-repository","title":"Create repository","text":"<p>We will create a repository (repo) called <code>Diagrams</code>.</p> <p>Be sure you are in a directory like \"Programming_Formalisms\" or similar (to have track of your work)</p> <p>One of the basic principles of Git is that it is easy to create repositories:</p> <pre><code>mkdir Diagrams\ncd Diagrams\ngit init\n</code></pre> <p>That's it! With <code>git init</code> have now created an empty Git repository.</p>"},{"location":"extra_bc/git_deeper/#check-status","title":"Check status","text":"<p>We will use <code>git status</code> a lot to check out what is going on:</p> <pre><code>$ git status\n\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n</code></pre> <p>We will make sense of this information during this workshop.</p> <p>```{admonition} A new repository from an existing project on own computer or HPC user account.</p> <ul> <li> <p>Say you\u2019ve got an existing project that you want to start tracking with git.</p> <ul> <li>Go into the directory containing the project.</li> <li>Type <code>git init</code>.</li> <li>Type <code>git add</code> to add all of the relevant files.</li> <li>You\u2019ll probably want to create a <code>.gitignore</code> file right away, to indicate all of the files you don\u2019t want to track. Use <code>git add .gitignore</code>, too.</li> <li>Type <code>git commit</code>.</li> </ul> </li> </ul> <pre><code>### Git everyday steps\n\n\nLet us now **create two files**.\n\nOne file is called `class.puml` and contains:\n\n```shell\n@startuml\n class01 &lt;|-- class02\n class03 *-- class04\n class05 o-- class06\n\n class01- class03 : knows &gt;\n class class01 {\n    -var01 : Integer\n    Time : Date\n    #method01()\n    +get_var01()\n    {method}Without parentheses or Qualifiers\n }\n@enduml\n</code></pre> <p>The second file is called <code>activity.puml</code> and contains:</p> <pre><code>@startuml\nstart\n\nif (Graphviz installed?) then (yes)\n  :process all\\ndiagrams;\nelse (no)\n  :process only\n  __sequence__ and __activity__ diagrams;\nendif\n\nstop\n@enduml\n</code></pre>"},{"location":"extra_bc/git_deeper/#staging-files","title":"Staging files","text":"<p>As mentioned above, in Git you can always check the status of files in your repository using <code>git status</code>. It is always a safe command to run and in general a good idea to do when you are trying to figure out what to do next:</p> <pre><code>On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        activity.puml\n        class.puml\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>The two files are untracked in the repository (directory). You want to add the files (focus the camera) to the list of files tracked by Git. Git does not track any files automatically and you need make a conscious decision to add a file. Let's do what Git hints at and add the files:</p> <pre><code>$ git add .    # &lt; -- \".\" means all files\n$ git status\n\nOn branch master\n\nInitial commit\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n        new file:   activity.puml\n        new file:   class.puml\n</code></pre> <p>Now this change is staged and ready to be committed.</p>"},{"location":"extra_bc/git_deeper/#commit","title":"Commit","text":"<p>Let us now commit the change to the repository:</p> <pre><code>$ git commit -m \"adding class and activity diagrams\"\n\n[master (root-commit) 8adee34] adding class and activity diagrams\n 2 files changed, 26 insertions(+)\n create mode 100644 activity.puml\n create mode 100644 class.puml\n</code></pre> <p>Right after we query the status to get this useful command into our muscle memory:</p> <pre><code>$ git status\n\nOn branch master\nnothing to commit, working tree clean\n</code></pre> <p>What does the <code>-m</code> flag mean? Let us check the help page for that command:</p> <pre><code>git help commit\n</code></pre> <p>You should see a very long help page as the tool is very versatile (press q to quit). Do not worry about this now but keep in mind that you can always read the help files when in doubt. Searching online can also be useful, but choosing search terms to find relevant information takes some practice and discussions in some online threads may be confusing. Note that help pages also work when you don't have a network connection!</p>"},{"location":"extra_bc/git_deeper/#exercise-optional","title":"Exercise-optional","text":"<p><code>`````{challenge} Make changes (10 min)   Add the follwing lines before the line \"@enduml\" to</code>class.puml`:</p> <p>```shell  class class02 {     -var02 : Float     Time : Date     #method01()     +get_var02()     {method}Without parentheses or Qualifiers  }</p> <p>When you are done editing the files, try <code>git diff</code>:</p> <p><code>console   $ git diff</code></p> <p>You will see (can you identify in there the two added lines?):</p> <p>```diff diff --git a/class.puml b/class.puml index 3b3fd07..2be3224 100644 --- a/class.puml +++ b/class.puml @@ -11,4 +11,12 @@      +get_var01()      {method}Without parentheses or Qualifiers   } + + class class02 { +    -var02 : Float +    Time : Date +    #method01() +    +get_var02() +    {method}Without parentheses or Qualifiers + }  @enduml</p> <p>Now first stage and then commit (what happens when we leave out the <code>-m</code> flag?):</p> <pre><code>  $ git add class.puml     # &lt;-- we can state exactly which file to stage as well\n  $ git commit                   # &lt;-- we have left out -m \"...\"\n  ```\n\n  When you leave out the `-m` flag, Git should open an editor where you can edit\n  your commit message. This message will be associated and stored with the\n  changes you made. This message is your chance to explain what you've done and\n  convince others (and your future self) that the changes you made were\n  justified.  Write a message and save and close the file.\n\n  When you are done committing the changes, experiment with these commands:\n\n  ```console\n  $ git log\n  $ git log --stat\n  $ git log --oneline\n  ```\n``````\n\n## Git history and log\n\nIf you haven't yet, please try now `git log`:\n\n```console\n$ git log\n\ncommit 4bb8b6fa66e5ea693a80e40cee3c3014163eb7ac (HEAD -&gt; master)\nAuthor: bclaremar &lt;bjorn.claremar@uppmax.uu.se&gt;\nDate:   Sat Oct 22 19:27:57 2022 +0200\n\n    Added info for class02\n\ncommit 8adee34b35a8b1b1c1c41f4dce1b1e793030f669\nAuthor: bclaremar &lt;bjorn.claremar@uppmax.uu.se&gt;\nDate:   Fri Oct 21 23:37:31 2022 +0200\n\n    adding class and activity diagrams\n</code></pre> <ul> <li>We can browse the development and access each state that we have committed.</li> <li>The long hashes uniquely label a state of the code.</li> <li>They are not just integers counting 1, 2, 3, 4, ... (why?).</li> <li>Output is in reverse chronological order, i.e. newest commits on top.</li> <li>We will use them when comparing versions and when going back in time.</li> <li><code>git log --oneline</code> only shows the first 7 characters of the commit hash and is good to get an overview.</li> <li>If the first characters of the hash are unique it is not necessary to type the entire hash.</li> <li><code>git log --stat</code> is nice to show which files have been modified.</li> </ul>"},{"location":"extra_bc/git_deeper/#writing-useful-commit-messages","title":"Writing useful commit messages","text":"<p>Using <code>git log --oneline</code> we understand that the first line of the commit message is very important.</p> <p>Good example:</p> <pre><code>increase threshold alpha to 2.0\n\nthe motivation for this change is\nto enable ...\n...\nthis is based on a discussion in #123\n</code></pre> <p>Convention: one line summarizing the commit, then one empty line, then paragraph(s) with more details in free form, if necessary.</p> <ul> <li>Why something was changed is more important than what has changed.</li> <li>Cross-reference to issues and discussions if possible/relevant.</li> <li>Bad commit messages: \"fix\", \"oops\", \"save work\"</li> <li>Bad examples: http://whatthecommit.com</li> <li>Write commit messages in English that will be understood   15 years from now by someone else than you. Or by your future you.</li> <li>Many projects start out as projects \"just for me\" and end up to be successful projects   that are developed by 50 people over decades.</li> <li>Commits with multiple authors are possible.</li> </ul> <p>Good references:</p> <ul> <li>\"My favourite Git commit\"</li> <li>\"On commit messages\"</li> <li>\"How to Write a Git Commit Message\"</li> </ul> <pre><code>A great way to learn how to write commit messages and to get inspired by their\nstyle choices: **browse repositories of codes that you use/like**:\n\nSome examples (but there are so many good examples):\n- [SciPy](https://github.com/scipy/scipy/commits/main)\n- [NumPy](https://github.com/numpy/numpy/commits/main)\n- [Pandas](https://github.com/pandas-dev/pandas/commits/main)\n- [Julia](https://github.com/JuliaLang/julia/commits/master)\n- [ggplot2](https://github.com/tidyverse/ggplot2/commits/main),\n  compare with their [release\n  notes](https://github.com/tidyverse/ggplot2/releases)\n- [Flask](https://github.com/pallets/flask/commits/main),\n  compare with their [release\n  notes](https://github.com/pallets/flask/blob/main/CHANGES.rst)\n\nWhen designing commit message styles consider also these:\n- How will you easily generate a changelog or release notes?\n- During code review, you can help each other improving commit messages.\n</code></pre> <p>But remember: it is better to make any commit, than no commit. Especially in small projects. Let not the perfect be the enemy of the good enough.</p> <p>(gitignore)=</p>"},{"location":"extra_bc/git_deeper/#ignoring-files-and-paths-with-gitignore","title":"Ignoring files and paths with .gitignore","text":"<pre><code>- Should we add and track all files in a project?\n- How about generated files?\n- Why is it considered a bad idea to commit compiled binaries to version control?\n- What types of generated files do you know?\n</code></pre> <p>Compiled and generated files are not committed to version control. There are many reasons for this:</p> <ul> <li>Your code could be run on different platforms.</li> <li>These files are automatically generated and thus do not contribute in any meaningful way.</li> <li>The number of changes to track per source code change can increase quickly.</li> <li>When tracking generated files you could see differences in the code although you haven't touched the code.</li> </ul> <p>For this we use <code>.gitignore</code> files. Example:</p> <pre><code># ignore compiled python 2 files\n*.pyc\n# ignore compiled python 3 files\n__pycache__\n</code></pre> <p>An example taken from the official Git documentation:</p> <pre><code># ignore objects and archives, anywhere in the tree.\n*.[oa]\n# ignore generated html files,\n*.html\n# except foo.html which is maintained by hand\n!foo.html\n# ignore everything under build directory\nbuild/\n</code></pre> <ul> <li><code>.gitignore</code> should be part of the repository because we want to make sure that all developers see the same behavior.</li> <li>All files should be either tracked or ignored.</li> <li><code>.gitignore</code> uses something called a   shell glob syntax for   determining file patterns to ignore. You can read more about the syntax in the   documentation.</li> <li>You can have <code>.gitignore</code> files in lower level directories and they affect the paths   relatively.</li> </ul>"},{"location":"extra_bc/git_deeper/#graphical-user-interfaces","title":"Graphical user interfaces","text":"<p>We have seen how to make commits directly via the GitHub website, and also via command line. But it is also possible to work from within a Git graphical user interface (GUI):</p> <ul> <li>GitHub Desktop</li> <li>SourceTree</li> <li>List of third-party GUIs</li> </ul>"},{"location":"extra_bc/git_deeper/#branching-and-merging","title":"Branching and merging","text":"<ul> <li>A branch is a division unit of work, to be merged with other units of work.</li> <li>A tag is a pointer to a moment in the history of a project.</li> </ul> <p>```{figure} img/git-collaborative.svg :alt: Isolated tracks :width: 50%</p> <p>Isolated tracks of work. <pre><code>### Typical workflows\n\nThere are two typical workflows:\n\n```console\ngit switch -b new-feature  # create branch, switch to it\ngit commit                   # work, work, work, ..., and test\ngit switch master          # once feature is ready, switch to master\ngit merge new-feature        # merge work to master\ngit branch -d new-feature    # remove branch\n</code></pre></p> <p>Sometimes you have a wild idea which does not work. Or you want some throw-away branch for debugging:</p> <pre><code>git switch -b wild-idea    # create branch, switch to it, work, work, work ...\ngit switch master          # realize it was a bad idea, back to master\ngit branch -D wild-idea      # it is gone, off to a new idea\n</code></pre> <p>No problem: we worked on a branch, branch is deleted, <code>master</code> is clean.</p> <pre><code>[More about branches](https://coderefinery.github.io/git-intro/branches/)\n</code></pre>"},{"location":"extra_bc/git_deeper/#working-remotely-and-sharing-github","title":"Working remotely and sharing (github)","text":"<pre><code>- What if the hard disk fails?\n- What if somebody steals my laptop?\n- How can we collaborate with others across the web?\n</code></pre> <p>You might use remotes to:</p> <ul> <li>Back up your own work.</li> <li>To collaborate with other people.</li> </ul> <p>There are different types of remotes:</p> <ul> <li>If you have a server you can ssh to, you can use that as a remote.</li> <li>GitHub is a popular, closed-source commercial site.</li> <li>GitLab is a popular, open-core   commercial site.  Many universities have their own private GitLab servers   set up.</li> <li>Bitbucket is yet another popular commercial site.</li> <li>Another option is NotABug</li> <li>We also operate a Nordic   research software repository   platform.   This is GitLab, free for researchers and allows private,   cross-university sharing.</li> </ul>"},{"location":"extra_bc/git_deeper/#type-along-create-a-new-repository-on-github","title":"Type-along: Create a new repository on GitHub","text":"<p>For the rest of this page, we will make a new repository for our guacamole recipe on GitHub ({ref}<code>here &lt;index&gt;</code> we motivate why we demonstrate this with GitHub), send our code to it, and then see how others can get the code from it.</p> <p>Make sure that you are logged into GitHub.</p> <p>```{figure} img/New_repo.png :width: 60% :class: with-border</p> <p>To create a repository we either click the green button \"New\" (top left corner). <pre><code>```{figure} img/new-top-right.png\n:width: 60%\n:class: with-border\n\nOr if you see your profile page, there is a \"+\" menu (top right corner).\n</code></pre></p> <p>On this page choose a project name. For the sake of this exercise do not select \"Initialize this repository with a README\" (what will happen if you do?):</p> <p>```{figure} img/New_repo_formalisms.png :width: 100% :class: with-border <pre><code>Once you click the green \"Create repository\", you will see a page similar to:\n\n```{figure} img/push_existing.png\n:width: 100%\n:class: with-border\n</code></pre></p> <p>Don't do anything yet</p> <p>What this means is that we have now an empty project with either an HTTPS or an SSH address: click on the HTTPS and SSH buttons to see what happens.</p>"},{"location":"extra_bc/git_deeper/#pushing-our-formalisms-repository-to-github","title":"Pushing our Formalisms repository to GitHub","text":"<p>To push changes to the project please select SSH. For this to work you will need your SSH keys configured.</p> <p>We now want to try the second option that GitHub suggests:</p> <p>... or push an existing repository from the command line</p> <ol> <li>Now go to your \"Formalisms\" repo on your computer.</li> <li>Check that you are in the right place with <code>git status</code>.</li> <li>Copy paste the three lines to the terminal and execute those, in my case (you   need to replace the \"user\" part and possibly also the repository name):</li> </ol> <pre><code>git remote add origin git@github.com:&lt;user&gt;/Formalisms.git\ngit branch -M main\ngit push -u origin main\n</code></pre> <p>The meaning of the above lines:</p> <ul> <li>Add a remote reference with the name \"origin\"</li> <li>Rename current branch to \"main\"</li> <li>Push branch \"main\" to \"origin\"</li> </ul> <p>You should now see something like:</p> <pre><code>Enumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (7/7), done.\nWriting objects: 100% (7/7), 846 bytes | 846.00 KiB/s, done.\nTotal 7 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), done.\nTo github.com:bclaremar/Formalisms.git\n * [new branch]      main -&gt; main\nbranch 'main' set up to track 'origin/main'.\n</code></pre>"},{"location":"extra_bc/git_deeper/#admonition-if-you-get-errors","title":"``````{admonition} If you get errors","text":""},{"location":"extra_bc/git_deeper/#class-warning-dropdown","title":"class: warning, dropdown","text":"<p>If you instead get something like the below, your SSH keys are not correctly configured. <pre><code>git@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n</code></pre> If <code>ssh -T git@github.com</code> gives an error, this is the case.</p> <ul> <li>Generating a new SSH key and adding it to the ssh-agent</li> <li>Approximate steps <pre><code>ssh-keygen -t ed25519 -C \"email address\"\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n</code></pre></li> <li>Adding a new SSH key to your GitHub account</li> <li>Hope you can fix this in Lunch Break. Follow the rest by listening for now.</li> </ul> <p>``````</p> <p>Reload your GitHub project website and - taa-daa - your commits should now be online!</p> <p>What just happened? Think of publishing a repository as uploading the <code>.git</code> part online.</p>"},{"location":"extra_bc/git_deeper/#cloning-a-repository","title":"Cloning a repository","text":"<p>Now other people can clone this repository and contribute changes.</p> <p>At this point only a brief demo - if you copy the SSH or HTTPS address, you can clone repositories like this (again adapt the \"namespace/repository.git\" part):</p> <p><code>console git clone git@github.com:&lt;user&gt;/project.git</code></p> <p>This creates a directory called \"project\" unless it already exists. You can also specify the target directory on your computer:</p> <p><code>console git clone git@github.com:&lt;user&gt;/project.git myproject</code></p> <p>What just happened? Think of cloning as downloading the <code>.git</code> part to your computer. After downloading the <code>.git</code> part the branch pointed to by HEAD is automatically checked out.</p> <p><code>{keypoints} - A repository can have one or multiple remotes (we will revisit these later). - Local branches often track remote branches. - A remote serves as a full backup of your work.</code></p>"},{"location":"extra_bc/git_deeper/#working-on-github","title":"Working on GitHub","text":"<ul> <li>You can do basically the same work at GitHub as in your local git repo</li> <li>The graphical view makes it easier to work with in everyday editing work at least.<ul> <li>Depends on your own preferences of course.</li> </ul> </li> <li>Here your commit each file at a time with the \"commit button\". No staging that is.</li> <li>GitHub Actions are workflows defined by you, like:<ul> <li>for automatic testing after each commit (Used on Thursday)</li> <li>for GitHub Pages, briefly covered in last session today.</li> </ul> </li> </ul>"},{"location":"extra_bc/git_deeper/#summary","title":"Summary","text":"<p>Now we know how to save snapshots:</p> <p><code>console git add &lt;file(s)&gt; git commit</code></p> <p>And this is what we do as we program.</p> <p>Every state is then saved and later we will learn how to go back to these \"checkpoints\" and how to undo things.</p> <p><code>console git init    # initialize new repository git add     # add files or stage file(s) git commit  # commit staged file(s) git status  # see what is going on git log     # see history git diff    # show unstaged/uncommitted modifications git show    # show the change for a specific commit git mv      # move tracked files git rm      # remove tracked files</code></p> <p>Git is not ideal for large binary files (for this consider http://git-annex.branchable.com).</p> <p><code>{Keypoints} - Initializing a Git repository is simple: git init. - Commits should be used to tell a story. - Git uses the .git folder to store the snapshots. - Don\u2019t be afraid to stage and commit often. Better too often than not often enough. - A branch is a division unit of work, to be merged with other units of work. - A tag is a pointer to a moment in the history of a project. - A repository can have one or multiple remotes (we will revisit these later). - Local branches often track remote branches. - A remote serves as a full backup of your work.</code></p>"},{"location":"extra_bc/plantUML/","title":"PlantUML","text":"<ul> <li> <p>PlantUML is a good tool to render UML code to graphical diagrams and flowcharts.</p> </li> <li> <p>We won't cover this tool specifically in this workshop</p> </li> <li> <p>If you anyway are interested, see below for some useful settings!</p> </li> <li> <p>If you want PlantUML to render directly from a file on GitHub please install the extension PlantUML viewer to your web browser.</p> </li> <li>works for multiple browsers https://github.com/marcozaccari/markdown-diagrams-browser-extension<ul> <li>Restart browser after installation!</li> </ul> </li> <li>if the above does not work try<ul> <li>Firefox: PlantUML visualizer (is not compatible with !theme none tag)</li> <li>Chrome: Pegmatite,PlantUML viewer</li> <li>Microsoft Edge Markdown Diagrams</li> </ul> </li> <li>When done you should see the code below as a diagram.</li> </ul> <pre><code>@startuml\n!theme superhero\ntitle:\"USECASE Diagrams\"\nskinparam actorStyle awesome\nLecturer -d-&gt;(Present slides on UML)\nParticipant-d-&gt;(learn UML from SLIDES)\n@enduml\n</code></pre>"},{"location":"extra_bc/pseudocode/","title":"Pseudocode","text":""},{"location":"extra_bc/pseudocode/#pseudocode","title":"Pseudocode","text":"<ul> <li>Pseudocode does not have syntax rules of any particular language<ul> <li>no systematic standard form.</li> </ul> </li> <li>Some borrow style and syntax from some conventional programming language<ul> <li>like Fortran, Pascal, BASIC, C, C++, Java, Lisp, and ALGOL.</li> </ul> </li> <li>Variable declarations are typically omitted.</li> <li>Function calls and blocks of code, such as code contained within a loop, are often replaced by a one-line natural language sentence.</li> </ul> <p>Example</p> <pre><code>  algorithm ford-fulkerson is\n    input: Graph G with flow capacity c,\n           source node s,\n           sink node t\n    output: Flow f such that f is maximal from s to t\n\n    (Note that f(u,v) is the flow from node u to node v, and c(u,v) is the flow capacity from node u to node v)\n\n    for each edge (u, v) in GE do\n        f(u, v) \u2190 0\n        f(v, u) \u2190 0\n\n    while there exists a path p from s to t in the residual network Gf do\n        let cf be the flow capacity of the residual network Gf\n        cf(p) \u2190 min{cf(u, v) | (u, v) in p}\n        for each edge (u, v) in p do\n            f(u, v) \u2190  f(u, v) + cf(p)\n            f(v, u) \u2190 \u2212f(u, v)\n\n    return f\n</code></pre> <ul> <li>Depending on the writer, pseudocode may therefore vary widely in style,<ul> <li>from a near-exact imitation of a real programming language at one extreme</li> <li>to a description approaching formatted prose at the other.</li> </ul> </li> </ul>"},{"location":"extra_bc/reproducible_deeper/","title":"More about reproducibility","text":""},{"location":"extra_bc/reproducible_deeper/#versioning-systems","title":"Versioning systems","text":""},{"location":"extra_bc/reproducible_deeper/#semantic-semver","title":"Semantic (SemVer)","text":"<p>Given a version number MAJOR.MINOR.PATCH, increment the:</p> <ol> <li>MAJOR version when you make incompatible API changes</li> <li>MINOR version when you add functionality in a backwards compatible manner</li> <li>PATCH version when you make backwards compatible bug fixes Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.</li> </ol> <p>```{figure} img/SemVer.jpg :alt: Isolated tracks :width: 50%</p> <p>&lt;https://nehckl0.medium.com/semver-and-calver-2-popular-software-versioning-schemes-96be80efe36</p> <pre><code>### Calender ([CalVer](https://calver.org/))\n\n```{figure} img/CalVer.png\n:alt: Isolated tracks\n:width: 50%\n\n&lt;https://nehckl0.medium.com/semver-and-calver-2-popular-software-versioning-schemes-96be80efe36\n&gt;\n</code></pre>"},{"location":"extra_bc/reproducible_deeper/#recording-dependencies","title":"Recording dependencies","text":"<ul> <li>Reproducibility: We can control our code but how can we control dependencies?</li> <li>10-year challenge: Try to build/run your own code that you have created 10 (or less) years ago. Will your code from today work in 5 years if you don\u2019t change it?</li> <li>Dependency hell: Different codes on the same environment can have conflicting dependencies.</li> </ul>"},{"location":"extra_bc/reproducible_deeper/#conda-anaconda-pip-virtualenv-pipenv-pyenv-poetry-requirementstxt","title":"Conda, Anaconda, pip, Virtualenv, Pipenv, pyenv, Poetry, requirements.txt \u2026","text":"<p>These tools try to solve the following problems:</p> <ul> <li>Defining a specific set of dependencies, possibly with well defined versions</li> <li>Installing those dependencies mostly automatically</li> <li>Recording the versions for all dependencies</li> <li>Isolated environments</li> <li>On your computer for projects so they can use different software.</li> <li>Isolate environments on computers with many users (and allow self-installations)</li> <li>Using different Python/R versions per project??</li> <li>Provide tools and services to share packages</li> </ul>"},{"location":"extra_bc/reproducible_deeper/#the-tools","title":"The tools","text":"<ul> <li>Python<ul> <li>PyPI -pip freeze &gt; requirements.txt</li> <li>Conda: any language, also compiled code and libraries.<ul> <li>conda-forge is a GitHub organization containing repositories of conda recipes.<ul> <li>Export the requirements into requirements.txt with conda list --export &gt; requirements.txt.</li> <li>Export the full environment using conda env export &gt; environment.yml, and compare the .yml file format to the .txt file format.</li> </ul> </li> </ul> </li> <li>Virtualenv<ul> <li>Pipenv</li> <li>Poetry</li> <li>Pyenv</li> <li>Mamba (faster conda)</li> </ul> </li> </ul> </li> <li>R</li> <li>Packrat, jetpack, rsuite, renv, automagic, deplearning, devtools</li> <li>C/C+<ul> <li>CMake</li> <li>Conan</li> <li>Conda</li> </ul> </li> <li>Fortran</li> <li>Fortran package manager</li> <li>Julia<ul> <li>Pkg.jl<ul> <li>designed around using isolated environments with independent sets of packages. Environments can either be local to a particular project or shared and selected by name.</li> </ul> </li> </ul> </li> </ul>"},{"location":"extra_bc/reproducible_deeper/#course-advertisement","title":"Course advertisement","text":"<p>Python for scientific computing</p>"},{"location":"extra_bc/reproducible_deeper/#recording-computational-steps","title":"Recording computational steps","text":"<pre><code>- How can we create a reproducible workflow?\n- When to use scientific workflow management systems.\n</code></pre> <pre><code>- Discuss pros/cons of GUI vs. manual steps vs. scripted vs. workflow tools.\n</code></pre> <p>4 ways (from CodeRefinery)</p>"},{"location":"extra_bc/reproducible_deeper/#graphical-user-interface-gui","title":"Graphical user interface (GUI)","text":"<p>Imagine we have programmed a GUI with a nice interface with icons where you can select scripts and input files by clicking:</p> <ol> <li>Click on counting script</li> <li>Select book txt file</li> <li>Give a name for the dat file</li> <li>Click on a run symbol</li> <li>Click on plotting script</li> <li>Select book dat file</li> <li>Give a name for the image file</li> <li>Click on a run symbol</li> <li>...</li> <li>Go to next book ...</li> <li>Click on counting script</li> <li>Select book txt file</li> <li>...</li> </ol> <p>Disclaimer: not all GUIs behave this way - there exist very good GUI solutions which enable reproducibility and automation.</p>"},{"location":"extra_bc/reproducible_deeper/#solution-2-manual-steps","title":"Solution 2: Manual steps","text":"<p>It is not too much work for four files:</p>"},{"location":"extra_bc/reproducible_deeper/#code-block-console","title":"```{code-block} console","text":""},{"location":"extra_bc/reproducible_deeper/#emphasize-lines-1-2-13","title":"emphasize-lines: 1-2, 13","text":"<p>$ python source/wordcount.py data/abyss.txt processed_data/abyss.dat $ python source/plotcount.py processed_data/abyss.dat processed_data/abyss.png</p> <p>$ python source/wordcount.py data/isles.txt processed_data/isles.dat $ python source/plotcount.py processed_data/isles.dat processed_data/isles.png</p> <p>$ python source/wordcount.py data/last.txt processed_data/last.dat $ python source/plotcount.py processed_data/last.dat processed_data/last.png</p> <p>$ python source/wordcount.py data/sierra.txt processed_data/sierra.dat $ python source/plotcount.py processed_data/sierra.dat processed_data/sierra.png</p> <p>$ python source/zipf_test.py processed_data/abyss.dat processed_data/isles.dat processed_data/last.dat processed_data/sierra.dat <pre><code>This is **imperative style**: first do this, then to that, then do that, finally do ...\n\n---\n\n### Solution 3: Script\n\nLet\u2019s express it more compactly with a shell script (Bash). Let\u2019s call it script.sh:\n\n```shell\n#!/usr/bin/env bash\n\n# loop over all books\nfor title in abyss isles last sierra; do\n    python source/wordcount.py data/${title}.txt processed_data/${title}.dat\n    python source/plotcount.py processed_data/${title}.dat processed_data/${title}.png\ndone\n\n# this could be done using variables but nevermind\npython source/zipf_test.py processed_data/abyss.dat processed_data/isles.dat processed_data/last.dat processed_data/sierra.dat\n</code></pre></p> <p>We can run it with:</p> <pre><code>bash script.sh\n</code></pre>"},{"location":"extra_bc/reproducible_deeper/#solution-4-using-snakemake-or-other-workflow-manager","title":"Solution 4: Using Snakemake or other workflow manager","text":"<p>```{figure} img/snakemake_dag.png :alt: Isolated tracks :width: 50%</p> <p>Isolated tracks of work. <pre><code>````{discussion} Discussion\nDiscuss the pros and cons of these different approaches. Which are reproducible? Which scale to hundreds of books and which can it be automated?\n\n```{solution}\n- GUIs may or may not be reproducible.\n- Some GUIs can be automated, many cannot.\n- Typing the same series of commands for 100 similar inputs is tedious and error prone.\n- Imperative scripts are reproducible and great for automation.\n- Declarative workflows such as Snakemake are great for longer multi-step analyses.\n- Declarative workflows are often easy to parallelize without you changing anything.\n- With declarative workflows it is no problem to add/change things late in the project.\n- Interesting modern alternative to Make/Snakemake: [https://taskfile.dev](https://taskfile.dev)\n- Many [specialized frameworks](https://github.com/common-workflow-language/common-workflow-language/wiki/Existing-Workflow-systems) exist.\n</code></pre> ````</p> <p><code>{admonition} Learn more &lt;https://coderefinery.github.io/reproducible-research/workflow-management/&gt; &lt;https://nbis-reproducible-research.readthedocs.io/en/course_2104/snakemake/&gt;</code></p>"},{"location":"extra_bc/reproducible_deeper/#containers","title":"Containers","text":"<p>Popular container implementations:</p> <ul> <li> <p>Docker</p> </li> <li> <p>Singularity (popular on high-performance computing systems)</p> </li> <li> <p>Apptainer (popular on high-performance computing systems, fork of Singularity)</p> </li> <li> <p>podman</p> </li> </ul> <p>They are to some extent interoperable:</p> <ul> <li> <p>podman is very close to Docker</p> </li> <li> <p>Docker images can be converted to Singularity/Apptainer images</p> </li> <li> <p>Singularity Python can convert Dockerfiles to Singularity definition files</p> </li> </ul> <p>https://coderefinery.github.io/reproducible-research/environments</p>"},{"location":"extra_bc/reproducible_deeper/#reproducible-publications","title":"Reproducible publications","text":"<ul> <li>Git (overleaf, authorea), hackmd, manuscripts.io, google docs</li> <li>Scholarly output reproducible: rrtools, jupyter, binder, research compendia</li> <li>Reprohack</li> </ul> <p><code>{keypoints}   - Preserve the steps for re-generating published results.   - Hundreds of workflow management tools exist.   - Snakemake is a comparatively simple and lightweight option to create transferable and scalable data analyses.   - Sometimes a script is enough.</code></p>"},{"location":"extra_bc/sdlc_models/","title":"Software Development Lifecycle (SDLC) models","text":""},{"location":"extra_bc/sdlc_models/#take-aways-from-other-methods","title":"Take aways from other methods","text":""},{"location":"extra_bc/sdlc_models/#the-agile-manifest","title":"The Agile manifest","text":"<p>```{admonition} Values - Individuals and interactions over processes and tools - Working software over comprehensive documentation - Customer collaboration over contract negotiation - Responding to change over following a plan <pre><code>Or:\n\"Agile = characterized by the division of tasks into short phases of work and frequent re-assessment and adaptation of plans.\"\n\n**Most of the following models are Agile...**\n\n### Dynamic system development method (DSDM)\n\n- Timeboxing\n- MoSCoW prioritization:\n    - must-have\n    - should-have\n    - could-have\n    - and won\u2019t-have, or will not have right now.\n        - Some companies also use the \u201cW\u201d in MoSCoW to mean \u201cwish.\u201d\n- Iterative and incremental approach\n\n### Feature-driven development (FDD)\n\n- Feature teams\n- Parallel development\n- Tracking completion status (reporting, milestones, percentage completion)\n\n### Crystal methods\n\n- People-centric\n- Frequent delivery\n- No \"one size fits all\"\n- Modern principles: automated tests, frequent integration\n\n### Scrum (For very large projects)\n\n- Business value-driven comprehensive framework\n- Scrum roles\n    - Owner\n    - development team:\n    - testers\n    - documenters\n    - DB admins\n    - scrum master: agile coach, servant leader, removes barriers, coaches and convinces; does not manage\n- scrum workflow\n    - sprint planning-&gt;sprint-&gt;review-&gt;retrospective\n- Potentially shippable product increment each sprint\n- Suitable for very large projects\n\n#### Lean\n\n- **Minimize waste**, visualize production, look for bottlenecks, inefficiencies\n- **Last responsible moment**: wait \u2018til we have enough facts\n    - not make decisions based on preset timelines.\n- Deliver as fast as possible: small iterations are easier to manage\n\n### Kanban\n\n- Visualize your work, **limit work in progress**\n\n### Extreme Programming\n\n- [https://www.agilealliance.org/glossary/xp](https://www.agilealliance.org/glossary/xp)\n- Just In Time design\n\n```{admonition} Branching and merging is not listed as a core XP practice\n- is generally not a favorable practice in Agile approaches.\n- Branching has the potential for creating technical debt if changes are not merged frequently.\n- The risks an be somewhat mitigated by merging frequently.\n- In any case, branching and merging .\n</code></pre></p>"},{"location":"extra_bc/sdlc_models/#pair-programming","title":"Pair programming","text":"<ul> <li>Collaborate, continuous code inspection</li> <li>real-time development technique to increase algorithm implementation</li> </ul>"},{"location":"extra_bc/sdlc_models/#test-driven-development","title":"Test-driven development","text":"<ul> <li>Write test</li> <li>Write function to fail test</li> <li>Write code to pass test</li> </ul>"},{"location":"extra_bc/sdlc_models/#spotify","title":"Spotify","text":"<ul> <li>Culture<ul> <li>Innovation: hackathons</li> <li>Learning from each other</li> <li>Failure-friendly culture</li> <li>(internal) code repositories, visible and open for other teams</li> <li>Minimize handoffs (help from other teams)</li> <li>Bureaucracy minimized</li> </ul> </li> </ul>"},{"location":"extra_bc/sdlc_models/#devops-development-operations","title":"DevOps (Development Operations)","text":"<ul> <li>Developers and testers</li> <li>Ops (operations): people working with release, servers, middleware, network, storage configs, monitoring techniques</li> <li>DevOps aims to extend fast and frequent software feature development approach to build an efficient delivery pipeline.</li> <li>Phases: development --&gt; test --&gt; stage --&gt; production<ul> <li>development: unit testing (code)</li> <li>test: integration testing (User-interface, web server, app server, back-end)</li> <li>stage: user acceptance</li> <li>production</li> </ul> </li> <li>Continuous...<ul> <li>Integration: Central repository<ul> <li>development + test</li> </ul> </li> <li>Development: Ensuring stable product after every release<ul> <li>development + test + stage</li> </ul> </li> <li>Deployment: automating updates to production<ul> <li>development + test + stage + production</li> </ul> </li> </ul> </li> </ul> <p>And more...</p>"},{"location":"extra_bc/sharing_deeper/","title":"More about sharing","text":""},{"location":"extra_bc/sharing_deeper/#open-science","title":"Open science","text":"<p>The Open Science movement encourages researchers to share research output beyond the contents of a published academic article (and possibly supplementary information).</p> <p>```{figure} img/Open_Science_Principles.png :alt: Research comic :width: 90% <pre><code>- **Open-source license** is a type of license for computer software and other products that allows the **source code, blueprint or design to be used, modified and/or shared under defined terms and conditions**.\n\n\nArguments in favor [(from Wikipedia)](https://en.wikipedia.org/wiki/Open_science):\n\n- Open access publication of research reports and data allows for rigorous peer-review\n- Science is publicly funded so all results of the research should be publicly available\n- Open Science will make science more reproducible and transparent\n- Open Science has more impact\n- Open Science will help answer uniquely complex questions\n\nArguments against [(from Wikipedia)](https://en.wikipedia.org/wiki/Open_science):\n\n- Too much unsorted information overwhelms scientists\n- Potential misuse\n- The public will misunderstand science data\n- Increasing the scale of science will make verification of any discovery more difficult\n- Low-quality science\n\n```{figure} img/36-data-research-cycle.jpg\n:width: 100%\n\n(This image was created by Scriberia for The Turing Way community and is used under a CC-BY licence. The image was obtained from https://zenodo.org/record/3332808.)\n</code></pre></p> <p>```{admonition} Read more</p>"},{"location":"extra_bc/sharing_deeper/#fair","title":"FAIR","text":"<p>\u201cFAIR\u201d is the current buzzword for data management. You may be asked about it in, for example, making data management plans for grants:</p> <ul> <li>Findable</li> <li>Will anyone else know that your data exists?</li> <li>Solutions: put it in a standard repository, or at least a description of the data. Get a digital object identifier (DOI).</li> <li>Accessible</li> <li>Once someone knows that the data exists, can they get it?</li> <li>Usually solved by being in a repository, but for non-open data, may require more procedures.</li> <li>Inter-operable</li> <li>Is your data in a format that can be used by others, like csv instead of PDF?</li> <li>Or better than csv. Example: 5-star open data</li> <li>Reusable</li> <li>Is there a license allowing others to re-use?</li> </ul>"},{"location":"extra_bc/sharing_deeper/#social-coding","title":"Social coding","text":"<ul> <li> <p>Our work depends on outputs from others. Research of others depends on our outputs.</p> </li> <li> <p>Whether you can share your output depends on how you obtained your input.</p> </li> <li>A repository that is private today might become public one day.</li> <li>Sometimes \u201cOTHERS\u201d are you yourself in the future in a different group/job.</li> <li>Software licenses matter. And this is what we will discuss in the next episode.</li> </ul> <pre><code>More on Wednesday!\n</code></pre>"},{"location":"extra_bc/sharing_deeper/#licensing","title":"Licensing","text":"<p>For more details</p>"},{"location":"extra_bc/sharing_deeper/#copyright","title":"Copyright","text":"<ul> <li>Protects creative expression</li> <li>Automatically created</li> <li>Derivative works usually inherit copyright of the thing derived</li> <li>Time frame: essentially forever (lifetime + X years)</li> </ul> <p>When can you use:</p> <ul> <li>When there is a license saying you can</li> <li>Limited other cases (private use, fair use: context dependent)</li> <li>In practice: people do many things, but then can't share their   output if license does not allow it or is not clarified</li> </ul> <p>When we write or use software then copyright, licenses, and derivative works are important concepts</p>"},{"location":"extra_bc/sharing_deeper/#derivative-work-changing-remixing-covering","title":"Derivative work: Changing, remixing, covering","text":"<p>```{figure} img/rubik.jpg :alt: Images of Bob Marley and Mona Lisa made out of Rubik cubes :width: 60%</p> <p>Images of Bob Marley and Mona Lisa made out of Rubik cubes. Is this derivative work? \"Distillery District 26\" CC-BY. <pre><code>### If you build on something, you form a derivative work\n\n- The original creator may have rights to what you make\n- The whole point of this talk is to make sure that **you can make and publish derivative works**\n  and **others can make and publish derivative works from you**\n- **You cannot ignore licensing**: default is \u201cno one can make copies or derivative works\u201d.\n- License your code very early in the project: ideally develop publicly accessible open source code from day one.\n- Start with a README.md and a LICENSE file.\n- Use GitHub recommendation or/and &lt;https://choosealicense.com/&gt;.\n\n\n### Licensing and ownership\n\n**Who can decide about or change a license?**\n\n- The copyright holder if a separate \"Contributor License Agreement\" is signed. Otherwise\n  copyright holder provided they secure express consent from all the contributors.\n\n**Who owns the copyright for software you write?**\n\n- **Intellectual property depends on the country and the employer!**\n- So-called works made for hire.\n\n**If you own your software:**\n\n- You can change the license.\n- You can dual-license (e.g. GPL for anyone, but you can pay for commercial non-GPL).\n\n**If you do not own your software, you can:**\n\n- Request open-sourcing directly (preserves your rights!).\n- Request a transfer of ownership (check with your university).\n\n**If you accept contributions (pull requests), you may not be the only owner anymore!**\n\n- Clarify licensing strategy **before** - otherwise you won't have\n  all rights to your code.\n\n### What is free software?\n\n#### Software freedom is the freedom to\n\n- ... run the software for **any purpose**: new applications\n- ... **study** how the software works and to adapt it to your needs: new applications, less reinventing wheels\n- ... **redistribute** copies of the software: more users, more citations\n- ... **improve** the software and distribute your improvements to the public: fix bugs, new science\n\n#### Typical confusion\n\n- Free software does not mean that software is for free\n- Open source license does not mean you need to share everything immediately (share main branch, put unpublished code on a fork)\n- Open source does not mean public domain: software in the public domain has no owner\n- Open source does not mean non-commercial: plenty of companies produce and support it\n\n### Taxonomy of software licenses\n\n- Copyleft is the legal technique of granting certain freedoms over copies of copyrighted works with the requirement that the same rights be preserved in derivative works.\n\n\n**1. Custom/closed/proprietary**\n\n- Derivative work typically not possible\n\n**2. Permissive (MIT, BSD, Apache)**\n\n- Derivative work does not have to be shared\n- Permissive: gives the public permission to use, modify, and share, without any condition for downstream licensing\n- If the licenses of components are permissive, one may use any open license they want.\n\n```{figure} img/MIT.png\n:alt: Permissions, conditions, and limitations of the MIT license\n\nExample: Permissions, conditions, and limitations of the MIT license. Unchanged from &lt;https://choosealicense.com/&gt;.\n</code></pre></p> <p>3. Weak copyleft share-alike (LGPL, MPL)</p> <ul> <li>Derivative work is free software but is limited to the component</li> </ul> <p>```{figure} img/GNU_LGPL_v3.png :alt: Permissions, conditions, and limitations of the LGPL license</p> <p>Example: Permissions, conditions, and limitations of the LGPL license. Unchanged from https://choosealicense.com/. <pre><code>**4. Strong copyleft share-alike (GPL, AGPL)**\n\n- Derivative work is free software and derivative work extends to the combined project\n- If the licenses of components are strong copyleft, one must use the same license\n\n```{figure} img/GNU_GPL_v3.png\n:alt: Permissions, conditions, and limitations of the GPL license\n\nExample: Permissions, conditions, and limitations of the GPL license. Unchanged from &lt;https://choosealicense.com/&gt;.\n</code></pre></p>"},{"location":"extra_bc/sharing_deeper/#creative-commons-licenses","title":"Creative Commons licenses","text":"<p>```{image} ./img/Cc.logo.circle.svg.png :alt: Creative Commons :width: 100px :align: center <pre><code>- Creative Commons licenses give everyone a standardized way to grant the public permission to use their creative work under copyright law.\n- From the reuser\u2019s perspective, the presence of a Creative Commons license on a copyrighted work answers the question, \u201cWhat can I do with this work?\u201d\n&lt;https://creativecommons.org/about/cclicenses/&gt;\n- More often used for images and text.\n- For software, Creative Commons includes three free licenses created by other institutions: the BSD License, the GNU LGPL, and the GNU GPL. See above.\n\n#### 4 rights\n\n```{image} ./img/Cc-by_new.svg.png\n:alt: CC-BY\n:width: 50px\n:align: center\n</code></pre></p> <ul> <li>BY \u2013 Attribution - Credit must be given to the creator<ul> <li>User may copy, distribute, display, perform and make derivative works and remixes based on it only if they give the author or licensor the credits</li> </ul> </li> </ul> <p>```{image} ./img/Cc-sa.svg.png :alt: CC-SA :width: 50px :align: center <pre><code>- SA - Share alike - Allows remix culture\n    - distribute derivative works only under a license identical to (\"not more restrictive than\") the license that governs the original work.(Share alike)\n\n```{image} ./img/113px-Cc-nc.svg.png\n:alt: CC-NC\n:width: 50px\n:align: center\n</code></pre></p> <ul> <li>NC - Non-commercial<ul> <li>Licensees may copy, distribute, display, perform the work and make derivative works and remixes based on it only for non-commercial purposes.</li> </ul> </li> </ul> <p>```{image} ./img/Cc-nd.svg.png :alt: CC-ND :width: 50px :align: center <pre><code>- ND - No derivative work\n    - Licensees may copy, distribute, display and perform only verbatim copies of the work, not derivative works and remixes based on it. Since version 4.0, derivative works are allowed but must not be shared.\n\n```{image} ./img/225px-Cc-zero.svg.png\n:alt: CC0\n:width: 50px\n:align: center\n</code></pre></p> <ul> <li>CC0 (aka CC Zero) - No attribution required<ul> <li>not recommended to release software into the public domain because it lacks a patent grant.</li> </ul> </li> </ul> <p>If you would like to learn more about licenses, check out our slide deck \"Software licensing and open source explained with cakes\".</p> <pre><code>Also covered on the third day\n</code></pre>"},{"location":"extra_bc/sharing_deeper/#software-citation","title":"Software Citation","text":"<ul> <li>Think the same as for a scientific paper</li> </ul> <p>Our practical recommendations:</p> <ul> <li>Get a DOI using Zenodo or similar services.</li> <li>Open source license can't demand citation, but it is required by science ethics anyway.</li> <li>Make it as easy as possible! Clearly say what you want cited.</li> <li>Make it easy for scripts and tools, use the Citation File Format.</li> <li>GitHub now supports CITATION.cff files</li> </ul> <p>This is an example of a simple <code>CITATION.cff</code> file:</p> <pre><code>cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n  - family-names: Druskat\n    given-names: Stephan\n    orcid: https://orcid.org/0000-0003-4925-7248\ntitle: \"My Research Software\"\nversion: 2.0.4\ndoi: 10.5281/zenodo.1234\ndate-released: 2021-08-11\n</code></pre> <p>Recommended format for software citation is to ensure the following information is provided as part of the reference Katz, Chue Hong, Clark, 2021:</p> <ul> <li>Creator</li> <li>Title</li> <li>Publication venue</li> <li>Date</li> <li>Identifier</li> <li>Version</li> <li> <p>Type</p> </li> <li> <p>Digital object identifiers (DOI) are the backbone of the academic reference and metrics system.</p> </li> <li>CodeRefinery has an exercise to see how to make a GitHub repository citable   by archiving it on the Zenodo archiving service. If you are interested,   have a look at this CodeRefinery page</li> </ul> <pre><code>  - Share your code! Eventually others will probably use it anyway.\n  - Licence your software and do it early. Default is \u201cno one can make copies or derivative works\u201d.\n  - Get DOI or at least state how to cite your software\n</code></pre>"},{"location":"function_design/","title":"Function design","text":"<p>Learning outcomes</p> <ul> <li>Understand why function design is important</li> <li>Can give some features of good function design</li> <li>Give a function a proper name</li> <li>Criticise functions</li> </ul> For teachers <p>Prior:</p> <ul> <li>What is a function?</li> <li>Why are functions important?</li> <li>What makes a well-written function?</li> <li>What is more important: that a function is correct or that   it is easy to use?</li> <li>What is more important: that a function is correct or that   it is fast?</li> <li>What is more important: that a function is easy to use or that   it is fast?</li> </ul>","tags":["algorithm design","function design","design"]},{"location":"function_design/#why","title":"Why?","text":"<p>You want your program to do many things, like reading files, doing an analysis and saving the results to files. You want it to be correct.</p> <p>You needs to convert your ideas to functions.</p>","tags":["algorithm design","function design","design"]},{"location":"function_design/#big-picture","title":"Big picture","text":"<p>You should decompose programs into functions <code>[Wilson et al, 2017]</code>, to make the problem simpler.</p>","tags":["algorithm design","function design","design"]},{"location":"function_design/#terminology","title":"Terminology","text":"Term Description Function arguments The values that go into a function Function body Everything the function does with its arguments Function declaration The function name and arguments Function definition The complete function Function name The name of the function Function return type The data type the function returns Function signature The function name and arguments Procedure A function that has no return type <pre><code>def my_function(my_arguments):\n    # ...\n    return my_return_value\n</code></pre>","tags":["algorithm design","function design","design"]},{"location":"function_design/#functions-design-design-by-contract","title":"Functions design: design by contract","text":"<p>A common design of functions is that they follow design-by-contract programming (term by <code>[Meyer, 1992]</code>), where 'contract' is a metaphor for 'agreement'.</p> <p></p> <p>Source: Wikipedia</p> <ul> <li>Input (plural) are called 'the preconditions'</li> <li>Within a function,   if the preconditions are invalid, an error or exception is raised</li> <li>Within a function,   if the preconditions are valid, a valid output is created   and/or there will be side effects, such as creating a file</li> </ul> <p>In this course, we've been using design by contract.</p>","tags":["algorithm design","function design","design"]},{"location":"function_design/#features-of-a-good-function","title":"Features of a good function","text":"<p>A good function ...</p> <ul> <li>Sometimes: is documented   <code>[Ram, 2013][tidyverse style guideline of functions]</code>.   In some contexts, documentation is mandatory <code>[Ram, 2013]</code> <code>[tidyverse style guideline of functions]</code>.</li> </ul> Example <p>Here is an example of a function with an unclear name. The documentation is used to clarify:</p> <pre><code>def sort_1(x):\n  \"\"\"Sort list `x` in-place.\n\n  Returns nothing\n  \"\"\"\n\ndef sort_2(x):\n  \"\"\"Sort list `x`.\n\n  Returns the sorted list.\n  \"\"\"\n\nassert sort_1.__doc__\nassert sort_2.__doc__\n</code></pre> Prefer R? <pre><code>#' Sort list `x` in-place.\n#' @param x a list\n#' @return nothing\nsort_1 &lt;- function(x) {\n  # ...\n}\n\n#' Sort list `x`\n#' @param x a list\n#' @return the sorted list\nsort_2 &lt;- function(x) {\n  # ...\n}\n\n# Check if functions have documentation here\n</code></pre> <ul> <li>Is small <code>[Martin, 2009]</code> <code>[CppCore functions][tidyverse style guideline of functions][Uncle Bob, 2024]</code></li> <li>Is even smaller than that <code>[Uncle Bob, 2024]</code></li> <li>Has a good name <code>[Martin, 2009]</code> <code>[CppCore functions][tidyverse style guideline of functions]</code> <code>[PEP 20a][Reitz et al., 2016][Wilson et al, 2017]</code>:<ul> <li>starts with a verb <code>[tidyverse style guideline of functions]</code></li> <li>readable <code>[PEP 20a]</code></li> <li>intention-revealing <code>[Martin, 2009]</code></li> <li>pronounceable <code>[Martin, 2009]</code></li> <li>searchable <code>[Martin, 2009]</code></li> <li>not cute <code>[Martin, 2009]</code> (e.g. <code>apply_holy_handgrenade</code> over <code>remove_invalid_items</code>)</li> <li>no pun <code>[Martin, 2009]</code> (e.g. apply <code>add</code> to both add numbers and insert an item into a collection. Instead, use <code>insert</code> to add an item to a collection)</li> <li>carefully <code>[CppCore functions]</code></li> </ul> </li> </ul> Famous quote on naming functions <p>There are only two hard things in Computer Science: cache invalidation and naming things</p> <p>Phil Karlton</p> <p></p> <ul> <li>Is easy to use correctly and hard to use incorrectly   <code>[Meyers, 2005][CppCore functions][PEP 20c][PEP 20d]</code></li> <li>Does one thing correctly <code>[Martin, 2009]</code> <code>[CppCore functions]</code> <code>[tidyverse style guideline of functions]</code></li> </ul> Example <p>A function should perform a single logical operation <code>[CppCore F.2]</code>, hence don't:</p> <pre><code>def do_x_and_y(): pass\n\ndo_x_and_y()\n</code></pre> <p>Instead, do:</p> <pre><code>def do_x(): pass\n\ndef do_y(): pass\n\ndo_x()\ndo_y()\n</code></pre> <p>You rarely need <code>and</code> in a function name. An accepted exception is a function to calculate the mean and standard deviation, because this is a faster calculation.</p> <ul> <li>Is tested <code>[Martin, 2011][CppCore functions]</code> <code>[tidyverse style guideline of functions]</code><ul> <li>Joint Strike Fighter Coding Standards, section 3:   Testability: Source code should be written to facilitate testability</li> </ul> </li> <li>A function should perform a single logical operation <code>[CppCore F.2]</code>.</li> <li>Raises helpful exceptions <code>[Martin, 2009]</code> <code>[CppCore functions][tidyverse style guideline of functions][PEP 20b]</code></li> <li>Fast if needed <code>[CppCore functions]</code></li> </ul>","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercises","title":"Exercises","text":"","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercise-1-bad-function-names","title":"Exercise 1: bad function names","text":"<p>Could you give examples of bad function names? Why are these names bad?</p> Answers <p>There are many, here are some:</p> <ul> <li><code>calculate</code>: calculates what?</li> <li><code>calc_bfgt</code>: calculates what?</li> <li><code>prime</code>: a prime number is a data type. What does this function do?</li> <li><code>needleman_wunch</code>: this is a technique to get a DNA alignment.</li> </ul>","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercise-2-name-the-function","title":"Exercise 2: name the function","text":"","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercise-21-name-the-function","title":"Exercise 2.1: name the function","text":"<p>Imagine two DNA sequences:</p> <pre><code>AAACCCGGGTTT\nATACCCGGGTAT\n</code></pre> <p>How would you call the algorithm that returns the number (i.e. a number to indicate the second character) of which the characters in the two DNA sequences mismatch (it is <code>A</code> in the top one, <code>T</code> in the bottom one)?</p> Why is this scientifically useful? <p>DNA changes over time. These changes are called mutations. On such mutation is a point mutation, which is when one letter changes.</p> <p>This point mutations will be carried over to offspring and are use to create pedigries (e.g. in humans) or phylogenies (e.g. between species).</p> Answer <p>There are many, here a table of combinations:</p> 1 2 3 4 <code>find</code> <code>first</code> <code>difference</code> <code>index</code> <code>get</code> <code>[nothing]</code> <code>mismatch</code> <code>locus</code> . . . <code>pos</code> <p>These are up for debate and 'the best name' is determined by the project, progamming language and social rules, such as:</p> <p>Column 1: <code>find</code> versus <code>get</code>:</p> <ul> <li><code>get</code> is better:   in some languages (e.g. C++) <code>find</code> is used in the standard libary   for functions that return an iterator (whatever that is),   hence <code>find</code> is confusing</li> <li><code>find</code> is better:   We are looking for a difference, i.e. we are finding something   and our function name should reflect that</li> </ul> <p>Column 2: <code>first</code> versus <code>[nothing]</code>:</p> <ul> <li><code>first</code> is better: in some languages (e.g. C++) <code>first</code>   is used in the standard library   to indicate only the first match is returned,   hence not using that would confuse</li> <li><code>nothing</code> is better: this is shorter</li> </ul> <p>Column 3: <code>difference</code> versus <code>mismatch</code>:</p> <ul> <li><code>mismatch</code> is better:   in some languages (e.g. C++) the term 'mismatch' is used in the   standard library for things that have different content   (such as characters in a string),   hence 'difference' would be the unexpected noun</li> <li><code>difference</code> is better:   we are looking for a difference   and our function name should reflect that</li> </ul> <p>Column 4: <code>index</code> versus <code>locus</code> versus <code>pos</code>:</p> <ul> <li><code>index</code> is better:   if the function returns an index   (i.e. the first position has index zero),   <code>index</code> is the only correct description</li> <li><code>locus</code> is better:   a position on a DNA sequence is called a 'locus',   which is a more precise naming. Loci start counting at 1 (unlike   Python indices, which start counting at 0), so the function is expected   to do so too</li> <li><code>pos</code> is better:   a position in a string is commonly abbreviated to <code>pos</code>   and is broadly understood, also by non-biologists.</li> </ul> <p>Other good answers are those that:</p> <ul> <li>starts with a verb</li> <li>is as English as possible</li> <li>only uses common abbreviations</li> </ul>","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercise-22-name-the-function","title":"Exercise 2.2: name the function","text":"<p>Imagine two DNA sequences:</p> <pre><code>AAACCCGGGTTT\nATACCCGGGTAT\n</code></pre> <p>How would you call the algorithm that detects all the locations of where the DNA sequences are different?</p> Answer <p>There are many, here a table of combinations:</p> 1 2 3 4 <code>find</code> <code>all</code> <code>difference</code> <code>indices</code> <code>get</code> <code>[nothing]</code> <code>mismatch</code> <code>loci</code> . . . <code>pos</code> . . . <code>poss</code> . . . <code>posses</code> . . . <code>positions</code> <p>Most of the reasoning is the same as in the previous answer, with the addition of:</p> <ul> <li><code>pos</code> is best: when it is common that <code>pos</code> can be a plural   and/or in combination with <code>all</code> to signal so</li> <li><code>poss</code> is best: when this <code>+s</code> to signal a plural is   already widespread in your project   (note from Richel: I've never seen this in practice!)</li> <li><code>posses</code> is best: when the uses of a reduplicated plural   (or: 'Gollumese', after the character in Lord of the Ring)   to signal a plural is already widespread in your project</li> <li><code>positions</code> is best: when the project discourages these computer-y   abbreviations</li> </ul> <p>Other good answers are those that:</p> <ul> <li>starts with a verb</li> <li>is as English as possible</li> <li>only uses common abbreviations</li> </ul>","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercise-23-name-the-function","title":"Exercise 2.3: name the function","text":"<p>Imagine two DNA sequences:</p> <pre><code>AAACCCGGGTTT\nATACCGGGTTT\n</code></pre> <p>How would you call the algorithm that makes the sequences have as much similarities as possible, by possibly inserting a <code>-</code>, resulting in:</p> <pre><code>AAACCCGGGTTT\nATACC-GGGTTT\n</code></pre> Why is this scientifically useful? <p>DNA changes over time. These changes are called mutations. On such mutation is a deletion, which is when one letter disappears.</p> <p>Taking a look at the DNA sequences, there must have been a deletion somewhere. We can visualize a deletion by a dash (<code>-</code>), resulting again in two DNA sequences of equal length.</p> <p>Doing so, i.e. making two DNA sequences of equal length, is called 'aligning'. It allows us to clearly see where a deletion has taken place.</p> Answer 1 2 3 4 <code>align</code> <code>aligned</code> <code>dna</code> <code>seqs</code> <code>calc</code> <code>[nothing]</code> <code>[nothing]</code> <code>sequences</code> <code>get</code> . . . <p>Most of the reasoning is the same as in the previous answer, with the addition of:</p> <ul> <li><code>seqs</code> is a common abbreviation</li> <li><code>dna</code> signals that the function expects DNA sequences   and will fail upon other sequences</li> </ul> <p>Other good answers are those that:</p> <ul> <li>starts with a verb</li> <li>is as English as possible</li> <li>only uses common abbreviations</li> </ul>","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercise-3","title":"Exercise 3","text":"<p>Take a look at the function below (from Pythonpool):</p> <pre><code>i=2\n\ndef Prime(no, i):\n    if no == i:\n        return True\n    elif no % i == 0:\n        return False\n    return Prime(no, i + 1)\n</code></pre> <ul> <li>Does it follow a good function design? Why?</li> </ul> Answers <p>These are some elements of good function design that are breached:</p> <ul> <li>By convention, function names start with lowercase character,   where this functions' name that starts with an uppercase first   character is normally suggesting that this is a class   name (instead of a function name).   A better name would be <code>is_prime</code></li> <li>A function should start with a verb, this function does not.   A better name would be <code>is_prime</code></li> <li>The function's input is not checked for its data type.   For example, this test will pass:</li> </ul> <pre><code>assert Prime(\"nonsense\", \"nonsense\")\n</code></pre> <ul> <li>The function is easy to use incorrectly; the second element   must be a two for this to function.</li> </ul> <pre><code>assert Prime(2, 2)\nassert Prime(3, 2)\nassert Prime(3, 3) # Nothing stops me!\nassert not Prime(4, 2)\nassert Prime(5, 2)\n</code></pre> <p>In this case, the function should be refactored, so that a user cannot misuse the function. Here is an example how to keep <code>Prime</code> as it is, and fix most of its problems:</p> <pre><code>fun is_prime(x):\n    \"\"\"Determine if a number is prime.\"\"\"\n    assert isinstance(x, int)\n    return Prime(x, 2)\n</code></pre>","tags":["algorithm design","function design","design"]},{"location":"function_design/#exercise-4-misnomers-in-learners-project","title":"Exercise 4: misnomers in learners' project?","text":"<p>Look at the code of the learners' project. Do you think there is a function that has a bad name? If yes, create an issue to suggest to change it to your suggestion, which should include your reasoning.</p>","tags":["algorithm design","function design","design"]},{"location":"function_design/#references","title":"References","text":"<ul> <li><code>[CppCore functions]</code> C++ Core Guidelines.   https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-functions</li> <li><code>[CppCore F.2]</code> C++ Core Guidelines.    F.2: A function should perform a single logical operation,    https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-logical</li> <li><code>[Fowler, 2018]</code>   Fowler, Martin.   Refactoring: improving the design of existing code.   Addison-Wesley Professional, 2018.</li> <li><code>[Martin, 2009]</code> Martin, Robert C.   Clean code: a handbook of agile software craftsmanship.   Pearson Education, 2009.</li> <li><code>[Martin, 2011]</code> Martin, Robert C.   The clean coder: a code of conduct for professional programmers.   Pearson Education, 2011.</li> <li><code>[Meyer, 1992]</code> Meyer, Bertrand. \"Applying 'design by contract'.\"   Computer 25.10 (1992): 40-51.</li> <li><code>[Meyers, 2005]</code> Meyers, Scott.   Effective C++: 55 specific ways to improve your programs and designs.   Pearson Education, 2005.</li> <li><code>[PEP 20a]</code> PEP 20, 'Readability counts',   The Zen of Python</li> <li><code>[PEP 20b]</code> PEP 20, 'Errors should never pass silently',   The Zen of Python</li> <li><code>[PEP 20c]</code> PEP 20,   'If the implementation is hard to explain, it's a bad idea.',   The Zen of Python</li> <li><code>[PEP 20d]</code> PEP 20,   'If the implementation is easy to explain, it may be a good idea.',   The Zen of Python</li> <li><code>[Ram, 2013]</code> Ram, K. \"rOpenSci-open tools for open science.\"   AGU Fall Meeting Abstracts. Vol. 2013. 2013.</li> <li><code>[tidyverse style guideline of functions]</code> https://style.tidyverse.org/functions.html</li> <li><code>[Reitz et al., 2016]</code> Reitz, Kenneth, and Tanya Schlusser.   The Hitchhiker's guide to Python: best practices for development.   \"O'Reilly Media, Inc.\", 2016.   Chapter 'General concepts'</li> <li><code>[Uncle Bob, 2024]</code> YouTube video   'How small should a function be?' by Robert C. Martin (Uncle Bob)</li> <li><code>[Wilson et al, 2014]</code>   Wilson, Greg, et al. \"Best practices for scientific computing.\"   PLoS biology 12.1 (2014): e1001745.</li> <li><code>[Wilson et al, 2017]</code> Wilson, Greg, et al.   \"Good enough practices in scientific computing.\"   PLoS computational biology 13.6 (2017): e1005510.   Article</li> </ul>","tags":["algorithm design","function design","design"]},{"location":"git/branches/","title":"Git branches","text":"<p>Questions</p> <ul> <li>How to not ruin working code when adding new features?</li> <li>How to work on parallel tracks (many developers, versions)?</li> <li>How to fix mistakes?</li> </ul> <p>Learning outcomes of 'Branches'</p> <ul> <li> <p>learners can</p> <ul> <li>explain and evaluate the usefulness of branches</li> <li>create, switch and delete a <code>git</code> branch locally</li> </ul> </li> </ul> Instructor notes <p>Prerequisites are:</p> <ul> <li>git basics</li> </ul> <p>Lesson Plan:</p> <ul> <li>Total 50 min</li> <li>Theory 15</li> <li>Exercise 25</li> <li>Discussions 10 min</li> </ul> Changes <ul> <li>practical examples than just explain the concept.</li> <li>Git branch couple to SDLC??</li> <li>exercises<ul> <li>advanced exercises</li> </ul> </li> </ul>","tags":["git","branch"]},{"location":"git/branches/#branching-and-merging","title":"Branching and merging","text":"<p>Software development is often not linear:</p> <ul> <li>We typically need at least one version of the code to \"work\" (to compile, to give expected results, ...).<ul> <li>This is the main branch (former master)</li> </ul> </li> <li>At the same time we work on new features, often several features concurrently.   Often they are unfinished.</li> <li>We need to be able to separate different lines of work really well.</li> </ul> <p></p> <p>Isolated tracks of work</p> <p>The strength of version control is that it permits the researcher to isolate different tracks of work, which can later be merged to create a composite version that contains all changes.</p> <ul> <li>We see branching points and merging points.</li> <li>Main line development is often called <code>master</code> or <code>main</code>.</li> <li> <p>Other than this convention there is nothing special about <code>master</code> or <code>main</code>, it is just a branch.</p> </li> <li> <p>A group of commits that create a single narrative are called a branch.</p> </li> <li>There are different branching strategies, but it is useful to think that a branch tells the story of a feature, e.g. \"fast sequence extraction\" or \"Python interface\" or \"fixing bug in matrix inversion algorithm\".</li> </ul> <p>Three ways to name a branch</p> <ul> <li>Issues: #45: Concrete examples</li> <li>Features: GUI module</li> <li>Personal: Bj\u00f6rn</li> </ul>","tags":["git","branch"]},{"location":"git/branches/#typical-workflows","title":"Typical workflows","text":"<p>One typical workflow:</p> <ul> <li>create branch</li> <li>switch to it</li> <li>work, work, work, ..., and test</li> <li>add and commit</li> <li>once feature is ready, switch back to main</li> <li>make clear which branch you are in</li> <li>merge new-feature to present branch</li> <li>remove branch</li> </ul> In VS Code <ul> <li>Here is where you handle branches</li> </ul> <p></p> <ul> <li> <ul> <li>create a new branch</li> </ul> <p>Click and you have the possibility to</p> <p></p> <ul> <li>and switch between existing branches</li> </ul> <p></p> </li> </ul> In command line <pre><code>git branch new-feature  # create branch, switch to it\ngit add/commit                   # work, work, work, ..., and test\ngit switch master          # once feature is ready, switch back to master\n(git checkout &lt;branch&gt;)     # Old command for switching branch, but also going back in history to earlier commit\ngit branch                   # make clear which branch you are in\ngit merge new-feature        # merge work to present branch\ngit branch -d new-feature    # remove branch\n</code></pre> <p>git push doesn't work with new branch</p> <ul> <li>you always have to pull before a push:</li> </ul> <pre><code>git pull #\n</code></pre> <ul> <li>You may need to be more detailed:</li> </ul> <pre><code>git push --set-upstream origin new-branch\n</code></pre> On GitHub <ul> <li>You may branch of from <code>main</code> or <code>develop</code> (ONLY if it exists).</li> </ul> <p></p> <ul> <li>Click on 1, type your branch name at 2 (in this case, <code>richel</code>), then click 3.</li> <li>To view all branches</li> </ul> <p></p> <ul> <li>The overview</li> </ul> <p></p>","tags":["git","branch"]},{"location":"git/branches/#git-graph","title":"Git graph","text":"<ul> <li>We can get an overview of graphs</li> </ul> GitHub <ul> <li>Link to last year</li> <li>Link to this year</li> </ul> VS Code <ul> <li></li> </ul> Graph alias in command line <p>An important alias</p> <ul> <li>We can define an alias in Git, to be able to nicely visualize branch structure in the terminal without having to remember a long Git command.</li> </ul> <pre><code>git config --global alias.graph \"log --all --graph --decorate --oneline\"\n</code></pre> <p>This will enable you to use <code>git graph</code> for short</p> <p>Example</p> <pre><code>$ git graph\n* 000b440 (HEAD -&gt; main) rm print\n| * 4d4acaf (modularity) 4 modular files\n|/\n| * 2d4e252 (jupiter) add jupiter\n|/\n* b9465e4 (origin/main) planet.py documentation\n* 6a416b5 add folders and planet code\n</code></pre> <pre><code>gitGraph\n\ncommit id: \"add folders and planet code\"\ncommit id: \"add planet.py documentation\"\nbranch jupiter\ncheckout jupiter\ncommit id: \"add jupiter\"\ncheckout main\nbranch modular\ncheckout modular\ncommit id: \"4 modular files\"\ncheckout main\ncommit id: \"rm print\"</code></pre>","tags":["git","branch"]},{"location":"git/branches/#overview","title":"Overview","text":"Overview workflow Test <ul> <li>What is a branch?</li> <li>What is the problem that branches alleviate?</li> <li>What is the name/names of the most important branch?</li> <li>What is our git branching setup?</li> <li>What is the goal of that setup?</li> <li>Why do we use that setup instead of a different one?</li> <li>What is the purpose of each of those branches?</li> <li>Does creating a branch create a new version? Why?</li> <li>Does changing a branch change the content of your local computer? Why?</li> <li>Does deleting a branch create a new version? Why?</li> </ul>","tags":["git","branch"]},{"location":"git/branches/#the-project-from-requirement-to-branch","title":"The project: From requirement to branch","text":"<p>Workflow of project</p> <ol> <li>requirement</li> <li>issue</li> <li>branching</li> <li>merging/pull request</li> <li>code review</li> </ol>","tags":["git","branch"]},{"location":"git/branches/#lets-look-at-bjorns-input-and-practice-code-review-already-together","title":"Let's look at Bj\u00f6rn's input and practice code review already (together)","text":"<p>Steps:</p> <ul> <li>branching</li> <li>merging/pull request</li> <li>code review</li> <li>issue</li> </ul> Bj\u00f6rn's new requirements, using GitHub <ul> <li>Updated information on requirements</li> </ul> Commit_add data requirements <p></p> <ul> <li>Bj\u00f6rn used a branch</li> </ul> bjorn branch <p></p> <ul> <li>Wants to merge</li> </ul> No contribution info <p></p> <ul> <li>Need to go to root!</li> </ul> Compare &amp; pull request_bjorn <p></p> <ul> <li>Open pull request</li> </ul> PR_add_reqs6 <p></p> <ul> <li>We find all pull requests (PRs) in the upper menu!</li> </ul> PR_overview <p></p> Approve Bj\u00f6rn's new requirements <ul> <li>Lets look and fix together</li> <li>Code review!</li> </ul> Look at Bj\u00f6rn's new Issue <ul> <li>Do we agree?</li> <li>Add to the issue the namings of 2 feature branches from Req 6.1-2 to be used in exercise 1.</li> </ul> <p>Three ways to name a branch</p> <ul> <li>Issues: #45: Concrete examples</li> <li>Features: GUI module</li> <li>Personal: Bj\u00f6rn</li> </ul>","tags":["git","branch"]},{"location":"git/branches/#exercises","title":"Exercises","text":"Learning outcomes <ul> <li>Create, switch and delete a <code>git</code> branch</li> <li>Build up experience using git without troubleshooting</li> </ul>","tags":["git","branch"]},{"location":"git/branches/#exercise-1-create-a-and-switch-to-a-project-branch","title":"Exercise 1: Create a and switch to a project branch","text":"<p>Use GitHub</p> <ul> <li>The 3 groups create one branch each according to issue above.</li> <li>Go to the branch</li> <li>Create a .py file which can be a function in the full program with a good name in the <code>src/weather</code> directory</li> <li>Copy-paste the suitable example below.</li> <li>(If there is time) Make a docstring describing what the function should do</li> <li>We will not go further with the file now, so let's go back to <code>main</code></li> </ul> Example code 6.1 (read Uppsala 1722-2022) using <code>pandas</code> <pre><code>import pandas as pd\n\ndf=pd.read_csv(\"../../data/uppsala_tm_1722-2022.dat\",sep='\\s+')\nprint(df)\ndf.columns=['Year','Month','Day','T','Tcorr','Data id']\nprint(df.Tcorr)\n</code></pre> Example code 6.2 (read other Swedish stations) using <code>pandas</code> <pre><code>column_names=['Date','Time','Temp']\ndf = pd.read_csv('data/smhi_opendata_1_97530_20250224_081022.csv', header=None, delimiter=\";\", names=column_names,skiprows = 10, usecols=[0, 1, 2])\nprint(df)\nprint(df.Date)\nprint(df.Time)\nprint(df.Temp)\n</code></pre> Example code 6.3 (connect station name with file name) <p>Make a simple docstring!</p> <p>Workflow</p> <pre><code>gitGraph\n    commit id: \"Before start\"\n    commit id: \"Branching version\"\n    branch featurename\n    checkout featurename\n    commit id: \"New python file\"\n    checkout main</code></pre> Answer <ul> <li>For our shared GitHub repository, create a branch with the name</li> <li>You may branch of from <code>main</code> or <code>develop</code> (ONLY if it exists).</li> </ul> <p></p> <ul> <li>Click on 1, type your branch name at 2 (in this case, <code>richel</code>), then click 3.</li> <li>Now do the work in the branch.</li> <li>Save/commit</li> <li>DO NOT MERGE!</li> <li>Click on Branch and choose <code>main</code></li> <li>Done!</li> </ul>","tags":["git","branch"]},{"location":"git/branches/#exercise-2-create-switch-and-delete-a-test-branch-locally","title":"Exercise 2: create, switch and delete a test branch LOCALLY","text":"<pre><code>gitGraph\n    commit id: \"Before start\"\n    commit id: \"Branching version\"\n    branch sven\n    checkout sven\n    commit id: \"Modify my file\"</code></pre> <ul> <li> <p>For our shared GitHub repository, create a branch with your first name that is   unique, e.g. <code>sven</code>, <code>sven_svensson</code> or <code>sven_svensson_314</code>.   You may branch off from <code>main</code> or <code>develop</code> (if it exists).   You may use the web interface (easiest!) or use VS Code</p> </li> <li> <p>On your local computer:</p> <ul> <li>update the repository (pull)</li> <li>switch to the new branch</li> <li>change the content of the repository   by creating a file in <code>learners/[your_name]/[your_name]_is_on_[your_branch_name]</code></li> <li>push your changes online.</li> </ul> </li> <li>On GitHub, verify that your changes on your branch can be found online</li> <li>On your local computer, switch to the main branch,   as we'll delete the branch you are on now</li> <li>Delete your branch (i.e. the one with the unique name).   You may use the web interface (easiest!) or use the VS Code</li> <li>On your local computer, update your code (pull)</li> </ul> Answers <ul> <li>For our shared GitHub repository, create a branch with your first name that is   unique, e.g. <code>sven</code>, <code>sven_svensson</code> or <code>sven_svensson_314</code>.   You may branch of from <code>main</code> or <code>develop</code> (if it exists).</li> </ul> If you wish to use the command line <pre><code>git pull\n</code></pre> <ul> <li>On your local computer:<ul> <li>switch to the new branch</li> </ul> </li> </ul> <p>Switch to the new branch, for example, <code>richel</code>, by doing:</p> <pre><code>git switch richel\n</code></pre> <ul> <li>On your local computer:<ul> <li>change the content of the repository, for example,   by creating a file in <code>learners/[your_name]/[your_name]_is_on_[your_branch_name]</code></li> </ul> </li> </ul> <p>This can be any change you'd like. To create a file under Linux (and maybe this works on other operating systems too), one can do:</p> <pre><code>touch learners/richel/richel_is_on_richel.txt\n</code></pre> <p>After the change, commit these:</p> <pre><code>git add .\ngit commit -m \"Richel is on richel\"\n</code></pre> <ul> <li>On your local computer:<ul> <li>push your changes online.</li> </ul> </li> </ul> <p>Do:</p> <pre><code>git push\n</code></pre> <p>And your code may end up online.</p> <p>If that does not work, do:</p> <pre><code>git pull\n</code></pre> <p>and try pushing again, maybe multiple times, as many people are pushing to the shared repo.</p> <p>git push doesn't work with new branch</p> <ul> <li>you always have to pull before a push:</li> </ul> <pre><code>git pull #\n</code></pre> <ul> <li>You may need to be more detailed:</li> </ul> <pre><code>git push --set-upstream origin new-branch\n</code></pre> <ul> <li>On GitHub, verify that your changes on your branch can be found online</li> </ul> <p></p> <p>Make sure you look at the correct branch, as displayed at 1. Then your commit message shows up at 2.</p> <ul> <li>On your local computer, switch to the main branch,   as we'll delete the branch you are on now</li> </ul> <p>Switch to the main branch, for example, <code>main</code>, by doing:</p> <pre><code>git switch main\n</code></pre> <ul> <li>Delete your branch (i.e. the one with the unique name).   You may use the web interface (easiest!) or use the command line</li> </ul> <p></p> <p>Click on 'Branches', as shown in the image above.</p> <p></p> <p>Click on garbage bin, as shown in the image above.</p> <p></p> <p>The branch will now be deleted, as shown in the image above.</p> <ul> <li>On your local computer, update your code</li> </ul> <p>Do:</p> <pre><code>git pull\n</code></pre> <p>This is for VS Code</p> <ul> <li>On your local computer:<ul> <li>update the repository</li> </ul> </li> </ul> <p>On your local computer, navigate to the folder of the shared project and update: pull/sync</p> <p></p> <ul> <li>On your local computer:<ul> <li>switch to the new branch</li> </ul> </li> </ul> <p>Switch to the new branch, for example, <code>richel</code>, by doing:</p> <p> </p> <ul> <li>On your local computer:<ul> <li>change the content of the repository, for example,   by creating a file in <code>learners/[your_name]/[your_name]_is_on_[your_branch_name]</code></li> </ul> </li> </ul> <p>This can be any change you'd like.</p> <p>After the change, commit these (\"+\" and \"commit\")</p> <ul> <li>On your local computer:<ul> <li>push your changes online.</li> </ul> </li> </ul> <p>Push \"Sync\"</p> <p>And your code may end up online.</p> <p>If that does not work, try pushing again, maybe multiple times, as many people are pushing to the shared repo.</p> <ul> <li>On GitHub, verify that your changes on your branch can be found online</li> </ul> <p></p> <ul> <li>Make sure you look at the correct branch, as displayed by the \"drop-down button\".</li> <li>Then your commit message shows up in the yellow section<ul> <li>\u201dIgnore if a pull request shows up\u201d</li> </ul> </li> </ul> <ul> <li>On your local computer, switch to the main branch,   as we'll delete the branch you are on now</li> </ul> <p>Switch to the main branch.</p> <ul> <li>Delete your branch (i.e. the one with the unique name).</li> <li>You may use the web interface (easiest!) or use VS Cde</li> </ul> <p>In VS Code</p> <p></p> GitHub <p></p> <p>Click on 'Branches', as shown in the image above.</p> <p></p> <p>Click on garbage bin, as shown in the image above.</p> <p></p> <p>The branch will now be deleted, as shown in the image above.</p> <ul> <li>On your local computer, update your code</li> </ul> <p>Sync or Pull again!</p> Need a video for command line? <p>See the 'Programming Formalisms: git branch exercise' YouTube video</p>","tags":["git","branch"]},{"location":"git/branches/#extra-git-diff","title":"Extra: <code>git diff</code>","text":"Show unstaged/uncommitted modifications <ul> <li>When you are done editing the files, try \"git diff\"</li> <li>When you select a file in the Source Control view, the editor shows a diff view that highlights the file changes, compared to the previously committed file.</li> </ul> <ul> <li>Press \"M\"</li> </ul> In console <pre><code>git diff\n</code></pre> <ul> <li>You can use arrows or enter to scroll the output and quit with <code>q</code>.</li> <li>You will see some things like this.</li> </ul> Output from 'diff' <pre><code>diff --git a/ingredients.txt b/ingredients.txt\nindex 4422a31..ba8854f 100644\n--- a/ingredients.txt\n+++ b/ingredients.txt\n@@ -2,3 +2,4 @@\n * 1 chili\n * 1 lime\n * 2 tsp salt\n+* 1/2 onion\ndiff --git a/instructions.txt b/instructions.txt\nindex 7811273..2b11074 100644\n--- a/instructions.txt\n+++ b/instructions.txt\n@@ -4,3 +4,4 @@\n * squeeze lime\n * add salt\n * and mix well\n+* enjoy!\n</code></pre>","tags":["git","branch"]},{"location":"git/branches/#summary","title":"Summary","text":"<pre><code>git switch -b wild-idea    # create branch, switch to it, work, work, work ...\ngit switch main          # realize it was a bad idea, back to main/master\n</code></pre> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2611Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>GitHub</li> <li>pull requests</li> </ul> </li> <li>\u2610 Sharing<ul> <li>\u2611 open science</li> <li>\u2610 citation</li> <li>\u2611 licensing</li> </ul> </li> <li>\u2610 Documentation<ul> <li>\u2611 in-code documentation</li> </ul> </li> </ul> <p>Keypoints</p> <ul> <li>A branch is a division unit of work, to be merged with main sometime</li> <li>Both git locally and GitHub can be used</li> <li>You can delete a branch safely after merging</li> </ul> <p>See also</p> <p>More about branches</p>","tags":["git","branch"]},{"location":"git/branches/#reference-git","title":"Reference Git","text":"<ul> <li>Main git book</li> <li>Pro Git</li> <li>Tsitoara, Mariot, and Mariot Tsitoara. \"Git best practices.\" Beginning Git and GitHub: A Comprehensive Guide to Version Control, Project Management, and Teamwork for the New Developer (2020): 79-86.</li> </ul>","tags":["git","branch"]},{"location":"git/clone/","title":"Clone","text":"<p>The <code>git</code> verb 'to clone' is close to the English sentence 'download to your local computer'.</p> <p>With VSCode is is easy to clone a GitHub repository.</p> <p>Here it is shown how.</p>","tags":["git","clone","VSCode","VS Code","Visual Studio code"]},{"location":"git/clone/#procedure","title":"Procedure","text":"<p>Here is the procedure on how to clone a GitHub repository.</p> Prefer a video? <p>See the 'How to clone a GitHub repository from VSCode and a bit more git' YouTube video.</p>","tags":["git","clone","VSCode","VS Code","Visual Studio code"]},{"location":"git/clone/#1-get-the-url-to-your-github-repository","title":"1. Get the URL to your GitHub repository","text":"<p>For example, for the GitHub repository at https://github.com/programming-formalisms/programming_formalisms_project_summer_2025, the URL is <code>https://github.com/programming-formalisms/programming_formalisms_project_summer_2025</code>.</p>","tags":["git","clone","VSCode","VS Code","Visual Studio code"]},{"location":"git/clone/#2-in-vscode-click-clone-git-repository","title":"2. In VSCode, click 'Clone Git Repository'","text":"<p>In VSCode, click 'Clone Git Repository'. You will be asked to provide the URL of the repository in a bar at the top.</p>","tags":["git","clone","VSCode","VS Code","Visual Studio code"]},{"location":"git/clone/#3-paste-the-url","title":"3. Paste the URL","text":"<p>In VSCode, in the bar at the top, paste the URL of your repository.</p>","tags":["git","clone","VSCode","VS Code","Visual Studio code"]},{"location":"git/clone/#4-provide-the-folder-where-the-repository-is-cloned-in","title":"4. Provide the folder where the repository is cloned in","text":"<p>In VSCode, you will be asked for a destination folder, in which the repository will be cloned. Pick your favorite folder for this.</p>","tags":["git","clone","VSCode","VS Code","Visual Studio code"]},{"location":"git/contribute/","title":"Contributing and code reviews","text":"<p>Questions</p> <ul> <li>How to collaborate in a project</li> <li>How to contribute to someone else's project?</li> </ul> <p>Info</p> <ul> <li>We will give an overview of<ul> <li>Centralized collaboration</li> <li>Forked collaboration</li> <li>How to contribute</li> </ul> </li> </ul> Learning outcomes <ul> <li>practice doing Pull Requests using the GitHub interface</li> <li>practice doing a code review</li> <li>explain and evaluate the usefulness of git Pull Request with code review</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have practiced doing Pull Requests using the GitHub interface</li> <li>Learners have practiced doing a code review</li> </ul> <pre><code>gantt\n  title Lesson plan apply merge\n  dateFormat X\n  axisFormat %s\n  Introduction: intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 40s\n  Feedback 1: feedback_1, after exercise_1, 10s</code></pre> Changes <ul> <li>more practical examples of git forking and branching and when it is appropriate to use them.</li> <li>exercises<ul> <li>clearer instructions</li> </ul> </li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#branches-merging-code-reviews","title":"Branches, merging, code reviews","text":"<p>Note</p> <ul> <li>The earlier '(Make a) Pull Request' has changed name into 'Contribute`</li> <li>Still <code>Pull requests</code> is the name in the menu!</li> </ul> <p>One can suggest to merge branches on GitHub, where it is called a Pull Request. For a Pull Request, a team member can be asked for a code review. Code reviews are useful for many reasons, among others the spread of knowledge.</p> <p>One can merge branches locally, using the command-line or VS code. This will bypass code review and that is OK. For example, merging develop to your topic branch does not need a code review.</p>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#github-and-new-repos","title":"GitHub and new repos","text":"<p>Let's go back to GitHub and collaboration for now!</p> <p>There are two more ways to create \u201ccopies\u201d of repositories into your user space:</p> <ul> <li>A repository can be marked as template and new repositories can be generated from it, like using a cookie-cutter.<ul> <li>The newly created repository will start with a new history, only one commit, and not inherit the history of the template.</li> </ul> </li> <li>You can import a repository from another hosting service or web address.<ul> <li>This will preserve the history of the imported project.</li> </ul> </li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#different-workflows-for-collaboration","title":"Different workflows for collaboration","text":"","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#centralized-workflow","title":"Centralized workflow","text":"<p>Centralized layout</p> <ul> <li>Red is the repository on GitHub.</li> <li> <p>Blue is where all contributors work on their own computers.</p> </li> <li> <p>Centralized workflow is often used for remote collaborative work.</p> </li> <li><code>origin</code> refers to where you cloned from (but you can relocate it).</li> <li><code>origin/mybranch</code> is a read-only pointer to branch <code>mybranch</code> on <code>origin</code>.</li> <li>These read-only pointers only move when you <code>git fetch</code>/<code>git pull</code> or <code>git push</code>.</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#distributed-version-control-and-forking-workflow","title":"Distributed version control and Forking workflow","text":"<p>This is used when you are not a collaborator</p> <p></p> <p>Forking workflow</p> <ul> <li>Red is the central repository, where only owners have access.</li> <li>Green are forks on GitHub (copy for a single user to work on).</li> <li>Blue are local copies where contributors work on their own computer.</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#contributing-in-a-team","title":"Contributing in a team","text":"","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#contributing-to-existing-repositories-using-pull-requests","title":"Contributing to existing repositories using pull requests","text":"<p>Step 1. Add collaborators to your repository</p> <p>Based on: https://coderefinery.github.io/github-without-command-line/contributing/#step-1-learn-how-to-add-collaborators-to-your-repository</p> License: Creative Commons Attribution 4.0 International <pre><code>- Permits almost any use subject to providing credit and license notice.\n- Frequently used for media assets and educational materials.\n- The most common license for Open Access scientific publications.\n- Not recommended for software.\n</code></pre> <p>Info</p> <ul> <li>This was done the first day!</li> </ul> <ul> <li> <p>Add your group members or collaborators as \"collaborators\" under GitHub.  This allows them to change things directly (but we'll actually do it with review).</p> </li> <li> <p>From here on the collaborators can push changes in the same way as we have done in a single-person repository in the previous episodes.</p> </li> </ul> <p>Step 2: Submit a small change via the web interface as collaborator</p> <ul> <li> <p>We learned how to directly commit changes either via web or via the desktop and you need to be a collaborator (have write permissions) to be able to do that.</p> </li> <li> <p>The tool here is pull request.</p> </li> </ul> <p>Note</p> <p>When merging a branch on GitHub you come to the same place!</p> Example with a salad repo <ul> <li>In this example the contributor will not change the <code>main</code> branch directly but submit a \"pull request\" (a change proposal) towards the <code>main</code> branch for code review.</li> <li>You do this by just changing the file at GitHub</li> <li>Before committing/proposing file change you may preview the changes.</li> </ul> <p></p> <ul> <li>After we click \"Commit / change proposal\" we are taken to this form:</li> </ul> <p></p> <ul> <li>In there we<ul> <li>verify the source and target branch,</li> <li>verify the file changes,</li> <li>can edit the title and description of the \"pull request\" (change proposal)</li> </ul> </li> <li>After we have submitted the \"pull request\", one of our collaborators can review it</li> <li>We can discuss and ask for changes before merging the changes \"Merge pull request\"</li> </ul> <p>Discussion</p> <ul> <li>Ideally submitter and reviewer should be two different persons.<ul> <li>When is this best? When not?</li> </ul> </li> <li>You can modify an open \"pull request\" by committing new changes to the branch</li> <li>Review is not only to assure quality but also to enhance learning and knowledge transfer within the group</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#branch-protection","title":"Branch protection","text":"<ul> <li> <p>To make sure that all changes of the <code>main</code> branch are reviewed and nobody can push commits to it directly, it can be useful to \"protect\" branches.</p> </li> <li> <p>\"Settings\", then \"Branches\", then \"Add rule\":</p> </li> </ul> <p></p> <p>Tip</p> <ul> <li>Protecting the <code>main</code> branch \"forces\" all changes to it to be reviewed first.</li> <li>We recommend this for group repositories.</li> <li>Discuss the advantages/disadvantages of this.</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#resolving-a-conflict","title":"Resolving a conflict","text":"<p>This will work the same as with merging</p> Discussion <p>Compare with Google Docs: can you get conflicts there? What are the advantages and disadvantages? What can we do to avoid conflicts?</p>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#how-to-contribute-changes-to-somebody-elses-project","title":"How to contribute changes to somebody else\u2019s project","text":"<ul> <li> <p>Avoid frustration and surprises by first discussing and then coding.</p> </li> <li> <p>We apply the Forking workflow</p> </li> </ul> <p></p> <p>Forking workflow</p> <ul> <li>Red is the central repository, where only owners have access.</li> <li>Green are forks on GitHub (copy for a single user to work on).</li> <li>Blue are local copies where contributors work on their own computer.</li> </ul> <p>In the forking layout described above we work with multiple remotes, in this case two remotes: One remote refers to the \"central\" repository, and the other remote refers to the \"fork\".</p> <ul> <li>Working with multiple remotes is not as scary as it might look.</li> <li><code>origin</code> is just an alias/placeholder.</li> <li>We can add and remove remotes.</li> <li>We can call these aliases/placeholders as we like.</li> <li>We typically synchronize/updates remotes via the local clone.</li> <li>To see all remotes use <code>git remote -v</code>.</li> <li>If you are more than one person contributing to a project, consider using code review.</li> </ul> <p>See also</p> <p>Code Refinery's course</p>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#contributing-very-minor-changes","title":"Contributing very minor changes","text":"<ul> <li>Fork repository</li> <li>Create a branch (e.g. with your name)</li> <li>Commit and push change</li> <li>File a pull request or merge request</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#if-you-observe-an-issue-and-have-an-idea-how-to-fix-it","title":"If you observe an issue and have an idea how to fix it","text":"<ul> <li>Open an issue in the repository you wish to contribute to</li> <li>Describe the problem</li> <li>If you have a suggestion on how to fix it, describe your suggestion</li> <li>Possibly discuss and get feedback</li> <li>If you are working on the fix, indicate it in the issue so that others know that somebody is working on it and who is working on it</li> <li>Submit your fix as pull request or merge request which references/closes the issue</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#example-with-pull-request","title":"Example with Pull request","text":"<ul> <li>Submitting a change proposal as external contributor  looks very similar to submitting a \"pull request\" to a repository with a protected <code>main</code> branch.<ul> <li>(we assume you are not added as \"collaborator\" and thus have no write-permissions to a repository)</li> </ul> </li> <li>Only this time you have no other choice than \"Propose file change\".</li> </ul> <p>Cheat-sheet</p> <p>Commits, branches, repositories, forks, clones</p> <ul> <li>repository: The project, contains all data and history (commits, branches, tags).</li> <li>commit: Snapshot of the project, gets a unique identifier (e.g. <code>c7f0e8bfc718be04525847fc7ac237f470add76e</code>).</li> <li>branch: Independent development line, often we call the main development line <code>main</code> or <code>main</code>.</li> <li>tag: A pointer to one commit, to be able to refer to it later. Like a commemorative plaque that you attach to a particular commit (e.g. <code>phd-printed</code> or <code>paper-submitted</code>).</li> <li>cloning: Copying the whole repository to your laptop - the first time.<ul> <li>It is not necessary to download each file one by one.</li> <li>good within a group</li> </ul> </li> <li>forking: Taking a copy of a repository (which is typically not yours)<ul> <li>our copy (fork) stays on GitHub and you can make changes to your copy.</li> <li>better for contribution to other's project</li> </ul> </li> <li><code>git clone</code> copies everything: all commits and all branches.</li> <li>Branches on the remote appear as (read-only) local branches with a prefix, e.g. <code>origin/main</code>.</li> <li>We synchronize commits between local and remote with <code>git fetch</code>/<code>git pull</code> and <code>git push</code>.</li> <li>Repositories that are shared online often synchronize via pull requests or merge requests.</li> <li>Repositories that are forked or cloned do not automatically synchronize themselves.</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#exercises","title":"Exercises","text":"","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#extra-exercise-1-practice-code-review","title":"Extra exercise 1: Practice code review","text":"<p>For team member A:</p> <ul> <li>Create a topic branch (from <code>develop</code>)</li> <li>Do something trivial on that topic branch</li> <li>Submit a GitHub Pull Request to merge it to <code>develop</code></li> <li>Assign the other team member as the reviewer</li> <li>Do a pretend code review until the Pull Request is accepted</li> <li>The reviewer merges the code to <code>develop</code></li> </ul> <p>Now do the same for team member B.</p> Enjoy a video? <p>See the 'Programming Formalisms, 'Apply merge' exercise 3' YouTube video</p> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2610 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>\u2611 GitHub</li> <li>\u2611 pull requests</li> </ul> </li> <li>\u2610 Sharing<ul> <li>\u2610 open science</li> <li>\u2610 citation</li> <li>\u2610 licensing</li> </ul> </li> <li>\u2610 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2610 documentation for users</li> </ul> </li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/contribute/#reference-git","title":"Reference Git","text":"<ul> <li> <p>Book 'Pro Git', chapter 'git branching'</p> </li> <li> <p>Main git book</p> </li> <li>Pro Git</li> <li>Tsitoara, Mariot, and Mariot Tsitoara. \"Git best practices.\" Beginning Git and GitHub: A Comprehensive Guide to Version Control, Project Management, and Teamwork for the New Developer (2020): 79-86.</li> </ul>","tags":["git","GitHub","merge","contribute","code review"]},{"location":"git/merge/","title":"Merging","text":"<p>Learning outcomes</p> <ul> <li>practice merging branches using VS code</li> <li>practice merging/doing Pull Requests using the GitHub interface</li> </ul> <p>branches using GitHub     - practice fixing merge conflicts on GitHub</p> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have practiced fixing merge conflicts on GitHub</li> <li>Learners have practiced merging branches using the command-line interface</li> </ul> <pre><code>gantt\n  title Lesson plan apply merge\n  dateFormat X\n  axisFormat %s\n  Introduction: intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 40s\n  Feedback 1: feedback_1, after exercise_1, 10s</code></pre> <p></p>","tags":["merging","merge","git"]},{"location":"git/merge/#workflow-of-merge","title":"Workflow of merge","text":"<ul> <li>Once a feature is ready, merge to \"main\" or \"develop\"</li> </ul> Command line <pre><code>git switch main    # switch to main branch\ngit branch           # check that we are on main branch\ngit merge &lt;feature branch&gt;\n</code></pre> Example of merged branches <pre><code>$ git graph\n*   1b29a8f (HEAD -&gt; main, origin/main) Merge branch 'modularity'\n|\\\n| * 4d4acaf (modularity) 4 modular files\n* | 000b440 rm print\n|/\n| * 2d4e252 (jupiter) add jupiter\n|/\n* b9465e4 planet.py documentation\n* 6a416b5 add folders and planet code\n</code></pre> GitHub <ul> <li>Merge</li> </ul> <ul> <li>Be sure that you merge to right branch!</li> <li>Either 1:</li> </ul> <ul> <li>Or 2:</li> </ul> <ul> <li>Good practice: Delete branch when done. You won't need it any more!</li> </ul>","tags":["merging","merge","git"]},{"location":"git/merge/#merge-conflicts","title":"Merge conflicts","text":"<ul> <li>When merging two branches a conflict can arise when the same file portion has been modified in two different ways on the two branches.</li> <li>A merge conflict occurs when <code>git</code> is unsure how to merge branches and asks a human for help.</li> </ul> Example: Two branches to be merged <p>Based on: https://coderefinery.github.io/git-intro/conflicts/</p> License: Creative Commons Attribution 4.0 International <ul> <li>Permits almost any use subject to providing credit and license notice.</li> <li>Frequently used for media assets and educational materials.</li> <li>The most common license for Open Access scientific publications.</li> <li>Not recommended for software.</li> </ul> <ul> <li>Once all features are ready, switch to main!</li> <li>This is the Branch we want to merge to</li> </ul> <p>The first merge will work</p> <pre><code>$ git switch main    # switch to main branch\n$ git branch           # check that we are on main branch\n$ git merge like-cilantro\n\nUpdating 4e03d4b..3caa632\nFast-forward\n ingredients.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre> <ul> <li>But the second will fail:</li> </ul> <pre><code>$ git merge dislike-cilantro\n\nAuto-merging ingredients.txt\nCONFLICT (content): Merge conflict in ingredients.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre> <ul> <li>Without conflict Git would have automatically created a merge commit, but since there is a conflict, Git did not commit:</li> </ul> <pre><code>$ git status\n\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n    both modified:   ingredients.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <ul> <li>Git won\u2019t decide which to take and we need to decide. Observe how Git gives us clear instructions on how to move forward.</li> </ul> <pre><code>$ git diff\n\ndiff --cc ingredients.txt\nindex 6cacd50,6484462..0000000\n--- a/ingredients.txt\n+++ b/ingredients.txt\n@@@ -1,4 -1,4 +1,10 @@@\n++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n +* 2 tbsp cilantro\n++=======\n+ * 1/2 tbsp cilantro\n++&gt;&gt;&gt;&gt;&gt;&gt;&gt; dislike-cilantro\n  * 2 avocados\n  * 1 chili\n  * 1 lime\n</code></pre> <ul> <li>Check status with git status and git diff.</li> <li>Decide what you keep (the one, the other, or both or something else). Edit the file to do this.<ul> <li>Remove the resolution markers, if not already done.</li> <li>The file(s) should now look exactly how you want them.</li> </ul> </li> <li>Check status with git status and git diff.</li> <li>Tell Git that you have resolved the conflict with git add ingredients.txt (if you use the Emacs editor with a certain plugin the editor may stage the change for you after you have removed the conflict markers).</li> <li>Verify the result with git status.</li> <li>Finally commit the merge with only git commit. Everything is pre-filled.</li> </ul>","tags":["merging","merge","git"]},{"location":"git/merge/#on-github","title":"On GitHub","text":"<ul> <li>Let's view the branches on Github!</li> <li>Go to Insights in the top menu and then go to Network in side-bar</li> <li>If we did this after the merging the branches do not show up.</li> </ul> <p>Warning</p> <ul> <li>In GitHub MERGE is called PULL REQUEST!</li> </ul> <ul> <li>Conflicts may show up like this:</li> </ul> <p></p> <ul> <li>We merge together one of the pull requests (this will work)</li> <li>Then we try to merge the other and we see a conflict:</li> </ul> <p></p> <ul> <li>We try to resolve the conflict via web</li> <li>Choose the version that you wish to keep, remove conflict markers, \"Mark as resolved\" and commit the change</li> </ul> <p></p> <p>Discuss</p> <ul> <li>Merge locally or on GitHub?</li> <li>Does it matter?</li> <li>Dependent on \"level\"?</li> </ul> Test <ul> <li>What does a merge do?</li> <li>Do we need merging? When? Why?</li> <li>When does a merge give a merge conflict?</li> <li>Can a <code>git commit</code> result in a merge conflict? Why?</li> <li>Can a <code>git push</code> result in a merge conflict? Why?</li> <li>Can a <code>git pull</code> result in a merge conflict? Why?</li> </ul>","tags":["merging","merge","git"]},{"location":"git/merge/#exercises","title":"Exercises","text":"<p>Content</p> <ol> <li>Practice merging <code>git</code> branches using the GitHub interface</li> <li>Practice merge conflicts between branches using GitHub</li> </ol>","tags":["merging","merge","git"]},{"location":"git/merge/#exercise-1-practice-merging-git-branches-using-the-github-interface","title":"Exercise 1: Practice merging <code>git</code> branches using the GitHub interface","text":"<p>Learning outcomes</p> <ul> <li>practice merging git branches without a merge conflict</li> </ul> <pre><code>gitGraph\n    commit id: \"Stuff on main\"\n    branch develop\n    switch develop\n    commit id: \"Stuff on develop\"\n    branch anna\n    switch anna\n    commit id: \"Some work\"\n    commit id: \"Branching version\"\n    branch bertil\n    switch bertil\n    commit id: \"Modify my file\"\n    switch anna\n    merge bertil\n    commit id: \"Another commit\"\n    checkout develop\n    merge anna</code></pre> <ul> <li>You work in a pair or trio</li> <li>On GitHub, create a branch for person A, e.g. <code>anna</code> that branches off from <code>develop</code></li> <li>On GitHub, use the branch of person A and create a new commit.</li> </ul> How should it look like? <p></p> <ul> <li>On GitHub, create a branch for person B, e.g. <code>bertil</code> that branches off from <code>anna</code></li> <li>On GitHub, use the branch of person B and create a new commit.</li> <li>On GitHub, use web interface to create a Pull Request from <code>bertil</code> to <code>anna</code>.</li> </ul> How should it look like? <p></p> <p>The person that does this requests a reviewer.</p> <ul> <li>On GitHub, the other person approves the Pull Request and merges</li> <li> <p>On GitHub, use web interface to create a Pull Request from <code>anna</code> to <code>develop</code>.</p> </li> <li> <p>The person that does this requests a reviewer.</p> </li> <li> <p>If there is a merge conflict, either stop (you've done the exercise, well done!)   or fix the merge conflict</p> </li> <li> <p>On GitHub, the other person approves the Pull Request and merges</p> </li> </ul>","tags":["merging","merge","git"]},{"location":"git/merge/#exercise-2-practice-merge-conflicts-between-branches-using-github","title":"Exercise 2: Practice merge CONFLICTS between branches using GitHub","text":"<p>Tip</p> <ul> <li>Do this individually</li> <li>But you can still help each-other!</li> </ul> <p>Learning outcomes</p> <ul> <li>experience merge conflicts between branches</li> <li>fix merge conflicts between branches</li> </ul> <pre><code>gitGraph\n    commit id: \"Before start\"\n\n    commit id: \"Branching version\"\n    branch anna\n    switch anna\n    commit id: \"Modify the file\"\n    switch main\n    switch main\n    commit id: \"Modify the file too\"\n    switch main\n    merge anna\n    commit id: \"End\"</code></pre> <p>An example picture of how to create a merge conflict.</p> <ul> <li>Create a merge conflict between two branches, e.g. a topic branch   and the main branch.</li> <li>You can do so by following the structure from the figure above that   shows the minimal git branching history to do so.</li> </ul> Answers which you may use directly if you want to <ul> <li>create a branch with your name and go there</li> <li>modify the README file in learners/, e.g. add the line <code>Anna was here</code>   at the bottom <li>commit with good message, it says \"commit directly to \") How could that look like? <p></p> <ul> <li>change back to main branch by the \"branch button\"</li> <li>Modify the same file, e.g. add the line <code>main person was here</code>.</li> <li>Commit with message \"main person was here\"`</li> <li>To generate the merge conflict, Click Code in the upper menu</li> </ul> <p></p> <ul> <li>Click the button!</li> </ul> <p>You will be guided in solving the conflict</p> <ul> <li>Modify the file to have the texts merged.</li> </ul> <p></p> <ul> <li>Don't forget to Approve!</li> </ul> <p></p> <ul> <li>You may delete the old branch from here if you want!</li> </ul>","tags":["merging","merge","git"]},{"location":"git/merge/#optional-exercise-3-practice-merging-git-branches-locally-without-conflict","title":"(Optional) exercise 3: Practice merging git branches locally (without conflict)","text":"<p>Tip</p> <ul> <li>Do this individually</li> <li>But you can still help each-other!</li> </ul> <p>Continue with the branch you created in last session. In VS CODE</p> <ul> <li>Pull/Sync!</li> <li>You may branch off from <code>main</code> or <code>develop</code> (if it exists) with the your name as a branch name.</li> <li>Go the the branch you created.</li> <li>Modify the README file in learners/, e.g. add the line <code>Anna was here</code>       at the bottom<ul> <li>commit with good message, it says \"commit directly to \") <li>Merge with the branch you branched off from, <code>develop</code> or <code>main</code></li> <p></p> <ul> <li>Then delete (from same drop-down menu as for merge)</li> <li>Push!</li> </ul>","tags":["merging","merge","git"]},{"location":"git/merge/#merging-in-github-well-make-a-similar-exercise-in-the-next-session-instead","title":"Merging in GitHub: We'll make a similar exercise in the next session instead","text":"","tags":["merging","merge","git"]},{"location":"git/merge/#summary","title":"Summary","text":"<pre><code>git add     # add files or stage file(s)\ngit commit  # commit staged file(s)\ngit status  # see what is going on\ngit log     # see history\ngit diff    # show unstaged/uncommitted modifications\ngit show    # show the change for a specific commit\ngit switch -b wild-idea    # create branch, switch to it, work, work, work ...\ngit switch main          # realize it was a bad idea, back to main/master\ngit branch -D wild-idea      # it is gone, off to a new idea\ngit merge\n</code></pre> <p>Overview workflow</p> <p></p> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> <li>branches</li> </ul> </li> <li>\u2611 Planning<ul> <li>\u2611 Analysis</li> <li>\u2610 Design</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>\u2611 GitHub</li> <li>\u2610 pull requests</li> </ul> </li> <li>\u2610 Sharing<ul> <li>\u2610 open science</li> <li>\u2610 citation</li> <li>\u2610 licensing</li> </ul> </li> <li>\u2610 Documentation<ul> <li>\u2611 in-code documentation</li> <li>\u2610 documentation for users</li> </ul> </li> </ul> <p>Keypoints</p> <ul> <li>A branch is a division unit of work, to be merged with main sometime</li> <li>Both git locally and GitHub can be used</li> <li>You can delete a branch safely after merging</li> </ul> <p>See also</p> <p>More about branching and merging More about conflict resolution</p>","tags":["merging","merge","git"]},{"location":"git/merge/#reference-git","title":"Reference Git","text":"<ul> <li>Main git book</li> <li>Pro Git</li> <li>Tsitoara, Mariot, and Mariot Tsitoara. \"Git best practices.\" Beginning Git and GitHub: A Comprehensive Guide to Version Control, Project Management, and Teamwork for the New Developer (2020): 79-86.</li> </ul>","tags":["merging","merge","git"]},{"location":"git/img/","title":"Images connected to steps in the project","text":""},{"location":"git/spring2024/apply_branches/","title":"Apply branches","text":"<p>Branching structure of an earlier course iteration.</p> <p>Learning outcomes</p> <ul> <li>create, switch and delete a <code>git</code> branch</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have create, switch and delete a <code>git</code> branch</li> </ul> <pre><code>gantt\n  title Lesson plan apply branches\n  dateFormat X\n  axisFormat %s\n  Introduction: intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 25s\n  Feedback 1: feedback_1, after exercise_1, 10s</code></pre> <p>Prior questions:</p> <ul> <li>What is a branch?</li> <li>What is the problem that branches alleviate?</li> <li>What is the name/names of the most important branch?</li> <li>What is our git branching setup?</li> <li>What is the goal of that setup?</li> <li>Why do we use that setup instead of a different one?</li> <li>What is the purpose of each of those branches?</li> <li>Does creating a branch create a new version? Why?</li> <li>Does changing a branch change the content of your local computer? Why?</li> <li>Does deleting a branch create a new version? Why?</li> </ul>","tags":["git","branch","branches","apply"]},{"location":"git/spring2024/apply_branches/#exercises","title":"Exercises","text":"","tags":["git","branch","branches","apply"]},{"location":"git/spring2024/apply_branches/#exercise-1-create-switch-and-delete-a-git-branch","title":"Exercise 1: create, switch and delete a <code>git</code> branch","text":"<p>Learning outcomes</p> <ul> <li>Create, switch and delete a <code>git</code> branch</li> <li>Build up experience using git without troubleshooting</li> </ul> <pre><code>gitGraph\n    commit id: \"Before start\"\n    commit id: \"Branching version\"\n    branch sven\n    checkout sven\n    commit id: \"Modify my file\"\n    commit id: \"Delete branch\" type: HIGHLIGHT\n    checkout main\n    commit id: \"Another commit\"</code></pre> <ul> <li>For our shared GitHub repository, create a branch with your first name that is   unique, e.g. <code>sven</code>, <code>sven_svensson</code> or <code>sven_svensson_314</code>.   You may branch of from <code>main</code> or <code>develop</code> (if it exists).   You may use the web interface (easiest!) or use the command line</li> <li>On your local computer:<ul> <li>update the repository</li> <li>switch to the new branch</li> <li>change the content of the repository, for example,   by creating a file in <code>learners/[your_name]/[your_name]_is_on_[your_branch_name]</code></li> <li>push your changes online.</li> </ul> </li> <li>On GitHub, verify that your changes on your branch can be found online</li> <li>On your local computer, switch to the main branch,   as we'll delete the branch you are on now</li> <li>Delete your branch (i.e. the one with the unique name).   You may use the web interface (easiest!) or use the command line</li> <li>On your local computer, update your code</li> </ul> Answers <ul> <li>For our shared GitHub repository, create a branch with your first name that is   unique, e.g. <code>sven</code>, <code>sven_svensson</code> or <code>sven_svensson_314</code>.   You may branch of from <code>main</code> or <code>develop</code> (if it exists).   You may use the web interface (easiest!) or use the command line</li> </ul> <p></p> <p>Click on 1, type your branch name at 2 (in this case, <code>richel</code>), then click 3. Done!</p> <ul> <li>On your local computer:</li> <li>update the repository</li> </ul> <p>On your local computer, navigate to the folder of the shared project and update:</p> <pre><code>git pull\n</code></pre> <ul> <li>On your local computer:<ul> <li>switch to the new branch</li> </ul> </li> </ul> <p>Switch to the new branch, for example, <code>richel</code>, by doing:</p> <pre><code>git switch richel\n</code></pre> <ul> <li>On your local computer:<ul> <li>change the content of the repository, for example,   by creating a file in <code>learners/[your_name]/[your_name]_is_on_[your_branch_name]</code></li> </ul> </li> </ul> <p>This can be any change you'd like. To create a file under Linux (and maybe this works on other operating systems too), one can do:</p> <pre><code>touch learners/richel/richel_is_on_richel.txt\n</code></pre> <p>After the change, commit these:</p> <pre><code>git add .\ngit commit -m \"Richel is on richel\"\n</code></pre> <ul> <li>On your local computer:<ul> <li>push your changes online.</li> </ul> </li> </ul> <p>Do:</p> <pre><code>git push\n</code></pre> <p>And your code may end up online.</p> <p>If that does not work, do:</p> <pre><code>git pull\n</code></pre> <p>and try pushing again, maybe multiple times, as many people are pushing to the shared repo.</p> <ul> <li>On GitHub, verify that your changes on your branch can be found online</li> </ul> <p></p> <p>Make sure you look at the correct branch, as displayed at 1. Then your commit message shows up at 2.</p> <ul> <li>On your local computer, switch to the main branch,   as we'll delete the branch you are on now</li> </ul> <p>Switch to the main branch, for example, <code>main</code>, by doing:</p> <pre><code>git switch main\n</code></pre> <ul> <li>Delete your branch (i.e. the one with the unique name).   You may use the web interface (easiest!) or use the command line</li> </ul> <p></p> <p>Click on 'Branches', as shown in the image above.</p> <p></p> <p>Click on garbage bin, as shown in the image above.</p> <p></p> <p>The branch will now be deleted, as shown in the image above.</p> <ul> <li>On your local computer, update your code</li> </ul> <p>Do:</p> <pre><code>git pull\n</code></pre> Need a video? <p>See the 'Programming Formalisms: git branch exercise' YouTube video</p>","tags":["git","branch","branches","apply"]},{"location":"git/spring2024/apply_branches/#links","title":"Links","text":"<ul> <li>Book 'Pro Git', chapter 'git branching'</li> </ul>","tags":["git","branch","branches","apply"]},{"location":"git/spring2024/apply_merge/","title":"Apply merge","text":"<p>Learning outcomes</p> <ul> <li>practice doing Pull Requests using the GitHub interface</li> <li>practice doing a code review</li> <li>practice fixing merge conflicts on GitHub</li> <li>practice merging branches using the command-line interface</li> <li>practice fixing merge conflicts on local computer,   using the command-line interface</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have practiced doing Pull Requests using the GitHub interface</li> <li>Learners have practiced doing a code review</li> <li>Learners have practiced fixing merge conflicts on GitHub</li> <li>Learners have practiced merging branches using the command-line interface</li> <li>Learners have practiced fixing merge conflicts on local computer,   using the command-line interface</li> </ul> <pre><code>gantt\n  title Lesson plan apply merge\n  dateFormat X\n  axisFormat %s\n  Introduction: intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 40s\n  Feedback 1: feedback_1, after exercise_1, 10s</code></pre> <p>Prior questions:</p> <ul> <li>What does a merge do?</li> <li>What does a merge do?</li> <li>Do we need merging? When? Why?</li> <li>When does a merge give a merge conflict?</li> <li>Can a <code>git commit</code> result in a merge conflict? Why?</li> <li>Can a <code>git push</code> result in a merge conflict? Why?</li> <li>Can a <code>git pull</code> result in a merge conflict? Why?</li> </ul>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#branches-merging-code-reviews","title":"Branches, merging, code reviews","text":"<p>Branches allow us to work independently. Here we use branches to do so.</p> <p>However, when we merge branches, it may result in a merge conflict. A merge conflict occurs when git is unsure how to merge branches and asks a human for help. Here we create merge conflicts on trivial code.</p> <p>One can suggest to merge branches on GitHub, where it is called a Pull Request. For a Pull Request, a team member can be asked for a code review. Code reviews are useful for many reasons, among others the spread of knowledge.</p> <p>One can merge branches locally, using the command-line. This will bypass code review and that is OK. For example, merging develop to your topic branch does not need a code review.</p>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#exercises","title":"Exercises","text":"<p>Exercises 1 and 2 use the GitHub interface, which is graphical and easy to use. It should help you get acquainted to branches, Pull Requests and code review.</p> <p>Exercises 3 and 4 use the command line instead to achieve similar goals. It should help you get acquainted to working with git on the command-line.</p> <p>Exercise 5 is a repeat of doing a code review.</p>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#exercise-1-practice-merging-git-branches-using-the-github-interface","title":"Exercise 1: practice merging <code>git</code> branches using the GitHub interface","text":"<p>Learning outcomes</p> <ul> <li>practice merging git branches without a merge conflict</li> </ul> <pre><code>gitGraph\n    commit id: \"Stuff on main\"\n    branch develop\n    checkout develop\n    commit id: \"Stuff on develop\"\n    branch anna\n    checkout anna\n    commit id: \"Some work\"\n    commit id: \"Branching version\"\n    branch bertil\n    checkout bertil\n    commit id: \"Modify my file\"\n    checkout anna\n    merge bertil\n    commit id: \"Another commit\"\n    checkout develop\n    merge anna</code></pre> <ul> <li>You work in a pair or trio</li> <li>On GitHub, create a branch for person A, e.g. <code>anna</code> that branches off from <code>develop</code></li> <li>On GitHub, use the branch of person A and create a new commit.   Use the web interface or command-line.</li> <li>On GitHub, create a branch for person B, e.g. <code>bertil</code> that branches off from <code>anna</code></li> <li>On GitHub, use the branch of person B and create a new commit.   Use the web interface or command-line.</li> <li>On GitHub, use web interface to create a Pull Request from <code>bertil</code> to <code>anna</code>.   The person that does this requests a reviewer.</li> <li>On GitHub, the other person approves the Pull Request and merges</li> <li>On GitHub, use web interface to create a Pull Request from <code>anna</code> to <code>develop</code>.   The person that does this requests a reviewer.   If there is a merge conflict, either stop (you've done the exercise, well done!)   or fix the merge conflict</li> <li>On GitHub, the other person approves the Pull Request and merges</li> </ul>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#exercise-2-practice-merging-git-branches-using-the-github-interface","title":"Exercise 2: practice merging <code>git</code> branches using the GitHub interface","text":"<p>Learning outcomes</p> <ul> <li>practice merging git branches with a merge conflict using the GitHub interface</li> </ul> <pre><code>gitGraph\n    commit id: \"Stuff on main\"\n    branch develop\n    checkout develop\n    commit id: \"Stuff on develop\"\n    branch anna\n    branch bertil\n    checkout anna\n    commit id: \"Modify a file\"\n    checkout bertil\n    commit id: \"Modify the same file\"\n    checkout anna\n    merge bertil\n    checkout develop\n    merge anna</code></pre> <ul> <li>You work in a pair or trio</li> <li>On GitHub, create a branch for person A, e.g. <code>anna</code> that branches off from <code>develop</code></li> <li>On GitHub, create a branch for person B, e.g. <code>bertil</code> that branches off from <code>anna</code></li> <li>On GitHub, use the branch of person A and create a new commit in a file   Use the web interface or command-line.</li> <li>On GitHub, use the branch of person B and create a new commit   in the same place in the same (now outdated) file   Use the web interface or command-line.</li> <li>On GitHub, use web interface to create a Pull Request from <code>bertil</code> to <code>anna</code>.   The person that does this requests a reviewer.   There is a warning for a merge conflict!</li> <li>On GitHub, the other person fixes the merge conflict,   approves the Pull Request and merges</li> <li>On GitHub, use web interface to create a Pull Request from <code>anna</code> to <code>develop</code>.   The person that does this requests a reviewer.</li> <li>On GitHub, the other person approves the Pull Request and merges</li> </ul>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#extra-exercise-3-practice-merging-git-branches-using-the-command-line","title":"Extra exercise 3: practice merging <code>git</code> branches using the command-line","text":"<p>Learning outcomes</p> <ul> <li>practice merging git branches without a merge conflict</li> </ul> <p>Here we use the <code>main</code> branch for now</p> <p>Instead of updating this exercise, its answer and video to use a proper branching workflow, we branch from <code>main</code> in this exercise</p> <pre><code>gitGraph\n    commit id: \"Before start\"\n    commit id: \"Branching version\"\n    branch sven\n    checkout sven\n    commit id: \"Modify my file\"\n    checkout main\n    merge sven\n    commit id: \"Another commit\"</code></pre> <ul> <li>For our GitHub repo, create a branch with your first name that is   unique, e.g. <code>sven</code>, <code>sven_svensson</code> or <code>sven_svensson_314</code>.   You may branch of from <code>main</code> or <code>develop</code> (if it exists).   You may use the web interface (easiest!) or use the command line</li> <li>On your local computer:<ul> <li>update your repository</li> <li>switch to that branch</li> <li>change the repo</li> <li>push your changes online</li> </ul> </li> <li>Verify the changes are online</li> <li>On your local computer<ul> <li>switch to the <code>main</code> branch</li> <li>merge your topic branch to <code>main</code></li> <li>upload your changes</li> </ul> </li> <li>Delete your topic branch (i.e. the one with the unique name).   You may use the web interface (easiest!) or use the command line</li> <li>On your local computer, update your code</li> </ul> Answers <p></p> <p>Click on 1, type your branch name at 2 (in this case, <code>richel</code>), then click 3. Done!</p> <ul> <li>On your local computer:</li> <li>update the repository</li> </ul> <p>On your local computer, navigate to the folder of the shared project and update:</p> <pre><code>git pull\n</code></pre> <ul> <li>On your local computer:<ul> <li>switch to the new branch</li> </ul> </li> </ul> <p>Switch to the new branch, for example, <code>richel</code>, by doing:</p> <pre><code>git switch richel\n</code></pre> <ul> <li>On your local computer:<ul> <li>change the content of the repository, for example,   by creating a file in <code>learners/[your_name]/[your_name]_is_on_[your_branch_name]</code></li> </ul> </li> </ul> <p>This can be any change you'd like. To create a file under Linux (and maybe this works on other operating systems too), one can do:</p> <pre><code>touch learners/richel/richel_is_on_richel.txt\n</code></pre> <p>After the change, commit these:</p> <pre><code>git add .\ngit commit -m \"Richel is on richel\"\n</code></pre> <ul> <li>On your local computer:<ul> <li>push your changes online.</li> </ul> </li> </ul> <p>Do:</p> <pre><code>git push\n</code></pre> <p>And your code may end up online.</p> <p>If that does not work, do:</p> <pre><code>git pull\n</code></pre> <p>and try pushing again, maybe multiple times, as many people are pushing to the shared repo.</p> <ul> <li>On GitHub, verify that your changes on your branch can be found online</li> </ul> <p></p> <p>Make sure you look at the correct branch, as displayed at 1. Then your commit message shows up at 2.</p> <ul> <li>On your local computer<ul> <li>switch to the <code>main</code> branch</li> </ul> </li> </ul> <pre><code>git switch main\n</code></pre> <ul> <li>On your local computer<ul> <li>merge your topic branch to <code>main</code></li> </ul> </li> </ul> <pre><code>git merge richel\n</code></pre> <ul> <li>On your local computer<ul> <li>upload your changes</li> </ul> </li> </ul> <pre><code>git push\n</code></pre> <ul> <li>Delete your branch (i.e. the one with the unique name).   You may use the web interface (easiest!) or use the command line</li> </ul> <p></p> <p>Click on 'Branches', as shown in the image above.</p> <p></p> <p>Click on garbage bin, as shown in the image above.</p> <p></p> <p>The branch will now be deleted, as shown in the image above.</p> <ul> <li>On your local computer, update your code</li> </ul> <p>Do:</p> <pre><code>git pull\n</code></pre> Prefer a video? <p>See the 'Programming Formalisms: Apply merge, exercise 1' YouTube video</p>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#extra-exercise-4-practice-merge-conflicts-between-branches-using-the-command-line","title":"Extra exercise 4: practice merge conflicts between branches using the command line","text":"<p>Learning outcomes</p> <ul> <li>experience merge conflicts between branches</li> <li>fix merge conflicts between branches</li> </ul> <p>Here we use the <code>main</code> branch for now</p> <p>Instead of updating this exercise, its answer and video to use a proper branching workflow, we branch from <code>main</code> in this exercise</p> <pre><code>gitGraph\n    commit id: \"Before start\"\n    commit id: \"Branching version\"\n    branch anna\n    checkout anna\n    commit id: \"Modify the file\"\n    checkout main\n    checkout main\n    commit id: \"Modify the file too\"\n    checkout main\n    merge anna\n    commit id: \"End\"</code></pre> <p>An example picture of how to create a merge conflict.</p> <ul> <li>Create a merge conflict between two branches, e.g. a topic branch   and the main branch. You can do so by creating random commits   on both branches and merge. Alternatively, the figure above   shows the minimal git branching history to do so.</li> </ul> Answers <p>Here, I will replay the figure above</p> <ul> <li>in GitHub, create a branch called <code>anna</code></li> <li>on your local computer, <code>git pull</code>, then <code>git switch anna</code></li> <li>on your local computer, modify a file, e.g. add the line <code>Anna was here</code>   at the bottom of <code>README.md</code>. Then do <code>git add .</code>,   <code>git commit -m \"Anna was here\"</code> and <code>git push</code>.   Do not merge branches yet, else there will be no merge conflicts!</li> <li>on your local computer, <code>git switch main</code></li> <li>on your local computer, modify a file, e.g. add the line <code>main person was here</code>.   Then do <code>git add .</code>, <code>git commit -m \"main person was here\"</code> and <code>git push</code>.</li> <li>To generate the merge conflict, merge <code>anna</code> into <code>main</code>, using <code>git merge main</code>.   You will get a clear error :-)</li> <li>Modify the file to have the texts merged.   Then do <code>git add .</code>, <code>git commit -m \"Fixed merge conflict\"</code> and <code>git push</code>.</li> </ul> Enjoy a video? <p>See the 'Programming Formalisms: 'Apply merge', exercise 2' YouTube video</p>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#extra-exercise-5-practice-code-review","title":"Extra exercise 5: practice code review","text":"<p>For team member A:</p> <ul> <li>Create a topic branch (from <code>develop</code>)</li> <li>Do something trivial on that topic branch</li> <li>Submit a GitHub Pull Request to merge it to <code>develop</code></li> <li>Assign the other team member as the reviewer</li> <li>Do a pretend code review until the Pull Request is accepted</li> <li>The reviewer merges the code to <code>develop</code></li> </ul> <p>Now do the same for team member B.</p> Enjoy a video? <p>See the 'Programming Formalisms, 'Apply merge' exercise 3' YouTube video</p>","tags":["git","merge","apply"]},{"location":"git/spring2024/apply_merge/#links","title":"Links","text":"<ul> <li>Book 'Pro Git', chapter 'git branching'</li> </ul>","tags":["git","merge","apply"]},{"location":"has_a_relation/","title":"Has-a relationships","text":"<p>Learning outcomes</p> <ul> <li>Understand the type of relation 'composition' is</li> <li>Understand the type of relation 'inheritance' is</li> <li>Write a class that is composed of another one</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>Learners have .</li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners .</li> </ul> <p>Teaching form used:</p> <ul> <li>.</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge<ul> <li>Imagine a university, departments, professors,   the department of biology, the department of physics. Which relationships are there?</li> <li>A university has departments. Departments have professors.   Is this the same type of relationship?   Hint: what happens if the bigger one ends existing?</li> </ul> </li> <li>5 mins: presentation</li> <li>10 mins: demonstration <code>is_zero</code></li> <li>25 mins: challenge</li> <li>10 mins: feedback</li> </ul>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#why","title":"Why?","text":"<p>You want to model your classes after the real world. Your classes work together and you do not feel sure how to put these together in code.</p> <p>You want to know the most important relation between classes there is.</p>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#use-case","title":"Use case","text":"<p>Here we have a class called <code>Particle</code>:</p> <pre><code>classDiagram\n  class Particle{\n    -position_x\n    -position_y\n    -velocity_x\n    -velocity_y\n  }</code></pre> <p>It has both a 2D position and a 2D velocity. This setup will work and maybe is 'good enough' before one learns about a 'has-a relation'.</p> What is the problem with this class? <p>In English, this class would read as:</p> <p>A particle has an x-position and y-position and x-velocity any y-velocity.</p> <p>Note how unrelated the four elements are to each other. One could just as well have said:</p> <p>A particle has an x-position and y-velocity and x-velocity any y-position.</p> <p>What one wants to say instead is:</p> <p>A particle has a position and a velocity. A position has an x and a y. A velocity has an x and a y.</p>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#class-relations","title":"Class relations","text":"<p>In this course, we use only these types of relations:</p> <ul> <li>composition, a 'has-a' relationship</li> <li>inheritance, a 'is-a-type-of' relationship</li> <li>association, a 'uses' relationship</li> </ul>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#composition","title":"Composition","text":"<pre><code>classDiagram\n  Person\n  Name\n  Person *-- Name</code></pre> <p>An example of composition</p> <p>In English this would be read as 'a person has a name'.</p>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#inheritance","title":"Inheritance","text":"<pre><code>classDiagram\n  Animal\n  Duck\n  Animal &lt;|-- Duck</code></pre> <p>An example of inheritance</p> <p>In English this would be read as 'a duck is a type of animal'.</p>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#association","title":"Association","text":"<pre><code>classDiagram\n  Simulation\n  Results\n  Simulation --&gt; \"produces\" Results</code></pre> <p>An example of association</p> <p>In English this would be read as 'a simulation creates results'.</p>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#a-has-a-relationship","title":"A 'has-a' relationship","text":"<p>When one data type has a 'has-a' relationship with another, this is called composition.</p> <pre><code>classDiagram\n  class Coordinat{\n    -x\n    -y\n  }</code></pre> <p>A <code>Coordinat</code> has an <code>x</code> and <code>y</code>. This is close to English, as it should be.</p> <p>However, 'has a' is not always a literal translation. Below is an incorrect class diagram:</p> <pre><code>classDiagram\n  note \"Incorrect class diagram!\"\n  class Simulation {\n    - results\n  }\n  Results\n\n  Simulation *-- Results</code></pre> <p>Although we could say 'a simulation has results', a simulation does not own these results. It does not manage the state of the results. Instead, a simulation has an association with the results it produces and the class design diagram should look like this:</p> <pre><code>classDiagram\n  class Simulation{\n    +run() Results\n  }\n\n  Simulation --&gt; \"run\" Results\n\n  class Results{\n    - values\n  }</code></pre>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#composition-of-structs","title":"Composition of structs","text":"<pre><code>classDiagram\n  class Particle{\n    -position\n    -velocity\n  }\n  class Velocity{\n    -delta_x\n    -delta_y\n  }\n  class Position{\n    -x\n    -y\n  }\n  Particle *-- Velocity\n  Particle *-- Position</code></pre> <ul> <li>Organize related data into structures (structs or classes) <code>[CppCore C.1]</code></li> </ul>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#exercise-1-write-two-classes-with-a-has-a-relation","title":"Exercise 1: write two classes with a has-a relation","text":"<ul> <li>Pick a class to design at your skill level:<ul> <li>Easiest: the particle class, work in <code>src/learners</code></li> <li>Hardest: one in the learners' project, work in <code>src/weather</code></li> </ul> </li> <li>Write the definition of the classes</li> </ul> Answer for the particle <pre><code>class Position:\n    def __init__(self, any_x, any_y):\n      self.x = any_x\n      self.y = any_y\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\nclass Velocity:\n    def __init__(self, any_x, any_y):\n      self.x = any_x\n      self.y = any_y\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\nclass Particle:\n    def __init__(self, any_position, any_velocity):\n      self.position = any_position\n      self.velocity = any_velocity\n    def __str__(self):\n        return (\n            \"Position: \" + str(self.position)  + \", \"\n            + \"velocity\" + str(self.velocity)\n        )\n</code></pre>","tags":["relationship","has-a","has a","composition"]},{"location":"has_a_relation/#references","title":"References","text":"<ul> <li><code>[CppCore C.1]</code> C.1. Organize related data into structures (structs or classes)</li> </ul>","tags":["relationship","has-a","has a","composition"]},{"location":"introductions/intro/","title":"Introduction","text":"<p>Content</p> <p>We start with a more theoretical introduction covering software and mindsets for software development.</p> <p>Learning outcomes of 'Introduction'</p> <p>Learners can</p> <ul> <li>Identify the main topics and objectives for the week's lessons.</li> <li>Evaluate the importance of engaging with course content and identify   strategies to maintain interest and motivation throughout the week.</li> </ul> Instructor notes <p>Prerequisites are:</p> <p>The pre-requirements:</p> <ul> <li>Learners know basic Python</li> <li>Learners have installed necessary tools</li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners can can understand why a formalized development of software   is important.</li> </ul> <p>Lesson Plan:</p> <ul> <li>Total 20 min</li> <li>Theory 10</li> <li>Discussions 10 min</li> </ul> TOC <ul> <li>What is software?<ul> <li>software concepts</li> <li>types</li> <li>outcome<ul> <li>correct, reusable, efficient, changable</li> </ul> </li> </ul> </li> <li>Example</li> <li>Software Development Life Cycle</li> </ul>","tags":["intro","introduction"]},{"location":"introductions/intro/#different-types-of-scientific-software","title":"Different types of Scientific software","text":"Analysis of data <ul> <li>statistics</li> <li>figures</li> <li>visualization</li> </ul> Tools for process data <ul> <li>refining data (formatting)</li> </ul> Workflows <ul> <li>automate several steps<ul> <li>many scripts doing different things but alltogether creating a result)</li> </ul> </li> </ul> Modelling (mimic the reality) <ul> <li>mathematical models of relationships among variables in a system</li> <li>simulations time-varying behaviour of a system</li> </ul> Decision assistance Other? <p>Discussion</p> <p>What do you develop for?</p> <ul> <li>HackMD</li> </ul>","tags":["intro","introduction"]},{"location":"introductions/intro/#outcome-of-a-program","title":"Outcome of a Program","text":"<ul> <li>Correct<ul> <li>and flawless</li> </ul> </li> <li>Efficient<ul> <li>Utilize the computer system's resources</li> </ul> </li> <li>Reusable<ul> <li>Finished components</li> <li>Lower development costs</li> <li>Faster</li> <li>Higher quality</li> <li>packaging technology</li> </ul> </li> <li>Changeable<ul> <li>Maintenance cost<ul> <li>Fix errors, bugs</li> <li>Adapt to new requirements</li> <li>Independent modules</li> <li>Encapsulation/information hiding</li> </ul> </li> </ul> </li> </ul>","tags":["intro","introduction"]},{"location":"introductions/intro/#common-problems","title":"Common problems","text":"<p>We want</p> <ul> <li>Correctness</li> <li>Efficiency</li> <li>Reusability</li> <li>Changeabilitye</li> <li>And Readability</li> </ul> <ul> <li>Can other people use your code?</li> <li>Do you or anyone else understand your code at a later moment?</li> <li>Does it work for all cases?</li> <li>Is is easy to find when and where the code broke?</li> <li>Is it easy to make changes in one part without ruin the rest of the program?</li> <li>Does is use the resources efficiently?</li> <li>Is is easy to use a part of the program in another program?</li> <li>Can the program be run on different platforms<ul> <li>like Linux/Mac/Windows,</li> <li>like different hardware architectures (intel, amd, arm)</li> </ul> </li> </ul>","tags":["intro","introduction"]},{"location":"introductions/intro/#software-development-life-cycle-sdlc","title":"Software Development Life Cycle (SDLC)","text":"How can we make it easier to get good software and usefulness? <ul> <li>We need a workflow in our programming projects!</li> </ul> <p>Phases defined in <code>[Perry, 2000]</code>, pages 148-149:</p> <ul> <li>Requirements</li> <li>Design</li> <li>Program</li> <li>Test</li> <li>Installation</li> <li>Maintain</li> </ul> Alternative phases <ul> <li>Planning<ul> <li>Analysis (with requirements) and design</li> </ul> </li> <li>Development \u2014 the programming<ul> <li>Source control</li> <li>Algorithms</li> <li>In-code documentation</li> <li>Optimization<ul> <li>Parallelism</li> </ul> </li> <li>Tests</li> </ul> </li> <li> <p>Deployment (or installation and maintenance)</p> <ul> <li>Documentation</li> <li>Reproducibility and sharing</li> <li>Packaging and dependencies</li> </ul> </li> <li> <p>... and Iterations</p> </li> <li> <p>Agile development</p> <ul> <li>Division of tasks into short phases of work and frequent re-assessment and adaptation of plans.</li> </ul> </li> </ul> <p>Definitions</p> <ul> <li>Want explanations and definitions of the technical terms in the course?</li> </ul> Can you connect the the phases above with what we ask of a program <p>Discuss in groups</p> <ul> <li>Correctness</li> <li>Efficiency</li> <li>Reusability</li> <li>Changeabilitye</li> <li>And Readability</li> </ul>","tags":["intro","introduction"]},{"location":"introductions/intro/#summary-of-introduction","title":"Summary of Introduction","text":"<ul> <li>Now after the overview you are ready to dig deeper about the tools!</li> </ul> <p>Keypoints</p> <ul> <li> <p>A program shall be or have content/components that is:</p> <ul> <li>Correct</li> <li>Efficient</li> <li>Reusable</li> <li>Changeable</li> </ul> </li> <li> <p>Software development is both series of steps:</p> <ul> <li>Requirements</li> <li>Design</li> <li>Program</li> <li>Test</li> <li>Installation</li> <li>Maintain</li> </ul> </li> <li> <p>... and iteration of these</p> </li> </ul> <p>Learning outcomes of 'Introduction'</p> <p>Learners can</p> <ul> <li>Identify the main topics and objectives for the week's lessons.</li> <li>Evaluate the importance of engaging with course content and identify   strategies to maintain interest and motivation throughout the week.</li> </ul>","tags":["intro","introduction"]},{"location":"introductions/intro/#reference","title":"Reference","text":"<ul> <li><code>[Perry, 2000]</code> Perry, William E. \"Effective Methods for Software Testing Second Edition.\" (2000).</li> </ul>","tags":["intro","introduction"]},{"location":"introductions/organization_docs/","title":"Project organization and documents","text":"<p>WHY?</p> <p>folders etc</p> <p>Before lunch link to Richel's parts about organizing project</p> - <ul> <li>proj folder/git repo</li> <li>sub directories<ul> <li>doc, src, results, (bin)</li> </ul> </li> <li>run-all script and/or main program (also related to software)</li> <li>files<ul> <li>README</li> </ul> </li> <li>namings</li> </ul>"},{"location":"introductions/organization_docs/#documentation","title":"Documentation","text":"<p>Documentation comes in different forms</p> <ul> <li>What is documentation?<ul> <li>Tutorials: learning-oriented, allows the newcomer to get started</li> <li>How-to guides: goal-oriented, shows how to solve a specific problem</li> <li>Explanation: understanding-oriented, explains a concept</li> <li>Reference: information-oriented, describes the machinery</li> <li>In-code documentaion \u2014 docstrings Not to forget</li> <li>Project documentation:<ul> <li>requirements: what is the goal of the software, risks, platforms</li> <li>the analysis: pseudocode and UML</li> <li>risk analysis</li> </ul> </li> </ul> </li> </ul> <p>There is no one size fits all: often for small projects a <code>README.md</code> or <code>README.rst</code> can be enough (more about these formats later).</p> <p>Objectives</p> <ul> <li>Documentation part aims to (this lesson):<ul> <li>introduce motivation for documentation</li> <li>get tips for in-code documentation</li> <li>get tips for README files</li> </ul> </li> <li>Documentation part 2 aims to:<ul> <li>get tips for README files</li> </ul> </li> <li>get tips for full documentation and tutorials</li> </ul>"},{"location":"introductions/organization_docs/#intro-to-documentation","title":"Intro to documentation","text":"<p>Documentation comes in different forms</p> <ul> <li>What is documentation?<ul> <li>Tutorials: learning-oriented, allows the newcomer to get started</li> <li>How-to guides: goal-oriented, shows how to solve a specific problem</li> <li>Explanation: understanding-oriented, explains a concept</li> <li>Reference: information-oriented, describes the machinery</li> <li>In-code documentaion \u2014 docstrings Not to forget</li> <li>Project documentation:<ul> <li>requirements: what is the goal of the software, risks, platforms</li> <li>the analysis: pseudocode and UML</li> <li>risk analysis</li> </ul> </li> </ul> </li> </ul>"},{"location":"introductions/organization_docs/#in-code-documentation","title":"In-code documentation","text":"<ul> <li>Comments, function docstrings, ...</li> <li>Advantages<ul> <li>Good for programmers</li> <li>Version controlled alongside code</li> <li>Can be used to auto-generate documentation for functions/classes</li> </ul> </li> <li>Disadvantage<ul> <li>Probably not enough for users</li> </ul> </li> </ul>"},{"location":"introductions/organization_docs/#order-your-files","title":"Order your files","text":"<ul> <li>Think that everything is worth to be part of documentation (like GitHub directory tree)</li> <li>The parts from the software development cycle<ul> <li>The planning parts<ul> <li>Requirements:</li> <li>what should the program deliver</li> <li>dependencies</li> <li>OS platforms</li> <li>Risk analysis</li> </ul> </li> <li>Design documentation<ul> <li>Analysis: pseudo code and UML</li> </ul> </li> <li>Source code<ul> <li>with in-code documentation</li> </ul> </li> <li>README</li> <li>(Full documentation)</li> <li>(Tutorial)</li> </ul> </li> </ul> <p>Directory structure</p> <ul> <li> <p>Different projects should have separate folders</p> </li> <li> <p>README file</p> </li> <li>Data  (version controlled)(.gitignore)</li> <li>Processed data intermediate</li> <li>(Manuscript)</li> <li>Results  data, tables, figures (version controlled, git tags for manuscript version)</li> <li>Src  version controlled code goes here<ul> <li>License (here or in the 1st level)</li> <li>Requirements.txt</li> </ul> </li> <li>Doc</li> <li>index</li> <li>.gitignore file</li> </ul>"},{"location":"introductions/organization_docs/#summary","title":"Summary","text":"<p>Parts to be covered</p> <ul> <li>\u2610 Planning<ul> <li>Pseudocode</li> <li>Unified Modelling Language (UML)</li> </ul> </li> <li>\u2610 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Source/version control<ul> <li>Git intro</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>GitHub</li> </ul> </li> <li>\u2610 Reproducibility (for you and others)<ul> <li>Deployment</li> <li>Dependencies</li> <li>(Workflows)</li> </ul> </li> <li>\u2610 Sharing<ul> <li>open science</li> <li>citation</li> <li>licensing</li> </ul> </li> <li>\u2611 Documentation<ul> <li>Explanation (in code)</li> </ul> </li> </ul>"},{"location":"introductions/sdlc/","title":"Software Development Lifecycle","text":"<p>learning goals</p> <ul> <li>We understand the general concept of the Software Development Lifecycle (SDLC)</li> <li>We are introduced to what UML is and how it can help us.</li> <li>We know what Feature driven development is and can use part of it.</li> <li>We know what a feature is and how to use it to concretize a requirement.</li> </ul> <p>Overview of Software Development Lifecycle (SDLC)</p> <ul> <li>This is a brief intro to the concept of SDLC further reading can be found in the reading material</li> <li>All software have a life cycle</li> <li>Whether you control that through formalism or if it is chaos is up to you.</li> </ul>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#the-sdlc-is-usually-broken-down-into-phases","title":"The SDLC is usually broken down into phases","text":"<ul> <li>This is formalized in the ISO/IEC 12207 model described in   [ISO/IEC TR 24748-1:2010]</li> </ul> <p>The cycle is degenerative as cost increases</p> <ul> <li>When developing a software the cumulative cost of the development increases with each iteration which means that bugs or forgotten features increase in cost when discovered later.</li> <li>There is a point in the life cycle of software where the software is retired when cost of maintaining the software is higher than the benefit for the developer - Most retirement does not mean the complete stop of the software existing.</li> <li>This can be illustrated using a helical spiral to illustrate that each iteration does not end up att the same place in a SDLC</li> </ul> <p></p> <p>Models</p> <p>In ISO 12207:2017 the following models are defined:</p> <p>The \u201cincremental development\u201d model includes initial &gt; planning, initial requirements analysis, initial architectural definition, and initial validation, but allocates design, implementation, verification (and sometimes delivery) activities to a series of stages, each of which provides a portion of the intended functionality. The approach provides for some flexibility to respond to inaccurate cost or schedule estimates by moving functionality to later increments. The \u201cspiral\u201d variation on incremental developmental proposes ordering the development of functionality based on risk, with the riskiest problems considered in the early increments. This provides some protection against cost surprises occurring late in the development cycle. The \u201citerative development\u201d model performs initial planning and then consists of a cyclic process of prototyping, testing, analyzing and refining the requirements and the solution. \u201cIterative\u201d models repeatedly perform the life cycle processes to deliver prioritized system functions sooner, with refined or more complex elements of the system coming in later iterations. The \u201cevolutionary model\u201d is intended to deal with incomplete knowledge of requirements. It provides for initial planning and initial architecture definition, but allocates requirements analysis, design, construction, verification, validation and delivery to a series of stages. Delivered capabilities that do not meet user needs can be reworked in subsequent stages of the evolution. \u201cAgile\u201d methods actually can be applied within a variety of models. While Agile methods are common in executing an evolutionary lifecycle model, they can be used in other lifecycle models at various stages. What the methods have in common is an emphasis on continuous inspection and collaboration in the rapid production of working software in an environment where changes, including changes to requirements, are expected. <code>[ISO 12207:2017]</code></p> <p>Planning or needs determination</p> <ul> <li>In the first phase one needs to determine what Trauth et.al call Perception of need, Feasibility and Analysis</li> <li>The ISO/IEC standard 12207 calls this Needs Determination after the needs, the initial requirements, have been determined through the above mentions process they are then fleshed out in the Concept and Exploration according to the SDLC_ISO_IEC_12207 <code>[ISO 12207:2017]</code></li> <li>This is the time to make a risk analysis of your development strategy, and then adopt that strategy, such as a once through(waterfall), iterative(such as RUP) or evolutionary software model (Living Software Development Process)</li> <li> <p>Most models cover some form of risk assessment, involved in the requirements gathering process.   In the Spiral model the concept of risk assessment is essential while in models like Rational Unified Process(RUP) it has a lesser role.</p> </li> <li> <p>As we go forward through out this course we adopt the Test Driven Design model which is a risk-based strategy, meaning to you asses the risk that your software has to fail and create a test for that.</p> </li> </ul> <p>Taking a risk-based approach to needs determination</p> <p>This means first finding the needs of your project then analyzing those needs for risk which may then lead to further analysis</p> What is risk? <p>ISO 31000 defines risk as \"The effect of uncertainty on objectives\"</p> What is risk management? <p>Risk management is \"coordinated activities to direct and control and organization with regard to risk\"</p> <pre><code>graph TD;\n    A(Initiation) --&gt;|Unclear Requirements| B(Planning);\n    B --&gt;|Scope Creep| C(Design);\n    C --&gt;|Poor Design Choices| D(Development);\n    D --&gt;|Bugs and Errors| E(Testing);\n    E --&gt;|Incomplete Testing| F(Release);\n    F --&gt;|Poor User Adoption| G(Maintenance);\n    G --&gt;|Lack of Updates| H(End of Life);\n    G --&gt;|Security Vulnerabilities| I(Security Patching);\n\n    classDef red fill:#f9cccc,stroke:#333,stroke-width:2px;\n    classDef orange fill:#ffe6cc,stroke:#333,stroke-width:2px;\n    classDef green fill:#ccffcc,stroke:#333,stroke-width:2px;\n\n    class A,B,H red;\n    class C,E,F,I orange;\n    class D,G green;</code></pre>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#design","title":"Design","text":"<p>Once we know what we want (Requirements and risks)we can start thinking on how.</p> <p>in the design phase we commonly use Modeling Languages to illustrate concepts and architecture together with pseudo code to describe algorithms in much the same way as we use programming languages during development .</p> <p>Unified Modeling Language UML, is one such modeling language UML web page. Here is a introduction to the language by Ed Seidewitz UML was generated to unify the big popular object oriented modeling approaches of Booch (Booch Method superseded by the UML), Rumbaugh <code>[Rumbaugh 1991]</code>och Jacobsen.<code>[Ivar Jacobson 1992]</code></p> <p>FDD(Feature Driven Design) was developed in 1997 and first appears in the the book Java Modeling Color with Uml<code>[Coad et al., 1999]</code>. It is focusing on short development cycles and fast development. it is a way of concretize your requirements into action that can be implemented. \"A feature is a client-valued function that can be implemented in two weeks or less.\" Using this we can break down our Requirements into actions that can be implemented.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#exercise","title":"Exercise","text":"","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#exercise-1-10-min","title":"Exercise 1 (10 min)","text":"<ul> <li>Collate the requirements list Group work in plenary.</li> <li>Extra assignment if time allows read mermaid syntax for requirement documents</li> <li>Write your requirements and their interactions using mermaid charts use the mermaid playground</li> </ul>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#exercise-2-10-min","title":"Exercise 2 (10 min)","text":"<ul> <li>Practice Mermaid by taking one requirement practice describing the overall solution using a flowchart in UML         - Flowcharts or Unified Modeling Language (UML)</li> </ul> Example flow chart of a requirement described as a User story or Use Case <p>From example requirement specification:</p> Requirement ID Requirement Description Acceptance Criteria Test Cases R1 Visual Display The program must display a field with particles and a visual cue to runtime settings - Verify that the program opens a graphical window or interface for displaying particles. <pre><code>graph TD;\n    A(Display on Screen) --&gt;|show intial display| B(Display);\n    C(Pariticle field) --&gt; |get field| B\n    E(User Interface) --&gt; |show UI| B\n    B --&gt;|User visualy confirms| F(Verification)\n    classDef red fill:#f9cccc,stroke:#333,stroke-width:2px;\n    classDef orange fill:#ffe6cc,stroke:#333,stroke-width:2px;\n    classDef green fill:#ccffcc,stroke:#333,stroke-width:2px;\n\n    class A,B,H red;\n    class C,E,F,I orange;\n    class D,G green;</code></pre>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#exercise-3-10-min","title":"Exercise 3 (10 min)","text":"<ul> <li>Produce a Feature list on the format<ul> <li>For features: <code>&lt;action&gt;</code> the <code>&lt;result&gt;</code> <code>&lt;by|for|of|to&gt; a(n) &lt;object&gt;</code></li> <li>For feature sets: <code>&lt;action&gt;&lt;-ing&gt; a(n) &lt;object&gt;</code>   where an object is a person, place, or thing (including roles, moments in   time or intervals of time, or catalog-entry-like descriptions)   That addresses the requirements.</li> </ul> </li> </ul> - <pre><code>Feature: &lt;Calculate&gt; the &lt;mean temperature&gt; for &lt;a specified year&gt;\nFeature: &lt;Display&gt; the &lt;graph of mean year temperature&gt; for &lt;the weather station&gt;\nFeature set: &lt;Displaying&gt; a &lt;Userinterface&gt;\n    set: &lt;User interface&gt;\n          object: &lt;Graph area&gt;, &lt;Statistics area&gt;, &lt;year input&gt;, &lt;data file input&gt;, &lt;Meta data output fields&gt;\n</code></pre>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#development","title":"Development","text":"<p>During Development we implement the design using programming languages and techniques.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#deployment","title":"Deployment","text":"<p>This is when you package and publish your software, this can be as simple as making your Github repository open an public, here we need to think on which license to publish under etc.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#maintain","title":"Maintain","text":"<p>Updates and revisions bug testing etc. Maintaining persistent links and download locations</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#retire","title":"Retire","text":"<p>Often does not happen but the software is gradually left to die, esp for scientific software where a retirement plan is seldom established esp if the software is developed by a PhD student or post-doc or other short term person part of the research group.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#paradigms-of-design","title":"Paradigms of Design","text":"","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#modular-developmentprogramming","title":"Modular development/programming","text":"<p>A software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules.Each module contains everything necessary to execute only one aspect of the desired functionality of the software. Each module fits together like pieces of lego. A derivation of modular programming is interface programming which uses OOP/OOD to implement the concept of modules in a language that have support for objects but not for modules. The principles of modular programming was introduced in the 1960s by Larry LeRoy Constantine with the proposal of adding modules to ALGOL68 to ALGOL68-R being the concrete application of the modular development paradigm.</p> <p>Code labs introduction to modular programming state the following principles regarding modular programming: There are two types of module, program control modules which are purposely and only designed for controlling the flow of the program. This is usually where the main functionality of a program is defined. Specific task modules A module that carries the data transfer amid the initial module and other modules. Specific task modules carries the functionality of the program and have a set of predefined data transmission options:</p> <ul> <li>no communication in with no communication out</li> <li>no communication in with some communication out</li> <li>some communication in with some communication out</li> <li>some communication in with no communication out</li> </ul> <p>The point of designing with modular development is to enforce information hiding which in this case mainly makes the development independent of the specific development team and enables code reuse. At a higher state a modular design achieve the same interchangeability over the design space. <code>[Jones et.al 2001]</code>Approaches to modular model development is a practical modular development and design of Agri software (agricultural sector) it has a good practice described.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#object-orientation","title":"Object Orientation","text":"<p>Object orientation is primarily a design paradigm unlike Imperative,procedural,functional and declarative programming which focuses on how you code. One can use any number of programming paradigms to implement the object-oriented design.</p> <p>An object is the representation of a thing or concept, that encapsulates both data and the actions performed on it. A key concept of an object is that it interacts with the world through message passing of its parameters.</p> <p>An object is characterised by a number of operations and a state which remembers the effect of these operations.</p> <p>An object oriented model is comprised of a number of objects which are clearly delimited parts of the system. Objects also carry any association to other objects in their states. These relationships are categorised as either static or dynamic. Two objects with static relationships are associated but have no direct communication that is they know of each other but to not pass messages between each other. A dynamic object relationship on the other hand implies two or more objects that actually communicate with each other <code>[Stroustrup B. 1998]</code></p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#paradigms-of-programming","title":"Paradigms of Programming","text":"","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#structural-programming","title":"Structural programming","text":"<p>The concept of structural programming is from 1950s with the aim of improving clarity and quality of software, by the introduction of structured control flow and block structures that is clearly defined areas of computation. Edsger W. Dijkstra coined the term in NOTES ON STRUCTURED PROGRAMMING <code>[Edsger W. Dijkstra 1970]</code></p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#imperative-programming","title":"Imperative programming","text":"<p>Imperative programming is a software development paradigm where functions are implicitly coded in every step required to solve a problem. In imperative programming, every operation is coded and the code itself specifies how the problem is to be solved, which means that pre-coded models are not called on.</p> <p>Imperative programming requires an understanding of the functions necessary to solve a problem, rather than a reliance on models that are able to solve it. The focus of imperative programming is how the problem should be solved, which requires a detailed step-by-step guide. Because the written code performs the functions instead of models, the programmer must code each step. (https://www.techtarget.com/whatis/definition/imperative-programming)</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#procedural-programming","title":"procedural programming","text":"<p>Derived from Imperative programming, the basic concept of a procedure call where a procedure is a routine or subroutine which contains the computational steps to be carried out.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#object-oriented-programming","title":"object oriented programming","text":"<p>The evolution of programming languages that support the object oriented design paradigm is long and branched with different amounts of support for the different concepts. Any language can be used to code object oriented but the effort of doing so may not be useful or cost effective.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#functional-programming","title":"Functional programming","text":"<p>In functional programming, based of the lambda calculus of Alonzo Church during the 1930s and 1940s,The Calculi of Lambda-Conversion (1941)<code>[Church 1941]</code>, the idea of pure functions, are meant to have no side effects is implemented as a design strategy, the second concept that needs to be implemented is the concept of recursion which functions as the mechanism of iteration in functional programming.</p> <p>Programming languages like Haskell, LISP, IPL are languages that represent languages that implement the functional paradigm to varying degrees, but as most design paradigms any language that allows for recursive high order functions will allow for functional programming.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#declarative-programming","title":"Declarative programming","text":"<p>A problem is solved is not specifically defined, but instead focuses on what needs to be solved. Declarative programming provides a constant to check to ensure the problem is solved correctly, but does not provide instructions on how to solve the problem. The exact manner in which the problem is solved is defined by the programming language\u2019s implementation through models. Declarative programming is also called model-based programming. Functional, domain-specific (DSL) and logical programming languages fit under declarative programming, such as SQL, HTML, XML and CSS. (https://www.techtarget.com/whatis/definition/imperative-programming)</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#pair-programming","title":"Pair Programming","text":"<p>A tool for rapid development is the so called Pair Programming where two developers code on the same code simultaneously one as the \"Driver\" and one as the \"Navigator\"</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#further-reading-materials-produced-for-this-course","title":"Further reading materials produced for this course","text":"<ul> <li>A short introductory text to SDLC and modeling</li> </ul>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc/#references","title":"References","text":"<ul> <li><code>[Church, 1941]</code> The  Calculi of lambda-conversion, Princeton, Princeton University Press, Londos: Humphrey Milford Oxford University Press, 1941</li> <li><code>[Dijkstra, 1970]</code> Notes On Structured Programming ,T.H. - Report 70-WSK-03,Second edition April 1970</li> <li><code>[ISO 12207:2017]</code></li> <li><code>[Jacobson, 1992]</code> Object-Oriented Software Engineering, a usecase driven approach, Addison-wesley 1992</li> <li><code>[Jones et al., 2001]</code> Jones JW, Keating BA, Porter CH. Approaches to modular model development. Agricultural Systems. 2001 Nov 1;70(2):421\u201343. https://www.sciencedirect.com/science/article/pii/S0308521X01000543</li> <li><code>[Rumbaugh, 1991]</code> Rumbaugh et. al, Object-oriented modeling and design, Prentice-Hall, Inc. 1991</li> <li><code>[Stroustrup, 1998]</code> Stroustrup B. What is \u201cObject-oriented Programming\u201d? Software, IEEE. 1988 Jun 1;5:10\u201320.</li> <li><code>[Coad et al., 1999]</code> Coad, Peter and Luca, Jeff de and Lefebvre, Eric Java Modeling Color with Uml: Enterprise Components and Process with CD-ROM, Prentice Hall PTR, 1999</li> </ul>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/","title":"Software Development Lifecycle","text":"<p>Overview of Software Development Lifecycle (SDLC)</p> <ul> <li>This is a brief intro to the concept of SDLC further reading can be found in the reading material</li> <li>All software have a life cycle</li> <li>Whether you control that through formalism or if it is chaos is up to you.</li> </ul>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#the-sdlc-is-usually-broken-down-into-phases","title":"The SDLC is usually broken down into phases","text":"<ul> <li>This is formalized in the ISO/IEC 12207 model described in   [ISO/IEC TR 24748-1:2010]</li> </ul> <p>The cycle is degenerative as cost increases</p> <ul> <li>When developing a software the cumulative cost of the development increases with each iteration which means that bugs or forgotten features increase in cost when discovered later.</li> <li>There is a point in the life cycle of software where the software is retired when cost of maintaining the software is higher than the benefit for the developer - Most retirement does not mean the complete stop of the software existing.</li> <li>This can be illustrated using a helical spiral to illustrate that each iteration does not end up att the same place in a SDLC</li> </ul> <p></p> <p>Models</p> <p>In ISO 12207:2017 the following models are defined:</p> <p>The \u201cincremental development\u201d model includes initial &gt; planning, initial requirements analysis, initial architectural definition, and initial validation, but allocates design, implementation, verification (and sometimes delivery) activities to a series of stages, each of which provides a portion of the intended functionality. The approach provides for some flexibility to respond to inaccurate cost or schedule estimates by moving functionality to later increments. The \u201cspiral\u201d variation on incremental developmental proposes ordering the development of functionality based on risk, with the riskiest problems considered in the early increments. This provides some protection against cost surprises occurring late in the development cycle. The \u201citerative development\u201d model performs initial planning and then consists of a cyclic process of prototyping, testing, analyzing and refining the requirements and the solution. \u201cIterative\u201d models repeatedly perform the life cycle processes to deliver prioritized system functions sooner, with refined or more complex elements of the system coming in later iterations. The \u201cevolutionary model\u201d is intended to deal with incomplete knowledge of requirements. It provides for initial planning and initial architecture definition, but allocates requirements analysis, design, construction, verification, validation and delivery to a series of stages. Delivered capabilities that do not meet user needs can be reworked in subsequent stages of the evolution. \u201cAgile\u201d methods actually can be applied within a variety of models. While Agile methods are common in executing an evolutionary lifecycle model, they can be used in other lifecycle models at various stages. What the methods have in common is an emphasis on continuous inspection and collaboration in the rapid production of working software in an environment where changes, including changes to requirements, are expected. <code>[ISO 12207:2017]</code></p> <p>Planning or needs determination</p> <ul> <li>In the first phase one needs to determine what Trauth et.al call Perception of need, Feasibility and Analysis</li> <li>The ISO/IEC standard 12207 calls this Needs Determination after the needs, the initial requirements, have been determined through the above mentions process they are then fleshed out in the Concept and Exploration according to the SDLC_ISO_IEC_12207 <code>[ISO 12207:2017]</code></li> <li>This is the time to make a risk analysis of your development strategy, and then adopt that strategy, such as a once through(waterfall), iterative(such as RUP) or evolutionary software model (Living Software Development Process)</li> <li> <p>Most models cover some form of risk assessment, involved in the requirements gathering process.   In the Spiral model the concept of risk assessment is essential while in models like Rational Unified Process(RUP) it has a lesser role.</p> </li> <li> <p>As we go forward through out this course we adopt the Test Driven Design model which is a risk-based strategy, meaning to you asses the risk that your software has to fail and create a test for that.</p> </li> </ul> <p>Taking a risk-based approach to needs determination</p> <p>This means first finding the needs of your project then analyzing those needs for risk which may then lead to further analysis</p> What is risk? <p>ISO 31000 defines risk as \"The effect of uncertainty on objectives\"</p> What is risk management? <p>Risk management is \"coordinated activities to direct and control and organization with regard to risk\"</p> <pre><code>graph TD;\n    A(Initiation) --&gt;|Unclear Requirements| B(Planning);\n    B --&gt;|Scope Creep| C(Design);\n    C --&gt;|Poor Design Choices| D(Development);\n    D --&gt;|Bugs and Errors| E(Testing);\n    E --&gt;|Incomplete Testing| F(Release);\n    F --&gt;|Poor User Adoption| G(Maintenance);\n    G --&gt;|Lack of Updates| H(End of Life);\n    G --&gt;|Security Vulnerabilities| I(Security Patching);\n\n    classDef red fill:#f9cccc,stroke:#333,stroke-width:2px;\n    classDef orange fill:#ffe6cc,stroke:#333,stroke-width:2px;\n    classDef green fill:#ccffcc,stroke:#333,stroke-width:2px;\n\n    class A,B,H red;\n    class C,E,F,I orange;\n    class D,G green;</code></pre> <p>Sneak peak at roles</p> <ul> <li>Project Manager</li> <li>Requirements Engineer : A requirements engineer is responsible for   gathering and formalising requirements and establishing and   maintaining the requirements document</li> <li>Lead programmer</li> </ul>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#exercises","title":"Exercises","text":"<p>Further requirements analysis, risk assessment. Each group will work with about 7 requirements in the requirements document, that can be found at the learners' project website. Each group will Make a copy of the document and work with it in their folder. They will label it <code>Requirements_BR_x.md</code>, so that the requirements engineer can collate the documents</p> <p>For the fall 2024:</p> <ul> <li>Breakout room 1<ul> <li>R1.1 - R1.5</li> </ul> </li> <li>Breakout room 2<ul> <li>R1.6 - R1.8.1</li> </ul> </li> <li>Breakout room 3<ul> <li>R1.9 -R2</li> </ul> </li> <li>Breakout room 4     -R2.1-R5</li> <li>Breakout room 5<ul> <li>R6-R11</li> </ul> </li> </ul> Exercise 30 min <p>For each requirement type(business or technical risk), asses the major risk associated with the requirement. It should be specified in one sentence. Asses the probability that the specified risk will happen during a run, on a scale of 1-5 (where 1 is a rare occurrence and 5 happens every time you run). And do the same for severities (where S1 is a minor inconvenience to the stakeholder or the software, and S5 means a major injury or damage to stakeholder or catastrophic failure of the software). Then multiply P and S and set that as the risk value.</p> <p>Task for the Requirements engineer</p> <p>Collate the document into one document</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#design","title":"Design","text":"<p>Once we know what we want we can start thinking on how. in the design phase we commonly use Modeling Languages to illustrate concepts and architecture together with pseudo code to describe algorithms in much the same way as we use programming languages during development . Unified Modeling Language UML, is one such modeling language UML web page here is a introduction to the language by Ed Seidewitz UML was generated to unify the big popular object oriented modeling approaches of Booch (Booch Method superseded by the UML), Rumbaugh <code>[Rumbaugh 1991]</code>och Jacobsen.<code>[Ivar Jacobson 1992]</code></p> <p>When we design Object oriented our goal is to mimic the object of the real world which we the abstract into Classes</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#development","title":"Development","text":"<p>During Development we implement the design using programming languages and techniques.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#deployment","title":"Deployment","text":"<p>This is when you package and publish your software, this can be as simple as making your Github repository open an public, here we need to think on which license to publish under etc.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#maintain","title":"Maintain","text":"<p>Updates and revisions bug testing etc. Maintaining persistent links and download locations</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#retire","title":"Retire","text":"<p>Often does not happen but the software is gradually left to die, esp for scientific software where a retirement plan is seldom established esp if the software is developed by a PhD student or post-doc or other short term person part of the research group.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#paradigms-of-design","title":"Paradigms of Design","text":"","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#modular-developmentprogramming","title":"Modular development/programming","text":"<p>A software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules.Each module contains everything necessary to execute only one aspect of the desired functionality of the software. Each module fits together like pieces of lego. A derivation of modular programming is interface programming which uses OOP/OOD to implement the concept of modules in a language that have support for objects but not for modules. The principles of modular programming was introduced in the 1960s by Larry LeRoy Constantine with the proposal of adding modules to ALGOL68 to ALGOL68-R being the concrete application of the modular development paradigm.</p> <p>Code labs introduction to modular programming state the following principles regarding modular programming: There are two types of module, program control modules which are purposely and only designed for controlling the flow of the program. This is usually where the main functionality of a program is defined. Specific task modules A module that carries the data transfer amid the initial module and other modules. Specific task modules carries the functionality of the program and have a set of predefined data transmission options:</p> <ul> <li>no communication in with no communication out</li> <li>no communication in with some communication out</li> <li>some communication in with some communication out</li> <li>some communication in with no communication out</li> </ul> <p>The point of designing with modular development is to enforce information hiding which in this case mainly makes the development independent of the specific development team and enables code reuse. At a higher state a modular design achieve the same interchangeability over the design space. <code>[Jones et.al 2001]</code>Approaches to modular model development is a practical modular development and design of Agri software (agricultural sector) it has a good practice described.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#object-orientation","title":"Object Orientation","text":"<p>Object orientation is primarily a design paradigm unlike Imperative,procedural,functional and declarative programming which focuses on how you code. One can use any number of programming paradigms to implement the object-oriented design.</p> <p>An object is the representation of a thing or concept, that encapsulates both data and the actions performed on it. A key concept of an object is that it interacts with the world through message passing of its parameters.</p> <p>An object is characterised by a number of operations and a state which remembers the effect of these operations.</p> <p>An object oriented model is comprised of a number of objects which are clearly delimited parts of the system. Objects also carry any association to other objects in their states. These relationships are categorised as either static or dynamic. Two objects with static relationships are associated but have no direct communication that is they know of each other but to not pass messages between each other. A dynamic object relationship on the other hand implies two or more objects that actually communicate with each other <code>[Stroustrup B. 1998]</code></p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#paradigms-of-programming","title":"Paradigms of Programming","text":"","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#structural-programming","title":"Structural programming","text":"<p>The concept of structural programming is from 1950s with the aim of improving clarity and quality of software, by the introduction of structured control flow and block structures that is clearly defined areas of computation. Edsger W. Dijkstra coined the term in NOTES ON STRUCTURED PROGRAMMING <code>[Edsger W. Dijkstra 1970]</code></p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#imperative-programming","title":"Imperative programming","text":"<p>Imperative programming is a software development paradigm where functions are implicitly coded in every step required to solve a problem. In imperative programming, every operation is coded and the code itself specifies how the problem is to be solved, which means that pre-coded models are not called on.</p> <p>Imperative programming requires an understanding of the functions necessary to solve a problem, rather than a reliance on models that are able to solve it. The focus of imperative programming is how the problem should be solved, which requires a detailed step-by-step guide. Because the written code performs the functions instead of models, the programmer must code each step. (https://www.techtarget.com/whatis/definition/imperative-programming)</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#procedural-programming","title":"procedural programming","text":"<p>Derived from Imperative programming, the basic concept of a procedure call where a procedure is a routine or subroutine which contains the computational steps to be carried out.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#object-oriented-programming","title":"object oriented programming","text":"<p>The evolution of programming languages that support the object oriented design paradigm is long and branched with different amounts of support for the different concepts. Any language can be used to code object oriented but the effort of doing so may not be useful or cost effective.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#functional-programming","title":"Functional programming","text":"<p>In functional programming, based of the lambda calculus of Alonzo Church during the 1930s and 1940s,The Calculi of Lambda-Conversion (1941)<code>[Church 1941]</code>, the idea of pure functions, are meant to have no side effects is implemented as a design strategy, the second concept that needs to be implemented is the concept of recursion which functions as the mechanism of iteration in functional programming.</p> <p>Programming languages like Haskell, LISP, IPL are languages that represent languages that implement the functional paradigm to varying degrees, but as most design paradigms any language that allows for recursive high order functions will allow for functional programming.</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#declarative-programming","title":"Declarative programming","text":"<p>A problem is solved is not specifically defined, but instead focuses on what needs to be solved. Declarative programming provides a constant to check to ensure the problem is solved correctly, but does not provide instructions on how to solve the problem. The exact manner in which the problem is solved is defined by the programming language\u2019s implementation through models. Declarative programming is also called model-based programming. Functional, domain-specific (DSL) and logical programming languages fit under declarative programming, such as SQL, HTML, XML and CSS. (https://www.techtarget.com/whatis/definition/imperative-programming)</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#pair-programming","title":"Pair Programming","text":"<p>A tool for rapid development is the so called Pair Programming where two developers code on the same code simultaneously one as the \"Driver\" and one as the \"Navigator\"</p>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_old/#references","title":"References","text":"<ul> <li><code>[Church, 1941]</code> The  Calculi of lambda-conversion, Princeton, Princeton University Press, Londos: Humphrey Milford Oxford University Press, 1941</li> <li><code>[Dijkstra, 1970]</code> Notes On Structured Programming ,T.H. - Report 70-WSK-03,Second edition April 1970</li> <li><code>[ISO 12207:2017]</code></li> <li><code>[Jacobson, 1992]</code> Object-Oriented Software Engineering, a usecase driven approach, Addison-wesley 1992</li> <li><code>[Jones et al., 2001]</code> Jones JW, Keating BA, Porter CH. Approaches to modular model development. Agricultural Systems. 2001 Nov 1;70(2):421\u201343. https://www.sciencedirect.com/science/article/pii/S0308521X01000543</li> <li><code>[Rumbaugh, 1991]</code> Rumbaugh et. al, Object-oriented modeling and design, Prentice-Hall, Inc. 1991</li> <li><code>[Stroustrup, 1998]</code> Stroustrup B. What is \u201cObject-oriented Programming\u201d? Software, IEEE. 1988 Jun 1;5:10\u201320.</li> </ul>","tags":["SDLC","software development","lifecycle","life cycle"]},{"location":"introductions/sdlc_tools/","title":"Software Development Lifecycle (SDLC) tools","text":"Questions <ul> <li>What are the key concepts and steps in the SDLC</li> <li>What are the tools for a project?</li> </ul> <p>Content</p> <ul> <li>Introduction to some SDLC key features</li> <li>Theory of project tools and thinking</li> </ul> <p>Learning outcomes of 'SDLC tools'</p> <p>Learners can</p> <ul> <li>compare and contrast various software development tools.</li> <li>justify their relevance to specific development tasks.</li> <li>can give a reason for the benefits of the different tools for the SDLC</li> </ul> Instructor notes <p>Prerequisites are:</p> <ul> <li>Understanding the Software development Life Cycle</li> </ul> <p>Lesson Plan:</p> <ul> <li>Total 30 min</li> <li>Theory 20</li> <li>Discussions 10 min</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#some-sdlc-models","title":"Some SDLC models","text":"<p>More In Software Development Life Cycle lesson</p> Waterfall model <ol> <li>Requirements</li> <li>Analysis and design</li> <li>Development</li> <li>Test</li> <li>Deployment and maintenance</li> </ol> <pre><code>flowchart\n    Requirements --&gt; A[\"Analysis and design\"] --&gt; Development --&gt; Test --&gt; D[\"Deployment and maintenance\"] -.-&gt; Requirements</code></pre> <ul> <li>Good approach for small and simple systems where the team knows the system and requirements very well.</li> </ul> Other Models <ul> <li>Modern principles:<ul> <li>automated tests, continuous integration (CI)</li> </ul> </li> <li>Deliver as fast as possible:<ul> <li>small iterations are easier to manage</li> </ul> </li> <li>Extreme Programming<ul> <li>Pair programming</li> <li>Test-driven development</li> </ul> </li> </ul> <p>Summary</p> <ul> <li>Each team has unique requirements</li> <li>Don\u2019t be afraid of trial and error</li> <li>More info in Software Development Lifecycle tomorrow</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#in-this-course","title":"In this course","text":"<p>The tools/concepts for Developing in scientific computing</p> <p>Good enough practices for Developing in Scientific computing. Wilson et al. 2017</p> <ul> <li>Good tools and practices for refactoring and development steps</li> <li>Focus on scientific computing</li> </ul> <p>The Phases/practices to be covered!</p> <ul> <li>Project organisation</li> <li>Planning (extended by Waterfall steps)<ul> <li>Requirements</li> <li>Analysis</li> <li>Design</li> </ul> </li> <li>Software development practices</li> <li>Tracking changes</li> <li>Collaborate</li> </ul> Project organization <ul> <li>folder structure</li> </ul> Software development practices <ul> <li>explanations</li> <li>naming</li> <li>eliminate duplication --&gt; libraries</li> <li>dependencies</li> <li>DOI</li> </ul> Tracking changes <ul> <li>For instance Git/Github</li> </ul> Collaborate <ul> <li>GitHub</li> <li>documentation</li> <li>to-do lists</li> <li>strategies</li> <li>license</li> <li>citable</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#tools-to-use","title":"Tools to use","text":"","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#project-planning","title":"Project planning","text":"<p>WHY?</p> <ul> <li>\"If I had 6 hours to chop down a tree, I'd spend the first 4 sharpening my axe.\" (Abraham Lincoln?)</li> <li>Modelling sharpens your axe since it helps you think about what you're going to build, how to seek feedback, and where to make improvements.</li> <li>It prepares you to build the real thing to reduce any potential risk of failure.</li> </ul> <ul> <li>find out the requirements what the program shall do</li> <li>risk analysis</li> <li>get an overview of the project/program.</li> <li>help planning writing the code</li> <li>identify parts needed</li> </ul> <p>Tools for analysis</p> <p>Analysis part is to state the problem and define inputs and outputs</p> <ul> <li>Graphical tools like UML (Unified Modeling Language)</li> <li>text</li> <li>if object-oriented programming: objects</li> </ul> <p>Tools for design</p> <p>Find out the specific algorithms needed</p> <ul> <li>UML and/or pseudocode</li> <li>if object-oriented programming: classes</li> <li>if functional programming: functions/modules</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#uml","title":"UML","text":"<ul> <li> <p>Flowcharts or Unified Modeling Language (UML)</p> </li> <li> <p>More this afternoon</p> </li> </ul> Example of Algorithm flow chart <pre><code>flowchart TD\n  condition{Is something true?}\n  condition --&gt; |yes| is_true[Do action 1]\n  condition --&gt; |no| is_false[Do action 2]</code></pre> <p>Mermaid code</p> <pre><code>flowchart TD\n  condition{Is something true?}\n  condition --&gt; |yes| is_true[Do action 1]\n  condition --&gt; |no| is_false[Do action 2]\n</code></pre> shape of boxes etc in flowchart and state diagrams  <ul> <li>initial state (small circle)<ul> <li><code>[*]</code></li> </ul> </li> <li>end state (small solid-filled circle)<ul> <li><code>[*]</code></li> </ul> </li> <li>state (rectangle)<ul> <li><code>A[\"text\"]</code></li> </ul> </li> <li>activity (rounded recatngle)<ul> <li><code>A(\"text\")</code></li> </ul> </li> <li>choice (diamond)<ul> <li><code>A{\"text\"}</code></li> </ul> </li> <li>arrow<ul> <li><code>--&gt;</code></li> </ul> </li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#software-development-practices","title":"Software development practices","text":"<ul> <li>explanations --&gt; in-code documentation</li> <li>naming --&gt; good variable naming</li> <li>eliminate duplication --&gt; libraries</li> <li>dependencies --&gt;</li> <li>DOI --&gt; also publish your code!</li> <li> <p>testing --&gt; do lots of testing</p> </li> <li> <p>To add: way of programming</p> <ul> <li>Functional vs Object-oriented</li> </ul> </li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#object-oriented-programming","title":"Object-oriented programming","text":"<ul> <li>Object-oriented (OO) programming is<ul> <li>a mindset of mimicking the real-world as:</li> <li>entities (<code>objects</code>) that are different</li> <li>or share attributes with each-other (within a <code>class</code>)</li> <li>info-hiding mindset...</li> </ul> </li> </ul> How do objects look like in UML? How do Classes look like in UML? <pre><code>classDiagram\n  class Elevator{\n    +string direction\n    +int floor\n\n    +goto_floor()\n    +stop()\n    + which_floor()\n  }</code></pre> Object orientation (OO) in some programming languages <ul> <li>OO (built-in classes)<ul> <li>C++</li> <li>Java</li> <li>Python</li> <li>Julia</li> </ul> </li> <li>OO features<ul> <li>Fortran 2003-</li> <li>MATLAB</li> <li>Perl</li> <li>PHP</li> <li>R</li> </ul> </li> <li>OO object-based (but not class-based)<ul> <li>Javascript</li> </ul> </li> </ul> <p>Object Oriented development</p>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#functional-programming","title":"Functional programming","text":"<ul> <li>Close to mathematics</li> <li>Programmer defines information and relations   and the program concludes answers from that</li> <li>Data is immutable, which removes some types of programming errors</li> </ul> How does that look like? <p>Here we define some functions:</p> <pre><code>grandparent(X) := parent(parent(X)).\nparent(X) := mother(X).\nparent(X) := father(X).\n</code></pre> <p>Here we add information:</p> <pre><code>mother(charles) := elizabeth.\nfather(charles) := phillip.\nmother(harry) := diana.\nfather(harry) := charles.\n</code></pre> <p>Now we can ask who is a grandparent to whom:</p> <pre><code>?- grandparent(X,Y).\n````\n\nResults are:\n\n```text\nX = harry, Y = elizabeth.\nX = harry, Y = phillip.\n</code></pre> <p>The defining feature here is that the program itself concluded how to arrive at a conclusion from the given information, where in produral languages you'll need to define that search strategy yourself</p> <ul> <li>Function design lesson</li> </ul> <p>To sum up</p> <ul> <li>At its simplest, functional programming uses immutable data to tell the program exactly what to do.</li> <li>Object-oriented programming tells the program how to achieve results through objects altering the program's state.</li> <li>Both paradigms can be used to create elegant code.</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#modular-coding","title":"Modular coding","text":"<ul> <li>Modular coding breaks up the code in blocks that could be separate files.</li> <li>Modularity could be within a program</li> <li>... but also for a workflow.<ul> <li>script describing order of runs with different programs</li> <li>Ex. bash script for preparing input data, running Fortran programs and analysing output with python program.</li> </ul> </li> </ul> <p>Tools</p> <ul> <li>Object-orientation</li> <li>Algorithms</li> <li>Modular programming</li> </ul> <ul> <li>Modular programming and refactoring</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#testing","title":"Testing","text":"<ol> <li>Unit testing</li> <li>Integration tests (test modules together as a whole)</li> </ol> Typical testing process <pre><code>flowchart TD\n  unit_tests[Unit test]\n  unit_tests --&gt; |As many times as necessary| unit_tests\n  unit_tests --&gt; |worst bugs fixed| alpha\n  alpha[Alpha release]\n  alpha --&gt; |As many times as necessary| unit_tests\n  alpha --&gt; |worst bugs fixed| beta\n  beta[Beta release]\n  beta --&gt; |As many times as necessary| alpha\n  beta --&gt; |minor bugs fixed| done\n  done[Finished program]</code></pre> Coming lessons <ul> <li>assert</li> <li>Test-driven development(TDD)</li> <li>Using a formal testing framework</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#tracking-changes","title":"Tracking changes","text":"Discuss Why What it is <p>Summarized from Code refinery</p> <ul> <li>System which records snapshots of a project</li> <li>Implements branching:<ul> <li>You can work on several feature branches and switch between them</li> <li>Different people can work on the same code/project without interfering</li> <li>You can experiment with an idea and discard it if it turns out to be a bad idea</li> </ul> </li> <li>Implements merging:<ul> <li>Person A and B\u2019s simultaneous work can be easily combined</li> </ul> </li> </ul> Why Git? <p>We will use Git to record snapshots of our work:</p> <ul> <li>Easy to set up: no server needed.</li> <li>Very popular: chances are high you will need to contribute to somebody else's code which is tracked with Git.</li> <li>Distributed: good backup, no single point of failure, you can track and clean-up changes offline, simplifies collaboration model for open-source projects.</li> <li>Important platforms such as GitHub, GitLab, and Bitbucket build on top of Git.</li> </ul> <p>However, any version control is better than no version control and it is OK to prefer a different tool than Git.</p> <ul> <li> <p>Other tools:</p> <ul> <li>Subversion</li> <li>Mercurial</li> <li>Pijul</li> </ul> </li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#collaboration-with-github","title":"Collaboration (with GitHub)","text":"Why? <ul> <li>Someone has given you access to a repository online and you want to contribute to it.</li> <li>Quite easy to make a copy and send a change back.</li> </ul> Why GitHub? <ul> <li>GitHub is introduced as an excellent tool for<ul> <li>remote repositories,</li> <li>offering code hosting services for both open source projects and private teams.</li> </ul> </li> <li>It serves as a version control system and provides a platform for developers to<ul> <li>build, share, and document their projects, fostering a strong community of collaboration.</li> </ul> </li> </ul> Coming lesson <ul> <li>Collaboration</li> </ul> content in the course <ul> <li>to-do list/issues</li> <li>communication strategies</li> <li>license explicit<ul> <li>recommendations and why</li> </ul> </li> <li>citable</li> <li>downloadable for all (sharing)</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#reproducibility-and-sharing","title":"Reproducibility and sharing","text":"Reproducible research <ul> <li>Have you ever spent days trying to repeat the results that took you hours to do the first time last week?</li> <li> <p>Or you have to do paper revisions, but you just can\u2019t get the results to match up?</p> </li> <li> <p>Extra material</p> </li> </ul> Sharing <ul> <li>The Open Science movement encourages researchers to share research output beyond the contents of a published academic article (and possibly supplementary information).</li> <li>Sharing and social coding</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#documentation","title":"Documentation","text":"<p>Documentation is a wide field, connecting many of the earlier topics</p> What is documentation? Documentation comes in different forms <ul> <li>Tutorials: learning-oriented, allows the newcomer to get started</li> <li>How-to guides: goal-oriented, shows how to solve a specific problem</li> <li>Explanation: understanding-oriented, explains a concept</li> <li>Reference: information-oriented, describes the machinery</li> <li>In-code documentation \u2014 docstrings Not to forget</li> <li>Project documentation:<ul> <li>requirements: what is the goal of the software, risks, platforms</li> <li>the analysis: pseudocode and UML</li> <li>risk analysis</li> </ul> </li> </ul> <p>There is no one size fits all: often for small projects a <code>README.md</code> or <code>README.rst</code> can be enough (more about these formats later).</p>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#markdown","title":"Markdown","text":"<ul> <li>Markdown (.md) is one of the most popular lightweight markup languages.</li> <li>File extension <code>.md</code> makes it render directly in GitHub!</li> </ul> How does it look like? <pre><code># This is a section heading in Markdown\n\n## This is a subsection header\n\nNothing special needed for a normal paragraph.\n\n    This is a code block\n\n\n**Bold** and *emphasized*.\n\nA list:\n\n- this is an item\n- another item\n\nA numbered list:\n\n1. this is an item\n1. items are numbered automatically\n\nThere is more:\n![images](link to file),\n[links](URL),\ntables...\n</code></pre> <p>Objectives</p> <ul> <li>Documentation on last day aims to:<ul> <li>get tips for README files</li> </ul> </li> <li>get tips for full documentation and tutorials</li> </ul> <p>In-code documentation</p> <ul> <li>Comments, function docstrings, ...</li> <li>Explain why, not what.</li> <li>Advantages<ul> <li>Good for programmers</li> <li>Version controlled alongside code</li> <li>Can be used to auto-generate documentation for functions/classes</li> </ul> </li> <li>Disadvantage<ul> <li>Probably not enough for users</li> </ul> </li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#project-organisation","title":"Project organisation","text":"<ul> <li>It's about folder structure and setting up practices</li> </ul> <p>Tools</p> <ul> <li>Local computer</li> <li>GitHub</li> </ul> Directory structure <ul> <li> <p>Different projects should have separate folders</p> </li> <li> <p>README file</p> </li> <li>Data  (version controlled)(.gitignore)</li> <li>Processed data intermediate</li> <li>(Manuscript)</li> <li>Results  data, tables, figures (version controlled, git tags for manuscript version)</li> <li>Src  version controlled code goes here<ul> <li>License (here or in the 1st level)</li> <li>Requirements.txt</li> </ul> </li> <li>Doc</li> <li>index</li> <li>.gitignore file (files to be ignored by git)</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#summary-of-sdlc-tools","title":"Summary of SDLC tools","text":"<p>Parts to be covered this week</p> <ul> <li>\u2611 Planning<ul> <li>Pseudocode</li> <li>Unified Modelling Language (UML)</li> </ul> </li> <li>\u2611 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Source/version control<ul> <li>Git etc</li> </ul> </li> <li>\u2611 Collaboration<ul> <li>GitHub</li> </ul> </li> <li>\u2611 Reproducibility (for you and others)<ul> <li>Deployment</li> <li>Dependencies</li> <li>(Workflows)</li> </ul> </li> <li>\u2611 Sharing<ul> <li>open science</li> <li>citation</li> <li>licensing</li> </ul> </li> <li>\u2611 Documentation<ul> <li>Tutorials</li> <li>How-to guides</li> <li>Explanation</li> <li>Reference</li> </ul> </li> </ul> Definitions <ul> <li>Want explanations and definitions of the technical terms in the course?</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#exercises","title":"Exercises","text":"<p>Individually</p> Why do we want to work with the mentioned tools/path? Get used to markdown <ul> <li>Test some of the examples here in a section in HackMD shared document</li> <li>Tip:<ul> <li>write in the left-hand side</li> <li>first make a section header with your name with a correct level</li> <li>then test other formatting</li> </ul> </li> <li>You should see the \"rendered\" results directly to the right!</li> </ul> (Optional) Learn more about UML <ul> <li> <p>Flowcharts or Unified Modeling Language (UML)</p> </li> <li> <p>Test some of the examples here in a section in HackMD shared document</p> </li> <li>Tip:<ul> <li>write in the left-hand side</li> <li>first make a section header with your name with a correct level</li> <li>then test some <code>mermaid</code> lines</li> </ul> </li> <li>You should see the \"rendered\" results directly to the right!</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#summary-of-sdlc-tools_1","title":"Summary of SDLC tools","text":"<ul> <li>Now after the overview you are ready to dig deeper in the topics and try it out yourself!</li> </ul>","tags":["SDLC","tools"]},{"location":"introductions/sdlc_tools/#references","title":"References","text":"<ul> <li>Wilson et al. 2017: Good enough practices in Scientific computing</li> </ul>","tags":["SDLC","tools"]},{"location":"lesson_plans/","title":"Lesson plans","text":"<p>Preparation by the teachers.</p> Index Course 1 2023 summer 2 2023 autumn 3 2024 summer 4 2024 autumn 5 2025 summer 6 2025 autumn 7 2026 summer 8 2026 autumn","tags":["lesson","plans","preparation"]},{"location":"lesson_plans/2023_autumn/","title":"Lesson plans autumn 2023","text":"<ul> <li>Day 3 lesson plan</li> <li>Day 4 lesson plan</li> <li>Day 5 lesson plan</li> </ul>"},{"location":"lesson_plans/2023_autumn/day_3_lesson_plan/","title":"Lesson plan Day 3 autumn 2023","text":"<p>Goals:</p> <ul> <li>Catch-up<ul> <li>git basic workflow: exercise fairytale basic, #4</li> <li>git with branches: exercise fairytale on branches, #5</li> </ul> </li> <li>Do lectures with exercises</li> </ul>"},{"location":"lesson_plans/2023_autumn/day_4_lesson_plan/","title":"Lesson plan Day 4 autumn 2023","text":""},{"location":"lesson_plans/2023_autumn/day_4_lesson_plan/#lesson-plan","title":"Lesson plan","text":"<ul> <li>Catch-up<ul> <li>design of project:<ul> <li>Pick a project and Design Lead, #6</li> <li>Decide upon class names and have class owners, #7</li> </ul> </li> </ul> </li> <li>Do lectures with exercises</li> </ul>"},{"location":"lesson_plans/2023_autumn/day_5_lesson_plan/","title":"Lesson plan Day 5 autumn 2023","text":""},{"location":"lesson_plans/2023_autumn/day_5_lesson_plan/#lesson-plan","title":"Lesson plan","text":"<ul> <li>Read and respond to Retrospective</li> <li>Do lectures with exercises</li> </ul>"},{"location":"lesson_plans/2023_summer/","title":"Lesson plans","text":"<ul> <li>Day 2, part 2</li> <li>Day 3, part 2</li> <li>Day 4, part 1</li> <li>Day 4, part 2</li> <li>Day 5, part 2</li> </ul>"},{"location":"lesson_plans/2023_summer/day_2_2/","title":"Day 2 part 2","text":"<ul> <li>13:00-16:00</li> <li>Richel</li> <li>Goals:<ul> <li>Theory: TDD</li> <li>Students can add, commit, push</li> <li>Students have done multiple TDD cycles</li> <li>Form: group size: 1, use <code>master</code>, no CI scripts, no code review</li> </ul> </li> </ul>"},{"location":"lesson_plans/2023_summer/day_2_2/#1300-1345-rb","title":"13:00-13:45 RB","text":"<ul> <li>Goals:<ul> <li>Students can add, commit, push</li> </ul> </li> </ul> When What 13:00 Netiquette 13:05 Explain TDD, video 1/3, 5 mins:  YouTube 13:10 Demo: <code>is_zero</code>, video 2/3, 16 mins: YouTube 13:26 Introduce exercise: <code>is_even</code>, video 3/3, 3 mins: YouTube 13:29 Start exercise 13:45 Break, have a break. Solution <code>is_even</code>: YouTube"},{"location":"lesson_plans/2023_summer/day_2_2/#1400-1445-rb","title":"14:00-14:45 RB","text":"<ul> <li>Goals:<ul> <li>Students can do a TDD cycle</li> </ul> </li> </ul> When What 14:00 Theory, 7 mins: YouTube 14:10 Practice: <code>is_odd</code>, <code>is_probability</code> 14:20 Theory. Solution <code>is_odd</code>: YouTube 14:30 Practice: <code>is_probability</code>, <code>is_number</code>, <code>are_numbers</code>, <code>is_roman_number</code>, <code>is_prime</code> 14:45 Break, have a break"},{"location":"lesson_plans/2023_summer/day_2_2/#1500-1545-rb","title":"15:00-15:45 RB","text":"<ul> <li>Goals:<ul> <li>Recap: what is TDD? Why is it important?</li> <li>Reflect</li> </ul> </li> </ul> When What 15:00 Bottom line, 4 mins: YouTube 15:04 Practice: <code>is_prime</code>, other easy functions 15:15-15:45 Reflection, by JN 15:45 End, stay around for questions"},{"location":"lesson_plans/2023_summer/day_2_2/#observables","title":"Observables","text":"<ul> <li><code>owner_name/is_zero</code></li> <li><code>owner_name/is_even</code></li> <li><code>owner_name/is_odd</code></li> <li><code>owner_name/is_probability</code></li> </ul>"},{"location":"lesson_plans/2023_summer/day_2_2/#links","title":"Links","text":"<ul> <li>Video 'TDD in Python 'is_zero'': YouTube</li> <li>Project Euler</li> </ul>"},{"location":"lesson_plans/2023_summer/day_3_2/","title":"Day 3 part 2","text":"<ul> <li>13:00-16:00</li> <li>Richel</li> <li>Goals:<ul> <li>Theory: testing</li> <li>Form: group size: 2, use <code>develop</code>, use CI scripts, no code review</li> </ul> </li> </ul>"},{"location":"lesson_plans/2023_summer/day_3_2/#1300-1345-rb","title":"13:00-13:45 RB","text":"<ul> <li>Goals:<ul> <li>Students can create a repo, use <code>master</code> and <code>develop</code></li> <li>Practice pair programming</li> </ul> </li> </ul> When What 13:00 Theory: Testing framework: why, Hamcrest, assertTrue, assertEqual, assertRaises 13:05 Show to use starting code with CI and unit tests, <code>is_prime</code>, YouTube video 13:15 Practice: <code>get_digits</code>. 3 mins per round. Instructors view the Zoom rooms, do not talk 13:45 Break, have a break <ul> <li>Video: YouTube</li> </ul>"},{"location":"lesson_plans/2023_summer/day_3_2/#1400-1445-rb","title":"14:00-14:45 RB","text":"<ul> <li>Goals:<ul> <li>Students can create a repo, use <code>master</code> and <code>develop</code></li> <li>Practice pair programming</li> </ul> </li> </ul> When What 14:00 Theory: CI: why, lint, code coverage, <code>noqa</code> 13:15 Practice in new pair: <code>???</code>. 3 mins per round. Instructors view the Zoom rooms, do not talk 14:45 Break, have a break <ul> <li>Video: YouTube</li> </ul>"},{"location":"lesson_plans/2023_summer/day_3_2/#1500-1545-rb","title":"15:00-15:45 RB","text":"<ul> <li>Goals:<ul> <li>Recap</li> <li>Reflect</li> </ul> </li> </ul> When What 15:00 Summarise 15:15-15:45 Reflection, by JN 15:45 End, stay around for questions"},{"location":"lesson_plans/2023_summer/day_3_2/#observables","title":"Observables","text":"<ul> <li><code>owner_name/programming_formalisms_medium_project</code> (in duos)</li> </ul>"},{"location":"lesson_plans/2023_summer/day_4_1/","title":"Day 4 part 1","text":"<ul> <li>9:00-12:00</li> <li>Richel</li> <li>Goals:<ul> <li>Theory: good algorithms</li> <li>Students develop together on big project</li> <li>Form: use feature branches, use CI scripts, use code review</li> </ul> </li> </ul>"},{"location":"lesson_plans/2023_summer/day_4_1/#900-945-rb","title":"9:00-9:45 RB","text":"<ul> <li>Goals:<ul> <li>Theory: algorithms</li> </ul> </li> </ul> When What 9:00 Theory: algorithms: what is good? Why? Design by contract 9:15 Practice: 9:45 Break, have a break"},{"location":"lesson_plans/2023_summer/day_4_1/#1000-1045-rb","title":"10:00-10:45 RB","text":"<ul> <li>Goals:<ul> <li>Start big project</li> </ul> </li> </ul> When What 10:00 Theory: role of <code>assert</code>, RNG, RNG seed and testing 10:15 Practice (<code>medium</code>): <code>flip_coin</code>, <code>roll_dice</code> 10:45 Break, have a break"},{"location":"lesson_plans/2023_summer/day_4_1/#1100-1145-rb","title":"11:00-11:45 RB","text":"<ul> <li>Goals:<ul> <li>Theory: Combining functions, <code>is_prime</code>, <code>is_prime_recursion</code>, <code>is_prime_for_loop</code>, <code>is_prime_special</code></li> </ul> </li> </ul> When What 11:00 Theory: combining algorithms (which ones are best?), using internal algorithms 11:15 Practice 11:45 End, stay around for questions <ul> <li>Pythonpool article</li> </ul>"},{"location":"lesson_plans/2023_summer/day_4_1/#observables","title":"Observables","text":"<ul> <li><code>owner_name/programming_formalisms_medium_project</code> (in groups of four)</li> </ul>"},{"location":"lesson_plans/2023_summer/day_4_2/","title":"Day 4 part 2","text":"<ul> <li>13:00-16:00</li> <li>Richel</li> <li>Goals:<ul> <li>Theory on data structures</li> <li>Students design a good classes</li> <li>Form: group size: 4, use topic branches, use CI scripts, use code review</li> </ul> </li> </ul>"},{"location":"lesson_plans/2023_summer/day_4_2/#1300-1345-rb","title":"13:00-13:45 RB","text":"<ul> <li>Goals:<ul> <li>Students can write a good function</li> </ul> </li> </ul> When What 13:00 Theory: <code>list</code>, <code>set</code>, <code>dict</code> 13:.. Practice: develop <code>are_primes_using_dict</code>/<code>are_primes_using_set</code> in duos 13:45 Break, have a break"},{"location":"lesson_plans/2023_summer/day_4_2/#1400-1445-rb","title":"14:00-14:45 RB","text":"<ul> <li>Goals:<ul> <li>Students write a function that uses local caching</li> </ul> </li> </ul> When What 14:00 Theory: Refactoring and combining functions: <code>are_primes</code>/<code>are_primes_[method]</code> 14:.. Practice 14:45 Break, have a break"},{"location":"lesson_plans/2023_summer/day_4_2/#1500-1545-rb","title":"15:00-15:45 RB","text":"<ul> <li>Goals:<ul> <li>Recap</li> <li>Reflect</li> </ul> </li> </ul> When What 15:00 Summarise 15:15-15:45 Reflection, by JN 15:45 End, stay around for questions"},{"location":"lesson_plans/2023_summer/day_4_2/#observables","title":"Observables","text":"<ul> <li><code>owner_name/programming_formalisms_medium_project</code> (in groups of four)</li> </ul>"},{"location":"lesson_plans/2023_summer/day_5_2/","title":"Day 5 part 2","text":"<ul> <li>13:00-16:00</li> <li>Richel</li> <li>Goals:<ul> <li>Theory on optimization: big-O, run-time profile</li> <li>Students have an idea what not to optimize</li> <li>Students have an idea what not to optimize</li> <li>Form: group size: Inf, use topic branches, use CI scripts, use code review</li> </ul> </li> </ul>"},{"location":"lesson_plans/2023_summer/day_5_2/#1300-1345-rb","title":"13:00-13:45 RB","text":"<ul> <li>Goals:<ul> <li>Measure Big-O</li> </ul> </li> </ul> When What 13:00 Theory: Big-O 13:.. Practice: <code>is_prime</code>, <code>is_recursive</code>, <code>are_primes_cache_with_dict</code>, <code>are_primes_cache_with_set</code> 13:45 Break, have a break"},{"location":"lesson_plans/2023_summer/day_5_2/#1400-1445-rb","title":"14:00-14:45 RB","text":"<ul> <li>Goals:<ul> <li>Obtain a speed profile</li> </ul> </li> </ul> When What 14:00 Theory: profile 14:.. Practice 14:45 Break, have a break"},{"location":"lesson_plans/2023_summer/day_5_2/#1500-1545-rb","title":"15:00-15:45 RB","text":"<ul> <li>Goals:<ul> <li>Recap</li> <li>Reflect</li> </ul> </li> </ul> When What 15:00 Summarise 15:15-15:45 Reflection, by JN 15:45 End, stay around for questions"},{"location":"lesson_plans/2023_summer/day_5_2/#observables","title":"Observables","text":"<ul> <li><code>richelbilderbeek/programming_formalisms_medium_project</code> (PRs by groups)</li> </ul>"},{"location":"lesson_plans/2024_autumn/","title":"Lesson plans","text":"<p>Preparation by the teachers.</p> <ul> <li>2024-09-11 by Richel</li> <li>2024-11-09 by Richel</li> <li>2024-11-17 by Bj\u00f6rn</li> <li>2024-11-17 by Richel</li> <li>2024-11-18 by Richel</li> <li>2024-11-19 by Richel</li> <li>2024-11-20 by Richel</li> <li>2024-11-21 by Richel</li> <li>2024-11-22 by Richel</li> </ul>"},{"location":"lesson_plans/2024_autumn/20240911_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-09-11</li> </ul>"},{"location":"lesson_plans/2024_autumn/20240911_richel/#week-37","title":"Week 37","text":""},{"location":"lesson_plans/2024_autumn/20240911_richel/#suggested-new-schedule","title":"Suggested new schedule","text":"<p>Mu suggestion:</p> Day Hours Topic Remarks Monday 1-6 Risk analysis, design More exercises, less theory Tuesday 1-6 git More exercises, less theory. Add 'Always work in an Issue' Wednesday 1-3 TDD Not in pair yet, consider adding pseudocode and in-code documentation Wednesday 4-6 Pair programming In pairs from now on Thursday 1-3 Testing . Thursday 4-6 Code reviews Need a dedicated TA to review code Friday 1-3 Class design More exercises, less theory Friday 4-6 Create a re-usable module More exercises, less theory <p>In the schedule to be discussed:</p> <ul> <li>Monday morning:<ul> <li>Bj\u00f6rn: course overview</li> <li>Bj\u00f6rn: basic git</li> </ul> </li> <li>Monday afternoon: Requirements modeling and risk assessment<ul> <li>Lars: Define the project</li> <li>Lars: Make formal requirements model</li> <li>Lars: Make formal risk assessment</li> </ul> </li> <li>Tuesday: Git setup and version control, from a reproducible research and social coding/development perspective<ul> <li>Organize the project</li> </ul> </li> <li>Wednesday:<ul> <li>Richel: Test-Driven Development (TDD) and function design</li> </ul> </li> <li>Thursday and Friday morning:<ul> <li>Richel: Test-Driven Development and class design (TDD)</li> <li>Richel: Implement the project as a package</li> </ul> </li> <li>Friday afternoon: Deployment and documentation</li> </ul>"},{"location":"lesson_plans/2024_autumn/20240911_richel/#week-36","title":"Week 36","text":""},{"location":"lesson_plans/2024_autumn/20240911_richel/#suggested-new-schedule_1","title":"Suggested new schedule","text":"Day Hours Topic Remarks Monday 1-3 git basic workflow More exercises, less theory Monday 4-6 git professional workflow More exercises, less theory. Add 'Always work in an Issue' Tuesday 1-3 TDD Not in pair yet, consider adding pseudocode and in-code documentation Tuesday 4-6 Pair programming In pairs from now on Wednesday 1-3 Testing . Wednesday 4-6 Code reviews Need a dedicated TA to review code Thursday 1-3 Data structures . Thursday 4-6 Function design Consider adding documentation Friday 1-3 Class design More exercises, less theory Friday 4-6 Create a re-usable module More exercises, less theory"},{"location":"lesson_plans/2024_autumn/20240911_richel/#list-of-suggested-changes","title":"List of suggested changes","text":"Topic Suggested time Previous time Remark Risk analysis - Monday not needed for shared project Use of ChatGPT to generate design documents - Monday Not needed for shared project. No exercise Object orientated design Consider Friday Monday No exercise. Project state on Friday gives more context Inheritance Consider Friday Monday No exercise. Project state on Friday gives more context Creating a local GitHub repo - Monday Not needed for shared project Markdown markup Consider Friday Monday No exercise. Not needed for shared project mermaid markup Consider for class design Monday No exercise yet put Mermaid in a README Consider class design Monday No exercise yet optimization - Monday not vital to the shared project documentation Consider function design Monday No exercise yet pseudocode Consider function design Monday No exercise yet. Not needed for shared project class list Class design or <code>git</code> basics ?Monday Do class list before class diagram class diagram Class design ?Monday Do class list before class diagram TDD TDD Tuesday Before pair programming Pair programming Pair programming Tuesday After TDD git merge conflicts Monday - Need exercise for this <code>git init</code> - Monday Not needed for shared project, can be done on GitHub <code>git branch -c</code> - Monday can be done on GitHub <code>git graph</code> - Monday can be done on GitHub <code>git diff</code> - Monday can be done on GitHub <code>git show</code> - Monday no exercise <code>git log</code> - Monday no exercise, can be done on GitHub <code>git mv</code> - Monday no exercise <code>git rm</code> - Monday no exercise big code examples - Monday Simplify to a 'Hello world' program use multiple files - Monday Simplify to one file use big files - Monday Simplify to short files use complex commit graphs - Monday Simplify to simple commit graphs using more repos - Monday Simplify to only use the shared repo using git plugin - Monday Simplify by using GitHub network using GitHub templates - Monday not needed for shared project using protected branches - Monday not needed for shared project add using Issues ? - We do use these in the shared project! using command-line - Monday/Wednesday Remove if can be done with GitHub use <code>git checkout</code> Monday Monday <code>git checkout</code> works for older versions Optimization: profiling ? Thursday No time Optimization: big-O profile ? Thursday No time aggregation - Friday We don't use it in the project remove deep <code>__init__.py</code> - Friday Not needed in the project Give definition of containers Friday Friday No exercise yet Compare the types of container - Fridays We use one container max. No exercise yet build systems - Friday not needed for the project virtual environments - Friday not needed for the project venv comparisons usage for different OSes - Friday not needed for project venv usage - Friday not needed for project In-code documentation Consider function design Friday No exercise yet. Licensing - Friday not needed for the project: we give it a license Static HTML website generator - Friday not needed for the project making a package and using it Friday - Need to create exercise Wiki - Friday not needed for the project, no formal terminology <p>I am happy we voted democratically on what the course goal is and what is yes/no course content.</p> <p>I do feel the course has been made worse by this. These are my worries:</p> <ul> <li>We voted for the coarse goal of 'to give an understanding of formal   principles of software development', instead of 'applying formal   principles of software development'. I worry that we have failed   to reduce lecturing and have failed to reduce lecturing useless content   (there are many things I am not convinced of to be useful, even after have   seen some of these topic being discussed multiple times; if something is   said to be 'essential' does not convince me)</li> <li>We voted for 'Only what is used by the student project is course content,   with alternatives relevant to academics provided in lecture (or extra   material) to what we do'. I suggested 'Only what is used by the student   project is course content' to reduce lecturing. Also here, I worry that we   have failed to reduce lecturing</li> </ul>"},{"location":"lesson_plans/2024_autumn/20241109_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-11-09</li> </ul> <p>I will have 4 days to prepare, all of these disturbed by meetings.</p> <ul> <li>Thursday:</li> </ul> Day Time Teacher State Tuesday 10:00-11:00 Richel Issues 6/10 Tuesday 10:00-11:00 Richel Kanban board 6/10 Tuesday 10:00-11:00 Richel Team roles 6/10 Tuesday 11:00-15:40 Richel TDD 6/10 Wednesday 13:00-15:40 Richel Pair programming 6/10 . . . function design 6/10 . . . assert 6/10 . . . Testing framework ? . . . Testing in a team ? . . . Continuous integration ? . . . Testing indeterminate functions . . . Skip: recursive algorithms 6/10 Thursday 10:00-12:00 Richel Class design ? . . . Has-a relationship ? . . . Built-in data structures . . . Expressive data types Thursday 14:00-15:40 Richel Implement the project as a package Friday 09:00-11:00 Richel optimisation misconceptions ? . . . big-O ? . . . run-time speed profile ? Friday 15:00-15:40 Richel Wrap-up Friday 15:40-16:00 Richel Confidence and retrospect . . . Project 2/10"},{"location":"lesson_plans/2024_autumn/20241117_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-11-17</li> </ul> <p>I feel that there is too little time for the shared project, due to more time for theoretical things. On the other hand, as this is a given, I should be able to make my exercises use the project more...</p> <p>Instead of discussing CI, I will put it on the project itself, so the learners can feel what it does.</p> <ul> <li>[x] Put CI in project</li> <li>[x] TDD</li> <li>[x] Put TDD example code in project</li> <li>[x] Use testing framework in code</li> <li>[x] Testing framework</li> <li>[SKIP] Testing in a team ?</li> <li>[SKIP] Testing indeterminate functions</li> <li>[ ] Class design ?</li> <li>[ ] Has-a relationship ?</li> <li>[ ] Built-in data structures</li> <li>[ ] Expressive data types</li> <li>[x] Create package in CI script</li> <li>[x] Implement the project as a package</li> <li>[ ] optimisation misconceptions ?</li> <li>[ ] big-O ?</li> <li>[ ] run-time speed profile ?</li> </ul> <p>Shall I directly use a testing framework in TDD?</p>"},{"location":"lesson_plans/2024_autumn/20241118_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-10-18</li> </ul> <p>Before teaching, my course material seems on schedule to me.</p> <p>At the teacher's coffee meeting, I suggested to the relevant teacher to split up the group when teaching git, so that the git experts can do something at their skill level. We decided to see what happens.</p> <p>I wonder if we have an 'Open Door Syndrome': 'planning is good', 'thinking is good, of course', 'you want reproducibility', 'documentation is an important thing'. These statements are debatable. Only references to the literature will make those statements sound useful.</p> <p>I have no idea what learners are expected to do. This means I cannot help them.</p>"},{"location":"lesson_plans/2024_autumn/20241118_richel/#prepare-for-2024-10-19","title":"Prepare for 2024-10-19","text":"<ul> <li>[x] Reflect on learners' Retrospect</li> <li>[x] Check if schedules match<ul> <li>They differ!</li> <li>[x] Fixed</li> </ul> </li> <li>[x] Check Lars' lesson<ul> <li>There is no class list being made!</li> </ul> </li> <li>[x] Prepare Priors</li> <li>[x] Schedule time</li> <li>[x] Check earlier reflection</li> <li>[x] Check with learners' Retrospect again</li> <li>[x] TDD: add:<ul> <li>[x] Add hint: How to test if there is documentation?</li> <li>[x] Add hint: How to test a function returns a value?</li> <li>[x] Add hint: How to test a function does not return a value?</li> <li>[x] Add hint: How to test if an exception is raised?</li> </ul> </li> <li>[x] Check layout of pages</li> <li>[x] Practice TDD</li> <li>[x] Make video</li> <li>[x] Write evaluation questions</li> </ul> <p>Give you confidence levels of the following statements below:</p> <ul> <li>I understand why issues are important</li> <li>I can create, assign and close an issue</li> <li>I understand why a kanban board is important</li> <li>I can use a kanban board</li> <li>I can name at least three roles that are present in a team</li> <li>I understand why TDD is important</li> <li>I can use TDD to develop functions</li> <li>I understand why <code>assert</code> is important</li> <li>I can debunk people saying that <code>assert</code> slows down code</li> <li>I understand why <code>assert</code> statements must have no side effects</li> <li>I understand that assert can be used to signal stubs</li> <li>I understand the benefit of using a testing framework</li> <li>I have written a test within a formal testing framework</li> <li>I understand why continuous integration is important</li> <li> <p>I can fix an error given by at least one Continuous Integration script</p> </li> <li> <p>[x] Share with Lars</p> </li> </ul>"},{"location":"lesson_plans/2024_autumn/20241119_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-10-19</li> </ul> <p>I need to add more examples before learners can do the exercises to work on the learners project.</p> <p>Also, I do need to discuss merge conflicts: they will need it.</p> <p>On the first day, I expected the schedule of the week to be discussed. I will do so.</p> <ul> <li>[/] Check material: learners project exercises should   give an idea of what to do</li> <li>[ ] Add merge conflicts</li> <li>[ ] Repeat course schedule</li> </ul> <p>Time is up, will push and be happy enough about it.</p>"},{"location":"lesson_plans/2024_autumn/20241120_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-10-20</li> </ul> <p>From the reflection:</p> <p>For tomorrow, I will slow down and focus on simpler exercises.</p> <p>I feel I need to rethink complex content, such as formal unit testing:</p> <ul> <li>Should I lecture more? Unsure</li> <li>Should there be exercises on the content only? Maybe</li> </ul> <p>Let's do it!</p> <ul> <li>[x] Formal testing framework, 1h, 7-8</li> <li>[x] Pair programming, 1h, 8-9</li> <li>[x] Continuous integration, 1h, 9-10</li> <li>[x] Function design, 1h, 9-10</li> <li> <p>[x] Prepare evaluation questions for Lars</p> </li> <li> <p>I understand why pair programming is important</p> </li> <li>I understand what good pair programming looks like</li> <li>I can pair program</li> <li>I understand the benefit of using a testing framework</li> <li>I can put the files of my code in the right locations,   for the testing framework to find them</li> <li>I can write tests using a formal testing framework</li> <li>I understand what continuous integration is</li> <li>I understand why continuous integration is important</li> <li>I can find the continuous integration errors</li> <li>I can fix an error given by a CI script</li> <li>I understand why function design is important</li> <li>I can give some features of good function design</li> <li>I can give a function a proper name</li> <li> <p>I can criticise functions</p> </li> <li> <p>[x] Change issue rule: only when working on the project</p> </li> </ul>"},{"location":"lesson_plans/2024_autumn/20241121_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-10-21</li> </ul> <p>On Thursday I will be discussing:</p> <ul> <li>(after Lars, on object-oriented design) class design</li> <li>has-a relation</li> <li>expressive data type</li> <li>(after Lars, on modular programming) Implement the project as a package</li> </ul> <p>To do:</p> <ul> <li>[x] Create issues to fix the learners' project</li> <li>[x] Create issues for learners that have broken the main branch<ul> <li>This was apparently fixed by a learner. Yay!</li> </ul> </li> <li>[ ] Determine order for tomorrow, no rush to work on the learners' project</li> <li>[ ] Tomorrow 8:00: Check Lars' work</li> </ul> <p>I like it when a plan comes together.</p> <p>A dude from the A team, with a cigar</p> <p>That is how I felt during the lesson yesterday. Now I have only a couple of hours to update my material to the schedule. Let's plan things.</p> <p>It is great to follow the pace of the learners, but now I am behind in schedule:</p> <ul> <li>[x] Look at Lars' work</li> </ul> <p>I look at Lars' work and fixed the layout. Then there was a too complex merge conflict. I reverted my work on a document being worked on :-) . However, the exercise is too big of a leap: from never having created a class, to write a Factory Design Pattern: that is a big leap.</p> <p>I will help him out. Ah, I see in his most recent commit he is working on that. Great!</p> <ul> <li>[x] Look at schedule, prioritize</li> </ul> <p>I've made the schedule to this:</p> <pre><code>Thursday |09:00-10:00|Lars   |[Object-oriented design](design_develop/OO_development.md)\nThursday |10:15-11:00|Richel |[Function design](function_design/README.md)\nThursday |11:15-12:00|Richel |[Class design](data_structures/class_design.md), [has-a relation](data_structures/has_a_relation.md), [expressive data type](data_structures/expressive_data_type.md)\nThursday |13:00-14:00|Lars   |[Modular programming](./modularity/modular.md)\nThursday |14:15-15:00|Richel |[continuous integration](continuous_integration/README.md)\nThursday |15:15-16:00|Richel |[Implement the project as a package](package/README.md)\nThursday |15:40-16:00|Lars   |Confidence and retrospect\n</code></pre> <p>Check status of the lesson and rearrange?</p> <p>Yes, rearrange to:</p> <ul> <li>Function design: 8/10</li> <li>expressive data type</li> <li>has-a relation</li> <li>Class design</li> <li>continuous integration</li> <li>Implement the project as a package</li> </ul> <p>Changed schedule to:</p> <pre><code>Thursday |09:00-10:00|Lars   |[Object-oriented design](design_develop/OO_development.md)\nThursday |10:15-11:00|Richel |[Function design](function_design/README.md)\nThursday |11:15-12:00|Richel |[Expressive data type](data_structures/expressive_data_type.md), [has-a relation](data_structures/has_a_relation.md)\nThursday |13:00-14:00|Lars   |[Modular programming](./modularity/modular.md)\nThursday |14:15-15:00|Richel |[Class design](data_structures/class_design.md),\nThursday |15:15-16:00|Richel |[Continuous integration](continuous_integration/README.md)\nThursday |15:40-16:00|Lars   |Confidence and retrospect\n|||||\nFriday   |09:00-10:00|Richel |[Implement the project as a package](package/README.md), [Optimisation misconceptions](optimisation/misconceptions.md), [Big O](optimisation/big_o.md), [runtime speed profiles](optimisation/runtime_speed_profiles.md)\nFriday   |10:15-11:00|Richel |[Optimisation misconceptions](optimisation/misconceptions.md), [Big O](optimisation/big_o.md), [runtime speed profiles](optimisation/runtime_speed_profiles.md)\nFriday   |11:00-13:30|Bj\u00f6rn  |[Deployment](deployment/deploy.md)\nFriday   |13:30-15:00|Bj\u00f6rn  |[Documentation](deployment/documentation.md)\nFriday   |15:15-15:40|Richel |Wrap-up\nFriday   |15:40-16:00|Richel |Confidence and retrospect\n</code></pre> <p>So, to check today:</p> <ul> <li>Function design: 8/10</li> <li>expressive data type 5/10</li> <li>has-a relation 5/10</li> <li>(after lunch) Class design 5/10</li> <li>Continuous integration 8/10</li> </ul> <p>So, here is a schedule to fix this</p> <ul> <li>6:15 expressive data type 7/10</li> <li>7:15 has-a relation 7/10</li> <li>7:45 (after lunch) Class design 7/10</li> <li>8:30 coffee with Lars</li> </ul> <p>I need to suggest a different schedule to Lars, which consists of switching the order of things:</p> <pre><code>4. Thursday |09:00-10:00|Lars   |[Object-oriented design](design_develop/OO_development.md)\n1. Thursday |10:15-11:00|Richel |[Function design](function_design/README.md)\n2. Thursday |11:15-12:00|Richel |[Expressive data type](data_structures/expressive_data_type.md),\n3. Thursday |11:15-12:00|Richel |[has-a relation](data_structures/has_a_relation.md)\nLUNCH\n6. Thursday |13:00-14:00|Lars   |[Modular programming](./modularity/modular.md)\n5. Thursday |14:15-15:00|Richel |[Class design](data_structures/class_design.md),\n7. Thursday |15:15-16:00|Richel |[Continuous integration](continuous_integration/README.md)\n</code></pre> <p>I checked Lars' material, I think the current order will work :-)</p> <ul> <li> <p>[x] Evaluation question</p> </li> <li> <p>I understand why function design is important</p> </li> <li>I can give some features of good function design</li> <li>I can give a function a proper name</li> <li>I can criticise functions</li> <li>I can write a class to express what the data it contains</li> <li>I understand difference between composition and aggregation</li> <li>I understand the type of relation 'composition' is</li> <li>I understand the type of relation 'inheritance' is</li> <li>I can write a class that is composed of another class</li> <li>I understand what an invariant is</li> <li>I can write a class that protects an invariant</li> </ul> <p>Some questions for Friday evaluation:</p> <ul> <li>git from command line or git from VS Code?</li> <li>name a maximal of 3 topics you want us to discuss to be removed</li> <li>name a maximal of 3 topics you want us to discuss to put more time in</li> <li>more theory or more exercises?</li> <li>more theory or more work on learners' project?</li> </ul>"},{"location":"lesson_plans/2024_autumn/20241122_richel/","title":"Lesson plan Autumn 2024","text":"<ul> <li>Author: Richel</li> <li>Date: 2024-10-22</li> </ul>"},{"location":"lesson_plans/2024_autumn/20241122_richel/#some-questions-for-friday-evaluation","title":"Some questions for Friday evaluation","text":"<ul> <li>git from command line or git from VS Code?</li> <li>name a maximal of 3 topics you want us to discuss to be removed</li> <li>name a maximal of 3 topics you want us to discuss to put more time in</li> <li>more theory or more exercises?</li> <li>more theory or more work on learners' project?</li> </ul>"},{"location":"lesson_plans/2024_autumn/20241122_richel/#status","title":"Status","text":"<ul> <li>Implement the project as a package 4/10</li> <li>Optimisation misconceptions 3/10</li> <li>Big O 3/10</li> <li>Runtime speed profiles 3/10 After lunch:</li> <li>Wrap-up</li> <li>Confidence and retrospect</li> </ul> <p>So 4 things before 8:30, let's plan:</p> <ul> <li>[x] 6:15-6:45 Implement the project as a package 6/10</li> </ul> <p>I want to add to upload our package to test PyPi, but no time.</p> <ul> <li>[x] 6:45-7:15 Optimisation misconceptions 6/10</li> <li>[x] 7:15-7:45 Big O 5/10</li> <li>[x] 7:45-8:15 Runtime speed profiles 6/10</li> <li> <p>[ ] 8:15-8:30 check pages</p> </li> <li> <p>I understand how to methodically optimize the runtime speed of my code</p> </li> <li>I understand what Big O is</li> <li>I can create a Big O profile of my project</li> <li>I can read a runtime speed profile</li> <li>I can create a runtime speed profile</li> </ul>"},{"location":"lesson_plans/2024_autumn/disp_monday_morning/","title":"Monday morning sessions by Bj\u00f6rn","text":"","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#intro-with-course-overview","title":"Intro with course overview","text":"<ul> <li>no Menti?</li> </ul>","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#introduction","title":"Introduction","text":"<ul> <li> <p>LOs</p> <ul> <li>Identify the main topics and objectives for the week's lessons.</li> <li>Evaluate the importance of engaging with course content and identify strategies to maintain interest and motivation throughout the week.</li> <li>We will set the start in why a formalized development of software is needed.</li> </ul> </li> <li> <p>Content former</p> <ul> <li>what is software?<ul> <li>--software concepts--</li> <li>types</li> <li>outcome</li> <li>object orientation vs functional + modular coding</li> <li>example (too long)</li> <li>SDLC</li> </ul> </li> <li>SDLC tools<ul> <li>steps</li> <li>planning<ul> <li>top-down vs bottom-up</li> <li>UML</li> <li>--pseudocode--</li> </ul> </li> <li>testing</li> <li>source version control</li> <li>collab</li> <li>reproducibility</li> <li>documentation</li> </ul> </li> </ul> </li> <li> <p>Demo/discussion/exercise former</p> <ul> <li>user input: what kind of development?</li> <li>--demo: wrf workflow--</li> <li>--code example: planet--</li> </ul> </li> <li> <p>Content suggestion</p> <ul> <li>what is software?<ul> <li>--software concepts--</li> <li>types</li> <li>outcome</li> <li>example</li> <li>SDLC</li> </ul> </li> <li>SDLC tools<ul> <li>steps</li> <li>planning<ul> <li>top-down vs bottom-up</li> <li>UML</li> <li>--pseudocode--</li> </ul> </li> <li>testing</li> <li>source version control</li> <li>collab</li> <li>reproducibility</li> <li>documentation</li> </ul> </li> </ul> </li> <li> <p>Exercise</p> </li> </ul>","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#sdlc-tools","title":"SDLC tools","text":"<ul> <li> <p>LOs</p> <ul> <li>Compare and contrast various software development tools and justify their relevance to specific development tasks.</li> </ul> </li> <li> <p>Content</p> </li> </ul>","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#basic-git","title":"Basic Git","text":"<p>Command line with https: BC+L+R, uses command line</p>","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#los","title":"LOs","text":"","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#get-started-with-gitgithub","title":"Get started with Git/GitHub","text":"<pre><code>- Demonstrate the ability to initiate and manage a software development project using Git and GitHub.\n\n- Content\n    - Execute basic Git commands to perform version control tasks and manage project repositories effectively.\n     - get started with planning the project\n</code></pre>","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#literature-on-why","title":"Literature on why","text":"<p>Search through Google Scholar for 'git best practices' resulted among others:</p> <pre><code>Tsitoara, Mariot, and Mariot Tsitoara. \"Git best practices.\" Beginning Git and GitHub: A Comprehensive Guide to Version Control, Project Management, and Teamwork for the New Developer (2020): 79-86.\nTepavac, Igor, et al. \"Version Control Systems, Tools and Best Practices: Case Git.\" CASE 27-Razvoj poslovnih i informati\u010dkih sustava. 2015.\n</code></pre> <p>https://uppmax.github.io/programming_formalisms/reading/</p>","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_autumn/disp_monday_morning/#get-started-with-git-and-project","title":"get started with git and project","text":"<p>basic git and setup and project start, 2 hours, also for people that know git</p>","tags":["lesson","plan","preparation"]},{"location":"lesson_plans/2024_summer/","title":"Lesson plans for autumn 2024","text":"<ul> <li>Richel's lesson plans</li> </ul>"},{"location":"lesson_plans/2024_summer/richel/","title":"Lesson plans","text":"<ul> <li>Autumn 2024, around April</li> </ul>"},{"location":"lesson_plans/2024_summer/richel/#progress","title":"Progress","text":"When What Status TU 13:00-14:00 Pair programming 1 Draft of content, draft of exercises TU 14:00-14:45 Pair programming 2 Draft of content, draft of exercises TU 15:00-15:45 TDD 1 [1] Draft of content, draft of exercises WE 10:15-11:00 Switch branch No content, draft of exercises WE 13:00-14:00 Merge, PR, review No content, draft of exercises WE 14:15-15:00 formal testing 1 [2] Draft of content, draft of exercises WE 15:15-15:45 formal testing 2 Draft of content, draft of exercises TH Data structures Draft of content, draft of exercises TH Algorithms Draft of content, draft of exercises TH Optimization Draft of content, draft of exercises <ul> <li>[1] This hour falls off at the end of the day</li> <li>[2] Need more hours of TDD</li> </ul> <p>TODO:</p> <ul> <li>[ ] Tie exercises to course project</li> <li>[ ] Go through material again</li> </ul>"},{"location":"lesson_plans/2024_summer/richel/#suggest-course-schedules","title":"Suggest course schedules","text":"<p>These are, I'd say, the dependencies in the course:</p> <pre><code>flowchart TD\n\n  classDef bjorn_node fill:#ddf,color:#000,stroke:#00f\n  classDef lars_node fill:#dfd,color:#000,stroke:#0f0\n  classDef richel_node fill:#fdd,color:#000,stroke:#f00\n\n  subgraph day_1\n    pair_programming[Pair programming]:::richel_node\n    git_basic[git basic workflow]:::bjorn_node\n    class_design[Class design]:::lars_node\n  end\n  subgraph day_2\n    class_diagram[Create project's class diagram]:::lars_node\n    tdd[TDD]:::richel_node\n  end\n  subgraph day_3\n    testing[Testing]:::richel_node\n    code_reviews[Code reviews]:::richel_node\n    git_branches[git branches]:::bjorn_node\n  end\n  subgraph day_4\n    data_structures[Data structures]:::richel_node\n    algorithms[Algorithms]:::richel_node\n  end\n  subgraph day_5\n    modular_programming[Modular programming]:::lars_node\n    optimisation[Optimisation]:::richel_node\n  end\n\n\n  class_design -.-&gt; git_basic\n  git_basic &lt;-.-&gt; pair_programming\n  class_design &lt;-.-&gt; pair_programming\n  tdd &lt;--&gt; pair_programming\n  git_basic --&gt; git_branches\n  pair_programming --&gt; code_reviews\n  git_branches --&gt; code_reviews\n  class_design --&gt; class_diagram\n  class_diagram --&gt; tdd\n  git_basic --&gt; tdd\n  tdd --&gt; testing\n  git_branches --&gt; testing\n  code_reviews --&gt; data_structures\n  testing --&gt; data_structures\n  testing --&gt; code_reviews\n  data_structures --&gt; algorithms\n  algorithms --&gt; modular_programming\n  algorithms --&gt; optimisation</code></pre> <p>The schedule I suggest:</p> Day Time Teacher Subject Monday 09:00-12:00 Lars Class design (in groups, on repo, using web interface only) Monday 13:00-16:00 Bj\u00f6rn git basic (in groups, on repo) Tuesday 09:00-12:00 Lars Create project's class diagram (using git) Tuesday 13:00-16:00 Richel pair programming + TDD Wednesday 09:00-12:00 Bj\u00f6rn git branches Wednesday 13:00-16:00 Richel TDD + Code reviews Thursday 09:00-12:00 Richel Data structures Thursday 13:00-16:00 Richel Algorithms Friday 09:00-12:00 Lars Modular programming Friday 13:00-16:00 R (M) Optimisation <ul> <li>I think we should always work in groups as it is recommended by the literature,    unless there is a good reason not to.    Among others, these are best practices 'Principle 4: Must encourage teamwork and cooperation among students' [Saiyad et al., 2020]    and 'Promoting group interaction, collaboration, and teamwork' [Fatimah et al., 2020]</li> <li>I think class design should go before git,    as this follows the 'from big to small' idea</li> <li>I enjoy 1 full day between git basics and git branches:    this gives a learner some time to get to feel git</li> </ul>"},{"location":"lesson_plans/2024_summer/richel/#principles-from-saiyad-et-al-2020","title":"Principles from [Saiyad et al., 2020]","text":"<ul> <li>Principle 1: Teaching\u2013Learning methods must match curriculum and objectives</li> <li>Principle 2: Must encourage synchronous and asynchronous teacher\u2013student interaction</li> <li>Principle 3: Promote higher order thinking skills and communication skills</li> <li>Principle 4: Must encourage teamwork and cooperation among students</li> <li>Principle 5: Must encourage active learning</li> <li>Principle 6: Must encourage development of self-directed learning</li> <li>Principle 7: Must provide opportunities for online summative and formative assessment</li> <li>Principle 8: Must have an inbuilt mechanism for prompt feedback</li> <li>Principle 9: Must encourage effective time management and timely task completion</li> <li>Principle 10: Must communicate high expectations from each stakeholder</li> <li>Principle 11: Must respect diverse talents and ways of learning</li> <li>Principle 12: Must have mechanism for monitoring development and mentoring</li> </ul>"},{"location":"lesson_plans/2024_summer/richel/#list-of-pedagogical-skills-from-fatimah-et-al-2020","title":"List of Pedagogical Skills from [Fatimah et al., 2020]","text":"<p>Effective online instructors should understand the fundamentals of online teaching and pedagogy. They must demonstrate this understanding through applying a large number of principles and strategies. These principles and strategies include:</p> <ul> <li>Learning theories, such as learning styles, the adult learning theory, the learner-centered approach, and collaborative learning;</li> <li>Designing and implementing appropriate instructional strategies, as well as classroom assessment and student engagement techniques;</li> <li>Organizing and facilitating students\u2019 participation and providing guidance and support as needed;</li> <li>Using criterion-based assessment to evaluate individual and group performance;</li> <li>Motivating students and showing enthusiasm and interest;</li> <li>Encouraging knowledge construction based upon learners\u2019 prior knowledge and life experience;</li> <li>Fostering learners\u2019 self-assessment and reflection; and</li> <li>Promoting group interaction, collaboration, and teamwork</li> </ul>"},{"location":"lesson_plans/2024_summer/richel/#references","title":"References","text":"<ul> <li>[Fatimah et al., 2020] Albrahim, Fatimah A. \"Online teaching skills and competencies.\" Turkish Online Journal of Educational Technology-TOJET 19.1 (2020): 9-20.</li> <li>[Saiyad et al., 2020] Saiyad, Shaista, et al. \"Online teaching in medical training: Establishing good online teaching practices from cumulative experience.\" International Journal Of Applied And Basic Medical Research 10.3 (2020): 149.    Article</li> </ul>"},{"location":"lesson_plans/2025_autumn/","title":"Lesson plans for autumn 2025","text":"Day Teacher Lesson plans 1 Richel Lesson plan 2 Richel Lesson plan 3 Richel Lesson plan 4 Richel Lesson plan 5 Richel Lesson plan"},{"location":"lesson_plans/2025_autumn/20251023_richel/","title":"Lesson plan Day 1","text":"<ul> <li>Author: Richel</li> <li>Date: 2025-10-23</li> </ul>"},{"location":"lesson_plans/2025_autumn/20251023_richel/#2025-10-17","title":"2025-10-17","text":"<p>I've cleaned up the repositories. This course iteration, I will try to invest as much preparation time as the others.</p> <p>I have no teaching that day.</p> Day Status 1 No teaching 2 ? 3 ? 4 ? 5 ?"},{"location":"lesson_plans/2025_autumn/20251023_richel/#2025-10-23","title":"2025-10-23","text":"<p>I discussed with BC about a parallel session for the git experts.</p> <p>If there are any, I will:</p> <ul> <li>Confirm their expertise</li> <li>Observe if they can do branching</li> </ul>"},{"location":"lesson_plans/2025_autumn/20251024_richel/","title":"Lesson plan Day 2","text":"<ul> <li>Author: Richel</li> <li>Date: 2025-10-24</li> </ul> <p>My teaching:</p> Day Time Teacher Subject Status Friday 10:15-11:00 Richel Issues Good Friday 11:15-12:00 Richel assert Good Friday 13:00-14:00 Richel TDD 1 Good Friday 14:15-15:00 Richel TDD 2 Good Friday 15:00-15:40 Richel Formal testing framework Good <p>I think I should, as usual:</p> <ul> <li>[ ] Talk about me</li> </ul> <p>Based on the Retrospect of the day before, I feel I need to fix some things:</p> <ul> <li>[ ] Discuss the course website</li> <li>[ ] Discuss the evaluation form</li> <li>[ ] Discuss the course project website</li> <li>[ ] Discuss the VSCode way, next to the git commands   Show the course's git course material</li> </ul> <p>Then, just follow the course material: it is ready!</p>"},{"location":"lesson_plans/2025_autumn/20251027_richel/","title":"Lesson plan Day 3","text":"<ul> <li>Author: Richel</li> <li>Date: 2025-10-27</li> </ul> <p>My teaching:</p> Day Time Teacher Subject Status Monday 13:00-14:00 Richel Pair programming Done Monday 14:15-15:00 Richel Pair programming Done Monday 15:15-15:40 Richel Formal testing framework Done <p>Based on the Retrospect of the day before, I feel I need to fix some things:</p> <ul> <li>[ ] Discuss my reflection, <code>https://uppmax.github.io/programming_formalisms/reflections/2025_autumn/20251024/</code></li> <li>[ ] Show TDD examples:<ul> <li>Conquer Chess, at <code>https://github.com/richelbilderbeek/conquer_chess/blob/main/src/test_game.cpp#L57</code></li> <li>beautier, at <code>https://github.com/ropensci/beautier/blob/main/tests/testthat/test-check_param.R</code></li> </ul> </li> <li>[ ] Discuss TDD at a bigger scale, <code>https://uppmax.github.io/programming_formalisms/tdd_at_bigger_scale/</code></li> </ul> <p>Then, just follow the course material: it is ready!</p>"},{"location":"lesson_plans/2025_autumn/20251028_richel/","title":"Lesson plan Day 4","text":"<ul> <li>Author: Richel</li> <li>Date: 2025-10-28</li> </ul> <p>My teaching:</p> Day Time Teacher Subject Status Tuesday 09:00-09:45 Richel Function design Done Tuesday 10:00-10:45 Richel Expressive data type Done Tuesday 13:00-14:00 Richel Has-a relation, class design Done Tuesday 15:15-15:40 Richel Continuous integration Done <ul> <li>[ ] Go over the reflection at https://uppmax.github.io/programming_formalisms/reflections/2025_autumn/20251027/</li> <li>[ ] Add an extra session with group exercises   Do so by starting with continuous integration.   Here they can learn how to write clean enough code</li> <li>[ ] After CI, do testing framework</li> <li>[ ] After that, continue with regular schedule</li> <li>[ ] Clarify how to work with messy data</li> </ul>"},{"location":"lesson_plans/2025_autumn/20251029_richel/","title":"Lesson plan Day 5","text":"<ul> <li>Author: Richel</li> <li>Date: 2025-10-29</li> </ul> <p>My teaching:</p> Day Time Teacher Subject Status Wednesday 09:00-09:45 Richel Implement the project as a package Done Wednesday 10:00-11:00 Richel Runtime speed profiles, Improve run-time speed Done <p>My course material is good enough. I feel I have invested enough time in the course. I instead focus on improving the course.</p> <p>I hope we ask the following question to our learners:</p> <p>Imagine you are boss. How would you improve the Programming Formalisms course? Do consider that if you want more of something, what would you want less of?</p>"},{"location":"lesson_plans/2025_autumn/20251029_richel/#my-questions-for-students","title":"My questions for students","text":"<p>Less time, more time, remove or good as it is?</p> <ul> <li>working on a project</li> <li>git basic workflow (i.e. no branches)</li> <li>git workflow with branches</li> <li>issues</li> <li>kanban board</li> <li>Risk analysis</li> <li>Design</li> <li>Object oriented design</li> <li>Modularity</li> </ul> <p>My answers:</p> <ul> <li>working on a project: remove</li> <li>git basic workflow (i.e. no branches): more hands-on</li> <li>git workflow with branches: more hands-on</li> <li>issues: remove</li> <li>kanban board: remove</li> <li>Risk analysis: remove</li> <li>Design: remove</li> <li>Object oriented design: remove</li> <li>Modularity: remove</li> </ul>"},{"location":"lesson_plans/2025_summer/","title":"Lesson plans for summer 2025","text":"Day Lesson plan 1 Lesson plan 2 Lesson plan 3 Lesson plan 4 Lesson plan 5 Lesson plan"},{"location":"lesson_plans/2025_summer/20250505_richel/","title":"Lesson plan Day 1","text":"<ul> <li>Author: Richel</li> <li>Date: 2025-05-05</li> </ul> <p>I won't be teaching this day.</p> <ul> <li>[ ] Check what is needed for other teachers</li> <li>[x] Update URLs: data moved from <code>https://www.smhi.se/polopoly_fs/1.175744!/Bergstr%C3%B6m_Moberg_Uppsala.pdf</code>   to PDF   and <code>https://www.smhi.se/polopoly_fs/1.2866!/uppsala_tm_1722-2022.zip</code>   to Data</li> <li>[Not done] Check if NBIS advertisement was done</li> <li>[ ] Check that I can help: request worked-out examples<ul> <li>This will fail for Monday, at least for the afternoon session</li> </ul> </li> </ul>"},{"location":"lesson_plans/2025_summer/20250505_richel/#literature-search-on-design-requirements","title":"Literature search on design requirements","text":"<p>Seems useful:</p> <ul> <li>Joshi, Shraddha, et al. \"Requirements in Engineering Design: What are we teaching?.\" Tools and methods for competitive engineering 1.38 (2012): 1319-1326.</li> </ul> <p>Seems useful:</p> <ul> <li>Fricker, Samuel A., Rainer Grau, and Adrian Zwingli. \"Requirements engineering: best practice.\" Requirements engineering for digital health. Cham: Springer International Publishing, 2014. 25-46.</li> </ul> <p>Seems useful:</p> <ul> <li>Young, Ralph R. \"Recommended requirements gathering practices.\" CrossTalk 15.4 (2002): 9-12.</li> </ul> <p>Seems promising, not read yet:</p> <ul> <li>Young, Ralph R. Project requirements: a guide to best practices. Berrett-Koehler Publishers, 2006.</li> </ul>"},{"location":"lesson_plans/2025_summer/20250506_richel/","title":"Lesson plan Day 2","text":"<ul> <li>Author: Richel</li> <li> <p>Date: 2025-05-06</p> </li> <li> <p>[ ] Provide worked-out answer for exercises</p> </li> <li>[ ] Check that I can help: request worked-out examples</li> </ul>"},{"location":"lesson_plans/2025_summer/20250507/","title":"Lesson plan Day 3","text":"<ul> <li>Author: Richel</li> <li>Date: 2025-05-07</li> </ul> <p>From the reflection on the previous day, I will do:</p> <ul> <li>Share the reflection results and the ideas from it:<ul> <li>We will use the requirements that I prepared</li> </ul> </li> <li>I will go through the answers at the end of a session</li> </ul>"},{"location":"lesson_plans/2025_summer/20250507_richel/","title":"Lesson plan Day 3","text":"<ul> <li>Author: Richel</li> <li> <p>Date: 2025-05-07</p> </li> <li> <p>[ ] Provide worked-out answer for exercises</p> </li> <li>[ ] Check that I can help: request worked-out examples</li> </ul>"},{"location":"lesson_plans/2025_summer/20250508_richel/","title":"Lesson plan Day 4","text":"<ul> <li>Author: Richel</li> <li> <p>Date: 2025-05-08</p> </li> <li> <p>[ ] Provide worked-out answer for exercises</p> </li> <li>[ ] Check that I can help: request worked-out examples</li> </ul>"},{"location":"lesson_plans/2025_summer/20250509_richel/","title":"Lesson plan Day 5","text":"<ul> <li>Author: Richel</li> <li> <p>Date: 2025-05-09</p> </li> <li> <p>[ ] Provide worked-out answer for exercises</p> </li> <li>[ ] Check that I can help: request worked-out examples</li> <li>[ ] Use the NBIS STF evaluation</li> </ul>"},{"location":"meeting_notes/","title":"Meeting notes","text":"<p>The meeting notes.</p> <ul> <li>2022 autumn</li> <li>20230419</li> <li>20230426</li> <li>20230510</li> <li>20230524</li> <li>20230526</li> <li>20230913</li> <li>20230920</li> <li>20230925</li> <li>20230927</li> <li>20231020</li> <li>20231110</li> <li>20231115</li> <li>20240207</li> <li>20240221</li> <li>20240228</li> <li>20240304</li> <li>20240306</li> <li>20240320</li> <li>20240327</li> <li>20240403</li> <li>20240410</li> <li>20240417</li> <li>2024_autumn</li> <li>20240904</li> <li>20240911</li> <li>20240918</li> <li>20240926</li> <li>20241010</li> <li>20241018</li> <li>20241025</li> <li>20241029</li> <li>20241029_nbis_training_hub</li> <li>20241108</li> <li>20241115</li> <li>20241129</li> <li>20241217</li> </ul> <p><code>next.md</code> (if present) are the notes for a yet-to-be-scheduled meeting.</p>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/","title":"Meeting notes for autumn course 2022","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#current-teachersta","title":"Current Teachers/TA","text":"<ul> <li>[name=Lars Eklund], lars.eklund@uppmax.uu.se(Software development and modular programming)</li> <li>[name= Bj\u00f6rn Claremar], bjorn.claremar@uppmax.uu.se(Introduction and Git)</li> <li>[name=Marcus Lundberg],marcus.lundberg@uppmax.uu.se(Algorithms and Datastructures)</li> <li>[name= Matias Piqueras],matias.piqueras@uppmax.uu.se(TDD examples and github actions)</li> <li>[name=Rich\u00e8l Biderbeek], richel.bilderbeek@uppmax.uu.se (TDD)</li> <li>[name=Jon Ander Novella],jon.novella@nbis.se (Social coding)</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#participation-list","title":"Participation List","text":"<ul> <li>Lars Eklund, lars.eklund@uppmax.uu.se</li> <li>Bj\u00f6rn Claremar, bjorn.claremar@uppmax.uu.se</li> <li>Jonas S\u00f6derberg, jonas.soderberg@scilifelab.se(as student)</li> <li>Diana Iusan, diana.iusan@uppmax.uu.se</li> <li>Pavlin Mitev, pavlin.mitev@uppmax.uu.se (as student)</li> <li>Jon Ander Novella, jon.novella@scilifelab.se</li> <li>Douglas Scofield</li> <li>Marcus Lundberg</li> <li>Martin</li> <li>Per</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#helper-schedule","title":"Helper schedule","text":"<p>We need someone each day to administer and answer questions on HackMd. Please fill in your name for the days where you can help</p> Day Topic Helpers morning Helpers afternoon Monday Intro Lars Lars Tuesday Algorithms and data structures Matias, Lars Lars, Bj\u00f6rn Wednesday Paradigms Lars, Bj\u00f6rn Lars Thursday Testing Lars, Matias, Bj\u00f6rn Lars Friday Optimization Lars, Bj\u00f6rn Lars","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#prerequisites","title":"Prerequisites","text":"<p><code>https://github.com/UPPMAX/programming_formalism/blob/main/setup.md</code></p>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#participaton-list-meeting-5-13-oct","title":"Participaton List meeting 5 (13 Oct)","text":"<ul> <li>Bj\u00f6rn</li> <li>Lars</li> <li> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#matias","title":"Matias","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#links","title":"Links","text":"<ul> <li>General<ul> <li>https://github.com/UPPMAX/programming_formalism</li> </ul> </li> <li>Intro<ul> <li>https://uppmax.github.io/programming_formalisms/</li> </ul> </li> <li>Test driven design<ul> <li><code>Broken link to a TDD repo of https://github.com/MatPiq</code></li> </ul> </li> <li>Link to the previous instance of the course<ul> <li>https://uppsala.instructure.com/courses/69215</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#bjorns-questions-for-intro-day","title":"Bj\u00f6rn's questions for Intro day","text":"<ul> <li>UML seems to require that I talk about Object orientation as well<ul> <li>How much?</li> <li>I will cover it in detail during the Paradigm as it is very important to understand the concepts of object orientation inorder to grasp modern modularisation in my oppinion.</li> <li>What do you cover in your lesson, Lars?   [x] class+sequence+ aktivitetsdiagram   [x] plantUML   [ ] Flow (aktivitetsdiagram men lite annorlunda pilar och h\u00f6rn etc...)</li> </ul> </li> </ul> <pre><code>st=&gt;start: HAS AN\nOWNER AND\nIS OPEN!\ne=&gt;end: RESOLVE\nop=&gt;operation: ASSIGN\nAGAIN\nop3=&gt;operation: SET\n\"NOBODY\",\nMAKE\nMARCUS\nAWARE\nop4=&gt;operation: WAIT\nop5=&gt;operation: STALL\nAND\nCOMMENT\nop6=&gt;operation: RESOLVE\nBUT\nCOMMENT\nop7=&gt;end: DONE\nop8=&gt;operation: NEW TICKET OR JIRA\n\ncond=&gt;condition: CAN\nI\nRESOLVE?\ncond2=&gt;condition: AWAITING\nUSER\nINPUT?\ncond3=&gt;condition: AWAITING\nEXTERNAL\nINPUT?\ncond4=&gt;condition: REQUEST\nSOLVED?\ncond5=&gt;condition: WORK\nNEEDED\nINTERNALLY?\n\nst-&gt;cond-&gt;cond2\nop3-&gt;op\nop4-&gt;cond\nop6-&gt;cond5\ncond(yes)-&gt;cond2\ncond(no)-&gt;op3\ncond2(yes)-&gt;cond4\ncond2(no)-&gt;cond3\ncond3(yes)-&gt;op5\ncond3(no)-&gt;e\ncond4(yes)-&gt;op6\ncond4(no)-&gt;op4\ncond5(yes)-&gt;op8\ncond5(no)-&gt;op7\n</code></pre> <pre><code>digraph{\n\"Enterprise\"\nKirk, Picard, Archer\nEnterprise -&gt; Kirk\nEnterprise -&gt; Original, A, B, C\n}\n</code></pre> <pre><code>start\nif( HAS AN\nOWNER AND IS OPEN) then(yes)\n if (CAN I RESOLVE) then\n if (waiting user input) then\n elseif (condition D) then (yes)\n  :Text 4;\nelse ()\n  :Text else;\nendif\nstop\n</code></pre>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#_1","title":"Meeting notes for autumn course 2022","text":"<pre><code>Actor --&gt;(test)\n</code></pre> <pre><code>User -&gt; Authenticator : request\nAuthenticator -&gt; User : respond &lt;token&gt;\n</code></pre>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#participation-list-meeting-4","title":"Participation List meeting 4","text":"<ul> <li>Lars Eklund</li> <li>Matias (TDD)</li> <li>Bj\u00f6rn (intro)</li> <li>Per Johansson (TDD)</li> <li>Jon Ander Novella ()</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#schedule","title":"Schedule","text":"<ul> <li> <p>Day1 Intro</p> <ul> <li>SDLC<ul> <li>waterfall</li> <li>cont I and D:s</li> </ul> </li> <li>version control</li> <li>reproducibility<ul> <li>personal use to general use</li> <li>dependencies</li> <li>platforms</li> </ul> </li> <li>planning: UML</li> <li> </li> </ul> </li> <li> <p>Day2 Algorithms+data structures</p> <ul> <li>intro</li> <li>storing</li> <li>searching for things</li> <li>sorting</li> <li>BLAST</li> <li>exercises</li> </ul> </li> <li>Day3-4 Paradigms: design patterns, modular code<ul> <li>How?</li> <li>Programming paradigms<ul> <li>SDLC and the models for the development process</li> <li>overview</li> </ul> </li> <li>Modular programming<ul> <li>design patterns introduction to element of reusable software modules</li> <li>what is module</li> <li>common interface design</li> </ul> </li> </ul> </li> <li>Day4 TDD, testing<ul> <li>first look</li> <li>types of tests</li> <li>TDD in practice (afternoon 13:00-16:00)<ul> <li>Testing in Python with pytest</li> <li>Automating testing with Github Actions</li> <li>Putting it all together</li> <li>\"Advanced\" topics</li> </ul> </li> </ul> </li> <li>Day5 Optimization: halvdag...?</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#documentation","title":"documentation","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#participaton-list-meeting-3","title":"Participaton List meeting 3","text":"<ul> <li>Lars Eklund</li> <li>Matias</li> <li>Bj\u00f6rn</li> <li>Marcus</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#status-intro-by-bjorn","title":"Status Intro by Bj\u00f6rn","text":"<ul> <li> <p>Different types of Scientific software:</p> <ul> <li>Your analysis of data<ul> <li>statistics</li> <li>figures</li> <li>visualization</li> </ul> </li> <li>tools for process data<ul> <li>many bioinformatics tools</li> </ul> </li> <li>workflows</li> <li>modelling (3D or mimic of nature)</li> <li>Web-service e.g. \"decision assistant\"</li> <li>Distributed package vs. one-time usage</li> </ul> </li> <li> <p>I'm learning about SDLC</p> <ul> <li>I'll arrange for 15 min summary</li> <li> <p>Partly applicable on data (standards, versioning, technical)</p> </li> <li> <p>intro like history, take aways from:</p> <ul> <li>OK korta ned...</li> <li>waterfall</li> <li>spiral model</li> <li>RUP (Lars har erfarenhet)</li> <li>DSDM (dynamic system development method)</li> <li>FDD (feature-driven development)</li> <li>Crystal method</li> <li>Scrum</li> <li>Lean</li> <li>Kanban</li> <li>Extreme Programming<ul> <li>pair programming</li> <li>TDD</li> </ul> </li> <li>Spotify</li> <li>DevOps<ul> <li>continous Integration, development and deployment</li> </ul> </li> <li>CMMI (Capability maturity model integration)</li> <li> </li> </ul> </li> <li>Input from CR course</li> <li>dokumentation<ul> <li>in-code (less needed if good functions names)</li> <li>readme</li> <li>kort om sphinx</li> </ul> </li> <li>git/github (exercise)</li> <li>recording dependencies/packages<ul> <li>NOT computational steps</li> <li>Reproducibility: We can control our code but how can we control dependencies?</li> <li>10-year challenge: Try to build/run your own code that you have created 10 (or less) years ago. Will your code from today work in 5 years if you don\u2019t change it?</li> <li>Dependency hell</li> </ul> </li> <li>briefly about social coding<ul> <li>NOT licensing?</li> </ul> </li> <li>testing<ul> <li>intro (how much?)<ul> <li>defensive programming?</li> <li>unit tests?</li> <li>integration</li> <li>regression</li> <li>TDD</li> <li>continuous integration</li> </ul> </li> <li>github actions</li> </ul> </li> <li>modular code<ul> <li>intro</li> </ul> </li> <li>UML</li> <li>pseudokod</li> <li>Concepts are included in each subsession<ul> <li>but can be summarised in a summary session first day</li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#six-sigma","title":"Six Sigma","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#participaton-list-meeting-2","title":"Participaton List meeting 2","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#teachers","title":"Teachers","text":"<ul> <li>Lars Eklund</li> <li>Marcus Lundberg</li> <li>Bj\u00f6rn</li> <li>Diana</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#advertising-text-for-the-snic-training-newsletter","title":"Advertising text for the SNIC training newsletter","text":"<p>Programming Formalism Course - October 24-28 (online)</p> <p>This full 5-day course aims to give life scientists, bioinformaticians, and other scientists with some experience in programming and scripting an understanding of the underlying principles of software development, design, and programming. The course aims to strengthen the understanding of more advanced programming concepts, ability to produce more reusable scripts through modular programming and to enable a better understanding of how to evaluate a script or programs performance.</p> <p>We will cover an introduction to Algorithms and Data structures, Programming Paradigms especially structured and object oriented programming, and to give an overview of other paradigms like functional programming. Modular development and (code) reusability, testing and optimisation.</p> <p>We will cover theory with bridging practical examples and applications to enhance the theoretical understanding of the principles.</p> <p>For more information and registration, please visit: <code>[broken link to Programming Formalisms course at UPPMAX website]</code></p>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#contributors","title":"Contributors","text":"<p>/any one interested in helping out. Please add name and email/</p> <ul> <li>Tomas Reed (tomas.reed@liu.se)</li> <li>Jon Ander Novella (jon.novella@scilifelab.se)</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#format-and-length","title":"Format and length","text":"<ul> <li>Full days, online 9-16</li> <li>Lectures/seminars and \"homework\" exercises</li> <li>Morning recap+semin</li> <li>Afternoon exercise</li> <li>pair teaching</li> <li>single for more theoretical parts</li> <li>Toy project that is built-upon thought the course, possibly as examination too</li> <li>Breakout rooms</li> <li>assignments and quizzes</li> <li>Menti for interaction</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#when-month-at-least","title":"When? (month at least!)","text":"<ul> <li>late October, week 43 oct 24-28</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#goal","title":"Goal","text":"<p>\"Turning scripters into computer scientists\" Add theory to bolster already present practical skills</p>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#expectations","title":"Expectations","text":"<ul> <li>Code efficiency, speed</li> <li>Code accuracy, correctness of results</li> <li>Availability and sharability</li> <li>understanding of development concepts</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Decent scripting skills</li> <li>What is a skilled scripter.. coder</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#material","title":"Material","text":"<ul> <li>https://uppsala.instructure.com/courses/69215</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#topics","title":"Topics","text":"<ul> <li>other languages and ways of understanding which is usefull</li> <li>Documentation<ul> <li>part of all modules?</li> </ul> </li> <li>\"Project\" in pseudocode over all week<ul> <li>updated with new parts every day under source control</li> </ul> </li> <li>Formalism of breaking down the problem</li> <li>Use Practical problems as introducing the complexities</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#which-modules","title":"Which modules","text":"<ul> <li>Setup meeting before course start<ul> <li>reminders of deadlines</li> </ul> </li> <li>Introduction (including source control) [name=Bj\u00f6rn] 1d<ul> <li>focus on the concepts<ul> <li>parts already in other courses, so just recap of this</li> <li>like: https://nbis-reproducible-research.readthedocs.io/en/course_1911/</li> </ul> </li> <li>SDLC intro software development lifecycle 15 min</li> <li>waterfall, spiral</li> <li>source control<ul> <li>git as example</li> <li>collaborative sharing (github)</li> <li>(peer programming:  non-real-time co-operation)</li> </ul> </li> <li>reproducible research? (canvas course)<ul> <li>recording dependencies etc...</li> <li>\"social coding\"</li> </ul> </li> <li>development cycle?<ul> <li>ex. maintenance</li> <li>code management plan!</li> <li>for project applications?</li> </ul> </li> <li>Exercises for this part?<ul> <li>sketching the project flow.</li> <li>adding source control?</li> </ul> </li> <li>Introduction to UML:<ul> <li>introduction to flowcharts</li> </ul> </li> <li>Educational outcome course</li> <li>sorting out the concepts<ul> <li>Peer programming is QC/QA collab sharing</li> <li>Pair programming is real-time development teqch to increase  algorithm implementation, pass off, introduction</li> <li>Agile development, the Agile manifest (Not a full process)</li> <li>OOSE-like Rational Unifed Proces</li> <li>TDD</li> </ul> </li> </ul> </li> <li> <p>First day exercises:     (a short paragraph or two)</p> <ul> <li>What do you mean with:<ul> <li>scripts?</li> <li>programming?</li> <li>software development?</li> <li>algorithm?</li> </ul> </li> </ul> </li> <li> <p>Algorithms and datastructures ([name=Marcus]) 1d</p> <ul> <li>aspect of complexity of algorithms</li> <li>common algorithms</li> <li>Big(O)</li> </ul> </li> <li>Development  paradigms([name=Lars]) 1d</li> <li>2h, Menti topics<ul> <li> <ul> <li>SDLC,RAD,RUP, Spiral model,(Funnel visualisation) [name=Lars]         - Extreme Programming and Prototype driven development    short historical overview.  -MENTI FOR INTRaction  development strategies and design strategies</li> </ul> </li> </ul> </li> <li>-UML Digagrams -20 min</li> <li>-UML exersise 10 min<ul> <li>functional programming(short intro to concepts)</li> <li>Iterative/Declarative programming</li> <li>object-oriented <code>[as intro to modular]</code> (Lars)</li> <li>concept of classifiaction and classes as a means of compartimalisation<ul> <li>Concept of inheretance as a mean of propagating comonallity -----LUNCH----</li> </ul> </li> </ul> </li> <li>Common development practices[name=Jon]<ul> <li>Choosing a software development methodology[name=Lars]</li> <li>Social coding (https://coderefinery.github.io/social-coding/social-coding/)</li> <li>Code reviews<ul> <li>Pair programming -two devlopers driver and navigator</li> <li>Exercise: pair develop two of your algorithms from yesterday coding. Switching roles.</li> <li>Present NBIS code development guidelines (https://github.com/NBISweden/development-guidelines)</li> <li>Exercise: How to do code reviews?</li> </ul> </li> </ul> </li> <li> <p>Modular programming and Design Patterns([name=Lars])2h Day 4</p> <ul> <li>Comon interface<ul> <li>Objects as means to information hiding</li> <li>Collections and Modules</li> </ul> </li> <li>collabortative development<ul> <li>Why are modules so important when working collaborativly</li> <li>One asset one file , How to create an environment that promotes easy sharing of work.</li> </ul> </li> </ul> </li> <li> <p>1h</p> </li> <li>Design Patterns([name=Lars]) 1h DAY 4<ul> <li>What is  a design pattern</li> <li>Common design patterns and there applications       -</li> </ul> </li> <li>Testing and TDD (Test Driven Design)([name=Per],[name=Matias] Practicals) 1d?<ul> <li>(sys Dev)</li> <li>Peer programming (code review)</li> <li>Checking others code, checking the module.</li> <li>13:00-16:00 Afternoon session TDD in practice: <code>[Broken link to matpiq's PF-TDD GitHub repo]</code></li> </ul> </li> </ul> Time Topic 13:00-13:30 Introduction to testing in Python 13:30-14:00 Automated testing using Github actions 14:00-14:15 Break 14:15-15:00 Putting it all together - code along 15:00-15:30 Exercises 15:30-16:00 Advanced Topics <ul> <li>Optimisation([name=Marcus])<ul> <li>right tool for the job</li> <li>how formal should I be?</li> <li>code optimisation</li> <li>Benchmarking Profiler, timing</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#complementary-course-suggestions","title":"Complementary course suggestions","text":"<p>// Courses that are useful in conjuction with this course</p> <ul> <li>Hackmd</li> <li>UML</li> <li>reproducable research</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#covered-by-other-courses","title":"Covered by other courses","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#next-meeting","title":"Next meeting","text":"<ul> <li>Weekly teachers meetings of Programming formalisms for life scientists and bioinformaticians course is on Thursdays 11-12  on zoom,https://uu-se.zoom.us/j/67602711000</li> <li>Passcode: 880630</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#questions-for-the-admissions-form","title":"Questions for the admissions form","text":"<p>Registration form: https://docs.google.com/forms/d/1VpzwuZXEawPTtEjEUhY33a_afpBs4ioZulX9UqhdzSo/edit?usp=sharing</p> <ul> <li>Name*?<ul> <li>short answer</li> </ul> </li> <li>Email*?<ul> <li>short answer</li> </ul> </li> <li>Affiliation?<ul> <li>short answer</li> </ul> </li> <li> <p>Briefly describe your background and experience in programming:</p> <ul> <li>long answer</li> </ul> </li> <li> <p>Do you plan to follow the whole course</p> <ul> <li>Yes/No</li> </ul> </li> <li>What do you expect to learn in this course?<ul> <li>short answer / free form</li> </ul> </li> <li>How did you learn about this course?<ul> <li>SNIC training newsletter</li> <li>NBIS ...</li> <li>UPPMAX website</li> <li>colleague</li> <li>other (free form)</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#participation-emails","title":"Participation emails","text":"<p>LE Paradigms, Introduction to formalised development</p>","tags":["meeting","notes"]},{"location":"meeting_notes/2022_autumn/#references","title":"References","text":"<p>[Bell, 2020] Bell, Mike. The fundamentals of teaching: A five-step model to put the research evidence into practice. Routledge, 2020. [Hattie, 2008] Hattie, John. Visible learning: A synthesis of over 800 meta-analyses relating to achievement. routledge, 2008.</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230419/","title":"Meeting 6 (April 19 2023)","text":""},{"location":"meeting_notes/20230419/#participaton-list","title":"Participaton List","text":"<ul> <li>Lars</li> <li>Bj\u00f6rn</li> <li>Rich\u00e8l</li> <li>Marcus</li> <li>Diana</li> </ul>"},{"location":"meeting_notes/20230419/#tentative-schedule","title":"Tentative schedule","text":"<ul> <li>Monday: Intro<ul> <li>Bj\u00f6rn?</li> </ul> </li> <li>Tuesday: SDLC + social coding<ul> <li>Lars</li> <li>Jon? (social and pair)</li> </ul> </li> <li>Wednesday: Modular programming + TDD (etc)<ul> <li>Lars</li> <li>Rich\u00e9l?</li> <li>Matias?</li> </ul> </li> <li>Thursday: Algorithms<ul> <li>Marcus</li> </ul> </li> <li>Friday: Optimization<ul> <li>Marcus</li> </ul> </li> </ul>"},{"location":"meeting_notes/20230426/","title":"Meeting 7 (April 26 2023)","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230426/#participaton-list","title":"Participaton List","text":"<ul> <li>Lars</li> <li>Bj\u00f6rn</li> <li>Rich\u00e8l</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230426/#things-to-check","title":"Things to check","text":"<ul> <li>PlantUML vs mermaid<ul> <li>[name=Lars]</li> <li>[name=Bj\u00f6rn]</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230426/#-change-formalism-to-formalisms-everywhere","title":"- Change formalism to formalisms everywhere","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230510/","title":"Meeting 8 (May 10 2023)","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230510/#participaton-list","title":"Participaton List","text":"<ul> <li>Lars</li> <li>Bj\u00f6rn</li> <li>Rich\u00e8l</li> <li>Jon</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230524/","title":"Meeting 9 (May 24 2023)","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230524/#participaton-list","title":"Participaton List","text":"<ul> <li>Lars</li> <li>Bj\u00f6rn</li> <li>Rich\u00e8l</li> <li>Jon</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230524/#agenda","title":"Agenda","text":"<ul> <li>status 5 min each</li> <li>There will be c. 1-2 hrs OO</li> <li>Question to each:<ul> <li>which Python testing framework, according to you, is best practice to use today?</li> <li>[x] unittest</li> <li>[ ] PyTest (CodeRefinery has material already)</li> <li>[ ] nose (Links)</li> <li>Bonus points if you have a reference to the literature</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230524/#intro-day","title":"Intro day","text":"<ul> <li>Restructure again</li> <li>Idea<ul> <li>Intro to programming and state problem<ul> <li>example matlab script without modularity</li> </ul> </li> <li>Intro to SDLC and the tools (theory)<ul> <li>models</li> <li>planning</li> <li>source/version control</li> <li>documentation</li> <li>reproducibility and sharing</li> <li>collaboration</li> <li>testing</li> </ul> </li> <li>Hands-on<ul> <li>planning<ul> <li>pseudocode of example matlab script</li> <li>uml of modular</li> </ul> </li> <li>startup of coding (first iteration)<ul> <li>coding (python) (copy-paste)</li> <li>in-code documentation</li> <li>isolated environment (python)</li> <li>working dir</li> <li>license</li> </ul> </li> <li>git and iterations<ul> <li>git init</li> <li>branching</li> <li>modular</li> <li>no testing</li> <li>\"backup on github\"</li> </ul> </li> <li>collaboration<ul> <li>centralized</li> </ul> </li> <li>deploy<ul> <li>short</li> </ul> </li> <li>documentation part 2<ul> <li>wiki</li> </ul> </li> </ul> </li> <li>Extra-reading</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230524/#-rather-important-stuff-but-due-to-time-limitations","title":"- Rather important stuff but due to time limitations...","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230526/","title":"Meeting 10 (May 26 2023) 9.00","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230526/#participation-list","title":"Participation List","text":"<ul> <li>Observers<ul> <li>Richel will not observe all, but will try to do:<ul> <li>Monday 11:00-12:00 @ Bj\u00f6rn</li> <li>Tuesday 11:00-12:00 @ Lars</li> <li>Wednesday 11:00-12:00 @ Jon</li> <li>Thursday 11:00-12:00 @ Lars Bj\u00f6rn -</li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/","title":"Meeting 13/9","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#agenda","title":"Agenda","text":"<p>When?</p> <ul> <li>suggested time Nov 20-24 (+2) Marcus can't</li> </ul> <p>(contact NGI, om p\u00e5 plats)    Where?</p> <ul> <li>Online or in uppsala</li> </ul> <p>Current learnings and experieces from last course.</p> <p>How?</p> <ul> <li> <p>larger more fully scoped excerise do we want and in which areas does that need to expand and be worked at</p> </li> <li> <p>Under vilken verksamhet ska vi h\u00e5lla kursen Uppmax eller NBIS</p> </li> <li>Hur m\u00e5nga studenter kommer fr\u00e5n NBIS sidan UPPMAX profiling p\u00e5 kursen/certifikat</li> <li> </li> <li>Reflections and learning from last course</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#contact-jonas-soderberg-for-design-of-common-course-certificate-and-also-nina-and-the-other-nbis-training-contact-roy-about-the-rshiny-thingiy","title":"Contact Jonas S\u00f6derberg for design of common course certificate. And also Nina and the other NBIS training, contact Roy about the RShiny thingiy.","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#certificates","title":"Certificates","text":"<p>Text for course certificate use https://rshiny.nbis.se/shiny-server-apps/shiny-certificate/ to create certificate</p> <p>&lt;&gt; has participated in the NBIS workshop Programming Formalisms held in Online during 29 May -- 2 June 2023. The workshop consisted of 40 hours of lectures and computer exercises. This full 5-day workshop aims to give scientists, bioinformaticians and other research engineers with some experience in programming and scripting an understanding of the underlying principles of software development, design, and programming. The workshop aims to strengthen the understanding of more advanced programming concepts, ability to produce more reusable scripts through modular programming and to enable a better understanding of how to evaluate a script or programs performance. This included the following topics: <ul> <li>Introduction to programming formalism</li> <li>Source control and GitHub</li> <li>Introduction to UML using plantUML</li> <li>Introduction to Algorithms</li> <li>Datatypes and data structures</li> <li>Introduction to Software Development Lifecycle</li> <li>common models</li> <li>planning</li> <li>source/version control</li> <li>documentation</li> <li>reproducibility and sharing</li> <li>collaboration</li> <li>testing</li> <li>Introduction to Modular programming and the modular programming paradigm</li> <li>Introduction to Social Coding and Pair Programming</li> <li>Introduction to Object orientation and Object oriented design</li> <li>Introduction to Test Driven Design and Testing (TDD)</li> <li>including to GitHub Actions</li> <li>automated testing</li> <li>Introduction to Design Patterns and Software reusability</li> </ul> <p>Course Leader | Lars Eklund, PhD Applications Expert UPPMAX/NBIS NBIS | Uppsala University</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#fall-course-in-december","title":"Fall course in December","text":"<p>we will start the first course meeting in August wednesday last week in august with resrvation for UPPMAX intro course.</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#weekly-zoom-meeting-wednesdays-1100","title":"Weekly Zoom meeting Wednesdays 11.00","text":"<p>https://uu-se.zoom.us/j/63272190301 (Passcode: 880630)</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#course-zoom","title":"course Zoom","text":"<p>Topic: Programming Formalisms Time: May 29, 2023 8:30 AM Stockholm</p> <p>Join Zoom Meeting https://uu-se.zoom.us/j/65052228138</p> <p>Meeting ID: 650 5222 8138 Passcode: 595312</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#qa-hackmd","title":"QA hackmd","text":"<p><code>[Broken link to a HackMD document]</code></p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#current-teachersta","title":"Current Teachers/TA","text":"<ul> <li>[name=Lars Eklund], lars.eklund@uppmax.uu.se</li> <li>[name= Bj\u00f6rn Claremar], bjorn.claremar@uppmax.uu.se</li> <li>[name=Marcus Lundberg],marcus.lundberg@uppmax.uu.se (Can't give the current course)</li> <li>[name= Matias Piqueras],matias.piqueras@uppmax.uu.se</li> <li>[name=Rich\u00e8l Biderbeek],richel.bilderbeek@uppmax.uu.se</li> <li>[name=Jon Ander Novella],jon.novella@nbis.se</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#assistants","title":"Assistants","text":"<ul> <li>[See schedule at https://github.com/UPPMAX/programming_formalisms#schedule]</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#participation-list","title":"Participation List","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#-diana-iusan-dianaiusanuppmaxuuse","title":"- Diana Iusan, diana.iusan@uppmax.uu.se","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#course-two","title":"Course two","text":"<ul> <li>Course time?<ul> <li>9.00-16.00?</li> </ul> </li> <li>Course Date?<ul> <li>29 May -- 2 June</li> </ul> </li> <li>Course Projects<ul> <li>first day: planetary app (broader audience than life scientists!)</li> <li> </li> </ul> </li> </ul> <p>At the end of day use (Scrum/Sprint)reflections as a feedback method for each day. First day may need to use other ways of gathering feedback. https://hackmd.io/hh9xENMvRrWWm-STsNCeJQ https://hackmd.io/YX32lWjSS5qu1r29zrbyig https://hackmd.io/--Qgp344TdOxC5uX-UWNQA https://hackmd.io/EUQ5PY10SeWj_JR5kTUNTA https://hackmd.io/naC4mOulSOSWv74YYf7xRg</p> <p>The registration link works but the landing page needs to be changed. I have downloaded the old responses and cleared the respones for new participants</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#second-fifth-day-easyblast-yes-that-is-the-plan-the-reason-is-that-the-easyblast-or-reduced-blast-is-complicated-enough-to-make-a-good-project-but-easy-enough-to-finish-somthing-in-4-days","title":"second-fifth day EasyBlast? Yes that is the plan, the reason is that the EasyBlast or Reduced blast is complicated enough to make a good project but easy enough to finish somthing in 4 days.","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230913/#advertising-text-for-the-snic-training-newsletter-course-2","title":"Advertising text for the SNIC training newsletter Course 2","text":"<p>Programming Formalisms Course - May 29- june 2 (online)</p> <p>This full 5-day course aims to give scientists, bioinformaticians and other research engineers  with some experience in programming and scripting an understanding of the underlying principles of software development, design, and programming. The course aims to strengthen the understanding of more advanced programming concepts, ability to produce more reusable scripts through modular programming and to enable a better understanding of how to evaluate a script or programs performance.</p> <p>We will cover an introduction to Algorithms and Data structures, Programming Paradigms especially structured and object oriented programming, and to give an overview of other paradigms like functional programming. Modular development and (code) reusability, testing and optimisation.</p> <p>We will cover theory with bridging practical examples and applications to enhance the theoretical understanding of the principles.</p> <p>For more information and registration, please visit: <code>[broken link to Programming Formalisms course at UPPMAX website]</code></p>","tags":["meeting","notes"]},{"location":"meeting_notes/20230920/","title":"Meeting 20/9","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20230920/#agenda","title":"Agenda","text":"<p>When?</p> <ul> <li>suggested time Nov 20-24 (+2) Marcus can't</li> <li>new suggestion is  Nov 27-1 (+3)</li> <li> <p>or having two weeks???</p> </li> <li> <p>Pre-session week before</p> </li> </ul> <p>-</p> <ul> <li>Where?</li> <li>Online or in uppsala    (contact NGI, om p\u00e5 plats om hela g\u00e4nget kommer)</li> <li>Current insights and experieces from last course.<ul> <li>Reflections and learning from last course</li> </ul> </li> <li>How?</li> <li>larger more fully scoped excerise do we want and in which areas does that need to expand and be worked at</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230925/","title":"Meeting at 2023-09-25 11:00","text":"<p>Suggested agenda points:</p> <ul> <li>Next course date is at Monday Nov 27 to and including Friday 1 Dec (+5)</li> <li>[R, 0 mins, L needs to fill in :-) ] Who intends to teach/assist in the next course? Bj\u00f6rn, Jon, Lars, Marcus, Richel</li> <li>[R, 2 mins, vote] R: I suggest to work on a non-biological project. Vote yes/no<ul> <li>Jon suggests to move the November 1st</li> <li>[R, 2 mins, vote] R: if we have a biological project, I suggest to schedule the time to explain the problem properly. Vote yes/no</li> </ul> </li> <li>Course is a NBIS hosted course with UPPMAX being main contributor for teaching<ul> <li>Should be on the certificate</li> </ul> </li> <li>R: suggest to make 'Planning' session shorter, more tuned to scientists, e.g. 'Write down what you want to do in English first' or writing a draft of a paper/preregistration. R feels that current ISO things are overkill for this course. No vote</li> <li>We work together on a example project, so the students have one good example how it should be done.</li> <li>[R, 17 mins total] R: suggest one/two project topics (1 for students, maybe 1 for teachers)<ul> <li>[10 mins, collect] All suggest the topics for a general project individually, in silence [R asked in Slack to do this before meeting]<ul> <li>[0 votes] R: beat all https://projecteuler.net/ problems</li> <li>[4 votes][students] R: simulating bacterial movement in 2D space +:t-rex::t-rex: x</li> <li>[1 votes] R: a chess game :t-rex:</li> <li>[2 votes] R: a tic-tac-toe game :t-rex: +</li> <li>[0 votes] R: a chat-bot without memory of earlier questions</li> <li>[2 votes] R: a maze creator and solver +:t-rex:</li> <li>[1 votes] J: Morse Code Translator: Build a program that can translate text to Morse code and vice versa. This can be a fun and educational project. :t-rex:</li> <li>[3 votes] J: Simple Web Scraper: Develop a web scraper that extracts specific information from a website and displays it in the console. You can use libraries like requests and BeautifulSoup. +:t-rex:x</li> <li>[5 votes][selves!] M: N-body simulation, e.g. galaxy sim or predator-prey + :t-rex:+:t-rex:x</li> <li>[2 votes] M: crystal growing simulation: generate snowflakes :t-rex:x</li> <li>[1 votes] L: 2D brownian motion :t-rex:project /can be branded as bacterial movemnt x</li> <li>[3 votes] L: Trait selection simulation :t-rex:x</li> </ul> </li> <li>[5 mins, present] Each presents his/her suggested topics</li> <li>[2 mins, vote] Each does  per topic. Two topics with most s wins</li> <li>Result, obtained by vote:<ul> <li>For us: N-body simulation, e.g. galaxy sim or predator-prey</li> <li>For students: simulating bacterial movement in 2D space</li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230925/#todos","title":"TODOs","text":"<ul> <li>[x] M and R will down more detailed exact description about their projects and send to L<ul> <li>[x] M: The program should visually display a number of particles on a field. Particles are initialised with a certain position and speed. Each particle interacts with all the other particles in a simple way, e.g. gravitational attraction, Lennard-Jones potential, direction alignment (implementing a flocking behaviour), or something else, the group chooses which. Decide on a boundary condition (e.g. bounce or wrap or eliminate the particle). The simulation is then stepped forward, drawing each step, until stopped. The goal is to create a stable simulation capable of the maximum number of particles at an acceptable framerate.</li> <li>[x] R: <code>https://github.com/UPPMAX/programming_formalisms/blob/richel/projects/student_project.md</code></li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230927/","title":"Meeting at 2023-09-27 9:00","text":"<ul> <li>L and J wants to add more AI in teaching :-)</li> <li>Course schedule<ul> <li>R: who does when? From last year's schedule at <code>https://github.com/UPPMAX/programming_formalisms/tree/richel#schedule</code> :<ul> <li>Day 1: Bj\u00f6rn, Bj\u00f6rn, Jon</li> <li>Day 2: Lars, Jon, Richel</li> <li>Day 3: Richel, Richel, Jon</li> <li>Day 4: Richel, Richel, Jon</li> <li>Day 5: Lars (design patterns), Richel (prep with Marcus), Anon (ask Nina, R will recruit!) feedback like Python</li> </ul> </li> </ul> </li> <li>Design documents: L plans to be done Friday 23:59</li> <li>Retrospectives</li> <li>Changes to schedule</li> <li>Lesson preparation:<ul> <li>Talk max 20 mins, then monitor students</li> </ul> </li> <li> <p>Advertise (NAISS newsletter next Thurs)</p> <ul> <li>update present</li> <li>material is language agnostic, we do use git and Python for exercises (done in pairs)</li> <li>prepare:<ul> <li>git+little python</li> <li>Refer to the UPPMAX git course, last years' website: https://www.hpc2n.umu.se/events/courses/2022/introduction-to-git</li> <li>Refer to the NBIS Python course, https://github.com/nbisweden/workshop-python/tree/ht23</li> <li> <p>Advertising,      Advertising text for the SNIC training newsletter Course 3</p> <p>Programming Formalisms Course - Nov 27- Dec 1 (online)</p> <p>This full 5-day course aims to give scientists, bioinformaticians and other research engineers  with some experience in programming and scripting an understanding of the underlying principles of software development, design, and programming. The course aims to strengthen the understanding of more advanced programming concepts, ability to produce more reusable scripts through modular programming and to enable a better understanding of how to evaluate a script or programs performance.</p> <p>We will cover an introduction to Algorithms and Data structures, Programming Paradigms especially structured and object oriented programming, and to give an overview of other paradigms like functional programming. Modular development and (code) reusability, testing and optimisation.</p> <p>We will cover theory with bridging practical examples and applications to enhance the theoretical understanding of the principles. The material is language agnostic, we do use git and Python for exercises</p> <p>Recommended knowledge of Git and programming in Python equivallent of either NBIS/ELIXIR-SE Tools for Reproducible research or https://coderefinery.github.io/2023-09-19-workshop/ (material still availible) We assume familiarity with python atleast equivallent of the python part of the UPPMAX indroductiory course or Python programming with applications to bioinformatics https://uppsala.instructure.com/courses/85913. For more information and registration, please visit: <code>[broken URL to UPPMAX Programming Formalisms announcement]</code>.</p> </li> </ul> </li> </ul> </li> <li> <p>Date for precourse setup</p> <ul> <li>Friday Nov 24 10:00-11:00 Programming Formalism Drop-in: B, L, R will be there (learners in Tools for Reproducible Research already use git and Python)</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20230927/#todos","title":"TODOs","text":"<ul> <li>[X] R: inform NBIS Training Steering group of our planned course</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20231020/","title":"Meeting on 2023-10-20","text":"<ul> <li>Bj\u00f6rn includerar f\u00f6rberdelser i sin f\u00f6rsta dags dokumentation.</li> <li>Lars kontaktar Diana om training letter under m\u00f6tet</li> <li>[x] Bj\u00f6rn updaterar Hemsidan</li> <li>Marcus och Richel ska m\u00f6tas och hj\u00e4lpa Richel utveckla ~~Algorithmer och~~ Optimisation</li> <li> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20231020/#marcus-funderar-pa-om-omstructureringen-hinner-itid","title":"Marcus funderar p\u00e5 om omstructureringen hinner itid","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20231110/","title":"Meeting on 2023-11-10","text":"<p>Suggested schedule:</p> <ul> <li>[R, 10 mins] Finalize course schedule: who teaches what when?</li> </ul> <p>Current schedule (see below), each session summarized in one word or abbreviation:</p> Day Before lunch After lunch Reflection 1 Bj\u00f6rn, git Bj\u00f6rn, git Jon 2 Lars, design Jon, social Richel 3 Richel, TDD Richel, TDD Jon 4 Richel, algos Richel, DS Jon 5 Lars, DP R+M, optimi Jon <ul> <li> <p>Abbreviations: algos = algorithms, DP = Design patterns, DS = data structures, optimi = optimization, social = social coding, TDD = Test Driven Development</p> <ul> <li>[name=Lars]:DP should mention refinment optimization of design through DP</li> </ul> </li> <li> <p>[R, 1 mins, FYI] Overview of projects with beautiful team logos</p> </li> <li>[R, 1 mins, FYI] Videos with git workflows and branching models already at the PF example project<ul> <li>[name=Bj\u00f6rn]: add link also from 1 day extra reading</li> </ul> </li> <li>[R, 3 mins, inventorize] Interested in pair programming sessions to feel the workflow yes/no?<ul> <li>L: try next week, also with J</li> </ul> </li> <li>[R, 5 mins, discuss and vote] In the example project we use the MVC architecture. Should it be ( for each suggestion you like):<ol> <li>a console application, human only </li> <li>a GUI application, human only </li> <li>both console application (written by humans) and a GUI application (written by AI)  </li> <li>both console application (written by AI) and a GUI application (written by human)</li> <li>a console application, AI-assisted only</li> <li>a GUI application, AI only</li> </ol> </li> <li>We picked 3 :-)</li> <li>[R, 8 mins, discuss and vote] If GUI, which package?<ul> <li>Round 1: collect the recommended GUI packages<ul> <li>Kivy</li> <li>PyQT5</li> <li>PySide 2</li> <li>Tkinter  </li> <li>wxPython</li> <li>PyGame  </li> </ul> </li> <li>Round 2: discuss the collect GUI packages</li> <li>Round 3: s per packages</li> <li>We picked PyGame!</li> </ul> </li> <li> <p>L will put in more class design documents</p> <ul> <li>Base class design and CI -L will put in citing clause and cite references for all teaches.</li> </ul> </li> <li> <p>Setup:</p> <ul> <li>link in setup.md</li> <li>to html documentation (RTD)</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20231115/","title":"Meeting on 2023-11-15","text":"<p>Agenda:</p> <ul> <li>Round Robin -&gt; How is everyone coming along with their parts<ul> <li>RB:<ul> <li>example project has standard structure and CI checks work</li> <li>needs design document for example project</li> <li>see also PF Open Issues</li> </ul> </li> <li>BC:<ul> <li>spell checking of Intro Day</li> <li>word list</li> <li>restructure</li> <li>refine the planet project</li> </ul> </li> <li>LE:<ul> <li>Continued working on the DPD</li> <li>Continued writing on the Design material</li> <li>TODO: Transfer the new AI part to The lecture</li> <li>TODO: Expand the Design Pattern lecture and restructure the OO lecture</li> </ul> </li> <li>Status report<ul> <li>RB: Course website is ready</li> <li>RB: Example project needs completed design documents</li> </ul> </li> <li>Work in full team or split into Pairs for Pair programming and development<ul> <li>RB: Depends on what we are going to do :-)</li> </ul> </li> <li>Merge the branches<ul> <li>RB: Course website: done :-)</li> <li>RB: Example project: done :-) (it had no branches)</li> </ul> </li> </ul> </li> <li>Wrap up and schedule next meeting.</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/","title":"Meeting 7 Feb 11-12","text":"<ul> <li>Teachers: Bj\u00f6rn, Lars, Richel (Marcus)</li> <li>Date:<ul> <li>Monday April 22nd to and including Friday April 26th</li> <li>NOT Monday May 6th ..., because 3 days</li> <li>NOT Monday May 13nd because conference Lars</li> <li>NOT Monday May 20nd because conference Lars</li> <li>NOT Monday May 27th to and including Friday May 31st, due to some reason</li> <li>NOT Monday June 3rd - Friday ..., due to Nationaldagen</li> <li>NOT Monday June 10th ..., due to summer holiday</li> <li>[x] Bj\u00f6rn and Lars will double-check if that works</li> <li>[ ] Lars will advertise this</li> <li>[ ] Richel will notify Marucus</li> </ul> </li> <li>Format:<ul> <li>Fully virtual</li> </ul> </li> <li>Do we need more helpers?<ul> <li>Yes/No</li> </ul> </li> <li>Social coding, as taught by Jon goes to Richel, if noone else wants it</li> <li>Next iteration dreams:<ul> <li>Richel: start with social coding</li> <li>Lars: Start introducing project from Day 1</li> </ul> </li> <li>TODO for next meeting:<ul> <li>Suggest a course schedule<ul> <li>ALL OF US</li> </ul> </li> <li>Lars: Vote between mermaid and PlantUML<ul> <li>Pro mermaid: works out of the box</li> <li>Con mermaid: does not do all types of diagrams: maybe Lars needs one!</li> <li>Pro PlantUML: has all types of diagrams</li> <li>Con PlantUML: learners need to install things</li> <li>VOTE NEXT WEEK</li> </ul> </li> <li>Bj\u00f6rn: Think about how to do the git section.<ul> <li>Lars idea:<ul> <li>as long as they use the course repo with the folder structure, I am happy</li> <li>Bj\u00f6rn is boss!</li> </ul> </li> <li>Richel:<ul> <li>as long as I've seen all learners have made a commit on the course repo, I am happy</li> <li>Bj\u00f6rn is boss!</li> </ul> </li> </ul> </li> <li>Lars: Think about how to do the design document<ul> <li>Richel:<ul> <li>as long as a class diagram ended up in the repo, I am happy</li> <li>Lars is boss!</li> </ul> </li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#sections","title":"Sections","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#course-certificates-fall-2023","title":"Course certificates fall 2023","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#certificates","title":"Certificates","text":"<p>Text for course certificate use https://rshiny.nbis.se/shiny-server-apps/shiny-certificate/ to create certificate</p> <p>&lt;&gt; <p>has participated in the NBIS workshop Programming Formalisms held in Online during 27 November -- 1 December  2023. The workshop consisted of 40 hours of lectures and computer exercises. This full 5-day workshop aims to give scientists, bioinformaticians and other research engineers with some experience in programming and scripting an understanding of the underlying principles of software development, design, and programming. The workshop aims to strengthen the understanding of more advanced programming concepts, ability to produce more reusable scripts through modular programming and to enable a better understanding of how to evaluate a script or programs performance. This included the following topics:</p> <ul> <li>Introduction to programming formalism</li> <li>Source control and GitHub</li> <li>Introduction to UML using plantUML</li> <li>Introduction to Algorithms</li> <li>Data types and data structures</li> <li>Introduction to Software Development Lifecycle</li> <li>common models</li> <li>planning</li> <li>source/version control</li> <li>documentation</li> <li>reproducibility and sharing</li> <li>collaboration</li> <li>testing</li> <li>Introduction to Modular programming and the modular programming paradigm</li> <li>Introduction to Social Coding</li> <li>Pair Programming</li> <li>Introduction to Object orientation and Object oriented design</li> <li>Introduction to Test Driven Design and Testing (TDD)</li> <li>including to GitHub Actions</li> <li>automated testing</li> <li>Introduction  Software re-usability through component based and Modular programming</li> <li>Optimization, measuring and common pitfalls</li> </ul> <p>Course Leader | Lars Eklund, PhD Applications Expert UPPMAX/NBIS NBIS | Uppsala University</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#november-course-zoom","title":"November course zoom","text":"<p>Lars Eklund is inviting you to a scheduled Zoom meeting.</p> <p>Topic: Programming Formalism Course Meeting Time: Nov 24, 2023 08:30 AM Stockholm         Every day, until Dec 1, 2023, 8 occurrence(s)         Nov 24, 2023 08:30 AM         Nov 25, 2023 08:30 AM         Nov 26, 2023 08:30 AM         Nov 27, 2023 08:30 AM         Nov 28, 2023 08:30 AM         Nov 29, 2023 08:30 AM         Nov 30, 2023 08:30 AM         Dec 1, 2023 08:30 AM Please download and import the following iCalendar (.ics) files to your calendar system. Daily: https://uu-se.zoom.us/meeting/u5Ipd-CvrjIiHd0mA7LZEoc8tehKfAe9R5oi/ics?icsToken=98tyKu-uqjsjHdScuB6OR_MABoigXe3ziFhHgqcNkT6yLxp2bQCuIudKGbReFYHi</p> <p>Join Zoom Meeting https://uu-se.zoom.us/j/66409709879</p> <p>Meeting ID: 664 0970 9879 Passcode: 583470 One tap mobile +46850539728,,66409709879# Sweden +46844682488,,66409709879# Sweden</p> <p>Dial by your location         +46 850 539 728 Sweden         +46 8 4468 2488 Sweden         +45 89 88 37 88 Denmark         +45 47 37 25 75 Denmark         +49 69 7104 9922 Germany         +49 695 050 2596 Germany         +33 1 8699 5831 France         +33 1 7095 0350 France         +44 131 460 1196 United Kingdom Meeting ID: 664 0970 9879 Find your local number: https://uu-se.zoom.us/u/cb33F9G1YH</p> <p>Join by SIP 66409709879@109.105.112.236 66409709879@109.105.112.235</p> <p>Join by H.323 109.105.112.236 109.105.112.235 Meeting ID: 664 0970 9879 Passcode: 583470</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#meeting-notes","title":"Meeting Notes","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#current-teachersta","title":"Current Teachers/TA","text":"<ul> <li>[name=Lars Eklund], course coordinator, lars.eklund@uppmax.uu.se</li> <li>[name=Bj\u00f6rn Claremar], teacher, bjorn.claremar@uppmax.uu.se</li> <li>[name=Marcus Lundberg], teacher, marcus.lundberg@uppmax.uu.se</li> <li>[name=Matias Piqueras], ?teacher/?TA, matias.piqueras@uppmax.uu.se</li> <li>[name=Rich\u00e8l Bilderbeek], teacher, richel.bilderbeek@uppmax.uu.se</li> <li>[name=Jon Ander Novella], ?teacher, jon.novella@nbis.se</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#assistants","title":"Assistants","text":"<ul> <li>[See schedule at https://github.com/UPPMAX/programming_formalisms#schedule]</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#next-course-date-nov-27-1-dec-2023","title":"NEXT COURSE DATE Nov 27-1 Dec 2023","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#online-onboarding-session-friday-nov-24-1000-1100","title":"Online ONBOARDING Session Friday Nov 24 10:00-11:00","text":"<p>make deadline Oct 31 ~~Dec~~</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20240207/#course-project","title":"Course project","text":"<p>[students] R: simulating bacterial movement in 2D space [selves!]  M: N-body simulation, e.g. galaxy sim or predator-prey Marcus and Richel will write a project breef that Lars Formalises. The [selves!] project has a Requierments modeleling and a first usecasemodel done, Next step is to create modules and classes to solve the structure problem. as well as describing the testcases in more detail for each use case-requierment.</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20240221/","title":"Meeting 2024-02-21","text":"<ul> <li>[Richel, 5 mins] Discuss the word 'theoretical':<ul> <li>the content of the course can be as practical or theoretical as Lars wants it to be. I have no problem with content being about theory.</li> <li>teaching time consists out of lecturing and exercises. Here I misused the terms 'theoretical' for 'lecturing' and 'practical' for 'exercises'. Here we know that whatever the content is, there must be exercises, see among others [Bell, 2020] for an evidence-based 5 step model (1. Prior knowledge, 2. Present, 3. Challenge, 4. Feedback, 5. Repeat), that overlaps with [Hattie, 2008].<ul> <li>We agree :-)</li> </ul> </li> </ul> </li> <li>[Richel, 5 mins] The course goals use 'understand' a lot. This is commonly mapped to the one-but-lowest level in Bloom's taxonomy (Wikipedia: https://en.wikipedia.org/wiki/Bloom%27s_taxonomy#Cognitive_domain_(knowledge-based), see 'Comprehension')(pretty picture: https://www.alfaandfriends.com/wp-content/uploads/2020/10/revised-blooms-taxonomy.jpg). Is this word really properly chosen? If not, could we use the right verbs? I feel we do aim at higher levels, but maybe I should change my teaching. In any case: how do we test for this level being achieved (spoiler: exercises)?<ul> <li>We tend to drift to the Apply level, yet also sometimes to Design. Some of us try to be more precise in writing down teaching goals.</li> <li>We (intend to) teach at the Apply level and if there is more time, we go up higher</li> </ul> </li> <li>[VOTED] Vote for using MkDocs</li> <li> <p>[Bj\u00f6rn, 20m] Discuss schedule below</p> <ul> <li>Examples:<ul> <li>If two teacher on one day, we all agree to mix up the day itself</li> <li>Merging Wed somehow: yes, will work!</li> <li>shortening Thu if possible?: done!</li> <li>shortening Fri if possible: done!</li> <li>this is to fit with wrapping-up of project: done!</li> </ul> </li> </ul> </li> <li> <p>ToDos:</p> <ul> <li>We are basically two teachers per day. Let's plan for 2-person meetings!</li> <li>Bj\u00f6rn</li> <li>Lars</li> <li>Rich\u00e8l</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240221/#schedule","title":"Schedule","text":"<ul> <li> <p>Remember: The initial aims for the course</p> <ul> <li>give scientists with some experience in programming and scripting:<ul> <li>an understanding of the underlying principles of software development, design, and programming.</li> </ul> </li> <li>strengthen the understanding of:<ul> <li>more advanced programming concepts</li> <li>ability to produce more reusable scripts through modular programming</li> <li>enable a better understanding of how to evaluate a script or programs performance.</li> </ul> </li> <li>encourage the use of software development tools, like:<ul> <li>Unified Model Language</li> <li>Git and Github</li> </ul> </li> <li>convince the benefits of sharing and social coding</li> </ul> </li> <li> <p>So... practicals are very important but also the theory of whats and whys</p> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240221/#proposed-schedule-bjorn-modified-from-richels-see-below","title":"Proposed schedule Bj\u00f6rn modified from Rich\u00e8l's, see below","text":"Day Time Teacher Subject Monday 09:00-12:00 Lars Parts from Bj\u00f6rn's intro and Class design (in groups, on repo, using web interface only) Monday 13:00-16:00 Bj\u00f6rn Start project git basic on documents (no coding?) (in groups, on repo) Tuesday 09:00-12:00 Lars Create project's class diagram (using git) Tuesday 13:00-16:00 Richel pair programming + TDD Wednesday 09:00-10:00 Bj\u00f6rn understand git branches, git merge Wednesday 10:15-11:00 Richel apply git branches Wednesday 11:15-12:00 Bj\u00f6rn understand git pull request with code review Wednesday 13:00-14:00 Richel apply code review Wednesday 14:15-15:00 Richel understand TDD (+data structures) Wednesday 15:15-15:45 Richel apply TDD (+data structures) Wednesday 15:45-16:00 Richel retrospect Thursday 09:00-12:00 Richel Data structures (+ algorithms) Thursday 13:00-16:00 R (+M) Algorithms + Optimisation Friday 09:00-12:00 Lars Modular programming deep Friday 13:00-16:00 Bj\u00f6rn Deployment <ul> <li>Monday (Bj\u00f6rn and Lars together)<ul> <li>overview<ul> <li>Lessons<ul> <li>Less \"what is programming/scripting\"</li> <li>SDLCs</li> <li>risk analys</li> <li>modules intro</li> <li>oo intro (students ready for Tue morning)</li> <li>(paradigms/formalised devel)</li> <li>tools (all presented) [name=Bj\u00f6rn]</li> </ul> </li> <li>Activities<ul> <li>discussions</li> </ul> </li> </ul> </li> <li>Start project with planning<ul> <li>Week Project with interspersed theory<ul> <li>initiate git/github [name=Bj\u00f6rn]</li> <li>UML, (pseudocode), design</li> <li>object (early process)</li> <li>initial documentation (how) [name=Bj\u00f6rn]</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Tuesday (Lars and Rich\u00e8l together) (+ Bj\u00f6rn?)</p> <ul> <li>Class diagrams (45 theory)</li> <li>reproducibility (part of everything) ([name=Lars] and all)<ul> <li>sharing etc</li> </ul> </li> <li>Pair programming</li> <li>TDD (also overview of testing?)<ul> <li>Activities<ul> <li>coding</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Wednesday (Rich\u00e8l and Bj\u00f6rn together)</p> <ul> <li>git branches (merging, issues, pull requests)<ul> <li>activities<ul> <li>features?</li> </ul> </li> </ul> </li> <li>More TDD (??) + code reviews (issues/pull requests)</li> <li>These can be more or less merged?</li> <li>Q: How much time is required here?<ul> <li>Can we move something from the last days here?</li> <li>(Data structures)</li> </ul> </li> </ul> </li> <li>Thursday (Rich\u00e8l alone?)<ul> <li>(Data structures)</li> <li>Algorithms</li> <li>Optimisation</li> <li>(Modular programming)</li> </ul> </li> <li>Friday (Lars and Rich\u00e8l) (+ Bj\u00f6rn?)<ul> <li>(Modular programming)<ul> <li>Packaging, virtualenv (do it!)</li> </ul> </li> <li>Deployment<ul> <li>Packaging, virtualenv (do it!)</li> </ul> </li> <li>(Wrap up with documentation and package)</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240221/#proposed-schedule-richel","title":"Proposed schedule Rich\u00e8l","text":"Day Time Teacher Subject Monday 09:00-12:00 Lars Class design (in groups, on repo, using web interface only) Monday 13:00-16:00 Bj\u00f6rn git basic (in groups, on repo) Tueday 09:00-12:00 Lars Create project's class diagram (using git) Tueday 13:00-16:00 Richel pair programming + TDD Wednesday 09:00-12:00 Bj\u00f6rn git branches Wednesday 13:00-16:00 Richel TDD + Code reviews Thursday 09:00-12:00 Richel Data structures Thursday 13:00-16:00 Richel Algorithms Friday 09:00-12:00 Lars Modular programming Friday 13:00-16:00 R (M) Optimisation <ul> <li>Abbreviations: algos = algorithms, DP = Design patterns, DS = data structures, optimi = optimization, social = social coding, TDD = Test Driven Development<ul> <li>[name=Lars]:DP should mention refinment optimization of design through DP</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240228/","title":"Meeting 2024-02-28","text":"<p>There were two meetings that day.</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20240228/#meeting-2024-02-28-1100","title":"Meeting 2024-02-28 11.00","text":"<ul> <li> <p>Discuss</p> <ul> <li> <p>structure of mkdocs web tree</p> <ol> <li>daily in upper menus <ul> <li>pro: very clear for students during course</li> </ul> </li> <li>topics in upper menu<ul> <li>pro: clear after course</li> </ul> </li> </ol> </li> <li> <p>structure in mkdocs file tree</p> <ol> <li>daily directories<ul> <li>pro: simple</li> </ul> </li> <li>topic directories <ul> <li>pros:<ul> <li>easier to rearrange later</li> <li>just move existing directories, almost...</li> </ul> </li> </ul> </li> </ol> </li> <li>reading with topics in sub menus </li> <li>extra reading with topics in sub menus </li> </ul> </li> <li> <p>Teaching</p> <ul> <li>mkdocs website with lesson structure which is very easy to follow for students that are missing parts.</li> <li>slides and movies:<ul> <li>if teacher wants to use them, but has to be linked to from the md lesson material</li> </ul> </li> </ul> </li> <li> <p>Responsibilites</p> <ul> <li>all are responsible in populating the docs with their md material</li> <li>Bj\u00f6rn starts to make some more structure of https://uppmax.github.io/programming_formalisms/</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240228/#meeting-2024-02-28-1300","title":"Meeting 2024-02-28 13.00","text":"<ul> <li> <p>Bj\u00f6rn + Rich\u00e8l</p> </li> <li> <p>Richel is happy with Bj\u00f6rns ideas and the initial mkdocs setup and agrees to the voted stuff!</p> </li> <li>We need to discuss Wednesday:</li> </ul> Day Time Teacher Subject Wednesday 09:00-10:00 Bj\u00f6rn understand git branches, git merge Wednesday 10:15-11:00 Richel apply git branches Wednesday 11:15-12:00 Bj\u00f6rn understand git pull request with code review Wednesday 13:00-14:00 Richel apply code review Wednesday 14:15-15:00 Richel understand TDD (+data structures) Wednesday 15:15-15:45 Richel apply TDD (+data structures) Wednesday 15:45-16:00 Richel retrospect <ul> <li>[VOTED yes] no dependencies until Friday, which has deployment</li> <li> <p>which Python graphics framework: Richel and Lars decide, Bj\u00f6rn does not vote on that</p> </li> <li> <p>Wednesday (Rich\u00e8l and Bj\u00f6rn together)</p> <ul> <li>git branches (merging, issues, pull requests)<ul> <li>activities<ul> <li>features?</li> </ul> </li> </ul> </li> <li>More TDD (??) + code reviews (issues/pull requests)</li> <li>These can be more or less merged?</li> <li>Q: How much time is required here?<ul> <li>Can we move something from the last days here?</li> <li>(Data structures)</li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240304/","title":"Meeting 2024-03-04 13.00","text":"<ul> <li> <p>Attendees: Bj\u00f6rn + Lars</p> </li> <li> <p>Status</p> <ul> <li>more structure now<ul> <li>days in menu<ul> <li>intro files to anounce the content/schedule of the day</li> </ul> </li> <li>some files and folders</li> </ul> </li> <li>Bj\u00f6rn has migrated some of his material</li> </ul> </li> <li> <p>To discuss</p> <ul> <li> <p>Tree</p> <ul> <li>[x] intro [name=bjorn]</li> <li>[x] project_overview</li> <li>[x] project start</li> <li>[x] design_development</li> <li>[x] git [name=bjorn]</li> <li>[x] test_TDD [name=Richel]</li> <li>[x] data_structures [name=Richel]</li> <li>[x] modularity [name=Lars]</li> <li>[x] algorithms [name=Richel + Lars?]</li> <li>[x] optimisation [name=Richel]</li> <li>[x] deployment [name=bjorn]</li> <li>[x] extra_BC [name=bjorn]</li> <li>[x] reading [name=Lars]</li> </ul> </li> <li> <p>Code editor</p> <ul> <li>VS code but own choice</li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240306/","title":"Meeting 2024-03-06 11.00","text":"<ul> <li>Attendees: everyone</li> <li>Estimated time before meeting: 33 mins</li> <li>Actual time: 38 mins</li> </ul> <p>Points:</p> <ul> <li>[Richel, FYI, 1 min] I enjoy the new course website. Thanks Bj\u00f6rn!</li> <li>[Richel, FYI, 1 min] The mermaid <code>git</code> graphs are great, e.g. <code>https://uppmax.github.io/programming_formalisms/git/apply_merge/#exercise-2-practice-merge-conflicts-between-branches</code>!</li> <li>[Richel, FYI, 1 min] git exercises are ready, including teaching goals</li> <li>[Richel, vote, 5 mins] Agree on https://github.com/UPPMAX/programming_formalisms/issues/20 yes/no? Richel: Yes, Bj\u00f6rn: yes. Lars: yes.<ul> <li>Bj\u00f6rn: We should mention PlantUML in the tools session but point to the ReadExtra section. Lars: I will do that!</li> </ul> </li> <li>[Richel, discuss, 5 mins] Discuss https://github.com/UPPMAX/programming_formalisms/issues/21.<ul> <li>Bjorn wiloblemsl do this</li> </ul> </li> <li>[Richel, discuss, 5 mins] Discuss https://github.com/UPPMAX/programming_formalisms/issues/22<ul> <li>Richel will do this</li> </ul> </li> <li>[Richel, discuss with Bj\u00f6rn, 3 mins] I'd like to link to a git book, over writing own content. Pro Git is an authority. What about using it? If not, which book?<ul> <li>Bj\u00f6rn will check the book and picks a book, Richel will follow</li> <li>Lars: Book should be in the reading materials. Richel: it is already there </li> </ul> </li> <li>[Richel, discuss, 3 mins] Is there a moment learners can get help with setting up? If yes, when?<ul> <li>Onboarding takes place Thursday 18th April 11:00-(max)12:00!</li> <li>Lars and Bj\u00f6rn and Richel show up</li> <li>possibly individual help later on if huge problems</li> </ul> </li> <li>[Richel, discuss, 3 mins] Some courses schedule an hour to train the TAs. Do we have TAs? If yes, should we schedule this? FYI, I wrote down the breakout room policy at where I describe my exercises' procedure<ul> <li>Lars: no TAs yet, we can ask NBIS if we discover we need some</li> </ul> </li> <li>[Richel, discuss, 3 mins] Discuss https://github.com/UPPMAX/programming_formalisms/issues/23<ul> <li>Bj\u00f6rn does it</li> </ul> </li> <li>[Richel, discuss, 3 mins] Discuss moving schedule from this doc to course website, under 'About the course -&gt; Schedule'<ul> <li>Bj\u00f6rn does it</li> </ul> </li> <li>[Lars, FYI] Lars prepares the NBIS course landing pages tomorrow/Thursday 7th March<ul> <li>Bj\u00f6rn: link to NBIS Anm\u00e4lan in InfoGlue? Lars: when ready, I will contact you</li> </ul> </li> <li>Bj\u00f6rn: How many applications? Lars: a few already</li> <li>[Lars, FYI] We now have a formal NBIS email address for the course.   Lars will fix getting access to that email address</li> <li>[Lars, FYI] We need a Canvas page, I will make it link to the course pages</li> <li>Bj\u00f6rn: need Richel and Lars coordinate? Nope, they work quite isolated :-)</li> <li>Lars: need Richel and Marcus coordinate? Richel will coordinate :-)<ul> <li>[ ] TODO: Richel updates Marcus :-)</li> </ul> </li> <li>Next meeting: Wednesday 20 March 11:00-12:00 (next week is teaching week)</li> <li>Lars allows everyone to fix his spelling errors</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240320/","title":"Meeting Wednesday 20 March 11:00-12:00","text":"<ul> <li> <p>Attendees: everyone</p> </li> <li> <p>Progress:</p> <ul> <li>L is still working on getting a functional email</li> <li>15 learners have registered</li> <li>Application form stays in place for this iteration of the course</li> </ul> </li> </ul> Issue Assigned Progress https://github.com/UPPMAX/programming_formalisms/issues/16 L Forgot, will do https://github.com/UPPMAX/programming_formalisms/issues/21 B Done https://github.com/UPPMAX/programming_formalisms/issues/23 B Done https://github.com/UPPMAX/programming_formalisms/pull/26 R Approved, R will merge <ul> <li>[Richel, FYI] I put an overview of the course in graph at https://uppmax.github.io/programming_formalisms/intro/ . I like it! </li> <li>[Richel, FYI] Project repo is ready at https://github.com/programming-formalisms/programming_formalisms_project_summer_2024 </li> <li>[Richel, vote] move all schedules from HackMD to website. To see how that looks like, I put a copy at the course website<ul> <li>[VOTED!] pro: proper version control, no duplicates that can differ</li> <li>con: ?</li> <li>votes: pro: BLR, con: .</li> </ul> </li> <li>[Richel, vote] suggest to keep the general schedule general, e.g. Wednesday is 'git branches, code reviews and TD', with a detailed schedule at the course's day<ul> <li>[VOTED!] pro: right level of detail at each page</li> <li>con: can mismatch</li> <li>votes: pro: BLR, con: .</li> </ul> </li> <li>[Richel, discuss] I'd enjoy a long-term schedule for preparation:, e.g.<ul> <li>Week 13: learning objectives on pages, e.g &lt;Learning outcomes&gt;</li> <li>Week 14: draft of exercises in place [Bj\u00f6rn away]</li> <li>Week 15: draft of material in place</li> <li>Week 16: improve</li> <li>Week 17: teaching</li> </ul> </li> </ul> <p>Next meeting: Wednesday 27 March 11:00-12:00 at https://uu-se.zoom.us/j/63272190301 (Passcode: 880630) </p>","tags":["meeting","notes"]},{"location":"meeting_notes/20240327/","title":"Meeting Wednesday 27 March 11:00-12:00","text":"<p>Attendees:</p> <ul> <li>Bj\u00f6rn</li> <li>Lars</li> <li>Richel</li> </ul> <p>Progress [5 mins]:</p> Open Issue Assigned Progress https://github.com/UPPMAX/programming_formalisms/issues/16 L WIP <p>5 Issues were closed.</p> <ul> <li>Bj\u00f6rn:<ul> <li>Made all required installations on Windows and Mac and rewrote prerequirements (took whole day last Friday)</li> <li>started with some goals and planning for which files to start from</li> </ul> </li> <li>Richel:<ul> <li>add all learning objectives to my pages</li> <li>convert some Quarto lecture slides to markdown</li> </ul> </li> </ul> <p>Discuss:</p> <ul> <li>[Bj\u00f6rn -&gt; Richel] Can someone check the prereqs for Linux? Richel does that!</li> <li>[Bj\u00f6rn for Lars] Please check https://uppmax.github.io/programming_formalisms/introductions/sdlc_tools/#software-citation</li> <li>[Richel, 5 mins] I am happy to see learning objectives on our pages, as this helps one focus on how/what to teach! Learning outcomes, however, should be learner-centered, active, observable and specific, e.g. 'learners are able to do a git push', instead of vague 'We will get some theory of X'. Could we try to make all teaching objectives learner-centered, active, observable and specific? I volunteer to do Pull Requests :-)<ul> <li>[VOTED] BLR: Yes</li> <li>Other votes: No</li> </ul> </li> <li>[Richel, 5 mins] I am happy to see the prereqs page and the obvious love put in it. I am unsure of the page's purpose. Could we come up with a purpose of the page and vote? As Bj\u00f6rn will the one teaching the first sessions, however, I agree he is boss on this. Also, I volunteer to do the work. If we discuss: The goal of the prereqs page is ...<ul> <li>[VOTED] BLR: that our learners can verify that they have installed the minimum requirements for the course</li> <li>[other votes]: [other suggestions]</li> </ul> </li> <li>[Richel, 5 mins] I think it is useful that we do anonymous evaluations. However, when analyzing the evaluations, most questions are useless to me. Which questions are useful to the others? Below is my dream evaluation:<ul> <li>Lars: we must follow the NBIS parts.</li> <li>[TODO] Next next meeting: we all put our dream evaluation here before next meeting</li> </ul> </li> </ul> <pre><code>- What should we keep doing?\n- What should we improve?\n- Other comments?\n</code></pre> <ul> <li>[Richel, 5 mins] I enjoy how we all try to improve on the course. However, having too few time for exercises seems to be a running theme, although we seem to have the will to improve this. Here I suggest something to help us commit: making it an explicit retrospect and evaluation question. Dare we commit to this?<ul> <li>[VOTED] BLR: Yes</li> </ul> </li> </ul> <p>Retrospect example:</p> <pre><code>## Which section(s) scheduled enough time for exercises? &lt;--- SUGGESTED\n</code></pre> <p>Evaluation example:</p> <pre><code>- Which section(s) scheduled enough time for exercises? &lt;--- SUGGESTED\n</code></pre> <p>Future schedule:</p> <ul> <li>Week 13: learning objectives on pages [will rework a bit]</li> <li>Week 14: start of draft of exercises in place [Bj\u00f6rn away]</li> <li>Week 15: draft of material in place</li> <li>Week 16: improve</li> <li>Week 17: teaching</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240403/","title":"Meeting April 3rd Wednesday 11:00-12:00","text":"<p>Attendees:</p> <ul> <li>[HOLIDAY] No Bj\u00f6rn</li> <li>[CANCELLED] No Lars</li> <li>Richel</li> </ul> <p>Progress:</p> <p>Closed two Issues</p> Open Issue Assigned Progress https://github.com/UPPMAX/programming_formalisms/issues/29 R ? https://github.com/UPPMAX/programming_formalisms/issues/30 BLR ? https://github.com/UPPMAX/programming_formalisms/issues/31 BLR R done https://github.com/UPPMAX/programming_formalisms/issues/33 . Discuss next meeting <ul> <li>Week 13: learning objectives on pages: R done for shared days</li> <li>Week 14: start of draft of exercises in place: R done for shared days</li> <li>Week 15: draft of material in place: R done for shared days</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240410/","title":"Meeting April 10th Wednesday 11:00-12:00","text":"<p>Attendees:</p> <ul> <li>[X] Bj\u00f6rn</li> <li>[x] Lars</li> <li>[x] Richel</li> </ul> <p>Progress:</p> <ul> <li>Week 13: learning objectives on pages: ...<ul> <li>B: ?done!</li> <li>L: ?Monday done, need to do Tuesday and Friday</li> <li>R: draft, need revision</li> </ul> </li> <li>Week 14: start of draft of exercises in place: &lt;--<ul> <li>B: added most of them (needs some updates)</li> <li>L:</li> <li>R: done</li> </ul> </li> <li>Week 15: draft of material in place: ...<ul> <li>B: most is there but need to be restructured and shortened</li> <li>L:</li> <li>R: done</li> </ul> </li> </ul> Open Issue Assigned Progress https://github.com/UPPMAX/programming_formalisms/issues/29 R None https://github.com/UPPMAX/programming_formalisms/issues/30 BLR B done Mo https://github.com/UPPMAX/programming_formalisms/issues/31 BLR R done https://github.com/UPPMAX/programming_formalisms/issues/33 . Discuss next meeting <p>Discuss:</p> <ul> <li> <p>[LR, FYI, 3 mins] L wants to have some people from other departments to help as a TA,   with the goal of getting to know each other.</p> <ul> <li>R will happily set them work, especially in the pair programming! R will contact L</li> </ul> </li> <li> <p>[R] The goal of the prereqs page is that our learners can verify that they have installed the minimum requirements for the course. Achieved? If not, what is next plan?</p> <ul> <li>BC makes a review again.</li> </ul> </li> <li>[R, FYI, 3 mins] R made a more detailed overview at https://uppmax.github.io/programming_formalisms/intro/ , with project exercises at the bottom. Maybe you find it helpful too?</li> <li>[B] Demos and examples fro BC's theory part<ul> <li>Use parts of planet project!!</li> </ul> </li> <li>[R] L seems to be lagging behind. How can we help?<ul> <li>L will report his progress on the Slack, so others an jump in</li> </ul> </li> <li>[R] Remember to remind learners to have a proper place to talk,       with proper equipment</li> <li>[B] Use HackMD as a shared document? B+L+R: yes!</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240417/","title":"Meeting April 17th Wednesday 11:00-12:00","text":"<p>Attendees:</p> <ul> <li>[x] Bj\u00f6rn</li> <li>[x] Lars</li> <li>[x] Richel, only on HackMD due to eduroam connection problems</li> </ul> <p>Progress:</p> <ul> <li>Week 13: learning objectives on pages: ...<ul> <li>B: ?done!</li> <li>L: ?Monday done, need to do Tuesday and Friday</li> <li>R: draft, need revision</li> </ul> </li> <li>Week 14: start of draft of exercises in place: &lt;--<ul> <li>B: added most of them (needs some updates)</li> <li>L: started</li> <li>R: done</li> </ul> </li> <li>Week 15: draft of material in place: ...<ul> <li>B: most is there but need to be restructed and shortened</li> <li>L: started</li> <li>R: done</li> </ul> </li> </ul> Open Issue Assigned Progress https://github.com/UPPMAX/programming_formalisms/issues/30 BLR B done (minor revisions?) Mon, Wed, Fri. R will revise ASAP https://github.com/UPPMAX/programming_formalisms/issues/31 BLR R done, need to discuss https://github.com/UPPMAX/programming_formalisms/issues/33 . B done (copy-paste error) yay! <p>Discuss:</p> <ul> <li>[L] Helpers from Sysdev (sorry for the confusion! eduroam is bad, so tethering and HackMD-only for me now):<ul> <li>R enjoys Sysdev helpers during any hour of teaching, any amount of people.</li> </ul> </li> <li>Helpers that are us (usually 1 extra teacher avail)<ul> <li>BC: Mon, Tue morning, Wed, Fri morning</li> <li>R: can be there always, only need 1 helper from the teaching team</li> </ul> </li> </ul> Day morning afternoon Mon R R B Tue R L Wed (B),(R ), L L Thu L B Fri R R <p><code>()</code> means teaching parts oneself</p> <ul> <li>[R] Dream evaluation: use yes/no https://github.com/UPPMAX/programming_formalisms/issues/31</li> <li>[B] Can I get a co-teacher do demo pull request?<ul> <li>Richel volunteers! We can practice/coordinate beforehand or do so wih coffee at 8:00? You pick!</li> <li>Thanx!</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240904/","title":"Meeting notes 2024-09-04","text":"<ul> <li>Goal: meet up to get started again</li> <li>Vote: use shared document for live editing, then copy-paste   to GitHub<ul> <li>B: Yes</li> <li>L: Yes</li> <li>Decided: yes</li> </ul> </li> <li>Status:<ul> <li>Lars have plans</li> <li>Rich\u00e8l prepared discussion, see below</li> <li>Bj\u00f6rn has no updates</li> </ul> </li> <li>Decisions:<ul> <li>Weekly meetings start again</li> <li>This week, we prepare for the schedule of next week</li> <li>Friday/Monday, L will send a plug for feedback, B and R will do so on Monday</li> </ul> </li> <li>ToDos<ul> <li>Lars communicates with NBIS and Diana<ul> <li>iterate during the week</li> <li>review Monday 9 Sep</li> </ul> </li> <li>All<ul> <li>review of<ul> <li>discussions</li> <li>learning objectives</li> <li>communication of Lars, see above</li> </ul> </li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240911/","title":"Meeting notes 2024-09-11","text":"<ul> <li> <p>R: #52.   The course content seems a bit scattered, as I cannot   conclude a rule that is used to yes/no discuss a topic.   I think it would be good to have a clear rule behind our course   material what should and what should not be discussed at this course.   I hope we can suggest some rules and then vote for our favorite.</p> <ul> <li>R: Only what is used by the student project is course content. The student project is a piece of maintainable and tested Python code.</li> <li>R: if possible, vote for a rule</li> <li>[WINNER][as voted in meeting] Only what is used by the student project is course content, with alternatives relevant to academics provided in lecture (rest of extra material) to what we do</li> </ul> </li> <li> <p>R: #45   We discussed reordering the course material and that everyone would   come up with a suggestion. What is the progress for everybody in this?</p> <ul> <li>R: my ideas are in my reflections of the last course iteration. Biggest change: learning the basic tools, i.e. <code>git</code> at day 1, so we can then focus on theory. Maybe make next week a deadline for this?</li> <li>[RESULT][copied from HackMD] We now have:<ul> <li>Monday morning:<ul> <li>Bj\u00f6rn: course overview</li> <li>Bj\u00f6rn: basic git</li> </ul> </li> <li>Monday afternoon: Requirements modeling and risk assessment<ul> <li>Lars: Define the project</li> <li>Make formal requirements model</li> <li>Make formal risk assessment</li> </ul> </li> <li>Tuesday: Git setup and version control, from a reproducible research and social coding/development perspective<ul> <li>Organize the project</li> </ul> </li> <li>Wednesday: Test-Driven Development (TDD) and function design</li> <li>Thursday and Friday morning: Test-Driven Development and class design (TDD)<ul> <li>Implement the project as a package</li> </ul> </li> <li>Friday afternoon: Deployment and documentation</li> </ul> </li> </ul> </li> <li>R: #56   can we convert the slides to website pages (or can they be deleted?)   It will make the GitHub repo less messy.   I volunteer to do this and/or help with this<ul> <li>[MOVED TO FUTURE MEETING]</li> </ul> </li> <li>R: #57   what do we think about giving advice (e.g. 'Always do X') without   a reference to the literature?<ul> <li>R: I think most of our advice should be backed up by a reference to the literature, to prevent teaching what we do, but teach what one should do instead</li> <li>[MOVED TO FUTURE MEETING]</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240911/#copy-paste-from-hackmd-notes","title":"Copy paste from HackMD notes","text":"<pre><code># Programming formalisms for life scientists and bioinformaticians\n\nMain page: https://github.com/UPPMAX/programming_formalisms\nRendered page: https://uppmax.github.io/programming_formalisms/\n\n\n## Zoom meetings\n- will be called when needed\n- most issues shall be resolved through github issues\n- if meeting is requested i will be posted in the slack channel and the below meeting id will be used.\n\nhttps://uu-se.zoom.us/j/63272190301 (Passcode: 880630)\n- every Wed 11.00\n\n## Course Autumn 2024\n- \ud83d\udcc5 week 47 Mon-Fri Nov 18\u201322\n\n\n## Meeting 11 sep 11:00-12:00\n### Food for thought\n#### Programming Formalism\n\n##### Where is the Formalism?\n\nUnderstanding the need for **requirements modeling** and **risk assessment** is essential. These steps should be integral to the project and not omitted simply because they aren't currently included.\n\nA possible schedule could look like this:\n\n- **Monday morning**:\n  - Bj\u00f6rn: course overview\n  - Bj\u00f6rn: basic git\n- **Monday afternoon**: Requirements modeling and risk assessment\n    - Lars: Define the project\n    - Make formal requirements model\n    - Make formal risk assessment\n- **Tuesday**: Git setup and version control, from a reproducible resarch and social coding/development perspective\n    - Organize the project\n- **Wednesday**: Test-Driven Development (TDD) and function design\n- **Thursday and Friday morning**: Test-Driven Development and class design (TDD)\n    - Implement the project as a package\n- **Friday afternoon**: Deployment and documentation\n\n- UML,Mermaid AI assisted devlopment left as extra excersies read on your own for those who are extra fast or just whant to delv into the subject outside of the alloted time.\n\n- **Key concepts of the course**\n\n    - Software life cycle\n    - Requirments Modeling\n    - Version control\n    - Pair-programmming\n    - TDD\n    - Fundamentals of algorithms\n\n##### Object-Oriented (OO) Concepts and Modularity\n\nThe concepts of object-oriented programming and modularity could be integrated into the practical TDD exercises. For example, the simple discovery model that Richel uses could guide the generation of classes. While class modeling and UML might be better suited for another course, these concepts could be derived from a well-written requirements model and a solid risk assessment.\n\n##### Importance of Risk Assessment\n\nRisk assessment is critical not only for understanding the overall project risks but also for determining what constitutes a **complete test**. This goes beyond unit or function testing.\n\nBy following this structure, we would have three days (Wednesday to Friday) to implement the project that has been first modeled on Monday and then set up in Git on Tuesday.\n\n### Discuss\n\n- R: The course content seems a bit scattered, as I cannot\n  conclude a rule that is used to yes/no discuss a topic.\n  I think it would be good to have a clear rule behind our course\n  material what should and what should not be discussed at this course.\n  I hope we can suggest some rules and then vote for our favorite.\n  - Rule 1: Only what is used by the student project is course content.\n    The student project is a piece of maintainable and tested Python code.\n    - vote: R\n  - [WINNER] Rule 2: Only what is used by the student project is course content,\n    with alteratives relevant to academics provided in lecture\n    (rest of extra material) to what we do\n    - vote: BC, L\n\n- R: if possible, vote for a rule\n    - BCs suggestion:\n        - Overview of tools, workflow and formalisms kept but shorten.\n        - all discussions and exercises and testable understanding should be related to\n            - academians\n            - make effective programming development in projects\n            - make software\n                - reusable\n                - understandable/-stood\n                - installable\n- R: We discussed reordering the course material and that everyone would\n  come up with a suggestion. What is the progress for everybody in this?\n  - R: my ideas are in\n    [my reflections of the last course iteration](https://github.com/UPPMAX/programming_formalisms/tree/main/reflections/2024_summer).\n    Biggest change: learning the basic tools, i.e. `git` at day 1, so we can\n    then focus on theory. Maybe make next week a deadline for this?\n  - BC may come back on this point but now:\n      - we cannot put equally much effort on this course as we have done before. It is not new any longer and we have come far\n      - i.e. no major changes like the restructuring in spring again\n  - Still BC want to include deployment for the project itself\n\n### Status\n - Lars\n - Richel\n - Bj\u00f6rn\n\n## Goal for next week\n\n- Discuss evaluations\n- Sketch future schedule during meetug\n\n\n### If time allows\n\n### Action points from evaluation\n#### General\n- breaks should be for breaks\n- learners don't read instructions in breaks\n#### Monday\n- We don't have workflows in the course yet.\n    - We often discuss what to put in yes/no\n  and we feel now the other topics are even more important\n\n#### Wednesday\n- Switching between VS-code and github caused some trouble in updating the branches on the terminal, causing some confusion in merging branches (solving conflicts)\n    - This is a technical issue we cannot help.\nWe hope there is enough time to fix the expected unexpected problems.\n    - BC just learned that sync between GH and VS code should be easy, not needing ssh-keys\n        shaing prereqs?\n\n- Switching between users in pair-programming takes time. So maybe more time might be needed.\n  - Agreed that this takes time. We hope there is enough time to do so.\n\n### Richel's reflections\n- Bj\u00f6rn waited until now (:pensive:) to look at these\n    - very valuable though\n- Questions:\n    - define discussion\n        - student discussion?\n        - lesson material just covered in material and talk\n</code></pre>","tags":["meeting","notes"]},{"location":"meeting_notes/20240918/","title":"Meeting notes 2024-09-18","text":"<ul> <li>Discuss evaluations,   see below</li> <li>Sketch future schedule,   see below</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240918/#evaluation-notes","title":"Evaluation notes","text":"<p>These are the notes from earlier meeting:</p> <ul> <li>General<ul> <li>B: breaks should be for breaks<ul> <li>B+L+R: agrees</li> </ul> </li> <li>B: learners don't read instructions in breaks<ul> <li>B+L+R: agrees</li> </ul> </li> </ul> </li> <li>Monday<ul> <li>B: We don't have workflows in the course yet.<ul> <li>Question is: what type of workflows: Snakemake and/or GitHub<ul> <li>GitHub:<ul> <li>Yes: L+R</li> <li>No:</li> </ul> </li> <li>Snakemake, NextFlow:<ul> <li>Yes: In deploy but just note to other courses, B+L</li> <li>No: R</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li>Wednesday<ul> <li>B: Switching between VS-code and github caused some trouble in updating the branches on the terminal, causing some confusion in merging branches (solving conflicts)<ul> <li>This is a technical issue we cannot help.</li> <li>Use the command-line instead</li> <li>Use the GitHub interface as much as possible and    not to use <code>git -b</code> nor the VS code git plugin to simplify things</li> </ul> </li> <li>B: We hope there is enough time to fix the expected unexpected problems.<ul> <li>BC just learned that sync between GH and VS code should be easy,   not needing ssh-keys,share in prereqs?<ul> <li>VScode sync: skip because of generality</li> <li>Commandline with https: BC+L+R, uses command-line and optionally code snippets below from his git notes</li> </ul> </li> </ul> </li> </ul> </li> </ul> <pre><code>git config --global credential.helper cache\ngit config --global credential.helper 'cache --timeout=36000'\n</code></pre> <ul> <li>Switching between users in pair-programming takes time. So maybe more time might be needed.<ul> <li>B: Agreed that this takes time. We hope there is enough time to do so.</li> <li>R: Agreed. I think pair should be created only in the morning and in the afternoon, as a compromise<ul> <li>Yes: B+L+R</li> <li>No:</li> </ul> </li> </ul> </li> <li>B: questions:<ul> <li>B: define discussion<ul> <li>student discussion?<ul> <li>R: when students talk more than 50% of the time, i.e. the teacher talks less than 50%</li> </ul> </li> <li>lesson material just covered in material and talk<ul> <li>R: there is feedback on the exercises made</li> </ul> </li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240918/#schedule","title":"Schedule","text":"<p>State of the schedule at 2024-09-11:</p> <ul> <li>Monday morning:<ul> <li>Bj\u00f6rn: course overview, 1 hour</li> <li>Bj\u00f6rn: basic git and setup and project start, 2 hours, also for people that know git</li> </ul> </li> <li>Monday afternoon: Requirements modeling and risk assessment<ul> <li>Lars: Define the project</li> <li>Lars: Make formal requirements model, create files, put on GitHub</li> <li>Lars: Make formal risk assessment, create files, put on GitHub</li> </ul> </li> <li>Tuesday:<ul> <li>Lars: SDLC (Software Development Lifecycle), 1 hour</li> <li>Bj\u00f6rn: git version control, from a reproducible research and social coding/development perspective, including branching and merging, ?Organize the project (we'll where this will land), 4 hours</li> <li>Richel: ?Organize the project (we'll where this will land), GitHub workflow, Issues, Project page, 1 hour</li> </ul> </li> <li>Wednesday:<ul> <li>Richel: Test-Driven Development (TDD) and function design</li> </ul> </li> <li>Thursday:<ul> <li>Richel: Test-Driven Development and class design (TDD) (implement the project as a package by design)</li> </ul> </li> <li>Friday morning:<ul> <li>Richel: optimization, 2 hours</li> <li>Lars: object-oriented design, 1 hours</li> </ul> </li> <li>Friday afternoon:<ul> <li>Bj\u00f6rn: Deployment and documentation, 3 hours</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240918/#training-news-letter","title":"Training news-letter","text":"<ul> <li>[ ] TODO by Lars, even though he is on holiday :-)</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240918/#onboarding","title":"Onboarding","text":"<ul> <li>Friday 15th Nov 9:00-(max)10:00 by Bj\u00f6rn and Richel</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20240918/#next-meeting","title":"Next meeting","text":"<p>Follow the notes of the meeting</p>","tags":["meeting","notes"]},{"location":"meeting_notes/20240926/","title":"Meeting notes 2024-09-26","text":"<ul> <li>R: go through the Issues<ul> <li>#51 NBIS evaluation<ul> <li>L agrees with most questions being useless, like R thinks</li> <li>[AGREED] Next week: discuss evaluation procedure:<ul> <li>NBIS form yes/no, retrospect, confidences yes/no, daily/at end</li> </ul> </li> </ul> </li> </ul> </li> <li>R: How do we think a meeting should look like?   What do we think are good and bad practices?   How to make sure it is effective?<ul> <li>R: question 1: do we think these can be improved?<ul> <li>R: yes</li> <li>B: yes</li> </ul> </li> <li>R: question 2: if yes, how?<ul> <li>We like using Issues, although they give some pressure.   We agree to try not to feel this pressure.</li> <li>R:</li> </ul> </li> <li>specify the goal of our meeting, e.g. 'To make decisions   on the course content and practicalities, and have discussion to make these'.</li> <li>only discuss items that are written down in advance,</li> <li>short is better: move complex topics to next week, fun anecdotes   are discouraged, chairman should be ruthless         - Q: When can we be social? We only meet in formal meetings?         - A: When we meet before the meeting and/or afterwards</li> <li>write these rules down and follow them<ul> <li>B: I think we need some flexibility with an ending point: Other issues<ul> <li>Some issues are better to take directly instead of next meeting</li> <li>We decide if to discuss it it today or it should be postponed</li> </ul> </li> </ul> </li> <li>R: if there are suggestions, decide next week</li> </ul> </li> <li>R: NBIS wants all its courses to use a Short-Term Feedback form.   I converted this to markdown and put it at   https://github.com/UPPMAX/programming_formalisms/blob/main/docs/misc/evaluation.md.   What do we think about this form?<ul> <li>R: I think its goal 'to find out how participants have used the skills and knowledge they gained through participating in the NBIS course' is irrelevant and the survey asks way more than just achieving that goal. Due to its vague, irrelevant goal and its many nice-to-have questions, I think it is way too extensive and we should not bother our learners with it. The only questions I'd keep is '7. Would you recommend the course?', '8. What is your overall rating for the course?' and 'Any other comments?'</li> <li>B: If NBIS wants it, can we say no?<ul> <li>But sure, most questions can be included in a web form after course.</li> <li>I think all questions should be covered at least somewhere.</li> </ul> </li> </ul> </li> <li>R: #56   can we convert the slides to website pages (or can they be deleted?)   It will make the GitHub repo less messy.   I volunteer to do this and/or help with this<ul> <li>L: I agree, documents should be written in Git markdown format and converted to webpages in as large extent as possible</li> <li>R: Awesome! Need help?</li> </ul> </li> <li>R: #57   what do we think about giving advice (e.g. 'Always (?) do X') without   a reference to the literature?<ul> <li>B: Is the keyword \"Always\" here?<ul> <li>Can we rephrase and say: \"From our experience, this and that work well\", and skip references?</li> </ul> </li> <li>R: I think most of our advice should be backed up by a reference to the literature, to prevent teaching what we do, but teach what one should do instead</li> <li>L: See comment in the issue [R: copy-pasted it below].   Not forgetting that our own experience is also valuable,   but it should be stated when   we speak from our own experience and when we follow some other source.   Also do not forget about standards as a great reference for literature,   such as SS-ISO/IEC/IEEE 12207:2018</li> </ul> </li> </ul> <p>Why is a blog post considered more valuable than our own experience, a blogpost in nothing more than another persons unbacked (drawn from personal experience) opinion. Blogposts have no more merit that our own opinions if we call it evidence based and backed by literature. Gwynet Paltrow has a lot of really influential blog post regarding biochemistry that are utter nonsense and have no evidence or backing in science ofthen contraticting known scientific facts. Same goes for a lot of flatearthers and evolution deniers popularity and influence is not a good measure of content quality on the internet. (Not to say that you cant have great blogposts as a reference just that influence is not a good metric)</p> <ul> <li>R: I agree now that blog posts are useless too, thanks</li> <li>R: I disagree that our experience counts: the goal to prevent us making     things up and using formal practices as described elsewhere.     I would agree stating that things are from own experience when they are is     honest. I usually find those arguments completely unconvincing.</li> <li>R: I agree with using a open standard. However, although     SS-ISO/IEC/IEEE 12207:2018 is an ISO standard, it does not prevent us to     make up nonsense and point to it. I am open to buy the standards we     point to</li> <li>B:<ul> <li>Is documentation literature?</li> <li>When?</li> <li>Can we trust the writers?</li> <li>Must everything be peer-reviewed?</li> <li>Shall I try to find references for all statements I do?</li> <li>I'll will fall dead soon...</li> </ul> </li> <li>L: We should trust the teachers</li> <li>R: We should not trust the teachers</li> <li>B: Takes time to look for literature<ul> <li>R suggests literature?</li> </ul> </li> <li>L: Will go through standards again</li> <li>[Decision] increase refs to literature, but do not force to</li> </ul> <p>Next meeting:</p> <ul> <li>Discuss evaluation</li> <li>Discuss schedule, especially Monday/Tuesday</li> <li>Discuss other Issues</li> </ul> <p>TODOs:</p> <ul> <li>Richel: in Issues, prep next meeting</li> <li>Bj\u00f6rn: prep next meeting</li> <li>Lars: in Issues, prep next meeting</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241010/","title":"Meeting notes 2024-10-10","text":"<ul> <li> <p>#51   Discuss the NBIS survey per point, at      (note the final version will be a regular Google Form).   What do we think about this?</p> <ul> <li>R: I think its goal 'to find out how participants have used the skills and knowledge they gained through participating in the NBIS course' is irrelevant and the survey asks way more than just achieving that goal. Due to its vague, irrelevant goal and its many nice-to-have questions, I think it is way too extensive and we should not bother our learners with it. The only question I'd keep is 'Any other comments?', but I'd agree on using '7. Would you recommend the course?' and '8. What is your overall rating for the course?' too.</li> <li>B: If NBIS wants it, can we say no?<ul> <li>But sure, most questions can be included in a web form after course.</li> <li>I think all questions should be covered at least somewhere.</li> </ul> </li> </ul> </li> <li> <p>Evaluation procedure: Do and how do we enjoy evaluation and feedback?</p> <ul> <li>Use a daily retrospect yes/no<ul> <li>[VOTED] Y: LB</li> <li>N: R</li> </ul> </li> <li>Use the original/unmodified NBIS survey at the end yes/no<ul> <li>Y:</li> <li>[VOTED] N: BLR</li> </ul> </li> <li>Use a modified NBIS survey at the end yes/no<ul> <li>Y:</li> <li>Neutral: B</li> <li>[VOTED] N: LR --&gt; R will discuss</li> </ul> </li> <li>Use a place for anonymous feedback yes/no, only read at the end of the day (see below for screenshot)<ul> <li>[VOTED] Y: BLR #75</li> <li>N:</li> </ul> </li> <li>Use a daily confidence report (see below for screenshot) yes/no<ul> <li>[VOTED] Y: BLR</li> <li>N:</li> </ul> </li> </ul> </li> <li> <p>[ ] [VOTED] Lars gets to do an evaluation/retrospect/confidence at the end of the days</p> </li> </ul> <p></p> <p>An example place for anonymous feedback, from Intro to UPPMAX Day 1.</p> <p></p> <p>An example partial confidence report</p> <ul> <li>R: go through the Issues<ul> <li>Done!</li> </ul> </li> <li>B: should I mention modularity and functional programming in the intro?<ul> <li>Yes:</li> <li>No: LR</li> </ul> </li> <li>B: should examples be related to the project?<ul> <li>LR: preferably yes, or minimal</li> <li>R volunteers if input is needed</li> </ul> </li> <li> <p>[OBSOLETE] R: we have no Retrospects scheduled. I feel no need to, because I am   not Jon. Do we remove Retrospects (and maybe replace these)?   If yes, who does them?</p> <ul> <li>Remove retrospects: R</li> <li>Keep retrospects:</li> </ul> </li> <li> <p>R: I miss having a video of lectures I teach for own private usage,   such as making activity diagrams (see below)   I can do a screen recording from my own computer and keep it someplace   private. How to do this responsibly?</p> </li> </ul> <p></p> <p>Activity diagram of 'Intro to Bianca' on file transfer</p> <p></p> <p>Activity diagram of 'Intro to Bianca' on interactive and job scheduler</p> <p></p> <p>Activity diagram of 'Intro to Bianca' on legal aspects of sensitive data</p> <ul> <li>R: in all iterations of the course, we lost a substantial amount of learners.   Below is a plot of last course's iteration.   In the evaluations it was noted 'The course was top-heavy' (quote   below, from source   (see section 'What can we improve')).   Also, the amount of learners dropping out on day 1, especially at around 10:40,   stands out (we had around 65% of the learners present, compare to around 90%   on average).   Will we change our approach for these first hours?<ul> <li>[VOTED] Bj\u00f6rn will help us get more info in the first hour</li> <li>B+L: Yes, we are changing the course already</li> <li>B: maybe learners already knew about git</li> <li>Hence, we don't know. Let's see next iteration</li> <li>B: maybe it is learners finding out what the course is all about</li> <li>B: would be great to know why people people<ul> <li>R: we have the anonymous postbox</li> </ul> </li> </ul> </li> </ul> <p></p> <p>The coures was 'top-heavy'. The beginning (in my opinion) should be more interactive and with more utilities, like git, being taught. After the first day, then you can bring in more and more theory.</p> <p></p> <ul> <li>Prepare evaluation thoughts of previous course<ul> <li>We are done with this: BLR</li> <li>We need more time:</li> </ul> </li> </ul> <p>Next meeting will be at Oct 18th 9:00:</p> <ul> <li>Discuss schedule</li> <li>Discuss Issues</li> <li>(R prepares) Discuss NBIS Long Term evaluation</li> <li>Lars will think about the responsible recording question by Richel</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241018/","title":"Meeting notes 2024-10-18 9:00","text":"<ul> <li>Discuss schedule, this is the schedule:</li> </ul> <p>State of the schedule at 2024-10-18:</p> <ul> <li>Monday morning:<ul> <li>Bj\u00f6rn: course overview, 1 hour</li> <li>Bj\u00f6rn: basic git and setup and project start, 2 hours, also for people that know git</li> </ul> </li> <li>Monday afternoon: Requirements modeling and risk assessment<ul> <li>13:00-14:00 Lars: Define the project, create README files</li> <li>14:15-15:00 Lars: Make formal requirements model, create files, put on GitHub</li> <li>15:00-15:40 Lars: Make formal risk assessment, create files, put on GitHub</li> <li>15:40-16:00: Lars: Confidence and Retrospect</li> </ul> </li> <li>Tuesday:<ul> <li>Lars: SDLC (Software Development Lifecycle), 1 hour</li> <li>Richel: Organize the project, GitHub workflow, Issues, Project page, 1 hour</li> <li>Richel: 4 hours Test-Driven Development (TDD) on main only, add in-code documentation</li> <li>15:40-16:00: Lars: Confidence and Retrospect</li> </ul> </li> <li>Wednesday:<ul> <li>Bj\u00f6rn: (3 hours) git branches, git merge, from a reproducible research and social coding/development perspective, 3 hours</li> <li>Richel: (3 hours) Function design</li> <li>15:40-16:00: Lars: Confidence and Retrospect</li> </ul> </li> <li>Thursday:<ul> <li>Lars: object-oriented design, 1 hours</li> <li>Richel: (2 hours) Class design</li> <li>Lars: modular programming, 1 hours</li> <li>Richel: (2 hours) implement the project as a package</li> <li>15:40-16:00: Lars: Confidence and Retrospect</li> </ul> </li> <li>Friday morning:<ul> <li>Richel: optimization, 2 hours</li> <li>Bj\u00f6rn: Deployment and documentation, 1 hour</li> </ul> </li> <li> <p>Friday afternoon:</p> <ul> <li>Bj\u00f6rn: Deployment and documentation, 3 hours</li> <li>15:15 Bj\u00f6rn (leads) + Lars + Richel: wrapping up</li> <li>15:30-16:00: Lars: Confidence and Retrospect and something for the whole course</li> </ul> </li> <li> <p>About this schedule</p> <ul> <li>On Monday morning, B will only mention, not teach, a flowchart. L will do the actual teaching.</li> </ul> </li> <li> <p>Other scheduling this</p> <ul> <li>R: Simply add Retrospective+Confidence at last 20 minutes of day? Ask L for duration. Concluded: 15:40-16:00, R will add to schedules</li> <li>B: should be last thing? L yes</li> <li>B: at the end of a day there is already a summary of the day, e.g. at <code>[broken link]</code> (Edit from the future: summaries are moved, as of 2025-03-05, into the learning outcomes)</li> <li>L: idea is measure confidences first, then do a Retrospective</li> <li>B: where do they put their confidences?<ul> <li>L: Menti for confidences, because anonymous, quick and easy to   extract statistics</li> </ul> </li> <li>B: will L use Menti in other sessions?<ul> <li>L: maybe</li> </ul> </li> <li>B will create a shared document and use it in his lectures.<ul> <li>R: will maybe use it too</li> </ul> </li> </ul> </li> <li>Discuss Issues<ul> <li>R: I feel there is nothing to discuss here, we just need to do them :-)</li> </ul> </li> <li>[Postponed to next meeting] (R prepares) Discuss NBIS Long Term evaluation</li> <li>Lars will think about the responsible recording question by Richel<ul> <li>R: this can be a regular issue, taken up outside of this meeting, it is now Issue 62</li> </ul> </li> </ul> <p>Todo:</p> <ul> <li>[ ] B: created shared doc with HackMD</li> <li>[ ] B: add schedule from above on course website</li> <li>[ ] R: add Retrospect to schedule</li> <li>[ ] (L: will d Retrospects in course)</li> </ul> <p>Next meeting:</p> <ul> <li>Tuesday 29th October 11:00-12:00</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241025/","title":"Meeting notes 2024-10-25 9:00","text":"<ul> <li>Discuss Issues</li> <li>(R prepares) Discuss NBIS Long Term evaluation</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241029/","title":"Programming Formalisms meeting 2024-10-29","text":"<ul> <li>L has started working on Issues, R and B will do so around these days</li> <li> <p>Schedule changes:</p> <ul> <li>UML moved from B to Lars on Monday 13:15-14:00</li> <li>Top down/bottom up moved from B to L on Tuesday morning</li> </ul> </li> <li> <p>Contact NBIS Training Hub</p> </li> </ul> <p>Recommendations, first follow (link):</p> <ul> <li>Train the Trainer</li> <li>Organisational learning course</li> <li>The Swedish context of Open Science</li> </ul> <p>Advice:</p> <ul> <li>All team members should try to do a reflection</li> <li>Try to build in peer observation within team</li> <li>Contact former students informally to see which part of the curriculum was most important to them<ul> <li>R: Why, besides being interesting?<ul> <li>Because it may help shape the course curriculum</li> <li>R: Unsure about that: we pick what we need to discuss.</li> </ul> </li> </ul> </li> <li>Individually schedule a meeting with the NBIS Training Hub</li> </ul> <p>Next meeting:</p> <ul> <li>Friday Nov 9th 9:00-9:45. Schedule will be locked after that meeting!</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241029_nbis_training_hub/","title":"2024-10-29 with NBIS Training Hub","text":"<ul> <li>Goal: to find out how the NBIS Training Hub can help us improve our course</li> </ul> <p>Recommendations, first follow (link):</p> <ul> <li>Train the Trainer</li> <li>Organisational learning course</li> <li>The Swedish context of Open Science</li> </ul> <p>Advice:</p> <ul> <li>All team members should try to do a reflection</li> <li>Try to build in peer observation within team</li> <li>Contact former students informally to see which part of the curriculum was most important to them<ul> <li>R: Why, besides being interesting?<ul> <li>Because it may help shape the course curriculum</li> <li>R: Unsure about that: we pick what we need to discuss.</li> </ul> </li> </ul> </li> <li>Individually schedule a meeting with the NBIS Training Hub</li> </ul>","tags":["meeting","notes","NBIS","training","hub"]},{"location":"meeting_notes/20241108/","title":"Programming Formalisms meeting 2024-11-08","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20241108/#agenda","title":"Agenda","text":"<ul> <li>status</li> <li>issues/discussions</li> <li>other discussions<ul> <li>add below!</li> </ul> </li> <li>To Dos</li> <li>More things?<ul> <li>add below</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241108/#status","title":"Status","text":"<ul> <li>Registrations<ul> <li>Number: 14 (post URL in slack)</li> <li>Do we need to send more information?<ul> <li>Lars prepare something and we review during the day</li> </ul> </li> </ul> </li> <li>Schedule to be set today<ul> <li>RB: I feel schedule is done</li> <li>DONE</li> </ul> </li> <li>Material: How's production<ul> <li>BC: rather bad but possible</li> <li>RB: done nothing so far, will start on Tuesday</li> <li>LE: start Wed more effectively</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241108/#issuesdiscussions","title":"Issues/discussions","text":"<ul> <li>Content</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241108/#other-discussions","title":"Other discussions","text":"<ul> <li>RB: what about we evaluate shortly after the course and then   determine the schedule then? I feel we should change our minds less</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241108/#todos-who","title":"ToDos (who)","text":"<ul> <li>move existing files to right day (configure file): Bj\u00f6rn does this</li> <li>develop material (all)</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241108/#last-week","title":"Last week","text":"<ul> <li>Contact NBIS Training Hub</li> </ul> <p>Recommendations, first follow (link):</p> <ul> <li>Train the Trainer</li> <li>Organisational learning course</li> <li>The Swedish context of Open Science</li> </ul> <p>Advice:</p> <ul> <li>All team members should try to do a reflection</li> <li>Try to build in peer observation within team</li> <li>Contact former students informally to see which part of the curriculum was most important to them<ul> <li>R: Why, besides being interesting?<ul> <li>Because it may help shape the course curriculum</li> <li>R: Unsure about that: we pick what we need to discuss.</li> </ul> </li> </ul> </li> <li>Individually schedule a meeting with the NBIS Training Hub</li> </ul> <p>Next meeting:</p> <ul> <li>Friday Nov 9th 9:00-9:45. Schedule will be locked after that meeting!</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241115/","title":"Programming Formalisms meeting 2024-11-15","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/20241115/#agenda","title":"Agenda","text":"<ul> <li>Anyone need help?<ul> <li>RB: No</li> </ul> </li> <li>RB: FYI: I am always present and always able to teach something.   One example: when we discuss <code>git</code>, I can take the learners   that already know <code>git</code> to a separate room and get them working   on the project already. Just set me to work!</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241129/","title":"Meeting 2024-11-29","text":"<p>Goal: to determine what needs to be discussed in future meetings. If we know what to do, we can agree on doing those things.</p> <ul> <li>R: suggest: for next time, we should have all gone through the issues   and give our opinions on those we are assigned to.   E.g.:<ul> <li>I ask ask BC for advice, so I assign it</li> <li>BC gives advice, then unassigns</li> </ul> </li> </ul> <p>Next meeting in two weeks:</p> <ul> <li>Monday Dec 16 11:00, we'll discuss the issues</li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/20241217/","title":"Meeting notes","text":"<ul> <li>Tuesday Dec 17 9:00</li> <li>Goal: Decide week for Autumn course<ul> <li>Decide week for Autumn course</li> <li>Lars: no week 42, has things on October 13-16</li> <li>Decision: Week 43 it is for now, we'll postpone if needed</li> </ul> </li> <li>Goal: discuss all unresolved issues<ul> <li>Having one or two schedules<ul> <li>Decided: one place for a schedule, use the 'Schedule' as the only place </li> </ul> </li> <li>Pick date for a working-on-the-course day<ul> <li>Decided: two half days</li> <li>Goal: do the things we need each other for</li> <li>Jan 15th 13:00-16:00 IRL at \u00c5ngstr\u00f6m, room 103130<ul> <li>[DONE] Bj\u00f6rn books a room</li> <li>Reflect if we are happy with the way</li> <li>Pick second date then</li> </ul> </li> </ul> </li> <li>Learners' project<ul> <li>B: some learners may not feel it is relevant,   pandas uses Titanic data</li> <li>L: agree for simpler project and relevant to science and domain agnostic</li> <li>B: let's agree on the features:<ul> <li>Data should be there: B, L, R</li> <li>Both input and output: B, L, R</li> <li>take other users into account: B, L, R</li> <li>use of external packages: B, L, R</li> </ul> </li> <li>Lars will come up with a learners' project suggestion   next time</li> </ul> </li> <li>Decide upon folder structure<ul> <li>L: Move Lars stuff into <code>docs</code> [DONE]</li> <li>R: Move <code>images</code> into <code>docs</code> [DONE]</li> <li>R: Delete <code>mkdocs_uppmax</code>, do a rename first</li> <li>We all agree that there are too many folders and   we'll put our own work into subfolders</li> </ul> </li> <li>B: Menu layout (#121). Lars agrees to whatever we do!<ul> <li>Follow the SDLC:<ul> <li>Planning</li> <li>Design</li> <li>Development</li> <li>Testing</li> <li>Deployment</li> </ul> </li> </ul> </li> </ul> </li> <li>For Lars: decisions taken based on majority vote:<ul> <li>Discuss merge conflicts on day 1<ul> <li>Agreed</li> </ul> </li> <li>Provide worked-out answer for exercises<ul> <li>Agreed</li> </ul> </li> <li>Use terminal from VSCode<ul> <li>Agreed</li> </ul> </li> <li>Use git from VSCode<ul> <li>Agreed</li> <li>Should we show CLI at all? Or just click through things?<ul> <li>L + R: click through things, to spend less time on git commands</li> <li>B: will test how well this idea would work</li> <li>B: how does that affect the prerequisites?</li> <li>R: will be reduced :-)</li> <li>B: how is the threshold of the course?<ul> <li>R: if they have been able to write a script, this   seems high enough to me</li> <li>L: we seem to hit the target audience, so it   seems right</li> </ul> </li> <li>[DECIDED] So, no <code>git</code> as a prerequisite :-)</li> </ul> </li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/","title":"Programming formalisms for life scientists and bioinformaticians","text":"<p>No checks here</p> <p>This document is here for historical purposes.</p> <p>It was never set up with a spellcheck in mind.</p> <p>Spelling will not be fixed.</p> <p>Main page: https://github.com/UPPMAX/programming_formalisms Rendered page: https://uppmax.github.io/programming_formalisms/</p>","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/#zoom-meetings-will-be-called-when-needed-most-issues-shall-be-resolved-through-github-issues-if-meeting-is-requested-i-will-be-posted-in-the-slack-chanell-and-the-below-meeting-id-will-be-used","title":"Zoom meetings will be called when needed most issues shall be resolved through github issues if meeting is requested i will be posted in the slack chanell and the below meeting id will be used","text":"<p>https://uu-se.zoom.us/j/63272190301 (Passcode: 880630)</p>","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/#course-certificates","title":"Course certificates","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/#course-certificates-fall-2023","title":"Course certificates fall 2023","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/#certificates","title":"Certificates","text":"<p>Text for course certificate use https://rshiny.nbis.se/shiny-server-apps/shiny-certificate/ to create certificate change the dates in brackets</p> <p>&lt;&gt; <p>has participated in the NBIS workshop Programming Formalisms held in Online during [[April 22 \u2013 26 2024]] The workshop consisted of 40 hours of lectures and computer exercises. This full 5-day workshop aims to g an understanding of the underlying principles of software development, design, and programming.</p> <p>This included the following topics:</p> <pre><code>Introduction to programming formalism\nSource control and GitHub\nIntroduction to UML using plantUML\nIntroduction to Algorithms\nData types and data structures\nIntroduction to Software Development Lifecycle\ncommon models\nplanning\nsource/version control\ndocumentation\nreproducibility and sharing\ncollaboration\ntesting\nIntroduction to Modular programming and the modular programming paradigm\nIntroduction to Social Coding\nPair Programming\nIntroduction to Object orientation and Object oriented design\nIntroduction to Test Driven Design and Testing (TDD)\nincluding to GitHub Actions\nautomated testing\nIntroduction Software re-usability through component based and Modular programming\nOptimization, measuring and common pitfalls\n</code></pre> <p>Course Leader | Lars Eklund, PhD Applications Expert UPPMAX/NBIS NBIS | Uppsala University</p>","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/#course-spring-2024","title":"Course spring 2024","text":"","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/#dates-and-info","title":"Dates and info","text":"<ul> <li>Onboarding takes place Thursday 18th April 11:00-(max)12:00<ul> <li>[Lars, Richel] Available 11:00-11:20</li> <li>[Lars] Write welcome letter to participants today must be done 14:30<ul> <li>Encourage strongly to have a good Zoom setup :-)</li> <li>Monday April 22nd to and including Friday  April 26th</li> <li>Each day from 9:00-16:00</li> <li>R volunteers to (help) write the letter if needed!</li> </ul> </li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/2024_autumn/#meeting-after-course","title":"Meeting after course","text":"<ul> <li>[Richel, discuss] How many things at the same time should our learners do?<ul> <li>B: ceil(\\pi - e)</li> <li>L:</li> <li>R: 1</li> </ul> </li> <li>[Richel, discuss] What should the learners do in the break?<ul> <li>B: break or technical issues if OK with them</li> <li>L:</li> <li>R: do nothing, take a break</li> </ul> </li> <li>[Richel, discuss] How long should a monologue be? What should happen when this duration has been  crossed?<ul> <li>B: aim to 10 minutes<ul> <li>is a demo where they can choose to do a type-along a monologue?</li> <li>with demo it can be up to 20 I guess</li> </ul> </li> <li>L:</li> <li>R: 20 minutes max, a helper should remind the teacher by voice</li> </ul> </li> </ul>","tags":["meeting","notes"]},{"location":"meeting_notes/next/","title":"Meeting","text":""},{"location":"meeting_notes/next/#remove-obsolete-files","title":"Remove obsolete files","text":"<p>Currently, we only use our MkDocs pages. This means PDFs and Powerpoint presentations are obsolete.</p> <p>Here is a list of such obsolete files:</p> <pre><code>./development_design/Modular_Programming.pdf\n./development_design/Development and Programming Formalisms vt2023.pdf\n./development_design/Development_and_Programming_Formalisms.pdf\n./development_design/development_and_programming_formalisms_ht2023.pdf\n./development_design/ZoomWhiteboard.pdf\n./development_design/img/AI_assisted_No_UU_logo.pptx\n./development_design/analysis_and_design_programming_formalism_ht_2023.pdf\n./common_practices/slides/notes_code_review.pdf\n./img/development_design/AI_assisted_No_UU_logo.pptx\n</code></pre> <p>I suggest to delete all these</p>"},{"location":"misc/definitions/","title":"Definitions","text":"Term Definition Aggregation A has-a relation between two objects, where the smaller object is not owned, e.g. a university has professors <code>assert</code> A function to test one's own assumptions or indicate a stub Class An extensible program-code-template for creating objects, allows for OOP Composition A has-a relation between two objects, e.g. a car has an engine Function Isolated piece of code with a name, input arguments and output value Function arguments The values that a function needs to do its work, e.g. a number to determine if it is prime Function return value The value produced by a function, e.g. a <code>TRUE</code> or <code>FALSE</code> for a function that determines if a number is prime Hardcoding The of a value that is fixed and unchangeable in the code, for example the name of an input file. Inheritance An is-a-type-of relation between two objects, e.g. a duck is a type of animal Integration test Test of multiple classes working together OOP Abbreviation of 'object oriented programming', which is a type of programming that uses classes Stub A beginning of something, something that needs to be expanded on later TDD See test-driven development Test-driven development The software development methodology to write tests that initially fail to grow the code Unit test Test of a single function or class","tags":["definitions","glossary","dictionary"]},{"location":"misc/evaluation/","title":"Evaluation","text":"<p>For teachers only</p> <p>Below is the text of the NBIS Short Term Feedback questions for reference.</p> <p>We consider using it in this Issue.</p> <pre><code>[Richel] My comments can be found in code blocks like this :-)\n</code></pre> <pre><code>&gt; [Richel] What I don't like, is that the results are not public\n</code></pre>","tags":["evaluation"]},{"location":"misc/evaluation/#nbis-short-term-feedback-stf","title":"NBIS Short Term Feedback (STF)","text":"","tags":["evaluation"]},{"location":"misc/evaluation/#core-question-set-information","title":"Core question set information","text":"<p>The intention of the STF survey is to find out how participants have used the skills and knowledge they gained through participating in the NBIS course.</p> <p>[Richel] This seems false to me. Could this be a copy-paste mistake from the Long Term Feedback survey?</p> <p>A goal I suggest: The intention of the STF survey is to find out how the course can be improved.</p> <p>The STF survey aims to provide data back to NBIS from course participants.</p> <p>[Richel] Suggest: 'The results of this survey are used by NBIS'.</p> <p>I wish it would say:</p> <p>The results of this survey will be published online, to make sure each voice is heard.</p> <p>The survey should preferably be given by the course leader to the participants on the last day of the course. Some of the questions below are CORE Questions and needs to always be included in the survey. There are also room for ADDITIONAL questions that can be modified for respective course.</p> <p>[Richel] Sounds like the core questions are the only ones bothering learners with. The additional questions already feel too much 'nice to have'.</p> <ul> <li>Contents</li> <li>Important Information</li> <li>Core Question Set</li> <li>Demographic Information</li> <li>Quality Metrics</li> <li>Additional Questions - Training content/information</li> <li>Additional Questions - Training logistics</li> </ul>","tags":["evaluation"]},{"location":"misc/evaluation/#important-information","title":"Important Information","text":"<p>Below are the core questions for NBIS short term feedback (STF), which are required to be captured for all NBIS training events from August 2018 onwards, most typically in an end-of-training-event feedback survey (i.e. exit survey). The information and Core questions are extracted from the ELIXIR and ELIXIR-EXCELERATE courses. Additional questions are free to be modified to suit the course needs. The format for collecting the data is up to each training provider, although results should be exportable to Excel format. The core questions may be divided into two categories and will by and large be analysed separately - both categories are required to be captured:</p> <ul> <li>Demographic information</li> <li>Quality metrics</li> </ul> <p>For the demographic information questions specifically, these may be captured either in the exit survey OR in the registration form. The exit survey should be administered as close as possible to the end of the training event, preferably on the last day of the course. Please add the result of the survey to the course folder in Google Drive (NBIS Course Catalogue).</p> <p>[Richel] In teaching, I don't care about where the learners come from. I guess this is just to make pretty pictures?</p> <p>The core question set is followed by a set of Additional (suggested) questions that training organisers might also like to ask. Please note: while the core question set is compulsory, Course leader(s) are encouraged to ask any additional questions for their own collection and data analysis, should they wish.</p> <p>Data formatting: Preferred column headers for each core metric are in \u2018red\u2019. It would be very helpful for analysing the data if everyone used these column headings when exporting the results. Please note: these descriptors are case sensitive (e.g. use <code>advertised</code> not <code>Advertised</code>). Also, the underscores are important! (e.g. <code>career_stage</code> is NOT the same as <code>career stage</code>).</p> <p>If possible, please name the dataset file as follows to assist with data handling: <code>YYYY-MM-DD_L/STF_Location_CourseName</code>, e.g. <code>2018-06-11_STF_Visby_RaukR</code></p>","tags":["evaluation"]},{"location":"misc/evaluation/#core-question-set","title":"Core Question Set","text":"","tags":["evaluation"]},{"location":"misc/evaluation/#section-1-template-nbis-short-term-feedback-stf-survey-course-name-location-yyyy-mm-dd","title":"Section 1 - Template: NBIS Short Term Feedback (STF) survey <code>COURSE NAME, LOCATION, YYYY-MM-DD</code>","text":"<p>Thank you for filling the questionnaire. It is really important to us in order to continually improve the course and the materials we deliver. In filling the questionnaire, please keep in mind that your comments - which are not mandatory - are especially precious. We may share anonymised information with course presenters and developers as well as for wider quality/impact analyses.</p> <p>[Richel] Suggest to use 'The results will be posted online as-is, to make sure all voices get heard'</p> <ul> <li>Required</li> </ul>","tags":["evaluation"]},{"location":"misc/evaluation/#section-2-demographic-information","title":"Section 2 - Demographic Information","text":"<p>[Richel]: I don't feel it is worth to bother our learners with question 1 below: I don't care. I do see its use in an intake form, but even there, I feel we should respect our learners' time.</p> <ol> <li> <p>Where did you see the course advertised? <code>advertised</code></p> </li> <li> <p>a. NBIS website</p> </li> <li>b. SciLifeLab website</li> <li>c. Social Media (e.g. NBIS twitter)</li> <li>d. Host Institute website</li> <li>e. Colleague</li> <li>f. TeSS</li> <li>g. Email</li> <li>h. Internet search</li> <li>i. Other (comments)</li> </ol> <p>[Richel]: I don't feel it is worth to bother our learners with question 2 below it will have no effect on my preparation</p> <ol> <li> <p>What is your career stage? <code>career_stage</code></p> </li> <li> <p>a. PhD candidate</p> </li> <li>b. Postdoctoral researcher</li> <li>c. Senior researcher/Principal investigator</li> <li>d. Staff scientist</li> <li>e. Industry scientist</li> <li>f. Other (comments)</li> </ol> <p>[Richel]: I don't feel it is worth to bother our learners with question 3 below: it will have zero effect on my preparation</p> <ol> <li>What is your host university? <code>host_university</code></li> </ol> <p>[Richel]: I don't feel it is worth to bother our learners with question 4 below: it will have zero effect on my preparation</p> <ol> <li> <p>Gender <code>gender</code></p> </li> <li> <p>a. Male</p> </li> <li>b. Female</li> <li>c. Prefer not to say</li> <li>d. Other (please specify)</li> </ol>","tags":["evaluation"]},{"location":"misc/evaluation/#section-3-quality-metrics","title":"Section 3 - Quality Metrics","text":"<pre><code>[Richel] I don't see the use of question 5 below,\nI see no reason why this would change the course, nor my teaching\nin any way\n</code></pre> <ol> <li> <p>Have you used the tools/resource(s) covered in the course before? <code>have_used_resources_before</code></p> </li> <li> <p>i. Never - Unaware of them</p> </li> <li>ii. Never - Used other service</li> <li>iii. Occasionally</li> <li>iv. Frequently</li> </ol> <pre><code>[Richel] I don't see the use of question 6 below,\nas I feel question 7 gives me the similar info.\n</code></pre> <ol> <li>Will you use the tools/resource(s) covered in the course again? <code>will_use_resources_future</code></li> </ol> <ul> <li>v. Yes</li> <li>vi. No</li> <li> <p>vii. Maybe</p> </li> <li> <p>Would you recommend the course? <code>would_recommend_course</code></p> </li> <li> <p>viii. Yes</p> </li> <li>ix. No</li> <li> <p>x. Maybe</p> </li> <li> <p>What is your overall rating for the course*. <code>overall_satisfaction</code></p> </li> <li> <p>a. Poor (1)</p> </li> <li>b. Satisfactory (2)</li> <li>c. Good (3)</li> <li>d. Very Good (4)</li> <li>e. Excellent (5)</li> </ul> <p>(*please include both numeric and categorical scale for this question.)</p> <pre><code>[Richel] I don't like to bother our learners with this.\nInstead, I suggest to link to a long-term feedback form at this page\n</code></pre> <ol> <li> <p>A. May we contact you by email in the future for more feedback? <code>contact_future</code></p> </li> <li> <p>i. Yes</p> </li> <li>ii. No</li> </ol> <p>9 B. If you answered \u2018yes\u2019 to the above question, please enter your email address, below. email ( Information for question 9B must be collected and stored by each Node/Institution, but should NOT be shared with the Q&amp;I subtask or any other third party due to GDPR considerations.)</p>","tags":["evaluation"]},{"location":"misc/evaluation/#additional-questions-training-contentinformation","title":"Additional Questions - Training content/information","text":"<p>These are suggested questions that may be of interest (not compulsory):</p> <pre><code>Richel: I don't see how question 1 below would change my teaching\n</code></pre> <ol> <li>What part of the training did you enjoy the most? <code>enjoy</code></li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 2 below\n</code></pre> <ol> <li>What part of the training did you enjoy the least? <code>to_improve</code></li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 3 below\n</code></pre> <ol> <li> <p>The balance of theoretical and practical content was <code>theoretical_practical</code></p> </li> <li> <p>a. Too practical</p> </li> <li>b. About right</li> <li>c. Too theoretical</li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 4 below\n</code></pre> <ol> <li> <p>How do you rate the pre-course information given? pre_course_information</p> </li> <li> <p>Linear scale 1-5</p> </li> <li> <ol> <li>(Very unsatisfactory/Not useful)</li> </ol> </li> <li> <ol> <li>Very good/Very useful</li> </ol> </li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 5 below\n</code></pre> <ol> <li> <p>What other topics would you like to see covered in the future? <code>future_topics</code></p> </li> <li> <p>Any other comments? Comments</p> </li> </ol> <p>[Richel]: I don't feel it is worth to bother our learners with question 7 below, for these reasons:</p> <ul> <li>SETs ('Student Evaluations of Teaching') encourage poor   teaching <code>[Stroebe, 2020]</code></li> <li>I do not care about 'satisfaction', instead I care about the learning   outcomes. Sure, they may correlate, but I prefer to ask the thing I care for</li> <li>Asking for satisfaction needlessly hurts teachers' feelings, as it allows   bullying. I've seen two reasonable teachers (one of these me) get a '1'   here. I hypothesize for both that this was because the learners simply   did not like the teacher. We don't need to take such crap</li> </ul> <ol> <li> <p>PLEASE RATE EACH SESSION OF THE COURSE <code>satisfaction_per_session_YYYY_MM_DD_am/pm</code></p> </li> <li> <p>a. Did not attend</p> </li> <li>b. Poor (1)</li> <li>c. Satisfactory (2)</li> <li>d. Good (3)</li> <li>e. Very Good (4)</li> <li>f. Excellent (5)</li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 8\nbelow, as we have question 5\n</code></pre> <ol> <li>Comments on teaching staff <code>teaching_staff</code>     Help our teaching staff to improve by providing constructive feedback     Paragraph text answer</li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 9 below\n</code></pre> <ol> <li>Was the course held at a teaching level matching your training? teaching_training_level</li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 10 below\n</code></pre> <ol> <li>STATEMENTS REGARDING WHAT PARTICIPANTS COULD DO before TRAINING (customised to a specific training) skills_before</li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 11 below\n</code></pre> <ol> <li>STATEMENTS REGARDING WHAT PARTICIPANTS CAN DO after TRAINING (customised to a specific training) skills_after</li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 12 below\n</code></pre> <ol> <li> <p>What other topics would you like to see covered in the future? future_topics</p> </li> <li> <p>Any other comments? Comments_1</p> </li> </ol>","tags":["evaluation"]},{"location":"misc/evaluation/#additional-questions-training-logistics","title":"Additional Questions - Training logistics","text":"<p>These are suggested questions that may be of interest (not compulsory):</p> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 1 below\n</code></pre> <ol> <li> <p>What would be the preferred length of the course? <code>preferred_length</code></p> </li> <li> <p>Linear scale 1-5 Days</p> </li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 2 below\n</code></pre> <ol> <li> <p>How did you like the facilities/localities of the course (rooms and surroundings)? <code>course_localities</code></p> </li> <li> <p>Linear scale 1-5</p> </li> <li> <ol> <li>Not at all</li> </ol> </li> <li> <ol> <li>Very much</li> </ol> </li> </ol> <pre><code>[Richel]: I don't feel it is worth to bother our learners with question 3 below\n</code></pre> <ol> <li> <p>How did you like the lunch(es) and \u201cfika(s)\u201d? lunch_fikas</p> </li> <li> <p>Linear scale 1-5</p> </li> <li> <ol> <li>Not at all</li> </ol> </li> <li> <ol> <li>Very much</li> </ol> </li> <li> <p>Any other comments? <code>Comments_2</code></p> </li> </ol> <p>It was a great experience and we are working hard to make it even better. Now go make something great!</p>","tags":["evaluation"]},{"location":"misc/evaluation/#references","title":"References","text":"<ul> <li><code>[Stroebe, 2020]</code> Stroebe, W. (2020). Student Evaluations of Teaching   Encourages Poor Teaching and Contributes to Grade Inflation: A Theoretical   and Empirical Analysis. Basic and Applied Social Psychology,   42(4), 276\u2013294. https://doi.org/10.1080/01973533.2020.1756817</li> <li><code>[Sitzmann &amp; Johnson, 2014]</code> Traci Sitzmann and Stefanie Johnson.   \"The paradox of seduction by irrelevant details: How irrelevant information   helps and hinders self-regulated learning.\"   Learning and Individual Differences (2014): 1-11.   Download page</li> </ul>","tags":["evaluation"]},{"location":"misc/faq/","title":"FAQ","text":"<p>The frequently asked questions, about:</p> <ul> <li>credits: can I get university credits for this course?</li> <li>eligibility, i.e. when to join the course</li> <li>preparation</li> <li>course teaching,   i.e. how the course is conducted and ideas behind it</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#credits","title":"Credits","text":"","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#can-i-get-university-credits-for-this-course","title":"Can I get University Credits for this course?","text":"<p>No.</p> <p>We don't give formal credits for the course. That is up to your supervisor. You can ask for a certificate after the course that helps with the decisions.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#eligibility","title":"Eligibility","text":"","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#i-have-never-programmed-before-am-i-eligible","title":"I have never programmed before. Am I eligible?","text":"<p>Not yet (for your own good)!</p> <p>This is not an introductory course on programming. Learners are expected to know basic programming concepts, such as variables and functions.</p> <p>In this course, you will work together a lot. It will be likely to be noticed that you do not have programming experience yet, and you may feel bad about that. Take an introductory programming course first and then we hope to see you here again!</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#i-am-a-non-python-programmer-am-i-eligible","title":"I am a non-Python programmer. Am I eligible?","text":"<p>Yes.</p> <p>In the course, we will use Python as the workhorse language, as most of our learners have experience with Python.</p> <p>You will write code in Python in exercises. To make that possible for non-Python programmers:</p> <ul> <li>code will be simple and/or copy-pasted</li> <li>learners are usually paired up,   so that usually one of the learners knows Python.</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#preparation","title":"Preparation","text":"","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-do-i-prepare","title":"How do I prepare?","text":"<p>See prerequisites for how to prepare.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <ul> <li>This page may be updated during the next days.</li> <li>Please email back to Bj\u00f6rn to let us know if somthing is unclear in the instructions!</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-do-i-know-i-have-vs-code-installed","title":"How do I know I have VS Code installed?","text":"<p>You know if you have VS Code installed, if you can start this program and it looks like this:</p> <p></p> <p>Otherwise, download here</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-do-i-know-i-have-a-git-account-configured-on-your-computer","title":"How do I know I have a Git account configured on your computer?","text":"<p>Git (specific installation may be required) and terminals are already integrated in VS Code and can be the first choice Otherwise follow the steps in some installation procedures!</p> <p>Check configure git section</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-do-i-know-i-have-a-github-account","title":"How do I know I have a GitHub account?","text":"<p>You have set up a GitHub account, if you can login at https://github.com/.</p> <p>Otherwise, sign up for GitHub account, following these instructions</p> <p>A second step is to connect Git and GitHub in a nice way, see Git\u2013GitHub connection through ssh keys</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-do-i-know-if-i-have-python-installed","title":"How do I know if I have Python installed?","text":"<p>You have installed Python, if</p> <pre><code>In a terminal, running `python --version` or `python3 --version` shows the Python version.\n</code></pre> <ul> <li>If not working, follow the installation steps suitable for you and/or instructions for Python in VSCode.</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#can-you-run-python-from-vs-code","title":"Can you run Python from VS Code?","text":"<p>Yes.</p> <p>We even use VS Code to install Python, as VS Code has an easy to install Python plugin.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-do-i-know-that-i-know-the-basics-of-python","title":"How do I know that I know the basics of Python?","text":"<p>You know enough basic Python, if:</p> <ul> <li>You can describe what a variable is</li> <li>You can change the value of a variable</li> <li>You can show the value of a variable on screen</li> </ul> <p>If you do not know enough Python, chapters 1 and 2 of 'How to Think Like a Computer Scientist' is all you need.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#why-do-you-use-vs-code","title":"Why do you use VS Code?","text":"<p>Because it ...</p> <ul> <li>is free (as in beer)</li> <li>works on all operating systems</li> <li>has plugins that are easy to install to develop Python code as part of a Python package</li> <li>has <code>git</code> for version control built-in</li> <li>has a built-in terminal</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#can-i-use-pycharm-or-idle-or-any-other-ide","title":"Can I use PyCharm? Or IDLE? Or any other IDE?","text":"<p>Yes.</p> <p>However, we may not be able to help you with your IDE problems.</p> <p>Within your IDE, you will need:</p> <ul> <li>To develop Python code as part of a Python package</li> <li>To use <code>git</code> for version control</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-do-i-know-i-have-a-good-zoom-setup","title":"How do I know I have a good Zoom setup?","text":"<p>You have a Zoom good setup, if:</p> <ul> <li>you can talk freely. If not, find a room/place where you can.</li> <li>others in the Zoom room can clearly hear what you say.   If not, use a microphone.</li> <li>you can clearly hear what others in the Zoom room say.   If not, use a headset.</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#do-i-really-need-a-good-zoom-setup","title":"Do I really need a good Zoom setup?","text":"<p>Yes.</p> <p>You will be working together with other learners a lot. Not being able to talk and/or share your screen and/or your camera is likely to make you feel excluded.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#some-installation-and-configuring-procedures","title":"Some installation and configuring procedures","text":"","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#git-bash","title":"Git Bash","text":"<ul> <li>Version &gt;= 2.28 would do</li> </ul> WindowsMacOSLinux <p>There are several different ways to run the course material on a Windows computer. Neither is perhaps optimal, and the material itself has not been adapted specifically for Windows. Nevertheless, in principle everything should be possible to run. A few ways you could setup:</p> <p>Git-windows with a command line and Git integrated</p> <ul> <li> <p>Install Git Windows: https://gitforwindows.org/ (easiest if you want to start fast and plan to work in windows environment)</p> <ul> <li>Follow the setup insctructions from the Windows part at https://coderefinery.github.io/installation/git-in-terminal/ by CodeRefinery.</li> <li>Included will be the Git Bash</li> </ul> </li> </ul> <ul> <li>We use the VSCode built-in terminal to some extent</li> <li>Choose one of your choice, the built-in or another!</li> <li>Chances are big that you already have git installed on your computer.</li> <li>You can check by running e.g. <code>git --version</code>.<ul> <li>and if it reports 2.28 or higher, then you are good.</li> </ul> </li> <li>If you have a very old version of git or you don't have it,   install it following   the git MacOS download instructions<ul> <li>You may have to do <code>xcode select --install</code> from the Mac terminal.</li> </ul> </li> </ul> <ul> <li><code>git</code> comes installed with all Linux distributions</li> <li>To install <code>git</code>, do <code>sudo apt-get install git</code></li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#using-vs-code-as-a-git-editor","title":"Using VS Code as a git editor","text":"<ul> <li>When Git is installed you may need to restart a shell in VS code before it works.</li> <li>This will set VS Code as the editor that Git starts.</li> <li>It will start a new tab, and Git will wait until you save and close that tab.</li> <li>Git for Windows on Windows may automatically set this if you select it as an editor.</li> <li>Otherwise:</li> </ul> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#configure-git","title":"Configure git","text":"<p>This must be done</p> <p>Follow these instructions. https://nbis-reproducible-research.readthedocs.io/en/course_2104/setup/#installing-git</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#gitgithub-connection-through-ssh-keys","title":"Git\u2013GitHub connection through ssh keys","text":"<p>(This may take a while to get working, but is worth it) https://coderefinery.github.io/installation/ssh/</p> <ul> <li>Test: <code>ssh -T git@github.com</code><ul> <li>Output should be something like this: <code>Hi bclaremar! You've successfully authenticated, but GitHub does not provide shell access.</code></li> </ul> </li> <li>If not working, these are the approximate steps to be done in your terminal. It can vary between systems, so link above is more certain.</li> </ul> <pre><code>ssh-keygen -t ed25519 -C \"&lt;email address for your GitHub account&gt;\"\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n</code></pre> <ul> <li>For WINDOWS</li> </ul> <pre><code># Copy the SSH public key to your clipboard.\nclip &lt; ~/.ssh/id_ed25519.pub\n</code></pre> <ul> <li>On Mac, use <code>pbcopy</code> instead, like:</li> </ul> <pre><code># Copy the SSH public key to your clipboard:\npbcopy &lt; ~/.ssh/id_ed25519.pub\n</code></pre> <ul> <li> <p>Then go to your GitHub account on the web.</p> <ol> <li>In the upper-right corner of any page, click your profile photo, then click Settings.</li> <li>In the \"Access\" section of the sidebar, click SSH and GPG keys.</li> <li>Click New SSH key or Add SSH key.</li> <li>In the \"Title\" field, add a descriptive label for the new key. For example, if you're using a personal laptop, you might call this key \"Personal laptop\".</li> <li>Select the type of key authentication.</li> <li>In the \"Key\" field, paste your public key.</li> <li>Click Add SSH key.</li> <li>If prompted, confirm access to your account on GitHub.</li> </ol> </li> <li> <p>Now test again in your terminal: <code>ssh -T git@github.com</code></p> <ul> <li>Output should be something like this: <code>Hi bclaremar! You've successfully authenticated, but GitHub does not provide shell access.</code></li> </ul> </li> <li> <p>If there was a problem, confer the full article Adding a new SSH key to your GitHub account.</p> </li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#python","title":"Python","text":"<ul> <li>Use what you already have</li> <li> <p>If you don't have Python there are different ways to go. We won't use Conda during the lessons, for instance.</p> <ul> <li>Bare python (recommended for the \"bare metal\" user)<ul> <li>You may need to install other packages (pip)</li> <li>install python</li> <li>note macOS: the system install of Python on macOS is not supported, instead:<ul> <li><code>brew install python3</code></li> </ul> </li> </ul> </li> <li>Anaconda (recommended for python/R developers liking GUI:s)<ul> <li>Count with 15-20 minutes</li> <li>includes<ul> <li>many many packages</li> <li>conda packager</li> <li>pip installer</li> <li>GUI launchers, like example</li> <li>jupyter notebook/lab</li> <li>Spyder</li> <li>RStudio</li> <li>etc...</li> </ul> </li> <li>install Anaconda</li> </ul> </li> <li>miniconda (recommended for terminal user)<ul> <li>Faster to install</li> <li>Includes:<ul> <li>less packages than Anaconda, and no GUI launcher but:</li> <li>conda packager</li> <li>pip installer</li> <li>etc...</li> </ul> </li> <li>install Miniconda</li> </ul> </li> </ul> </li> <li> <p>In Linux and Bash, Python should work from the command line by typing <code>python</code>/<code>python3</code> or running a script with <code>python &lt;script&gt;</code>/<code>python3 &lt;script&gt;</code></p> </li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#python-in-vs-code","title":"Python in VS Code","text":"<ul> <li>Step 1. Install a supported version of Python on your system, see above.</li> <li>Step 2. Install the Python extension for Visual Studio Code from the left menu bar.</li> <li>Step 3. Open or create a Python file and start coding.<ul> <li>Example: make a hello.py script and run it with the \"play\" button.</li> <li>Choose which Python interpreter to use.</li> </ul> </li> <li>Step 4. To run Python from a VS Code terminal (Bash or other) you may have to restart the shell</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#courses","title":"Courses","text":"","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#git-courses","title":"Git courses","text":"<ul> <li>Learn the basics!</li> <li> <p>Choose one or several of these!</p> </li> <li> <p>Git courses</p> <ul> <li>NBIS</li> <li>Git by CodeRefinery</li> <li>GitHub by CodeRefinery</li> <li>NAISS</li> </ul> </li> <li> <p>Pro Git book</p> </li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#python-courses","title":"Python courses","text":"<ul> <li>We assume familiarity with python at least equivalent</li> <li> <p>Learn the basics by choosing one or several of these  courses!</p> <ul> <li>Python part of the UPPMAX introductory course</li> <li>Python programming with applications to bioinformatics.</li> </ul> </li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#other-solutions","title":"Other solutions","text":"<p>There are some other solutions for installations but they are probably not supported by the teachers of the course.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#terminals","title":"Terminals","text":"Windows <p>There are several different ways to run the course material on a Windows computer. Neither is perhaps optimal, and the material itself has not been adapted specifically for Windows. Nevertheless, in principle everything should be possible to run. A few ways you could setup:</p> <p>Git-windows with a command line and Git integrated</p> <ul> <li> <p>Install Git Windows: https://gitforwindows.org/ (easiest if you want to start fast and plan to work in windows environment)</p> <ul> <li>Follow the setup insctructions from the Windows part at https://coderefinery.github.io/installation/git-in-terminal/ by CodeRefinery.</li> <li>Included will be the Git Bash</li> </ul> </li> </ul> <p>Other possibilities</p> <ul> <li>Use the Windows 10 PowerShell<ul> <li>install git</li> </ul> </li> <li>Use the Linux Bash Shell (WSL) on Windows 10/11 (perhaps best practice if you plan to run Linux as well)<ul> <li>This will give you access to a full command-line bash shell based on Linux on your Windows 10/11 PC.</li> <li>instructions below</li> <li>For the difference between the Linux Bash Shell and the PowerShell on Windows 10, see e.g. this article.</li> </ul> </li> <li>Run as Linux through a virtual machine (and see the Linux setup above)<ul> <li>not shown</li> </ul> </li> </ul> <p>Install Bash on Windows 10/11 (WSL), following the instructions at e.g. 1 of these resources:</p> <ul> <li>Installing the Windows Subsystem and the Linux Bash</li> <li>Installing and using Linux Bash on Windows</li> <li>Installing Linux Bash on Windows</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#python-from-in-git-bash-windows","title":"Python from In Git-bash (Windows)","text":"<ul> <li>Get it working from Git Bash<ul> <li>if the command <code>type python</code> gives you a path, then proceed<ul> <li>otherwise you may have to do a new installation</li> <li>or find the path</li> <li>if anaconda installation you may add something like this:</li> <li><code>echo 'export PATH=\"&lt;path/to/Anaconda/root&gt;:&lt;path/to/anaconda/root&gt;/Scripts:$PATH:' &gt;&gt; .bashrc</code><ul> <li>example:  <code>/c/Users/bjcar425/AppData/Local/anaconda3:/c/Users/bjcar425/AppData/Local/anaconda3/Scripts</code></li> </ul> </li> </ul> </li> <li><code>$ alias python='winpty python.exe'</code></li> <li><code>$ python -V</code><ul> <li>does it give you the python version 3-something?</li> </ul> </li> </ul> </li> <li>Make it permanent  -<code>$ echo \"alias python='winpty python.exe'\" &gt;&gt; ~/.bashrc</code></li> </ul> <p>Parts taken from https://nbis-reproducible-research.readthedocs.io/en/course_2104/setup/</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#course-teaching","title":"Course teaching","text":"","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#what-is-the-goal-of-the-shared-project","title":"What is the goal of the shared project?","text":"<p>See Projects for the goal of the shared project.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#how-is-the-course-prepared","title":"How is the course prepared?","text":"<ul> <li>meetings</li> <li>lesson plans in the course material</li> <li>general lesson plans, which can be found at   'Misc } lesson_plans'   of this GitHub repository</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#what-happens-to-the-retrospectives","title":"What happens to the retrospectives?","text":"<p>Retrospectives are:</p> <ul> <li>published online in unedited form at   the 'Misc | evaluations' section   of this GitHub repository</li> <li>discussed by the teachers after the lessons</li> <li>reflected upon, where the reflections can be found in   at 'Misc | Reflections'</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#why-do-you-publish-your-retrospectives","title":"Why do you publish your retrospectives?","text":"<p>Because we like to be transparent.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#what-happens-to-the-evaluations","title":"What happens to the evaluations?","text":"<p>Evaluations are:</p> <ul> <li>published online in unedited form at   'Misc | Evaluations'   of this GitHub repository.</li> <li>discussed by the teachers after the course</li> <li>reflected upon, where the reflections can be found in   'Misc | Reflections'</li> </ul>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#why-do-you-publish-your-evaluations","title":"Why do you publish your evaluations?","text":"<p>Because we like to be transparent.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/faq/#why-do-you-publish-your-reflections","title":"Why do you publish your reflections?","text":"<p>Because we like to be transparent.</p>","tags":["FAQ","Frequently asked questions"]},{"location":"misc/feedback/","title":"Feedback","text":"<p>You can share any feedback anonymously during the day in this Google Form.</p> <p>These results will be published publicly at the end of each day.</p> For teachers: what is in that form? <p>Thanks for your feedback. This feedback will be published as-is at the end of each day, if and only if there are no personal details (email, address, etc.) in the feedback. Do mention the teachers, assistants, etc by name!</p>","tags":["feedback","anonymous"]},{"location":"misc/functions/","title":"Functions","text":"<p>Here are function descriptions, from simple to more complex, to be used in practicing TDD.</p> <p><code>is_zero</code></p> <ul> <li>Input: the value to be investigated</li> <li>Returns <code>True</code> if the input is zero</li> <li>Returns <code>False</code> if the input is not zero</li> <li>If the input is not one number, a <code>TypeError</code> is raised.</li> </ul> <code>is_zero</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def is_zero(x):\n    \"\"\"Determine if `x` is zero.\n\n    If `x` is not a number, a `TypeError` is raised.\n\n    Returns `True` if `x` is zero\n    \"\"\"\n    if not isinstance(x, (int, float)):\n        msg = \"'number' must be a number. \"\n        raise TypeError(\n            msg,\n            \"Actual type of 'number': \", type(x),\n        )\n    return x == 0\n</code></pre> <p><code>is_even</code></p> <ul> <li>Input: the value to be investigated</li> <li>Returns <code>True</code> if the input is even</li> <li>Returns <code>False</code> if the input is not even</li> <li>If the input is not one integer, a <code>TypeError</code> is raised.</li> </ul> <code>is_even</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def is_even(x):\n    \"\"\"Determine if `x` is even.\n\n    If `x` is not an integer number, a `TypeError` is raised.\n\n    Returns `True` if `x` is even\n    \"\"\"\n    if not isinstance(x, int):\n        msg = \"'number' must be a number. Actual type of 'number': \"\n        raise TypeError(\n            msg, type(x),\n        )\n    return x % 2 == 0\n</code></pre> <p><code>is_odd</code></p> <ul> <li>Input: the value to be investigated</li> <li>Returns <code>True</code> if the input is odd</li> <li>Returns <code>False</code> if the input is not odd</li> <li>If the input is not one integer, a <code>TypeError</code> is raised.</li> </ul> <code>is_odd</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def is_odd(x):\n    \"\"\"Determine if `x` is odd.\n\n    If `x` is not an integer number, a `TypeError` is raised.\n\n    Returns `True` if `x` is odd\n    \"\"\"\n    return not is_even(x)\n</code></pre> <p>If the function <code>is_even</code> is absent, here is a stand-alone implementation:</p> <pre><code>def is_odd(x):\n    \"\"\"Determine if `x` is odd.\n\n    If `x` is not an integer number, a `TypeError` is raised.\n\n    Returns `True` if `x` is odd\n    \"\"\"\n    if not isinstance(x, int):\n        msg = \"'number' must be a number. Actual type of 'number': \"\n        raise TypeError(\n            msg, type(x),\n        )\n    return not x % 2 == 0\n</code></pre> <p><code>is_probability(p)</code></p> <ul> <li>Input: the value to be investigated</li> <li>Returns <code>True</code> if the input is in the range [0.0, 1.0],   that is from and including zero to and including one</li> <li>Returns <code>False</code> if the input is not in that range</li> <li>If the input is not one floating point number, a <code>TypeError</code> is raised.</li> </ul> <code>is_probability</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def is_probability(x):\n    \"\"\"Determine if `x` is a probability.\n\n    Determine if `x` is a probability,\n    i.e. a value between 0.0 and 1.0, including both 0.0 and 1.0.\n    If `x` is not a floating point number, a `TypeError` is raised.\n\n    Returns `True` if `x` is a probability\n    \"\"\"\n    if not isinstance(x, float):\n        msg = \"'number' must be a floating point number. \"\n        raise TypeError(\n            msg,\n            \"Actual type of 'number': \", type(x),\n        )\n    min_probability = 0.0\n    max_probability = 1.0\n    return x &gt;= min_probability and x &lt;= max_probability\n</code></pre> <p><code>is_number</code></p> <ul> <li>Input: the value to be investigated</li> <li>Returns <code>True</code> if the input is a number</li> <li>Returns <code>False</code> if the input is not a number</li> <li>If the input is not one element, a <code>TypeError</code> is raised.</li> </ul> <code>is_number</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def is_number(x):\n    \"\"\"Determine if `x` is one number.\n\n    Determine if `x` is one number,\n    for example, '42' or '3.14.\n\n    Returns `True` if `x` is one number\n    \"\"\"\n    return isinstance(x, (int, float) )\n</code></pre> <p><code>are_numbers(x)</code></p> <ul> <li>Input: one value (e.g. a list) to be investigated</li> <li>Returns <code>True</code> if the input is a list of numbers number</li> <li>Returns <code>False</code> if the input is not a list of numbers</li> <li>If the input is an empty list, a <code>TypeError</code> is raised.</li> </ul> <code>are_numbers</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def are_numbers(x):\n    \"\"\"Determine if `x` is one or more numbers.\n\n    Numbers can be integer or floating point.\n\n    Returns `True` if `x` is one or more numbers.\n    \"\"\"\n    if not isinstance(x, list):\n        return False\n    if len(x) == 0:\n        return False\n    return all(is_number(e) for e in x)\n</code></pre> <p><code>get_digits</code></p> <ul> <li>Input: one number to be split in digits</li> <li>Returns the number split into a list of digits, e.g. <code>314</code> become <code>[3, 1, 4]</code></li> <li>If the input is not one integer, or is negative, a <code>TypeError</code> is raised.</li> </ul> <code>get_digits</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def get_digits(x):\n    \"\"\"Get the digits of an integer number.\n\n    Get the digits of an integer number,\n    for example, '123' becomes '[1, 2, 3]'\n    and '0' becomes '[0]'.\n    Negative numbers have only their digits collected,\n    for example, '-123' becomes '[1, 2, 3]'.\n\n    Will raise TypeError if `x` is not an integer.\n    \"\"\"\n    if not isinstance(x, int):\n        message = \"'x' must be an integer\"\n        raise TypeError(message)\n    zero = 0\n    if x &lt; zero:\n        return get_digits(-x)\n    digits = []\n    digits_in_numbering_system = 10\n    while True:\n        digits.insert(0, x % digits_in_numbering_system)\n        if x &lt; digits_in_numbering_system:\n            return digits\n        x = x // digits_in_numbering_system\n</code></pre> <code>get_digits</code> example implementation in a video? <ul> <li>YouTube video showing how to develop <code>get_digits</code> using TDD</li> </ul> <p><code>is_roman_numeral</code></p> <ul> <li>Input: one string to be checked if it is a roman numeral</li> <li>Returns <code>True</code> if the input is a roman numeral,   e.g. 'I', 'II', 'IV', 'XI', etc.</li> <li>Returns <code>False</code> if the input is not a roman numeral</li> <li>If the input is not one String, a <code>TypeError</code> is raised.</li> </ul> <p><code>sum_divisors(x)</code></p> <ul> <li>Returns the sum of the proper divisors   of the input. For example, the proper divisors of 4 are 1 and 2,   as 4 can be divided by both 1 and 2.</li> </ul> Input Expected output 1 0 2 1 3 1 4 1+2=3 5 1 6 1+2+3=6 7 1 8 1+2+4=7 <ul> <li>If the input is not one integer that is at least one, a <code>TypeError</code> is raised.</li> </ul> <p><code>is_prime</code></p> <ul> <li>Function name: <code>is_prime</code></li> <li>Output:<ul> <li>Returns <code>True</code> if the input is a prime number.</li> <li>Returns <code>False</code> if the input is not a prime number.</li> <li> Gives an error when the input is not one number</li> </ul> </li> </ul> <p><code>int_to_roman(x)</code></p> <ul> <li>Input: an integer</li> <li>Returns The a Roman numeral   of the same value as a string, e.g. 'IV'</li> </ul> Input Expected output 0 [an empty string] 1 I 2 II 3 III 4 IV 5 V 6 VI 7 IX <ul> <li>If the input is not one integer that is at least zero, a <code>TypeError</code> is raised.</li> </ul> <p><code>roman_to_int(x)</code></p> <ul> <li>Input: a Roman numeral,   e.g. <code>IV</code></li> <li>Returns: the integer value of this Roman numeral</li> </ul> Input Expected output I 1 II 2 III 3 IV 4 V 5 VI 6 IX 9 <ul> <li>If the input is not one valid roman numeral, a <code>TypeError</code> is raised.</li> </ul> Too easy? Try Project Euler <p>Go ahead and write a function to solve a question at Project Euler.</p>","tags":["example functions","functions","examples"]},{"location":"misc/functions/#other-example-implementations","title":"Other example implementations","text":"<p><code>are_strings</code></p> <ul> <li>Function name: <code>are_strings</code></li> <li>Output:<ul> <li>Returns <code>True</code> if the input is one or more strings.</li> <li>Returns <code>False</code> otherwise.</li> </ul> </li> </ul> <code>are_strings</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def are_strings(x):\n    \"\"\"Determine if `x` is one or more strings.\n\n    Returns `True` if `x` is one or more strings.\n    \"\"\"\n    if not isinstance(x, list):\n        return False\n    if len(x) == 0:\n        return False\n    return all(is_string(e) for e in x)\n</code></pre> <p><code>check_are_strings</code></p> <ul> <li>Function name: <code>check_are_strings</code></li> <li>Input: the value to be checked</li> <li>Output:<ul> <li>Returns nothing</li> <li>Raises an exception when the input is not one or more strings</li> </ul> </li> </ul> <code>check_are_strings</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def check_are_strings(x):\n    \"\"\"Determine if `x` is one or more strings.\n\n    If `x` is not one or more strings, a `RuntimeError` is raised.\n\n    Returns nothing.\n    \"\"\"\n    if not are_strings(x):\n        msg = \"'x' must be strings. \"\n        raise RuntimeError(\n            msg,\n            \"Actual value of 'x': \", x,\n        )\n</code></pre> <p><code>check_different</code></p> <ul> <li>Function name: <code>check_different</code></li> <li>Input: the two values to be compared</li> <li>Output:<ul> <li>Returns nothing</li> <li>Raises an exception when the two input values are different</li> </ul> </li> </ul> <code>check_different</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def check_different(a, b):\n    \"\"\"Determine if `a` and `b` are different.\n\n    Raises `RuntimeError` when not.\n\n    Returns nothing.\n    \"\"\"\n    if a == b:\n        msg = \"'a' and 'b' must be different. \"\n        raise RuntimeError(\n            msg,\n            \"Value of 'a': \", a,\n        )\n</code></pre> <code>check_equal</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def check_equal(a, b):\n    \"\"\"Determine if `a` and `b` are equal.\n\n    Raises `RuntimeError` when not.\n\n    Returns nothing.\n    \"\"\"\n    if a != b:\n        msg = \"'a' and 'b' must be equal. \"\n        raise RuntimeError(\n            msg,\n            \"Value of 'a': \", a, \". \",\n            \"Value of 'b': \", b,\n        )\n</code></pre> <code>check_is_number</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def check_is_number(x):\n    \"\"\"Determine if `x` is a number.\n\n    If `x` is not a number, a `RuntimeError` is raised.\n\n    Returns nothing.\n    \"\"\"\n    if not is_number(x):\n        msg = \"'x' must be a number. \"\n        raise RuntimeError(\n            msg,\n            \"Actual value of 'x': \", x,\n        )\n</code></pre> <code>check_is_probability</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def check_is_probability(x):\n    \"\"\"Determine if `x` is a probability.\n\n    If `x` is not a probability, a `RuntimeError` is raised.\n\n    Returns nothing.\n    \"\"\"\n    check_is_number(x)\n    if not is_probability(x):\n        msg = \"'x' must be a probability. \"\n        raise RuntimeError(\n            msg,\n            \"Actual value of 'x': \", x,\n        )\n</code></pre> <code>is_string</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def check_is_string(x):\n    \"\"\"Determine if `x` is a string.\n\n    If `x` is not a string, a `RuntimeError` is raised.\n\n    Returns nothing.\n    \"\"\"\n    if not is_string(x):\n        msg = \"'x' must be a string. \"\n        raise RuntimeError(\n            msg,\n            \"Actual value of 'x': \", x,\n        )\n</code></pre> <code>divide_safely</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def divide_safely(a, b):\n    \"\"\"Divide `a` by `b`.\n\n    If `a` or `b` are not a floating point number, a `TypeError` is raised.\n    If `b` is `0.0`, a `RuntimeError` is raised.\n\n    Returns `a` divided by `b`\n    \"\"\"\n    zero = 0.0\n    if b == zero:\n        msg = \"'b' must not be zero\"\n        raise RuntimeError(\n            msg,\n        )\n    return a / b\n</code></pre> <code>is_dividable_by_three</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def is_dividable_by_three(x):\n    \"\"\"Determine if `x` is dividable by three.\n\n    If `x` is not an integer number, a `TypeError` is raised.\n\n    Returns `True` if `x` is dividable by three\n    \"\"\"\n    if not isinstance(x, int):\n        msg = \"'number' must be a number. Actual type of 'number': \"\n        raise TypeError(\n            msg, type(x),\n        )\n    return x % 3 == 0\n</code></pre> <code>is_string</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def is_string(x):\n    \"\"\"Determine if `x` is one string.\n\n    Returns `True` if `x` one string\n    \"\"\"\n    return isinstance(x, str)\n</code></pre> <code>flip_coin</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>from random import randint\n\ndef flip_coin():\n    \"\"\"Produce a random boolean.\"\"\"\n    return randint(0, 1) &gt; 0 # noqa: S311\n</code></pre> <code>roll_dice</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>from random import randint\n\ndef roll_dice():\n    \"\"\"Produce a random integer, similar to a dice toll.\"\"\"\n    return randint(1, 6) # noqa: S311\n</code></pre> <code>sum_primes</code> example implementation <p>Copied from this tested implementation.</p> <pre><code>def sum_primes(num):\n    \"\"\"Calculate the sum of all primes up to the given number.\"\"\"\n    if not isinstance(num, int):\n        message = \"'num' must be an integer\"\n        raise TypeError(message)\n    primes = []\n    two = 2\n    if num &gt; two:\n        primes.append(two)\n    elif num == two:\n        return(two)\n    else:\n        return(0)\n    for i in range(3, num+1, 2):\n        not_prime = False\n        for j in range(1, i):\n            if i%j == 0 and j != 1:\n                not_prime = True\n                break\n        if not not_prime:\n            primes.append(i)\n    return sum(primes)\n</code></pre>","tags":["example functions","functions","examples"]},{"location":"misc/git_workflow/","title":"git","text":"","tags":["git","basic workflow","workflow with branches"]},{"location":"misc/git_workflow/#git-clone","title":"git clone","text":"Prefer a video? <p>YouTube video 'Doing a (git) clone in VSCode</p>","tags":["git","basic workflow","workflow with branches"]},{"location":"misc/git_workflow/#git-basic-workflow","title":"git basic workflow","text":"Prefer a video? <ul> <li>YouTube video 'Doing a basic git workflow in VSCode</li> <li>YouTube video 'Doing a basic git workflow in VSCode   (including a <code>git clone</code>)</li> </ul> <pre><code>flowchart TD\n  no_repo[No GitHub repository]\n  subgraph on_github[On GitHub]\n    github[Your git repository]\n  end\n  subgraph on_computer[On your computer]\n    clean[Your git repository. Your version matches online version]\n    changed[Your git repository with changes]\n    staged[Your git repository with staged changes]\n    committed[Your git repository with commited changes]\n  end\n\n  no_repo --&gt; |Create repository on GitHub|github\n  github --&gt; |Download: git clone| clean\n  github --&gt; |Update: git pull| clean\n\n\n  clean --&gt; |Any change|changed\n  changed --&gt; |Stage files: git add .|staged\n  staged --&gt; |Commit staged files: git commit -m my_commit_description| committed\n  committed ---&gt; |Upload: git push| clean\n  committed --&gt; |Upload: git push| github</code></pre>","tags":["git","basic workflow","workflow with branches"]},{"location":"misc/git_workflow/#git-workflow-with-branches","title":"git workflow with branches","text":"Prefer a video? <p>YouTube video 'Doing git banching in VSCode'</p> <pre><code>flowchart TD\n  your_branch[The branch you work on]\n  another_branch[Another branch]\n  new_branch[A new branch]\n\n  your_branch --&gt; |Switch branch: git switch other_branch|another_branch\n  another_branch --&gt; |Merge: git merge other_branch| your_branch\n  new_branch --&gt; |Create on GitHub|another_branch\n  your_branch --&gt; |Update: git pull| your_branch</code></pre>","tags":["git","basic workflow","workflow with branches"]},{"location":"misc/project_workflows/","title":"Project workflow","text":"<p>There are many project workflows. Here are some:</p> <code>git</code> model Code review Features <code>main</code> No if <code>main</code> can be broken, also called 'trunk based development' <code>main</code>, <code>develop</code> No if <code>main</code> needs not to be broken <code>main</code>, <code>develop</code>, topic branches No if <code>main</code> needs not to be broken and there are multiple contributors <code>main</code>, <code>develop</code>, topic branches Yes if <code>main</code> needs not to be broken and there are multiple team members <p>In this course, we will scale up from the first to the last project workflow.</p> <pre><code>flowchart TD\n  main[main branch. Purpose: always works]\n  develop[develop branch. Purpose: merge passing builds]\n  topic[issue_x branch. Purpose: develop in isolation]\n  issue[GitHub Issue x. Purpose: describe a task]\n\n  main --&gt; |update| develop\n  develop --&gt; |builds cleanly| main\n  topic --&gt; |builds cleanly, passed review| develop\n  develop --&gt; |update| topic\n\n  issue --&gt; topic</code></pre> <ul> <li>Overview of the git branches</li> <li>Working with this git branching model</li> <li>Merge topic branch to develop with a code review</li> </ul>","tags":["project","project workflow","code review"]},{"location":"misc/project_workflows/#more-basic-github-workflows","title":"More basic GitHub workflows","text":"<ol> <li>Modify README on main branch using GitHub web interface</li> <li>Modify README on topic branch using GitHub web interface</li> <li>Modify README on main branch using git</li> <li>Modify README on topic branch using git</li> <li>Merge topic branch to develop yourself</li> </ol>","tags":["project","project workflow","code review"]},{"location":"misc/project_workflows/#project-workflows","title":"Project workflows","text":"<ul> <li>From design to feature</li> <li>Splitting up an Issues to smaller Issues</li> </ul>","tags":["project","project workflow","code review"]},{"location":"misc/project_workflows/#phases","title":"Phases","text":"<ol> <li>Create all classes</li> <li>Create all has-a relations</li> <li>Create all is-a-type-of relations</li> </ol>","tags":["project","project workflow","code review"]},{"location":"misc/project_workflows/#social","title":"Social","text":"<ul> <li>Pair programming</li> </ul>","tags":["project","project workflow","code review"]},{"location":"misc/retrospective/","title":"Retrospective","text":"<p>These are the questions posed at a Retrospective:</p> <pre><code>## Retrospective\n\nTeachers are learners too. Please help us improve by sharing your opinion.\nIdeally, it is something fixable, e.g. 'My camera did not work' is something\nwe cannot fix, but 'I had no way to interact (as my camera did not work)\nand the Zoom chat was not listened to' is.\n\n### Continue: What went well?\n\n### Improve: Which section(s) scheduled enough time for exercises?\n\n### Stop: What held us back?\n\n### Invent: What can we improve?\n\n### Action points by teachers\n</code></pre>","tags":["retrospective","questions"]},{"location":"misc/scilifelab_course_registration/","title":"How to register as a SciLifeLab course","text":"<ul> <li>Register for an account</li> <li>Register your course,   i.e. by clicking on the \u201cRegister event\u201d green button in the   event webpage.</li> <li>Fill in all required fields of the form, a preview is   here.</li> </ul> <p>Once you click 'Add Event', your event will be sent for moderation. You will see your event in your profile, and are able to edit your event up until it is approved or rejected by the admin. To contact SciLifeLab Training Portal, please email traininghub@scilifelab.se.</p>","tags":["teachers","SciLifeLab"]},{"location":"misc/uml_with_mermaid/","title":"Flowcharts or Unified Modeling Language (UML)","text":"","tags":["flowcharts","UML","unified modeling language"]},{"location":"misc/uml_with_mermaid/#tools","title":"Tools","text":"<ul> <li>PlantUML<ul> <li>Open-source</li> <li>Can be integrated with IDE:s, Java documentation, Word</li> <li>Scripts rather than drawing tools</li> <li>requires plug-in to render in browser</li> <li>http://www.plantuml.com/plantuml</li> </ul> </li> <li>Graphviz<ul> <li>open source graph visualization software.</li> <li>It has important applications in networking, bioinformatics, software engineering, database and web design, machine learning, and in visual interfaces for other technical domains.</li> <li>https://graphviz.org/</li> </ul> </li> <li>Mermaid used in this course<ul> <li>Open-source</li> <li>Not as many diagrams</li> <li>renders in browser without plug-ins</li> <li>https://mermaid.js.org/</li> <li>Live editor</li> </ul> </li> </ul> <p>Types</p> <pre><code>flowchart TD\n\n  uml_diagrams[\"UML graph types\"]\n  structure[Structure]\n  behaviour[Behavior]\n  interaction[Interaction]\n\n  uml_diagrams --&gt; structure\n  uml_diagrams --&gt; behaviour\n  structure --&gt; class_diagram[Class diagram]\n  structure --&gt; component[Component diagram]\n  structure --&gt; object[Object diagram]\n  structure --&gt; composite[Composite diagram]\n  behaviour --&gt; use_case[Use case diagram]\n  behaviour --&gt; activity[Activity diagram]\n  behaviour --&gt; interaction\n  interaction --&gt; sequence[Sequence diagram]\n  interaction --&gt; communication[Communication]\n  interaction --&gt; timing[Timing]\n  interaction --&gt; interaction_overview[Interaction overview]</code></pre> <p>We will in the course use</p> <ul> <li>Sequence</li> <li>Activity/algorithm flowchart</li> <li>Class diagrams</li> </ul>","tags":["flowcharts","UML","unified modeling language"]},{"location":"misc/uml_with_mermaid/#sequence","title":"Sequence","text":"<pre><code>sequenceDiagram\n    Alice -&gt;&gt;+Bob: Authentication Request\n    Bob--&gt;&gt;-Alice: Authentication Response\n    Alice-&gt;&gt;+Bob: Another authentication Request\n    Bob--&gt;&gt;-Alice: Another authentication Response</code></pre> <p>Mermaid code</p> <pre><code>sequenceDiagram\n    Alice -&gt;&gt;+Bob: Authentication Request\n    Bob--&gt;&gt;-Alice: Authentication Response\n    Alice-&gt;&gt;+Bob: Another authentication Request\n    Bob--&gt;&gt;-Alice: Another authentication Response\n</code></pre>","tags":["flowcharts","UML","unified modeling language"]},{"location":"misc/uml_with_mermaid/#class","title":"Class","text":"<p>A diagram that shows the system classes and relationships between them.</p> <pre><code>classDiagram\n    Driver o-- Car : owns\n    Car *-- Wheel : have 4</code></pre> <p>Mermaid code</p> <pre><code>classDiagram\n    Driver o-- Car : owns\n    Car *-- Wheel : have 4\n</code></pre>","tags":["flowcharts","UML","unified modeling language"]},{"location":"misc/uml_with_mermaid/#activity","title":"Activity","text":"<p>A flowchart that shows the process and its correlating decisions, including an algorithm  or a business process.</p> <pre><code>flowchart TD\n  is_installed{Graphviz installed?}\n  is_installed --&gt; |yes| process_all[process all diagrams]\n  is_installed --&gt; |no| process_sub[process only sequence and activity diagrams]</code></pre> <p>Mermaid code</p> <pre><code>flowchart TD\n  is_installed{Graphviz installed?}\n  is_installed --&gt; |yes| process_all[process all diagrams]\n  is_installed --&gt; |no| process_sub[process only sequence and activity diagrams]\n</code></pre>","tags":["flowcharts","UML","unified modeling language"]},{"location":"misc/uml_with_mermaid/#algorithm-flowchart","title":"Algorithm flowchart","text":"<pre><code>flowchart TD\n  condition{Is something true?}\n  condition --&gt; |yes| is_true[Do action 1]\n  condition --&gt; |no| is_false[Do action 2]</code></pre> <p>Mermaid code</p> <pre><code>flowchart TD\n  condition{Is something true?}\n  condition --&gt; |yes| is_true[Do action 1]\n  condition --&gt; |no| is_false[Do action 2]\n</code></pre> <p>shape of boxes etc in flowchart and state diagrams </p> <ul> <li>initial state (small circle)<ul> <li><code>[*]</code></li> </ul> </li> <li>end state (small solid-filled circle)<ul> <li><code>[*]</code></li> </ul> </li> <li>state (rectangle)<ul> <li><code>A[\"text\"]</code></li> </ul> </li> <li>activity (rounded recatngle)<ul> <li><code>A(\"text\")</code></li> </ul> </li> <li>choice (diamond)<ul> <li><code>A{\"text\"}</code></li> </ul> </li> <li> <p>arrow</p> <ul> <li><code>--&gt;</code></li> </ul> </li> <li> <p>Other syntax: https://mermaid.js.org/ecosystem/tutorials.html</p> </li> </ul>","tags":["flowcharts","UML","unified modeling language"]},{"location":"misc/wrap_up/","title":"Wrap-up","text":"<p>Learning outcomes</p> <ul> <li>Remember what the course was about</li> </ul> <p>Remember to revisit the course material</p> <ul> <li>The course material is under constant update from your reviews and therefore will add information over time.</li> <li>The course material is updated to reflect new trends</li> <li>Remind your self what the techniques where</li> <li>Continuous learning</li> </ul>","tags":["wrap-up","wrap up","conclusion","summary"]},{"location":"misc/wrap_up/#why","title":"Why?","text":"<p>Course mottos</p> <ul> <li>Turning scripters into computer scientists</li> <li>Add theory to bolster already present practical skills</li> </ul>","tags":["wrap-up","wrap up","conclusion","summary"]},{"location":"misc/wrap_up/#course-overview","title":"Course overview","text":"<p>Some of the definitions used in the course.</p> <p>And a mermaid diagram showing the overview of the course lessons.</p> <pre><code>flowchart TD\n\n  classDef bjorn_node fill:#ddf,color:#000,stroke:#00f\n  classDef lars_node fill:#dfd,color:#000,stroke:#0f0\n  classDef richel_node fill:#fdd,color:#000,stroke:#f00\n\n    sdlc[Software development lifecycle]:::lars_node\n    devtools[Software development tools]:::bjorn_node\n\n    requirements[Requirements]:::lars_node\n    risk_analysis[Risk analysis]:::lars_node\n\n    requirements --&gt; issues\n    risk_analysis --&gt; issues\n\n    issues[Issues]:::richel_node\n    kanban_board[Kanban board]:::richel_node\n    team_roles[Team roles]:::richel_node\n\n    team_roles &lt;--&gt; issues &lt;--&gt; kanban_board &lt;--&gt; team_roles\n\n    team_roles --&gt; pair_programming\n\n    version_control_1[Version control on single branch]:::bjorn_node\n    version_control_many[Version control on multiple branches]:::bjorn_node\n\n    version_control_1 --&gt; version_control_many\n\n    class_design[Class design]:::lars_node\n\n    pair_programming[Pair programming]:::richel_node\n    tdd[TDD]:::richel_node\n\n    testing[Testing]:::richel_node\n    code_reviews[Code reviews]:::bjorn_node\n\n    data_structures[Data structures]:::richel_node\n    algorithms[Algorithms]:::richel_node\n    optimization[Optimisation]:::richel_node\n\n    ood[Object Oriented Development]:::lars_node\n    refactoring[Refactoring]:::lars_node\n    modular_programming[Modular programming]:::lars_node\n    package[Package]:::richel_node\n    deployment[Deployment]:::bjorn_node\n    documentation[Documentation]:::bjorn_node\n\n\n  sdlc --&gt; requirements\n  sdlc --&gt; risk_analysis\n  devtools --&gt; version_control_1\n  requirements &lt;--&gt; risk_analysis\n\n  requirements --&gt; class_design\n  version_control_1 --&gt; requirements\n  version_control_1 --&gt; risk_analysis\n  pair_programming --&gt; tdd\n  pair_programming --&gt; code_reviews\n  version_control_many --&gt; code_reviews\n  class_design --&gt; data_structures\n  version_control_1 --&gt; tdd\n  tdd --&gt; testing\n  issues --&gt; testing\n  code_reviews --&gt; data_structures\n  testing --&gt; data_structures\n  testing --&gt; code_reviews\n  testing --&gt; algorithms\n  data_structures --&gt; package\n  package &lt;--&gt; modular_programming\n  package --&gt; optimization\n  algorithms --&gt; package\n  requirements --&gt; ood\n  ood --&gt; class_design\n  issues --&gt; class_design\n  class_design --&gt; refactoring\n  refactoring --&gt; modular_programming\n  package --&gt; deployment\n  package --&gt; documentation</code></pre> <p>Overview of the course. Red: Richel. Green: Lars. Blue: Bj\u00f6rn.</p>","tags":["wrap-up","wrap up","conclusion","summary"]},{"location":"misc/wrap_up/#commits","title":"Commits","text":"<p>Some fun statistic about commits to the project.</p> <p>Commit statistics you can see a page with some analysis of the commits that Rich\u00e8l Bilderbeek has done</p>","tags":["wrap-up","wrap up","conclusion","summary"]},{"location":"misc/wrap_up/#miscellaneous-good-links","title":"Miscellaneous good links","text":"<ul> <li>Further learning</li> </ul>","tags":["wrap-up","wrap up","conclusion","summary"]},{"location":"modularity/modular/","title":"Refactoring and Modular programming","text":"Learning outcomes <ul> <li> <p>Understand the concept of code smells and design smells.</p> </li> <li> <p>Grasp the idea of the \"zero line\" in software design and its relevance.</p> </li> <li> <p>Gain an introductory understanding of modular programming and iterative refactoring.</p> </li> <li> <p>Learn about common interfaces, protocols, and their role in modular programming.</p> </li> <li> <p>Recognize and address tight coupling in code to improve modularity.</p> </li> <li> <p>Appreciate the importance of modularization in collaborative projects, especially for reducing conflicts in version control.</p> </li> </ul> <pre><code>gantt\n    title \"Lesson plan Refactoring, and modularization\"\n    dateFormat mm\n    axisFormat %M\n    Refactoring: refactoring,00, 10m\n    Refactoring Exercise: Exercise_1, 10, 20m\n    Modularity:Modularity_1,30, 15m</code></pre> Learning outcomes of Refactoring <ul> <li>Learners learns about code smells and design smells</li> </ul> Learning outcomes of Modular programming <ul> <li> <p>The learners has a introductory understanding to the modular programming paradigm and the concept of iterative refactoring of code.</p> </li> <li> <p>The concepts of common interface and protocols are introduced to the learners</p> </li> <li> <p>The learners are introduced the concept of coupling and how to find tight coupling</p> </li> <li> <p>The learners learn the importance of modularization when collaborating on larger projects by example of the reduced number of conflicts of commits.</p> </li> <li> <p>The learners partitions their design and message passing by refactoring design and implementation according to the modular paradigms for the student project</p> </li> </ul> For teachers <p>Prior:</p> <ul> <li>What is a Refactoring?</li> <li>What is a Design/code Smell?</li> <li>What is a Module?</li> <li>Why make modular design/code, what is the benefit?</li> </ul>","tags":["modular programming","refactoring"]},{"location":"modularity/modular/#refactoring","title":"Refactoring","text":"What is Refactoring <p>Refactoring is a systematic process of improving code without creating new functionality that can transform a mess into clean code and simple design. refactoring.guru</p>","tags":["modular programming","refactoring"]},{"location":"modularity/modular/#revisiting-class-design","title":"Revisiting class design","text":"<p>The most important relationship classes can have are association, composition and inheritance.</p>","tags":["modular programming","refactoring"]},{"location":"modularity/modular/#bad-structure","title":"Bad structure","text":"<ul> <li><code>PetsIOwn</code> is a relation DB table not an object as it has</li> <li>no function, which pets an owner has is not a object that exist in the real world - big semantic gap.</li> </ul> <pre><code>classDiagram\n    Owner--&gt;PetsIOwn\n    Dog*--\"1\"Head\n    Dog*--\"1\"Body\n    Dog*--\"0..1\"Tail\n    PetsIOwn o--\"0..*\"Dog\n    PetsIOwn o--\"0..*\"Cat\n    PetsIOwn o--\"0..*\"GoldFish\n    Animal &lt;|--Dog\n    Animal &lt;|--Cat\n    Animal &lt;|--GoldFish</code></pre> <p>Refactored design, the Refactoring is done already in design space as a iteration of your design</p> <pre><code>classDiagram\n    Owner --&gt; Animal: cares for\n    Owner o-- Animal: owns\n    Dog *-- \"1\"Head\n    Dog *-- \"1\"Body\n    Dog *-- \"0..1\"Tail\n    Animal &lt;|-- Dog\n    Animal &lt;|-- Cat\n    Animal &lt;|-- GoldFish</code></pre> <p>What was this ann effect of a phenomenon known as Design Smell.</p> <p>Code smell and design smell are two very good reason to do refactoring</p> <ul> <li>What? How can code \"smell\"??</li> <li>Well it doesn't have a nose... but it definitely can stink!</li> </ul> <p>From https://refactoring.guru/.</p> <p>Some examples of code smell</p> <ul> <li>Bloaters</li> <li>Object-Orientation Abusers</li> <li>Change Presenters</li> <li>Dispensables</li> <li>Couplers</li> </ul>","tags":["modular programming","refactoring"]},{"location":"modularity/modular/#exercises","title":"Exercises","text":"Read and discuss <ul> <li> <p>Read https://refactoring.guru/refactoring    and discuss how this can be implemented also in the design phase (10 min)</p> </li> <li> <p>Consider is your class diagram reflecting your code</p> </li> </ul> Bad Weather identify the design smells <p>Identify the different design smells of the following diagram use notes to denote the found smells, then put it in a markdown document and commit to your learners space in the project.</p> <pre><code>    classDiagram\n\n        %% =======================\n        %% SMELLY DESIGN\n        %% =======================\n        namespace Smelly {\n            class Website {\n                +String url\n                +String repoPath\n                +String filters\n                +void loadEverythingAtOnce()\n                +void reloadPageOnFilterChange()\n                +void renderAllPlotsAndStatsTogether()\n                +void handleDownloadRequest(fileType, filter, plot, stat, timeRange, dateRange, region)\n            }\n\n            class FilterManager {\n                +String selectedTime\n                +String selectedDate\n                +String selectedRegion\n                +void applyFilters(time, date, region)\n                +void filterEverything()\n            }\n\n            class PlotManager {\n                +void drawTimeSeries(data)\n                +void drawHistogramAndBoxPlotTogether(data)\n                +void renderAllStatsOnPlot(data)\n            }\n\n            class StatsManager {\n                +float average\n                +float minimum\n                +float maximum\n                +float median\n                +float mode\n                +void computeAllStatsInOneMethod(data)\n            }\n\n            class DownloadManager {\n                +void downloadEverything()\n                +void zipEverythingTogether()\n            }\n\n            class GitHubBackend {\n                +String dataPath\n                +void connectToGitHub()\n                +void loadDataIntoAnalysisProgram(file)\n                +void sendVerifyMessageToUser()\n            }\n        }\n    %% relationships\n    Website --&gt; FilterManager\n    Website --&gt; PlotManager\n    Website --&gt; StatsManager\n    Website --&gt; DownloadManager\n    Website --&gt; GitHubBackend\n    FilterManager --&gt; PlotManager\n    PlotManager --&gt; StatsManager\n    DownloadManager --&gt; GitHubBackend\n\n    %% color all smelly classes red\n    style Website fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n    style FilterManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n    style PlotManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n    style StatsManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n    style DownloadManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n    style GitHubBackend fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n</code></pre> Answer design smells <p>Here is one answer, there can be more design smells that given here!</p> <pre><code>\n    classDiagram\n\n    %% =======================\n    %% SMELLY DESIGN\n    %% =======================\n    namespace Smelly {\n        class Website {\n            +String url\n            +String repoPath\n            +String filters\n            +void loadEverythingAtOnce()\n            +void reloadPageOnFilterChange()\n            +void renderAllPlotsAndStatsTogether()\n            +void handleDownloadRequest(fileType, filter, plot, stat, timeRange, dateRange, region)\n        }\n\n        class FilterManager {\n            +String selectedTime\n            +String selectedDate\n            +String selectedRegion\n            +void applyFilters(time, date, region)\n            +void filterEverything()\n        }\n\n        class PlotManager {\n            +void drawTimeSeries(data)\n            +void drawHistogramAndBoxPlotTogether(data)\n            +void renderAllStatsOnPlot(data)\n        }\n\n        class StatsManager {\n            +float average\n            +float minimum\n            +float maximum\n            +float median\n            +float mode\n            +void computeAllStatsInOneMethod(data)\n        }\n\n        class DownloadManager {\n            +void downloadEverything()\n            +void zipEverythingTogether()\n        }\n\n        class GitHubBackend {\n            +String dataPath\n            +void connectToGitHub()\n            +void loadDataIntoAnalysisProgram(file)\n            +void sendVerifyMessageToUser()\n        }\n    }\n        %% relationships\n        Website --&gt; FilterManager\n        Website --&gt; PlotManager\n        Website --&gt; StatsManager\n        Website --&gt; DownloadManager\n        Website --&gt; GitHubBackend\n        FilterManager --&gt; PlotManager\n        PlotManager --&gt; StatsManager\n        DownloadManager --&gt; GitHubBackend\n\n        %% color all smelly classes red\n        style Website fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n        style FilterManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n        style PlotManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n        style StatsManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n        style DownloadManager fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n        style GitHubBackend fill:#ffdddd,stroke:#ff0000,stroke-width:2px\n\n        note for Website \"Smells: God Class, Long Parameter List, Tight Coupling, Bloater\"\n        note for FilterManager \"Smells: Feature Envy (accesses others' data)\"\n        note for PlotManager \"Smells: Duplicated Responsibility with StatsManager\"\n        note for StatsManager \"Smells: Large Method computeAllStatsInOneMethod\"\n        note for DownloadManager \"Smells: Does too much (handles all file types)\"\n        note for GitHubBackend \"Smells: UI and backend mixed\"</code></pre> Refactor your design document <p>Either: Chose an Issue that you are responsible for!</p> <p>Try to consider what in your code are or will require classes to know about each other (Association). Try to consider which have a has-a relationship (composition if destroying an instance of the first class destroys the composing part)</p> <p>or</p> <p>Refactor the above design into a good design. Consider things like technology lock in and other issues.</p> Answer here is one example of fixed structure <p>Here is an example of how a refactored example from the above design</p> <pre><code>    classDiagram\n\n    namespace WeatherAnalysis {\n\n    class UserInterface {\n        +start()\n    }\n\n    class webapp {\n        +start()\n    }\n    class CLI {\n        +start()\n    }\n\n    class DataController {\n        +applyTimeFilter()\n        +applyDateFilter()\n        +applyRegionFilter()\n    }\n\n    class PlotService {\n        +drawTimeSeries()\n        +drawHistogram()\n        +drawBoxPlot()\n    }\n\n    class StatsService {\n        +computeAverage()\n        +computeMin()\n        +computeMax()\n        +computeMedian()\n        +computeMode()\n    }\n\n    class DownloadService {\n        +exportRawData()\n        +exportFilteredData()\n        +exportPlot()\n        +exportStats()\n    }\n\n    class GitHubDataSource {\n        +loadData()\n        +verifyData()\n    }\n}\n    %% relations\n    UserInterface --&gt; DataController\n    DataController --&gt; PlotService\n    DataController --&gt; StatsService\n    UserInterface --&gt; DownloadService\n    DownloadService --&gt; GitHubDataSource\n    CLI --|&gt; UserInterface\n    WebApp --|&gt; UserInterface\n\n    %% color clean classes green\n    style UserInterface fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style DataController fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style PlotService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style StatsService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style DownloadService fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n    style GitHubDataSource fill:#ddffdd,stroke:#00aa00,stroke-width:2px\n\n    note for UserInterface \"Clean: Controller coordinates components\"\n    note for DataController \"Single Responsibility: handles filtering only\"\n    note for PlotService \"Separate concern: visual rendering\"\n    note for StatsService \"Separate concern: statistical computation\"\n    note for DownloadService \"Exports only\"\n    note for GitHubDataSource \"Isolated backend logic\"\n</code></pre> Refactor your code <p>Chose an Issue that you are responsible for go through the code and refactor the code.(if you do not have an issue claim one)</p>","tags":["modular programming","refactoring"]},{"location":"modularity/modular/#code-coupling","title":"Code Coupling","text":"What is Coupling in code <p>Lets talk about Tightly vs loosely coupled code.</p> What is tightly coupled code? <p>Tightly coupled code is when a group of classes are highly dependent on one another. This isn't necessarily a bad thing, but it can make the code harder to test because of the dependent classes are so intertwined. They can't be used independently or substituted easily.</p> <p>In tightly coupled systems, each component or class in the system knows details about many other components or classes. They are interdependent, meaning that if one component changes, it can have a ripple effect on all other components that depend on it. This can make the system as a whole more difficult to maintain, because changes in one place can require changes in many other places.</p> Why is loose coupling to prefer <ul> <li> <p>Easier Maintenance: Because each component is independent, changes in one component don't require changes in other components. This makes the system as a whole easier to maintain.</p> </li> <li> <p>Improved Testability: Components can be tested independently, without needing to set up and manage other components. This makes it easier to write unit tests, and makes the tests more reliable, because they're less likely to be affected by changes in other parts of the system.</p> </li> <li> <p>Greater Flexibility and Reusability: Because components don't depend on each other, they can be more easily reused in different parts of the system, or even in different systems. They can also be replaced or upgraded without affecting other components.</p> </li> </ul> <p>Circular dependency</p> <p>A circular dependency occurs when two entities both rely on data from each other, either directly or through secondary coupling. This can be a natural an un avoidable consequence of the domain space or it as it is usually seen in software development an anti pattern that is a pattern that hinders development.</p>","tags":["modular programming","refactoring"]},{"location":"modularity/modular/#modular-programming","title":"Modular Programming","text":"What is Modular Programming <p>Modular programming as a term introduced by Larry Constantine et.al at the Symposium on Modular Programming, organized at the Information and Systems Institute in July 1968.</p> <p>Modular programming is a software design technique that emphasizes separating the functionality of a program into independent, interchangeable modules, such that each contains everything necessary to execute only one aspect of the desired functionality.</p> <p>lets read about modular programming (10 min)</p> <p>This is a Wikipedia article on modular programming</p> Lets Discuss <p>From this these for principles are generally considered a requirement for modularity</p> <ul> <li>no communication in with no communication out</li> <li>no communication in with some communication out</li> <li>some communication in with some communication out</li> <li>some communication in with no communication out</li> </ul> <p>What does it mean in practice</p> <ul> <li>That what you must clearly define for any function or object is a Common Interface that is static</li> <li>That there are no side effect from your implementation</li> <li>That you do not do message passing by reference.</li> <li>That you program  black box methods and classes.</li> </ul> Why is Modular Programming something to strive for <ul> <li>Reusability</li> <li>Working with others (encapsulation of work and function)</li> </ul>","tags":["modular programming","refactoring"]},{"location":"optimisation/","title":"Optimisation","text":"<p>Learning outcomes</p> <ul> <li>Understand misconceptions on optimisation</li> <li>Understand Amdahl's law</li> <li>Practice to determine the big-O profile of a function</li> <li>Practice to get a run-time speed profile</li> </ul>","tags":["optimization","optimisation"]},{"location":"optimisation/#why","title":"Why?","text":"<p>To improve the runtime speed (or memory use) of a program</p> <p></p> <p>Captain Obvious</p> <p>We discuss:</p> <ul> <li>Runtime speed profiles</li> <li>Improve runtime speed</li> <li>Big-O</li> </ul>","tags":["optimization","optimisation"]},{"location":"optimisation/#discussion","title":"Discussion","text":"<ul> <li>Be critical on speed optimization solutions</li> <li>Tested and clean code always comes first</li> <li>Measure correctly, at the right complexity, before and after</li> <li>Prefer changing big-O over micro-optimizations (but see first point!)</li> </ul> <p>Agree yes/no?</p>","tags":["optimization","optimisation"]},{"location":"optimisation/#links","title":"Links","text":"<ul> <li>Project Euler: plenty of programming problems</li> <li>Lecture of 2022:</li> </ul>","tags":["optimization","optimisation"]},{"location":"optimisation/big_o/","title":"Big-O","text":"<p>Learning outcomes</p> <ul> <li>Practice to determine the big-O profile of a function</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>.</li> </ul> <p>Teaching goals are:</p> <ul> <li>.</li> </ul> <p>Prior:</p> <ul> <li>.</li> </ul> <p>Lesson plans:</p> <pre><code>gantt\n  title Lesson plan pair programming 1\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 15s\n  Feedback 1: feedback_1, after exercise_1, 5s\n  Theory 2: theory_2, after feedback_1, 5s\n  Exercise 2: crit, exercise_2, after theory_2, 10s\n  Exercise 2 after the break: crit, after exercise_2, 5s</code></pre>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#why-big-o-is-important","title":"Why Big O is important","text":"<p>You've added a continuous integration script to measure which code is spent most time in. You've made the program 10x as fast: from 1 second, to 0.1 second.</p> <p>Likely, you've wasted your time.</p> <p>Instead, you want to optimize your code in a way that is useful.</p>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#big-o_1","title":"Big O","text":"<ul> <li>Don't optimize without reason <code>[CppCore Per.1]</code></li> <li>Don't optimize prematurely <code>[CppCore Per.2]</code></li> <li>Don't optimize something   that's not performance critical <code>[CppCore Per.3]</code></li> <li>Know the limits of your functions by measuring their complexity   <code>[Henney, 2010, chapter 'Know Your Limits']</code>.</li> </ul>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#how-to-improve-the-run-time-speed-of-an-algorithm","title":"How to improve the run-time speed of an algorithm?","text":"<p>Make it work, make it right, make it fast.</p> <p>Kent Beck</p> <p>A simplified workflow is this:</p> <ol> <li>Measure (hard to do <code>[Bartz-Beielstein et al., 2020]</code>)</li> <li>Think</li> <li>Change code</li> <li>Measure again</li> </ol> What to measure? <p>There are two things one can measure:</p> <ul> <li>Where the code spends its time</li> <li>How speed scales to increasingly complex input</li> </ul>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#big-o_2","title":"Big-O","text":"<p>How your (combination of) algorithms scales with more complex input.</p> <ul> <li>Counting the words in a book: O(n)</li> <li>Looking up a word in a dictionary: O(log2(n))</li> </ul> <p>Do measure big-O in release mode</p> <p>Do measure big-O in release mode!</p> <p>See the lesson on <code>assert</code> how to do so.</p> Why? <p>Debug mode -by definition- has more tests: in our code, in the code used from other packages, in the code produced by our compiler (if any). When all tests pass, our program does not need these anymore.</p> <p>In debug mode, our speed measurements would take us to the functions that test themselves most :-)</p>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#example-1","title":"Example 1","text":"<p>Your program runs three functions after each other: A, B and C. All use the same input.</p> <p>You've measured how each of these functions take per input:</p> <p></p> <p>You want your benchmark to be short: this full benchmark takes 1 second to run.</p> Which function would you improve? <p>B takes most time, so B</p>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#example-2","title":"Example 2","text":"<p>Out of curiosity, you've increased the complexities of the benchmarking inputs. Now the picture looks like this:</p> <p></p> <p>The full benchmark now takes 100 second to run.</p> Which function would you improve? <p>C takes most time, so C</p>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#conclusion","title":"Conclusion","text":"<p>Big-O helps to:</p> <ul> <li>find algorithm to profile</li> <li>make predictions</li> </ul> <p>A benchmark done in debug mode is useless: you care about your code doing actual work.</p> <p>A short benchmark time is useless: you care more about complex input than simple input. Using a continuous integration script to run a (max) two hour benchmark is a convenient solution.</p>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#exercises","title":"Exercises","text":"","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#exercise-1","title":"Exercise 1","text":"<ul> <li>Measure big-O complexity of https://www.pythonpool.com/check-if-number-is-prime-in-python/</li> </ul> <pre><code>def isprime_1(num):\n    for n in range(2, int(num**0.5) + 1):\n        if num % n == 0:\n            return False\n    return True\n</code></pre> <pre><code>def isprime_2(num):\n    if num &gt; 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n</code></pre>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#exercise-2","title":"Exercise 2","text":"<ul> <li>Measure big-O complexity of DNA alignment algorithm   at https://johnlekberg.com/blog/2020-10-25-seq-align.html</li> </ul>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/big_o/#references","title":"References","text":"<ul> <li><code>[CppCore Per.1]</code> C++ Core Guidelines: Per.1: Don't optimize without reason   Website</li> <li><code>[CppCore Per.2]</code> C++ Core Guidelines: Per.2: Don't optimize prematurely   Website</li> <li><code>[CppCore Per.3]</code> C++ Core Guidelines: Per.3:   Don't optimize something that's not performance critical   Website</li> <li><code>[Bartz-Beielstein et al., 2020]</code> Bartz-Beielstein, Thomas, et al. \"Benchmarking in optimization: Best practice and open issues.\" arXiv preprint arXiv:2007.03488 (2020).</li> <li><code>[Henney, 2010]</code> Henney, Kevlin.   97 things every programmer should know: collective wisdom from the experts. \"   O'Reilly Media, Inc.\", 2010.</li> </ul>","tags":["Big-O","Big O","scalability"]},{"location":"optimisation/improve_runtime_speed/","title":"Improve runtime speed","text":"<p>Learning outcomes</p> <ul> <li>Practice to improve the runtime speed</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>.</li> </ul> <p>Teaching goals are:</p> <ul> <li>.</li> </ul> <p>Prior:</p> <ul> <li>.</li> </ul>","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/improve_runtime_speed/#why-improve-run-time-speed","title":"Why improve run-time speed?","text":"<p>Your program is too slow. You want to make it go faster. You've used runtime speed profiling to find the runtime speed bottleneck. Now, you want to follow a formal method to improve the runtime speed.</p>","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/improve_runtime_speed/#how-to-improve-run-time-speed","title":"How to improve run-time speed","text":"<p>As an example, we assume that a function called <code>is_prime</code> is the speed bottleneck. Its behaviour is tested to be correct.</p>","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/improve_runtime_speed/#1-write-the-test","title":"1. Write the test","text":"<p>We will write a new implementation of <code>is_prime</code>, in the hope that it will be faster. We will call the current implementation <code>is_prime_1</code> and the new implementation <code>is_prime_2</code>. This is the test we'll write:</p> <pre><code>assert get_t_is_prime_2() * 10 &lt; get_t_is_prime_1()\n</code></pre> <p>Here we test that the newer implementation must be 10x as fast, but you can use any constant other than 10 here.</p>","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/improve_runtime_speed/#2-refactor","title":"2. Refactor","text":"<p>Before this situation:</p> <ul> <li><code>is_prime</code>: the function actually used by the program,   with the first implementation</li> </ul> <p>Here is the simplified code:</p> <pre><code>def is_prime(num):\n    # First implementation here\n</code></pre> <p>The program now calls for three versions of <code>is_prime</code>:</p> <ul> <li><code>is_prime</code>: the function actually used by the program</li> <li><code>is_prime_1</code>: the first implementation</li> <li><code>is_prime_2</code>: the second implementation</li> </ul> <p>This calls for a split of the code like this:</p> <pre><code>def is_prime(num):\n    return is_prime_1(num)\n\ndef is_prime_1(num):\n    # First implementation here\n\ndef is_prime_2(num):\n    return is_prime_1(num)\n</code></pre> <p>Now:</p> <ul> <li><code>is_prime</code> is a so-called 'forwarding function' or 'logistic function',   probably calling the fastest implementation</li> <li><code>is_prime_1</code> is just the first implementation</li> <li><code>is_prime_2</code> is a stub for a (hopefully) faster implementation that,   for now, calls the first implementation:   we can assume that both implementations   are equally fast :-)</li> </ul>","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/improve_runtime_speed/#3-set-up-the-test","title":"3. Set up the test","text":"<p>The speed tests require some scaffolding, due to the behavior of the <code>timeit</code> Python library:</p> <pre><code>def get_test_prime():\n    return 15485863\n\ndef get_t_is_prime_1_impl():\n    is_prime_1(get_test_prime())\n\ndef get_t_is_prime_2_impl():\n    is_prime_2(get_test_prime())\n\ndef get_t_is_prime_1():\n    import timeit\n    return timeit.timeit(get_t_is_prime_1_impl, number = 1)\n\ndef get_t_is_prime_2():\n    import timeit\n    return timeit.timeit(get_t_is_prime_2_impl, number = 1)\n</code></pre> <p>Note the functions with <code>_impl</code>. In this context, <code>impl</code> is short for 'implementation'. 'implementation' is commonly used for 'the place where the actual work happens'. We need to create an <code>impl</code> function, because <code>timeit</code> can only measure the duration of functions that have no arguments</p> Really? <p>No, but:</p> <ul> <li>the code would become less readable, as more scaffolding would be needed</li> <li>implementation functions do exist</li> </ul> What is a slower implementation of <code>is_prime</code>? <p>Here is a slower implementation of <code>is_prime</code>:</p> <pre><code>def is_prime_1(num):\n    if num &gt; 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n</code></pre>","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/improve_runtime_speed/#exercises","title":"Exercises","text":"","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/improve_runtime_speed/#exercise-1-improve-the-run-time-speed","title":"Exercise 1: improve the run-time speed","text":"<p>Start with the code below, including the test that breaks the code. Assume that <code>is_prime</code> is correct.</p> <pre><code>def is_prime(num):\n    if num &gt; 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n\nassert get_t_is_prime_2() * 10 &lt; get_t_is_prime_1()\n</code></pre> <p>Fix the test following TDD. Use any second implementation to determine if a number is prime. Let <code>is_prime</code> use the faster implementation.</p> What is a faster implementation of <code>is_prime</code>? <p>Here is a faster implementation of <code>is_prime</code>:</p> <pre><code>def is_prime(num):\n    for n in range(2, int(num**0.5) + 1):\n        if num % n == 0:\n            return False\n    return True\n</code></pre> Answer <pre><code>def is_prime(num):\n    return is_prime_2(num)\n\ndef is_prime_1(num):\n    if num &gt; 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef is_prime_2(num):\n    for n in range(2, int(num**0.5) + 1):\n        if num % n == 0:\n            return False\n    return True\n\ndef get_test_prime():\n    return 15485863\n\ndef get_t_is_prime_1_impl():\n    is_prime_1(get_test_prime())\n\ndef get_t_is_prime_2_impl():\n    is_prime_2(get_test_prime())\n\ndef get_t_is_prime_1():\n    import timeit\n    return timeit.timeit(get_t_is_prime_1_impl, number = 1)\n\ndef get_t_is_prime_2():\n    import timeit\n    return timeit.timeit(get_t_is_prime_2_impl, number = 1)\n\n\nassert get_t_is_prime_2() * 10 &lt; get_t_is_prime_1()\n</code></pre>","tags":["speed","runtime","run-time","improve"]},{"location":"optimisation/runtime_speed_profiles/","title":"Runtime speed profiles","text":"<p>Learning outcomes</p> <ul> <li>Practice to get a run-time speed profile</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>.</li> </ul> <p>Teaching goals are:</p> <ul> <li>.</li> </ul> <p>Prior:</p> <ul> <li>.</li> </ul>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#why-use-runtime-speed-profiles","title":"Why use runtime speed profiles?","text":"<p>Quote from Herb Sutter</p> <p>It is far, far easier to make a correct program fast, than it is to make a fast program correct.</p> How does Herb Sutter look like? <p></p> <ul> <li>Source: Wikimedia</li> </ul> <p>Quote from Donald Knuth</p> <p>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.</p> How does Donald Knuth look like? <p></p> <ul> <li>Source: Wikipedia</li> </ul> <p>Up until now, you've focussed on having code that is correct, instead of being fast. This is smart: you should not optimize prematurely <code>[CppCore Per.2]</code>, nor should you optimize without reason <code>[CppCore Per.1]</code>.</p> <p>Now your program is getting too slow so you now have a reason to improve its runtime speed.</p> <p>However, you should not optimize each function, as not each function is a speed bottleneck: only optimize those functions that are speed bottleneck <code>[CppCore Per.3]</code>.</p> <p>You should not guess where such a speed bottleneck is, because developers -also very experienced developers- are known to have a bad intuition <code>[Sutter &amp; Alexandrescu, 2004]</code></p> <p>Instead, you need measurements before making claims claims about performance <code>[CppCore Per.6][Chellappa et al., 2008]</code>.</p> <p>Here we use runtime speed profiles to find the bottleneck of your runtime speed.</p> <p>Also, there are a lot of misconceptions about runtime speed. We'll go through some of the most prominent ones.</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#obtaining-a-minimal-runtime-speed-profile","title":"Obtaining a minimal runtime speed profile","text":"<p>Here is the minimal Python code to get a speed profile:</p> <pre><code>import cProfile\n\ndef do_it():\n    print('Hello world')\n\ncProfile.run('do_it()')\n</code></pre> <p>The code uses <code>cProfile</code> and its documentation can be found at the official Python documentation</p> <p>This speed profile is useless, as it cannot detect a speed bottleneck: it only runs 1 out of all 1 functions.</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#obtaining-a-minimal-and-useful-runtime-speed-profile","title":"Obtaining a minimal and useful runtime speed profile","text":"<p>Below is a useful speed profile, as it detects a speed bottleneck:</p> <pre><code>def isprime_1(num):\n    for n in range(2, int(num**0.5) + 1):\n        if num % n == 0:\n            return False\n    return True\n\ndef isprime_2(num):\n    if num &gt; 1:\n        for n in range(2, num):\n            if (num % n) == 0:\n                return False\n        return True\n    else:\n        return False\n\ndef do_it():\n    number = 15485863\n    isprime_1(number)\n    isprime_2(number)\n\nimport cProfile\ncProfile.run('do_it()')\n</code></pre>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercises","title":"Exercises","text":"","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-1","title":"Exercise 1","text":"<ul> <li>Put the code of 'Obtaining a minimal runtime speed profile'   in a Python script and run it in release mode. What is the output?</li> </ul> How to run in release mode? <p>Run <code>python</code> with the <code>-O</code> (dash capital-oh) to run Python in release mode:</p> <pre><code>python -O minimal_profile.py\n</code></pre> Answer <pre><code>richel@richel-N141CU:~$ /bin/python3 -O /home/richel/GitHubs/programming_formalisms/docs/optimisation/minimal_profile.py\nHello world\n         5 function calls in 0.000 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)\n        1    0.000    0.000    0.000    0.000 minimal_profile.py:3(do_it)\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.print}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n</code></pre> <ul> <li>Where is the documentation about what these columns mean?</li> </ul> Answer <p>Searching for 'cProfile output' will take you to the Python profiling manual)</p> <ul> <li>What do the columns mean?</li> </ul> Answers <p>This is what the columns mean, simplified from the Python profiling manual):</p> Parameter Description <code>ncalls</code> The number of times the function is called <code>tottime</code> The total time spent in the given function <code>percall</code> The time spent in the given function per call <code>cumtime</code> The cumulative time spent in this and all subfunctions <code>percall</code> The cumulative time spent in this and all subfunctions per call","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-2-run-a-run-time-speed-profile","title":"Exercise 2: run a run-time speed profile","text":"<ul> <li>Put the code of 'Obtaining a minimal and useful runtime speed profile'   in a Python script and run it.   What is the output?</li> </ul> Answer <p>The output will look similar to this:</p> <pre><code>richel@richel-N141CU:~$ /bin/python3 -O /home/richel/GitHubs/programming_formalisms/docs/optimisation/minimal_speed_profile.py\n         6 function calls in 1.143 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    1.143    1.143 &lt;string&gt;:1(&lt;module&gt;)\n        1    0.001    0.001    0.001    0.001 minimal_speed_profile.py:1(isprime_1)\n        1    0.000    0.000    1.142    1.142 minimal_speed_profile.py:16(do_it)\n        1    1.142    1.142    1.142    1.142 minimal_speed_profile.py:7(isprime_2)\n        1    0.000    0.000    1.143    1.143 {built-in method builtins.exec}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n</code></pre> <ul> <li>What is the total length of the program? Which two lines did you find it?</li> </ul> Answer <p>1.143 seconds.</p> <p>You can find it at</p> <ul> <li>the top (<code>6 function calls in 1.143 seconds</code>)</li> <li>the first line   (<code>1    0.000    0.000    1.143    1.143 &lt;string&gt;:1(&lt;module&gt;)</code>),   which spans the whole prgram</li> </ul> <ul> <li>In which function is the speed bottleneck? Why?</li> </ul> Answer <p>In <code>isprime_2</code>, as the program spends 1.142 out of 1.143 seconds in this function.</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-3-read-a-run-time-speed-profile","title":"Exercise 3: read a run-time speed profile","text":"<p>Take a look at this speed profile:</p> <pre><code>   ncalls  tottime  percall  cumtime  percall function\n        1   97.000   97.000   97.000   97.000 function_a\n        1    1.000    1.000    1.000    1.000 function_b\n        1    2.000    2.000    2.000    2.000 function_c\n</code></pre> <ul> <li>Which function will you work on?</li> </ul> Answer <p><code>function_a</code>: as 97 out of a 100 seconds, Python was running it code.</p> <ul> <li>Imagine you have improved that function. How much faster will your   program maximally be?</li> </ul> Answer <p>If <code>function_a</code> is made to take 0 seconds, your program still takes 3 seconds. You've made the code (100 sec / 3 sec =) 33.3x faster.</p> <ul> <li>Would it be worth your time?</li> </ul> Answer <p>This was worth your time if you think a 33-fold speed increase was worth your time.</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-4-read-a-run-time-speed-profile","title":"Exercise 4: read a run-time speed profile","text":"<p>Take a look at this speed profile:</p> <pre><code>   ncalls  tottime  percall  cumtime  percall function\n        1   40.000   40.000   40.000   40.000 function_a\n        1   30.000   30.000   30.000   30.000 function_b\n        1   20.000   20.000   20.000   20.000 function_c\n        1   10.000   10.000   10.000   10.000 function_d\n</code></pre> <ul> <li>Which function will you work on?</li> </ul> Answer <p><code>function_a</code>: as 40 out of a 100 seconds, Python was running it code.</p> <ul> <li>Imagine you have improved that function. How much faster will your   program maximally be?</li> </ul> Answer <p>If <code>function_a</code> is made to take 0 seconds, your program still takes 60 seconds. You've made the code (100 sec / 60 sec =) 1.67x faster.</p> <ul> <li>Would it be worth your time?</li> </ul> Answer <p>This was worth your time if you think a 2-fold speed increase was worth your time.</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-5-should-i-learn-a-different-language","title":"Exercise 5: should I learn a different language?","text":"<p>C, C++ and Rust allows one to write direct machine code. You can write the theoretical best machine code in ... well ... machine code. Hence, these are indeed the theoretically fastest languages.</p> <p>Python does not allow one to write machine code. Hence, it cannot be as fast as the languages that can.</p> <p>To write fast code, should one learn those languages instead?</p> <p>Below is a figure from <code>[Prechelt, 2000]</code>. It shows the distribution of runtime speeds of a certain problem (called <code>z1000</code>), for different programming languages.</p> <p></p> <ul> <li>Take a close look at the figure.   The paper has an advice to yes/no learn a 'faster'   programming language. What do you think the advice is?</li> </ul> Answer <p>The variance within a programming language is bigger than variance between languages (adapted fig 2, from <code>[Prechelt, 2000]</code>).</p> <p>Instead of learning a faster language, learn how to be fast in your language.</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-6-should-i-parallelize-my-code","title":"Exercise 6: should I parallelize my code?","text":"<p>Take a look at this speed profile:</p> <pre><code>   ncalls  tottime  percall  cumtime  percall function\n        1   95.000   95.000   95.000   95.000 function_a\n        1    2.000    2.000    2.000    2.000 function_b\n        1    3.000    3.000    3.000    3.000 function_c\n</code></pre> <ul> <li>Which function will you improve the speed of?</li> </ul> Answer <p><code>function_a</code>, as it uses 95% of all runtime.</p> <ul> <li>What is the maximum speed increase you'll get?</li> </ul> Answer <p>When <code>function_a</code> takes (close to) zero percent.</p> <p>You'll go from 100 time units to 5 time units, hence a 20x speed increase</p> <ul> <li>Take a close look at the figure below.   The figure below shows the theoretical best   speed up regarding the percentage of code that can be parallelized.   This is Amdahl's law (and also found in <code>[Rodgers, 1985]</code>).   Which line applies to our speed profile?</li> </ul> <p></p> Answer <p>The 95% green dashed line applies to our case</p> <ul> <li>How much processors do we need to achieve at least a 10x   speed increase?</li> </ul> Answer <p>Around 20 CPUs</p> <ul> <li>One could say it is ironical that one needs 20x more CPUs   to achieve a 10x improvement in runtime speed.   Also, Amdahls law ignores the overhead of parallel   code: there is CPU power needed to let the processes   communicate with each other.   What do you think the literature states for/against   parallelizing code?</li> </ul> Answer <p>Parallelization/concurrency is a valid technique to make code go faster, just don't expect miracles that come without a cost:</p> <ul> <li>Concurrency does not always improve   performance <code>[Martin, 2009, p. 179]</code></li> <li>Concurrency will change your software   architecture <code>[Martin, 2009, p. 179]</code></li> <li>Concurrency incurs overhead, both in CPU and   code <code>[Martin, 2009, p. 179]</code></li> <li>Correct concurrency is complex, even for simple   problems <code>[Martin, 2009, p. 179]</code></li> <li>Concurrency bugs are not usually repeatable <code>[Martin, 2009, p. 180]</code></li> </ul>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-7-should-i-unroll-my-for-loops","title":"Exercise 7: should I unroll my for loops?","text":"<p>A colleague reads your (tested, of course!) code, which is shown below:</p> <pre><code>my_values = get_values()\nassert len(my_values) == 3\nsum = 0\nfor i in range(3):\n  sum += my_values[i]\n</code></pre> <p>He/she argues suggests to make you code faster by 'unrolling the for-loop', as shown below. The reasoning is that the code can do less, hence is faster.</p> <pre><code>my_values = get_values()\nassert len(my_values) == 3\nsum = my_values[0] + my_values[1] + my_values[2]\n</code></pre> <p>You've tested this code in isolation: this piece of code is indeed a bit faster!</p> <ul> <li>Would you now start unrolling the for-loop? Why?</li> </ul> Answer <p>You could indeed choose to do so.</p> <p>However, the chance that this has any measurable impact on your program as a whole is close to zero. Don't optimize something that's not performance critical <code>[CppCore Per.3]</code>, nor without reason <code>[CppCore Per.1]</code>, nor prematurely <code>[CppCore Per.2]</code>.</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-8-should-i-use-a-xor-swap","title":"Exercise 8 should I use a XOR swap?","text":"<p>A colleague reads your (tested, of course!) code, which is shown below:</p> <pre><code>def slow_tmp_swap(x, y):\n    tmp = x\n    x = y\n    y = tmp\n    return x, y\n</code></pre> <p>He/she argues to make you code faster by using a so-called XOR-swap, as shown below. The reasoning is that you need one less variable, hence is faster.</p> <pre><code>def superfast_xor_swap(x, y):\n    x ^= y\n    y ^= x\n    x ^= y\n    return x, y\n</code></pre> <ul> <li> <p>Would you now start using a XOR swap instead?</p> <p>One should not assume that complicated code is necessarily faster than simple code <code>[CppCore Per.4]</code>, not that low-level code is necessarily faster than high-level code <code>[CppCore Per.5]</code>.</p> <p>Add that one should not make claims about performance without measurements <code>[CppCore Per.6]</code>: measure first.</p> <p>If this technique is faster, you could indeed choose to do so.</p> <p>However, the chance that this has any measurable impact on your program as a whole is close to zero. Don't optimize something that's not performance critical <code>[CppCore Per.3]</code>, nor without reason <code>[CppCore Per.1]</code>, nor prematurely <code>[CppCore Per.2]</code>.</p> </li> </ul>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#exercise-9-how-to-make-things-go-faster","title":"Exercise 9: how to make things go faster?","text":"<p>You want to make the code below faster. You've measured the speed profile, also as shown below. How to make it go faster?</p> <ul> <li>Tip: how can you achieve the same with less calculations?</li> </ul> <pre><code>   ncalls  tottime  percall  cumtime  percall function\n     1000   99.000   99.000   99.000   99.000 calc_fitness\n     1000    5.000    5.000    5.000    1.000 Individual.get_phenotype\n     1000    0.000    0.000    0.000    0.000 Individual.__init__\n     1000    0.000    0.000    0.000    0.000 list.append\n</code></pre> <pre><code>class Individual:\n    def __init__(self, phenotype):\n        \"\"\"Genotype, a value from 0 to and including 9\"\"\"\n        assert isinstance(phenotype, int)\n        assert phenotype &gt;= 0\n        assert phenotype &lt;= 9\n        self._phenotype = phenotype\n    def get_phenotype(self):\n        \"\"\"Genotype, a value from 0 to and including 9\"\"\"\n        return self._phenotype\n\ndef calc_fitness(phenotype):\n    \"\"\"Complex calculation.\"\"\"\n    assert isinstance(phenotype, int)\n    assert phenotype &gt;= 0\n    assert phenotype &lt;= 9\n    return (phenotype + 5) % 10 # Imagine something complex here\n\nn_individuals = 1000\npopulation = []\nfor i in range(n_individuals):\n    population.append(Individual(i % 10))\nassert len(population) == n_individuals\n\n# Calculate the fitness each time\nfor i in range(n_individuals):\n    phenotype = population[i].get_phenotype()\n    fitness = calc_fitness(phenotype) # Complex calculation\n    # Do something with the fitness\n</code></pre> Answer <p>There are only 10 possible phenotypes, hence there are only 10 possible fitness values. Instead of doing this calculation each time, we could calculate all possible fitness values for all possible phenotypes.</p> <p>The technical jargon is: we are going to create a look-up table, commonly abbreviated to 'LUT'. In Python, the <code>dict</code> is the go-to datatype for this.</p> <pre><code>def create_phenotype_fitness_lookup_table():\n    lut = dict()\n    for phenotype in range(10):\n        assert phenotype &gt;= 0\n        assert phenotype &lt;= 9\n        lut[phenotype] = calc_fitness(phenotype)\n    return lut\n</code></pre> <p>Note that using a <code>list</code> would work just as fine too, and that might be faster. Feel encouraged to measure this :-)</p> <p>Now using that look-up table:</p> <pre><code>phenotype_fitness_lookup_table = create_phenotype_fitness_lookup_table()\nfor i in range(n_individuals):\n    phenotype = population[i].get_phenotype()\n    fitness = phenotype_fitness_lookup_table[phenotype] # Look up the value\n    # Do something with the fitness\n</code></pre> <p>Do measure the speed before and after, as you need measurements before making claims claims about performance <code>[CppCore Per.6][Chellappa et al., 2008]</code>: the code may actually be slower!</p>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"optimisation/runtime_speed_profiles/#references","title":"References","text":"<ul> <li><code>[CppCore Per.1]</code> C++ Core Guidelines: Per.1: Don't optimize without reason</li> <li><code>[CppCore Per.2]</code> C++ Core Guidelines: Per.2: Don't optimize prematurely</li> <li><code>[CppCore Per.3]</code> C++ Core Guidelines: Per.3: Don't optimize something that's not performance critical</li> <li><code>[CppCore Per.4]</code> C++ Core Guidelines: Per.4: Don't assume that complicated code is necessarily faster than simple code</li> <li><code>[CppCore Per.5]</code> C++ Core Guidelines: Per.5: Don't assume that low-level code is necessarily faster than high-level code</li> <li><code>[CppCore Per.6]</code> C++ Core Guidelines: Per.6: Don't make claims about performance without measurements</li> <li><code>[Chellappa et al., 2008]</code>   Chellappa, Srinivas, Franz Franchetti, and Markus P\u00fcschel.   \"How to write fast numerical code: A small introduction.\"   Generative and Transformational Techniques in Software Engineering II:   International Summer School, GTTSE 2007, Braga, Portugal,   July 2-7, 2007. Revised Papers (2008): 196-259.</li> <li><code>[Prechelt, 2000]</code> Prechelt, Lutz. \"An empirical comparison of C, C++, Java, Perl, Python, REXX and TCL.\" IEEE Computer 33.10 (2000): 23-29.</li> <li><code>[Martin, 2009]</code> Martin, Robert C.   Clean code: a handbook of Agile software craftsmanship.   Pearson Education, 2009.</li> <li><code>[Sutter &amp; Alexandrescu, 2004]</code> Sutter, Herb, and Andrei Alexandrescu. C++ coding standards: 101 rules, guidelines, and best practices. Pearson Education, 2004.</li> </ul>","tags":["speed","runtime","run-time","profile","profiling","optimization","optimisation","misconceptions","myths","illusions","delusions"]},{"location":"package/","title":"Package","text":"<p>Learning outcomes</p> <ul> <li>Understand how to package a Python project</li> <li>Package our Python project locally</li> <li>Run a script with our Python project</li> <li>Upload our package to PyPI</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>.</li> </ul> <p>Teaching goals are:</p> <ul> <li>.</li> </ul> <p>Prior:</p> <ul> <li>.</li> </ul> <p>Lesson plans:</p> <pre><code>gantt\n  title Lesson plan pair programming 1\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 15s\n  Feedback 1: feedback_1, after exercise_1, 5s\n  Theory 2: theory_2, after feedback_1, 5s\n  Exercise 2: crit, exercise_2, after theory_2, 10s\n  Exercise 2 after the break: crit, after exercise_2, 5s</code></pre>","tags":["package","packaging","PyPI"]},{"location":"package/#why","title":"Why?","text":"<p><code>weather</code> on (the test version of) PyPI</p> <p>You want to share or re-use your work in the regular way.</p>","tags":["package","packaging","PyPI"]},{"location":"package/#exercises","title":"Exercises","text":"","tags":["package","packaging","PyPI"]},{"location":"package/#exercise-1-install-package-locally","title":"Exercise 1: install package locally","text":"<ul> <li>Scan the   'Python Packaging User Guide' section on 'Packaging Python Projects'   until (and excluding) 'Generating distribution archives'</li> <li>Does the learners' project follow all of these guidelines?</li> </ul> Answer <p>Yes.</p> <p>The learners' project already follows all of these guidelines :-)</p> <ul> <li>Does the learners' project check if our project can be put in a package?</li> </ul> Answer <p>Yes.</p> <p>You can find this in the <code>.github/workflows/check_package.yaml</code> script</p> <ul> <li>How does the learners' project put our code into a package?   You can find it in the CI script.</li> </ul> Answer <p>The script uses:</p> <pre><code>python3 -m pip install .\n</code></pre> <ul> <li>Create a local package from the learners' project's code.   Use the CI script's code as a hint.</li> </ul> Answer <p>The script uses:</p> <pre><code>python3 -m pip install .\n</code></pre> <p>However, variations to get this to work on your computer are:</p> <ul> <li>use <code>python</code> instead of <code>python3</code></li> <li>add <code>--break-system-packages</code> at the end,   i.e. run <code>python3 -m pip install . --break-system-packages</code></li> </ul> <ul> <li>Scan the file <code>main.py</code> in the root folder of the learners' project.   Confirm that it assumes our Python package to be present.   What is the name of our Python package?</li> </ul> Answer <p>The script imports a function from <code>weather</code>:</p> <pre><code>from weather.reader import (\n    read_data,\n)\n</code></pre> <p>Hence, our package is called <code>weather</code>.</p> <p>Another way to find out, is to read <code>pyproject.toml</code>, another file in the root folder of our project. It reads:</p> <pre><code>[project]\nname = \"weather\"\n</code></pre> <ul> <li>Run the script <code>main.py</code> to verify our package is installed.   Have you successfully installed our code as a package?</li> </ul> How to run that script again? <p>Run:</p> <pre><code>python main.py\n</code></pre> Answer <p>If you see this error message, the answer is 'no':</p> <pre><code>Traceback (most recent call last):\n  File \"/home/richel/GitHubs/programming_formalisms_project_summer_2025/main.py\", line 10, in &lt;module&gt;\n    from weatherx.experiment import (\nModuleNotFoundError: No module named 'weather'\n</code></pre> <p>If you get an error such as <code>Cannot find file 'parameters.csv'</code> it means that our package is installed successfully. Sure, it does not do actual work, but it is installed!</p>","tags":["package","packaging","PyPI"]},{"location":"package/#exercise-2-upload-package-to-pypi","title":"Exercise 2: upload package to PyPI","text":"","tags":["package","packaging","PyPI"]},{"location":"package/#exercise-21-build-the-package-distribution-files","title":"Exercise 2.1: Build the package distribution files","text":"<p>Follow the steps at the official Python packaging documentation:</p> <p>Install <code>build</code>:</p> <pre><code>python3 -m pip install --upgrade build --break-system-packages\n</code></pre> <p>Running <code>build</code>:</p> <pre><code>python3 -m build\n</code></pre> How does that look like? <pre><code>richel@richel-N141CU:~/GitHubs/programming_formalisms_project_summer_2025$ python3 -m build\n* Creating isolated environment: venv+pip...\n* Installing packages in isolated environment:\n  - hatchling\n* Getting build dependencies for sdist...\n* Building sdist...\n* Building wheel from sdist\n* Creating isolated environment: venv+pip...\n* Installing packages in isolated environment:\n  - hatchling\n* Getting build dependencies for wheel...\n* Building wheel...\nSuccessfully built weather-1.0.1.tar.gz and weather-1.0.1-py3-none-any.whl\n</code></pre> <p>Now there will be files in the <code>dist</code> folder:</p> How does that look like? <pre><code>richel@richel-N141CU:~/GitHubs/programming_formalisms_project_summer_2025$ ls dist/\nweather-1.0.1-py3-none-any.whl  weather-1.0.1.tar.gz\n</code></pre> <p>Well done, you've just created the package distribution files!</p>","tags":["package","packaging","PyPI"]},{"location":"package/#exercise-22-upload-our-package-distribution","title":"Exercise 2.2: Upload our package distribution","text":"<p>Last step is to upload our package distribution files to https://test.pypi.org:</p> <p>Install <code>twine</code>:</p> <pre><code>python3 -m pip install --upgrade twine --break-system-packages\n</code></pre> <p>After registering to https://test.pypi.org, you have the API token be allowed to upload to testPyPI. Upload:</p> <pre><code>python3 -m twine upload --repository testpypi dist/*\n</code></pre> I got a 403 error with the word 'legacy' in it <p>This error happens when you are not the first to upload this package.</p> <p>To solve this, edit the <code>pyproject.toml</code> file. Look for this section:</p> <pre><code>[project]\nname = \"uppsalaweather\"\n</code></pre> <p>Replace the name by something new, for example:</p> <pre><code>[project]\nname = \"uppsalaweather_sven\"\n</code></pre> <p>Rebuild the package again and upload.</p> How does that look like? <pre><code>richel@richel-N141CU:~/GitHubs/programming_formalisms_project_summer_2025$ python3 -m twine upload --repository testpypi dist/*\nUploading distributions to https://test.pypi.org/legacy/\nEnter your API token:\nUploading weather-1.0.1-py3-none-any.whl\n100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 24.8/24.8 kB \u2022 00:00 \u2022 72.3 MB/s\nUploading weather-1.0.1.tar.gz\n100% \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB \u2022 00:00 \u2022 8.5 MB/s\n\nView at:\nhttps://test.pypi.org/project/weather/1.0.1/\n</code></pre> <p>Indeed, the package can now be found at https://test.pypi.org/project/weather/1.0.1/.</p> How does that look like? <p></p>","tags":["package","packaging","PyPI"]},{"location":"pair_programming/","title":"Pair programming","text":"<p>Learning outcomes</p> <ul> <li>Understand why pair programming is important</li> <li>Understand what good pair programming looks like</li> <li>Practice pair programming</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>Learners can do the git basic workflow on <code>main</code></li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners can tell why pair programming is important</li> <li>Learners can tell how good pair programming looks like</li> <li>Learners have practiced pair programming</li> </ul> <p>Preparation:</p> <ul> <li>A shared document where duos can assign themselves to a class,   needed for exercise 2</li> <li>The learner project must have a folder <code>/src/[package_name]</code>   where learners can put their code,   needed for exercise 2</li> </ul> <p>Lesson plans:</p> <pre><code>gantt\n  title Lesson plan pair programming 1\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 15s\n  Feedback 1: feedback_1, after exercise_1, 5s\n  Theory 2: theory_2, after feedback_1, 5s\n  Exercise 2: crit, exercise_2, after theory_2, 10s\n  Exercise 2 after the break: crit, after exercise_2, 5s</code></pre> <pre><code>gantt\n  title Lesson plan pair programming 2\n  dateFormat X\n  axisFormat %s\n  Exercise 2: crit, exercise_2, 0, 5s\n  Feedback 2: feedback_2, after exercise_2, 10s\n  Theory 3: theory_3, after feedback_2, 5s\n  Exercise 3: crit, exercise_3, after theory_3, 10s\n  Feedback 3: feedback_3, after exercise_3, 5s\n  Start TDD: done, extra, after feedback_3, 45</code></pre>","tags":["pair","programming","duo","duos","together","collaborative","team"]},{"location":"pair_programming/#why","title":"Why?","text":"<p>Pair programming is a facet of developing code better. We use it a lot in this course, because:</p> <ul> <li>it is recommended by influential software development   classics <code>[Martin, 2011][Thomas &amp; Hunt, 2019]</code></li> <li>scientific evidence is mixed, however, e.g.<ul> <li>a pair considers more alternative ways for a solution <code>[Flor et al., 1991]</code>,   however, this is only 2 programming teams</li> <li>96% of developers prefer pair programming over developing   alone <code>[Williams &amp; Kessler, 2000]</code>, however,   this is only 41 respondents</li> </ul> </li> <li>what is for sure: it works great with recommended teaching practices,   e.g. grouping up learners   is effective <code>[Hattie, 2012][Schwartz &amp; Gurung, 2012, page 65]</code>   (with the optimal group size of 2 [reference for best group size 2])   and indeed the Programming Formalisms learners like it   as they write in the retrospective</li> </ul>","tags":["pair","programming","duo","duos","together","collaborative","team"]},{"location":"pair_programming/#exercises","title":"Exercises","text":"","tags":["pair","programming","duo","duos","together","collaborative","team"]},{"location":"pair_programming/#exercise-1-understand-pair-programming","title":"Exercise 1: understand pair programming","text":"Learning outcomes <ul> <li>Understand what pair programming is</li> <li>First guess at understanding what good pair programming is</li> </ul> <ul> <li>Together, read the questions before reading the material</li> <li>Together, divide which team member is going to read which source:<ul> <li>the Wikipedia page on Pair Programming.</li> <li>Martin Fowler's page on Pair Programming</li> <li>(if with three: Codecademy's page on Pair Programming)</li> </ul> </li> <li>Together, set a timer for 10 minutes</li> <li>Individually, answer the questions within the time limit</li> <li>Together, write down a shared answer on the GitHub project repository   with path <code>learners/[a teammember's name]/pair_programming.md</code></li> <li>Upload the file to the GitHub repo.</li> </ul> <p>Questions:</p> <ul> <li>What is pair programming?</li> </ul> Answers <p>Pair programming is a software development practice in which two developers work on the same computer. The person with the keyboard ('the driver') develops new code. The person without the keyboard ('the navigator') reviews the code.</p> <ul> <li>How does a good pair behave? Describe what can be observed when pairing online</li> </ul> Answers <p>In an online course:</p> <ul> <li>A good pair has the driver sharing his/her screen</li> <li>In a good pair, both people talk a lot</li> <li>A good pair switches roles regularly</li> <li>A good pair has a lot of commits</li> </ul> <ul> <li>When to switch roles? Give a procedure</li> </ul> Answers <p>Any procedure to achieve the goal of regularly switching roles:</p> <ul> <li>after enough work has been done to put in a <code>git commit</code>   such as 'Add documentation', 'Add test', 'Pass test'</li> <li>each time a timer goes off, e.g. after 5 minutes</li> </ul> <p>The first procedure sometimes fails when a driver (thinks he/she) has much more knowledge than the navigator on the subject and is (apparently) inexperienced in good pair programming. In such cases, the second procedure work better.</p> <ul> <li>What effects does pair programming have?</li> </ul> Answers <p>All material for this exercise show references to studies that show advantages of pair programming, for example (from two Wikipedia references):</p> <ul> <li>a pair considers more alternative ways for a solution <code>[Flor et al., 1991]</code></li> <li>96% of developers prefer pair programming over developing alone <code>[Williams &amp; Kessler, 2000]</code></li> </ul> <p>However, the first study uses only 2 programming teams, the second study 41 self-selected respondents. One can/should be critical on these studies.</p> <p>Yet, for teaching, working is groups has a high effect size <code>[Hattie, 2012]</code>, where the optimal group size is two <code>[Schwartz &amp; Gurung, 2012]</code>.</p>","tags":["pair","programming","duo","duos","together","collaborative","team"]},{"location":"pair_programming/#exercise-2-criticise-teachers-pair-programming","title":"Exercise 2: criticise teachers pair programming","text":"<p>This exercise is two teacher demonstrating pair programming as good as possible.</p> <ul> <li>Watch them do it</li> <li>Discuss as a group<ul> <li>Were roles swapped often enough?</li> <li>Did they solve unexpected problems well?</li> <li>Did the driver always share his/her screen?</li> <li>Did each team member contribute?</li> <li>Did each team member contribute to the code?</li> <li>How can they improve?</li> </ul> </li> </ul>","tags":["pair","programming","duo","duos","together","collaborative","team"]},{"location":"pair_programming/#exercise-3-practice-pair-programming","title":"Exercise 3: practice pair programming","text":"<p>Before doing the exercises:</p> <ul> <li>Reach an agreement on how to do pair programming: among others,   decide upon the first driver and when to switch roles.</li> <li>Write your own analysis on the weather data, as if it would   be for a paper. You can use the same analysis   as done in the 'TDD at a larger scale' session   or come up with your own hypothesis.   If that is too hard, try   one of the many example functions</li> </ul> <p>The exercise, to be done as a pair:</p> <ul> <li>Work on a branch for your group, e.g. <code>lasse_and_maja</code>.   Branch off from <code>develop</code></li> <li>Develop the code together</li> <li>Share code by <code>push</code>ing it</li> <li>Agree upon when the code is done</li> </ul> <p>Reflect:</p> <ul> <li>Were roles swapped often enough?</li> </ul> Answers to reflection <p>Ideally, each learner was the driver at least twice. However, the task may have been finished before that happened and if that is the case, that is OK.</p> <ul> <li>Did you solve unexpected problems well?</li> </ul> Answers to reflection <p>One can expected some unexpected problems. It can be that one person struggled with <code>git</code> and he/she should have been given the proper time to fix this and work on the problem.</p> <ul> <li>Did the driver always share his/her screen?</li> </ul> Answers to reflection <p>Ideally, this is a yes.</p> <p>Sure, one can stop sharing when opening an email client for a GitHub message :-)</p> <ul> <li>Did each team member contribute?</li> </ul> Answers to reflection <p>Ideally, this is a yes.</p> <p>'Contributing' can be more than just writing code!</p> <ul> <li>Did each team member contribute to the code?</li> </ul> Answers to reflection <p>Ideally, this is a yes.</p> <p>Sure, people have different skill levels and one member wrote the more complex parts; this is part of being in a team: pair programming is one of the best ways to transfer knowledge!</p>","tags":["pair","programming","duo","duos","together","collaborative","team"]},{"location":"pair_programming/#references","title":"References","text":"<ul> <li><code>[Flor et al., 1991]</code> Flor, Nick V.; Hutchins, Edwin L. (1991). \"Analyzing Distributed Cognition in Software Teams: A Case Study of Team Programming During Perfective Software Maintenance\". In Koenemann-Belliveau, J\u00fcrgen; Moher, Thomas G.; Robertson, Scott P. (eds.). Empirical Studies of Programmers: Fourth Workshop. Ablex. pp. 36\u201364. ISBN 978-0-89391-856-9.</li> <li><code>[Fowler's website]</code> Fowler's website</li> <li><code>[Hattie, 2012]</code> Hattie, John. Visible learning for teachers: Maximizing impact on learning. Routledge, 2012. TODO: check that this is a reference for optimal group size of 2</li> <li><code>[Martin, 2011]</code> Martin, Robert C. The clean coder: a code of conduct for professional programmers. Pearson Education, 2011.</li> <li>[reference for best group size 2] The reference that a group size of 2   is best #71</li> <li><code>[Schwartz &amp; Gurung, 2012]</code> Schwartz, Beth M., and Regan AR Gurung. Evidence-based teaching for higher education. American Psychological Association, 2012. TODO: check that this is a reference for optimal group size of 2</li> <li><code>[Thomas &amp; Hunt, 2019]</code> Thomas, David, and Andrew Hunt. The Pragmatic Programmer: your journey to mastery. Addison-Wesley Professional, 2019.</li> <li><code>[Williams &amp; Kessler, 2000]</code> Williams, Laurie; Kessler, Robert R.; Cunningham, Ward; Jeffries, Ron (2000). \"Strengthening the case for pair programming\" (PDF). IEEE Software. 17 (4): 19\u201325. CiteSeerX 10.1.1.33.5248. doi:10.1109/52.854064.</li> </ul>","tags":["pair","programming","duo","duos","together","collaborative","team"]},{"location":"project/","title":"Project","text":"<p>In this course, we work together on a project:</p> <p>The Programming Formalisms Autumn 2025 learners' project.</p> <p>The goal of having a project is to provide a situation in which the theory is experienced. For example, at the start, merging code together will give some troubles. Later in the course, we learn how to avoid these troubles. Making the learners experience which problems are solved by using professional workflows is the reason of having one project.</p>","tags":["project"]},{"location":"project/#exercises","title":"Exercises","text":"<p>These exercises are about working on the shared project. The current project can be found at the 'Projects' page.</p> <ul> <li>Dataset</li> <li>Watching</li> <li>Issues</li> <li>Kanban board</li> <li>Team roles</li> <li>Create a list of classes</li> <li>Create the structures in code</li> <li>Add Continuous integration</li> <li>Do a big-O analysis</li> <li>Get a runtime speed profile</li> <li>Refactor design</li> <li>Refactor code</li> <li>Code deployment</li> <li>Add documentation</li> <li>Bundle code in package</li> </ul>","tags":["project"]},{"location":"project/create_class_list/","title":"Create a class list","text":"<p>Learning outcomes</p> <ul> <li>Create a first list of classes that may be needed</li> <li>Experience first step in design</li> <li>Allow for the feeling that design could be improved in hindsight</li> <li>Distribute ownership of project</li> </ul> For teachers <p>Lesson plan:</p> <pre><code>gantt\n  title Lesson plan dream programming\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Pair up: pair_up, after intro, 5s\n  Read in silence: crit, read, after pair_up, 10s\n  Answer together: crit, answer, after read, 5s\n  Teacher may come in to discuss: discuss, after read, 10s\n  Continue: crit, exercise_2, after answer, 25s</code></pre>","tags":["class","class list"]},{"location":"project/create_class_list/#exercise","title":"Exercise","text":"<ul> <li>Read project description</li> <li>Which classes does the project need?</li> <li>Together, in a shared document:<ul> <li>make an alphabetic list of structures in the shared document</li> <li>add exactly 1 maintainer to each struct</li> </ul> </li> <li>Put it on the GitHub repository</li> </ul>","tags":["class","class list"]},{"location":"project/create_structs/","title":"Create structs","text":"<p>Learning outcomes</p> <ul> <li>Convert a class name to code</li> </ul> For teachers <p>Lesson plan:</p> <pre><code>gantt\n  title Lesson plan dream programming\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Pair up: pair_up, after intro, 5s\n  Read in silence: crit, read, after pair_up, 10s\n  Answer together: crit, answer, after read, 5s\n  Teacher may come in to discuss: discuss, after read, 10s\n  Continue: crit, exercise_2, after answer, 25s</code></pre>","tags":["struct","structures","create"]},{"location":"project/create_structs/#exercise-3-create-structs-30-mins","title":"Exercise 3: create structs (30 mins)","text":"<ul> <li>Per struct maintainer, create one group</li> <li>Add the struct to the GitHub project repository</li> </ul>","tags":["struct","structures","create"]},{"location":"project/dream_design/","title":"Dream design","text":"<p>Learning outcomes</p> <ul> <li>Understand dream design</li> <li>Understand why dream design</li> <li>Understand what a stub is</li> <li>Understand why to use stubs</li> <li>Apply dream design on own class</li> <li>Practice writing stubs for own class</li> <li>Rehearse TDD</li> </ul> For teachers <p>Lesson plan:</p> <pre><code>gantt\n  title Lesson plan dream programming\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Pair up: pair_up, after intro, 5s\n  Read in silence: crit, read, after pair_up, 10s\n  Answer together: crit, answer, after read, 5s\n  Teacher may come in to discuss: discuss, after read, 10s\n  Continue: crit, exercise_2, after answer, 25s</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#introduction","title":"Introduction","text":"<p>To design your code, 'dream design' is a way to assure that you work top-down.</p> <p>The term 'dream design' is no formal term.</p> <p>'Writing stubs', which is what we are doing, is closer to the more formal term, but I, Richel, feel 'dream design', albeit no formal term, describes better what is going on.</p>","tags":["Dream","Design"]},{"location":"project/dream_design/#step-0-an-empty-class","title":"Step 0: an empty class","text":"<p>Here, we image a class that performs a computational experiment:</p> <pre><code>classDiagram\n  class Experiment</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#step-1-create-an-experiment","title":"Step 1: create an experiment","text":"<p>We do not need to use a formal class just yet, and maybe we never will. At this point in time, an empty <code>list</code> could be used too.</p> <p>Whatever we pick, whether we put our data in a class or in a list, we can already dream of a function called <code>create_experiment</code>:</p> <pre><code>experiment = create_experiment()\n</code></pre> Implementation is irrelevantImplementation with an empty listImplementation with an empty class <p>We may even already dream of getting this code to run, yet the actual implement is now irrelevant.</p> <pre><code>def create_experiment():\n    return []\n\nexperiment = create_experiment()\n</code></pre> <pre><code>class Experiment:\n    \"\"\"An experiment class\"\"\"\n\ndef create_experiment():\n    return Experiment()\n\nexperiment = create_experiment()\n</code></pre> <p>We can also write a test:</p> No testing frameworkUsing the <code>unittest</code> framework <pre><code># Should pass without error\ncreate_experiment()\n</code></pre> <pre><code>class TestExperiment(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.particle.\"\"\"\n\n    def test_create_experiment(self):\n        # Should pass without error\n        create_experiment()\n</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#step-2-run-the-experiment","title":"Step 2: run the experiment","text":"<p>Now, what do we want to do with it?</p> <p>Well, we probably want to run it, so we can dream of writing a function that runs the experiment:</p> <pre><code>experiment = create_experiment()\nrun(experiment)\n</code></pre> What about using <code>experiment.run()</code> instead? <p>This is a worse option at this point in time.</p> <p>Those with experience in object oriented programming may imagine that <code>experiment</code> is a class, with a <code>run</code> member function. However, make a function a member only if it needs direct access to the representation of a class.</p> <p>As we do not need direct access to the implementation of <code>experiment</code>, we should already use a member function.</p> <p>When using a member function becomes really necessary, one has no option but to use <code>experiment.run()</code>. However, this may never happen.</p> <p>We can imagine that <code>run</code> can work on an experiment, whatever type <code>experiment</code> may be.</p> Implementation is irrelevantImplementation <p>The actual implement is now irrelevant.</p> <pre><code>def run(experiment):\n    pass\n</code></pre> <p>We can also write a test:</p> No testing frameworkUsing the <code>unittest</code> framework <pre><code># Should pass without error\nexperiment = create_experiment()\nrun(experiment)\n</code></pre> <pre><code>class TestExperiment(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.particle.\"\"\"\n\n    def test_run(self):\n        experiment = create_experiment()\n        # Should pass without error\n        run(experiment)\n</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#step-3-run-the-experiment-and-get-the-results","title":"Step 3: run the experiment and get the results","text":"<p>However, running an experiment is not enough: we need the results of the run.</p> <p>We dream a bit more precise now:</p> <pre><code>experiment = create_experiment()\nresults = run(experiment)\n</code></pre> <p>We can imagine that <code>results</code> holds the results of the experiment, whatever type it may be.</p> Implementation is irrelevantImplementation <p>The actual implement is now irrelevant.</p> <pre><code>def run(experiment):\n    return 42\n</code></pre> <p>'results' sounds like an idea that can be put in a class. We update our class diagram:</p> <pre><code>classDiagram\n  class Experiment {\n  }\n  class Results {\n  }</code></pre> <p>We can also write a test:</p> No testing frameworkUsing the <code>unittest</code> framework <pre><code># Should pass without error\nexperiment = create_experiment()\nresults = run(experiment)\n</code></pre> <pre><code>class TestExperiment(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.particle.\"\"\"\n\n    def test_run_creates_a_result(self):\n        experiment = create_experiment()\n        # Should pass without error\n        results = run(experiment)\n</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#step-4-save-the-results","title":"Step 4: save the results","text":"<p>However, getting the results in the memory of a computer is not enough: we need to save those results to file.</p> <p>Hence, we may dream:</p> <pre><code>experiment = create_experiment()\nresults = run(experiment)\nsave(results, \"my_results.csv\")\n</code></pre> <p>We can imagine that <code>save</code> save the results of the experiment to a file called <code>my_results.csv</code>, whatever type <code>results</code> may be.</p> Implementation is irrelevantImplementation <p>The actual implement is now irrelevant.</p> <pre><code>def save(results, filename):\n    pass\n</code></pre> <p>We can also write a test:</p> No testing frameworkUsing the <code>unittest</code> framework <pre><code>experiment = create_experiment()\nresults = run(experiment)\nsave(results, \"my_results.csv\")\n</code></pre> <pre><code>class TestExperiment(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.particle.\"\"\"\n\n    def test_save(self):\n        experiment = create_experiment()\n        results = run(experiment)\n        # Should pass without error\n        save(results, \"my_results.csv\")\n</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#step-5-a-simulation-has-parameters","title":"Step 5: a simulation has parameters","text":"<p>Our simulation probably needs parameters.</p> <p>Hence, we may dream:</p> <pre><code>parameters = create_parameters()\nexperiment = create_experiment(parameters)\nresults = run(experiment)\nsave(results, \"my_results.csv\")\n</code></pre> <p>We can imagine that <code>create_parameters</code> creates parameters, that are used to initialize an experiment.</p> Implementation is irrelevantImplementation <p>The actual implement is now irrelevant.</p> <pre><code>def create_parameters():\n    return []\n\ndef create_experiment(parameters = []):\n    return parameters\n</code></pre> <p>'An experiment has parameters' makes sense and we update our class diagram:</p> <pre><code>classDiagram\n  class Experiment {\n    parameters\n  }\n  class Results {\n  }</code></pre> <p>We can also write a test:</p> No testing frameworkUsing the <code>unittest</code> framework <pre><code>parameters = create_parameters()\nexperiment = create_experiment(parameters)\n</code></pre> <pre><code>class TestExperiment(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.particle.\"\"\"\n\n    def test_create_an_experiment_with_parameters(self):\n        parameters = create_parameters()\n        experiment = create_experiment(parameters)\n</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#step-6-read-parameters-from-file","title":"Step 6: read parameters from file","text":"<p>Our simulation probably needs to read parameters from a file:</p> <p>Hence, we may dream:</p> <pre><code>parameters = read_parameters_from_file(\"parameters.txt\")\nexperiment = create_experiment(parameters)\nresults = run(experiment)\nsave(results, \"my_results.csv\")\n</code></pre> <p>We can imagine that <code>read_parameters_from_file</code> reads parameters from a file.</p> Implementation is irrelevantImplementation <p>The actual implement is now irrelevant.</p> <pre><code>def read_parameters_from_file(filename):\n    return []\n</code></pre> <p>We can also write a test:</p> No testing frameworkUsing the <code>unittest</code> framework <pre><code># Should pass without errors\nread_parameters_from_file(\"parameters.txt\")\n</code></pre> <pre><code>class TestExperiment(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.particle.\"\"\"\n\n    def test_read_parameters_from_file(self):\n        # Should pass without errors\n        read_parameters_from_file(\"parameters.txt\")\n</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#conclusion","title":"Conclusion","text":"<p>Consider the code we just dreamt:</p> <pre><code>parameters = read_parameters_from_file(\"parameters.txt\")\nexperiment = create_experiment(parameters)\nresults = run(experiment)\nsave(results, \"my_results.csv\")\n</code></pre> <p>This code is very good!</p> <p>Consider the class diagram we created:</p> <pre><code>classDiagram\n  class Experiment {\n    parameters\n  }\n  class Results {\n  }</code></pre> <p>This class diagram is very good!</p> <p>Consider the tests we dreamt of writing:</p> <pre><code>class TestExperiment(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.particle.\"\"\"\n\n    def test_create_experiment(self):\n        # Should pass without error\n        create_experiment()\n    def test_run(self):\n        experiment = create_experiment()\n        # Should pass without error\n        run(experiment)\n    def test_run_creates_a_result(self):\n        experiment = create_experiment()\n        # Should pass without error\n        results = run(experiment)\n    def test_save(self):\n        experiment = create_experiment()\n        results = run(experiment)\n        # Should pass without error\n        save(results, \"my_results.csv\")\n    def test_create_an_experiment_with_parameters(self):\n        parameters = create_parameters()\n        experiment = create_experiment(parameters)\n    def test_read_parameters_from_file(self):\n        # Should pass without errors\n        read_parameters_from_file(\"parameters.txt\")\n</code></pre> <p>Our tests are good and ensure that our dream remains a reality.</p> <p>Doing TDD in these steps, may result in the implementation below. The formal term of each of these functions is called a stub. A 'stub' is 'the first beginning of something'.</p> <pre><code>def create_parameters():\n    return []\n\ndef read_parameters_from_file(filename):\n    return []\n\ndef create_experiment(parameters = []):\n    return parameters\n\ndef run(experiment):\n    return 42\n\ndef save(results, filename):\n    pass\n</code></pre> <p>These stubs are already important: they are the infrastructure of your software. With the stubs in place, we have sketched the functions of our project.</p> <p>From here, we can make these stubs actually do something useful, by adding tests that test actual behavior. For example, <code>save</code> should actually create a file.</p> <p>???- question \"How would this blend when using classes?\"?</p> <pre><code>Perfectly fine! Here we see how those functions\nforward their functionality to classes:\n\n```python\ndef create_parameters():\n    return Parameters()\n\ndef read_parameters_from_file(filename):\n    return Parameters(filename)\n\ndef create_experiment(parameters = []):\n    return Experiment(parameters)\n\ndef run(experiment):\n    return experiment.run()\n\ndef save(results, filename):\n    pass\n```\n</code></pre>","tags":["Dream","Design"]},{"location":"project/dream_design/#exercises","title":"Exercises","text":"","tags":["Dream","Design"]},{"location":"project/dream_design/#exercise-1-dream-design","title":"Exercise 1: dream-design","text":"Learning outcomes <ul> <li>Understand dream design</li> <li>Understand why dream design</li> <li>Understand what a stub is</li> <li>Understand why to use stubs</li> </ul> <p>Do:</p> <ul> <li>Set a timer of 10 minutes</li> <li>Individually, take those 10 minutes to:<ul> <li>read the text above from start to finish.</li> <li>for yourself, answer the questions below</li> <li>for yourself, answer the discussion points below that</li> </ul> </li> </ul> <p>Answer:</p> <ul> <li>Is dream design a actual formal term?</li> <li>Why use dream design?</li> <li>What is a stub?</li> <li>Why are stubs important?</li> </ul> Answers <ul> <li>Is dream design a actual formal term?</li> </ul> <p>No. It is an invented term that is felt to better describe what is going on.</p> <ul> <li>Why use dream design?</li> </ul> <p>To develop readable code in a top-down way, as we purposefully ignore details.</p> <ul> <li>What is a stub?</li> </ul> <p>A 'stub' is 'the first beginning of something'.</p> <ul> <li>Why are stubs important?</li> </ul> <p>Stubs are the infrastructure of your software: they define inputs and outputs of functions that have understandable names.</p> <p>Discuss:</p> <ul> <li>At conclusion, the dreamt code is given.<ul> <li>Do you agree/disagree that the code is good?</li> <li>Can the code be improved? How?</li> </ul> </li> <li>At conclusion, the dreamt class diagram is given.<ul> <li>Do you agree/disagree that the class diagram is good?</li> <li>Can the class diagram be improved? How?</li> </ul> </li> <li>At conclusion, the dreamt tests are given.<ul> <li>Do you agree/disagree that the tests are good?</li> <li>Can the tests be improved? How?</li> <li>Should the tests be removed when the stubs have matured  into useful functions and are tested for real behavior?</li> </ul> </li> <li>At conclusion, one example implementation is given.<ul> <li>Do you agree/disagree that the example implementation is good?</li> <li>Can it be improved? How?</li> </ul> </li> </ul>","tags":["Dream","Design"]},{"location":"project/dream_design/#exercise-2-dream-design-your-class","title":"Exercise 2: dream-design your class","text":"Learning outcomes <ul> <li>Apply dream design on own class</li> </ul> <p>Everyone in this course is the owner of a class in the shared project. The current class design of the shared project can be found at <code>design/README.md</code>.</p> <p>In your group:</p> <ul> <li>In isolation, for 10 minutes:<ul> <li>Dream the code how to use your class  (this first block of code of 4 lines at conclusion).</li> <li>Write down this code somewhere, e.g. <code>learners/[your_name]/[class_name].md</code></li> </ul> </li> <li>As a group, discuss each group members' result:<ul> <li>Is the dreamt code good?</li> <li>Can it be improved?</li> </ul> </li> </ul> <p>When the class owner can defend his/her ideas, it is good enough :-)</p>","tags":["Dream","Design"]},{"location":"project/dream_design/#exercise-3-write-the-stubs-for-your-class","title":"Exercise 3: write the stubs for your class","text":"Learning outcomes <ul> <li>Write the stubs for your class</li> <li>Practice TDD</li> </ul> <p>With the dreamt code in mind, (re)develop it using TDD: write that test first, then make it come true.</p> <p>Work on a branch of the owner of the class. Merge to <code>develop</code> when done.</p>","tags":["Dream","Design"]},{"location":"project/issues/","title":"Issues","text":"<p>Learning outcomes</p> <ul> <li>To be a good team member within a project</li> <li>Use issues to communicate what needs to be done</li> <li>Assign yourself to issues to communicate what you are working on</li> <li>Convert requirements to issues</li> </ul> For teachers <p>Teaching goals:</p> <ul> <li>Find out which learners are comfortable with functions</li> </ul> <p>Prior:</p> <ul> <li>How to keep track of what needs to be done in a project?</li> <li>How to signal to the team what needs to be done?</li> <li>How to prevent team members from working on the same thing?</li> <li>How would you define what an issue is?</li> <li>How do you call the webpage where a list of issues can be seen?</li> </ul>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#1-why-are-issues-important","title":"1. Why are issues important?","text":"<p>A good team member communicates. Here we show how to communicate to the rest of the team with minimal overhead.</p> <ul> <li>What needs to be done?</li> <li>Who is doing what now?</li> </ul>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#2-issues","title":"2. Issues","text":"<p>A bug-tracking database is not just a memory aid or ascheduling tool. It doesn 't make it easier to produce great software, it makes it possible to create great software.</p> <p>Joel Spolsky <code>[Gunderloy, 2007]</code></p> <p>An issue is a unit of work, or something that needs to be done. All issues are stored in an issue tracker. The issue tracker is a fundamental communication tool in teams <code>[Bertram, 2009]</code> In any project, you should create a shared \"to-do\" list, such as an issue tracker <code>[Wilson et al, 2017]</code>.</p> English Issue Describe This needs to be done! Create an issue Why and what needs to be done I am on it! Assign yourself to an issue - You are best to do this! Assign someone else to an issue Why you think the other is best to do it Done! Closing an issue Why it is done Nah, it is not done yet! Re-opening an issue Why it was not done <p></p> <p>The life cycle of a issue, from <code>[Bugzilla, 2009]</code></p>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#21-issues-that-are-duplicates","title":"2.1. Issues that are duplicates","text":"<p>Sometimes, two issues describe the same problem. This is called a duplicate. Because duplicates are not uncommon, there is an issue label called <code>duplicate</code>.</p>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#22-issues-with-dependencies","title":"2.2. Issues with dependencies","text":"<p>Sometimes issues depend on other issues. This is typically indicated with a <code>depends</code> issue label. The learners' project has it too.</p> <p>In the text write something like:</p> <pre><code>This issue dependends on #42\n</code></pre> <p>The hashtag (<code>#</code>) turns the <code>#42</code> into a link to issue 42.</p>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#23-issues-based-on-requirements","title":"2.3. Issues based on requirements","text":"<p>Some issues originate from the requirements documents, as shown below.</p> <p>In academia</p> <p>In academia, instead of using a formal requirements document, you can use sentences from the 'Methods' section too.</p> <p>Writing the 'Methods' section and issues goes hand-in-hand.</p> <p>Example issue 'R1: Create testing parameter set'</p> <p>The requirements documentation states:</p> Requirement ID Requirement Description Acceptance Criteria Test Cases R2 Create testing parameters A parameter set can be created to be used in testing The test parameter set must be a parameter set <p>To do so, create a function called <code>create_test_parameters</code> in a file called <code>parameters.py</code></p> <p>The function needs no input arguments.</p> <p>The function creates a parameter set with reasonably normal default settings.</p> <p>The data type of the parameter set must be a class called <code>Parameters</code>, but use a list of strings if this is not specified yet.</p> <p>Note the related requirent R2: 'check that parameters are well-formed'</p> <p>Example issue 'R2: check that parameters are well-formed'</p> <p>The requirements documentation states:</p> Requirement ID Requirement Description Acceptance Criteria Test Cases R2 Can recognize valid parameters A valid parameter set can be recognized Parameters (such as R1) must be recognized as valid, others as invalid <p>To do so, create a function called <code>are_parameters</code> in a file called <code>parameters.py</code></p> <p>The function needs one argument, which is the value to determine if it is a parameter set.</p> <p>The function returns <code>True</code> if the value is indeed a valid/well-formed/correct parameter set and returns <code>False</code> otherwise.</p> <p>Note the related requirent R1: 'Create testing parameter set'</p> <p>Example issue 'R3: Read parameters from file'</p> <p>The requirements documentation states:</p> Requirement ID Requirement Description Acceptance Criteria Test Cases R3 Read parameters from file Parameters can be supplied as a file The simulation uses the same parameters as specified in a parameters file <p>To do so, create a function called <code>read_parameters</code> in a file called <code>parameters.py</code></p> <p>The function needs a filename as input and creates a dictionary of parameter name to parameter values, such as <code>{'initial_number_of_bacteria': '1000', 'duration': '1000 timesteps'}</code>.</p> <p>Create a test parameters file, e.g. <code>test_parameters.csv</code> to test that the values read by <code>read_parameters</code> match those in the file.</p> <p>Example issue 'R4: Create a test bacterium'</p> <p>The requirements documentation states:</p> Requirement ID Requirement Description Acceptance Criteria Test Cases R4 Create a test bacterium A bacterium can be created to be used in testing The test bacterium must be a bacterium <p>To do so, create a function called <code>create_test_bacterium</code> in a file called <code>bacterium.py</code></p> <p>The function needs no input arguments.</p> <p>The function creates a bacterium with reasonably normal default settings.</p> <p>The data type of the bacterium must be a class called <code>Bacterium</code>, but use a list of strings if this is not specified yet.</p> <p>Example issue 'R5: check that a bacteria is well-formed'</p> <p>The requirements documentation states:</p> Requirement ID Requirement Description Acceptance Criteria Test Cases R5 Can recognize a bacterium A valid (in-memory) bacterium can be recognized A bacterius (such as R4) must be recognized as valid, others as invalid <p>To do so, create a function called <code>is_bacterium</code> in a file called <code>bacterium.py</code></p> <p>The function needs one argument, which is the value to determine if it is a bacterium.</p> <p>The function returns <code>True</code> if the value is indeed a valid/well-formed/correct bacterium and returns <code>False</code> otherwise.</p> <p>Note the related requirent R4: 'Create a test bacterium'</p>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#3-managing-issues","title":"3. Managing issues","text":"<p>For a fresh project, there are many things to do. It is not uncommon to have an 'issue manager' that keeps an overview of all issues.</p>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#4-our-project","title":"4. Our project","text":"<p>In our project we use the following rules:</p> <ul> <li>Always work on an issue, create an issue if needed</li> <li>Issues are always based on the requirements document</li> <li>An issue can contain the assignment to add something to the   requirements document</li> </ul>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#5-exercises","title":"5. Exercises","text":"","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#51-exercise-1-a-typical-issue-lifecycle","title":"5.1. Exercise 1: a typical issue lifecycle","text":"<p>Do the following in our student project:</p> <ul> <li>Create a test issue.   In the text, write why you create that issue and what needs   to be done</li> <li>Assign yourself to the issue</li> <li>Close the issue. In the text, write why you close that issue</li> </ul>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#52-exercise-2-learners-project-create-an-issue","title":"5.2. Exercise 2: learners' project: create an issue","text":"<p>For the learners' project:</p> <ul> <li>create at least one issue for things that   you think need to be done, based on the design document.   Assign yourself to one issue</li> </ul>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#6-discussion","title":"6. Discussion","text":"<p>Issues are useful to communicate:</p> <ul> <li>what needs to be done</li> <li>who is planning to do what</li> <li>what is already done</li> </ul> <p>However, an issue tracker is not designed to communicate what is actively being worked on. For that, a kanban board is used instead.</p>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/issues/#7-references","title":"7. References","text":"<ul> <li><code>[Bertram, 2009]</code> Bertram, Dane.   \"The social nature of issue tracking in software engineering.\"   University of Calgary (2009).</li> <li><code>[Bugzilla, 2009]</code> Bugzilla (2009). Life Cycle of a Bug.   Mozilla archive</li> <li><code>[Gunderloy, 2007]</code> Gunderloy, Mike, ed.   Painless project management with FogBugz. Berkeley, CA: Apress, 2007.</li> <li><code>[Wilson et al, 2017]</code> Wilson, Greg, et al.   \"Good enough practices in scientific computing.\"   PLoS computational biology 13.6 (2017): e1005510.   Article</li> </ul>","tags":["Issue","Issues","Tasks","Issue tracker","Bug tracker","Todo","Todo list"]},{"location":"project/kanban_board/","title":"Kanban board","text":"<p>Learning outcomes</p> <ul> <li>To be a good team member within a project</li> <li>Use a kanban board to get an overview of what is actively being worked on</li> <li>Use a kanban board to communicate what you are working on now</li> <li>Put your issue(s) in the kanban board, in the right column(s)</li> </ul> For teachers <p>Prior:</p> <ul> <li>How to signal what you are working on now?</li> <li>How would you define what a kanban board is?</li> <li>How does one use a kanban board?</li> </ul> <p></p>","tags":["Kanban","Kanban board","Project","Project page","In progress","To do","Done"]},{"location":"project/kanban_board/#1-why-is-a-kanban-board-important","title":"1. Why is a Kanban board important?","text":"<p>A good team member communicates. Here we show how to communicate to the rest of the team with minimal overhead.</p> <ul> <li>What needs to be done?</li> <li>Who is doing what now?</li> </ul>","tags":["Kanban","Kanban board","Project","Project page","In progress","To do","Done"]},{"location":"project/kanban_board/#2-exercises","title":"2. Exercises","text":"","tags":["Kanban","Kanban board","Project","Project page","In progress","To do","Done"]},{"location":"project/kanban_board/#21-exercise-1-use-the-kanban-board","title":"2.1. Exercise 1: use the Kanban board","text":"<p>Do the following in our student project:</p> <ul> <li>Create an issue. In the text, write why you create that issue and what needs   to be done</li> <li>Assign yourself to the issue</li> <li>Connect the issue to the project page: it should show up in the   'To do ' column. There are multiple ways to do so.</li> <li>Move the issue to the 'In progress page'. There are multiple ways to do so.</li> <li>Close the issue. In the text, write why you close that issue</li> <li>If needed, move the issue to the 'Done' column.</li> </ul>","tags":["Kanban","Kanban board","Project","Project page","In progress","To do","Done"]},{"location":"project/kanban_board/#22-exercise-2-learners-project","title":"2.2. Exercise 2: learners' project","text":"<p>For the learners' project:</p> <ul> <li>For the issue(s) you are assigned to, add these to the kanban board.   Put these in the right column. You should (probably)   maximally put one issue in the 'In progress' column, as one can only   actively work on one issue at a time</li> </ul>","tags":["Kanban","Kanban board","Project","Project page","In progress","To do","Done"]},{"location":"project/projects/","title":"Projects","text":"<p>Autumn 2025 learners project GitHub repository</p>","tags":["projects","former","earlier","learners' project","students' project"]},{"location":"project/projects/#former-projects","title":"Former projects","text":"<ul> <li>Summer 2025 students</li> <li>Autumn 2024 students</li> <li>Summer 2024 students</li> <li>Autumn 2023 students</li> <li>Summer 2023 students</li> <li>Example project</li> </ul>","tags":["projects","former","earlier","learners' project","students' project"]},{"location":"project/team_roles/","title":"Team roles","text":"<p>Learning outcomes</p> <ul> <li>Understand there are different roles in a team</li> <li>Signal our interest in a role</li> </ul> For teachers <p>Prior:</p> <ul> <li>How to divide up the labor in a project?</li> <li>How does the ultimate team look like?</li> <li>What roles does a team have?</li> </ul> <p>Lesson plans:</p> <pre><code>gantt\n  title Lesson plan pair programming 1\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 15s\n  Feedback 1: feedback_1, after exercise_1, 5s\n  Theory 2: theory_2, after feedback_1, 5s\n  Exercise 2: crit, exercise_2, after theory_2, 10s\n  Exercise 2 after the break: crit, after exercise_2, 5s</code></pre> <p>There are multiple team roles and people can have multiple roles.</p> <p>Here are some roles we informally use in this project:</p>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#product-owner","title":"Product owner","text":"<p>A product owner determines what the software needs to do. In the industry, this is typically a (representative of a) customer. In this course, the product owner is an imaginary professor that want to write a simulation to be used in writing a research paper.</p> <p>The product owner is the person that needs to be made happy. He/she cares about correctness, but not about the actual implementation.</p> <p>In this project, everyone is a bit of a project owner: we have no time to follow all procedures strictly.</p>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#requirements-engineer","title":"Requirements engineer","text":"<ul> <li>refines the requirements document</li> </ul> <p>In this project, everyone is a bit of a requirements engineer: we have no time to follow all procedures strictly.</p>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#issue-manager","title":"Issue manager","text":"<p>An issue manager:</p> <ul> <li>checks issues for duplicates</li> <li>closes issues when no longer needed, 'have gone stale'</li> <li>creates issues when needed</li> <li>checks that all team members are assigned to an issue</li> </ul>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#software-architect","title":"Software architect","text":"<p>A software architect:</p> <ul> <li>decides upon the architecture of the software</li> </ul>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#data-manager","title":"Data manager","text":"<p>A data manager:</p> <ul> <li>decides upon the format of the data</li> </ul>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#lead-developer","title":"Lead developer","text":"<p>A lead developer:</p> <ul> <li>makes the requirements document come true</li> <li>end responsible for the whole team</li> <li>likely to discuss progress with the product owner</li> </ul>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#experience-based-roles","title":"Experience-based roles","text":"","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#newbie-developer","title":"Newbie developer","text":"<p>Team members that just started. They need to be taught the workflow by junior developers.</p>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#junior-developer","title":"Junior developer","text":"<p>A junior developers:</p> <ul> <li>fixes the tests written by mediors</li> <li>teaches the workflow to newbies</li> </ul>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#medior-developer","title":"Medior developer","text":"<p>A medior developer:</p> <ul> <li>creates issues that contain a test</li> <li>does code reviews</li> </ul>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#senior-developer","title":"Senior developer","text":"<p>A senior developer:</p> <ul> <li>see the bigger picture of the code and the team</li> <li>works on more complex issues, such as improving the architecture of   the code or improving the continuous integration tools</li> </ul>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#exercises","title":"Exercises","text":"","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#exercise-1-signal-your-experience","title":"Exercise 1: signal your experience","text":"<p>We all have different skill levels. In a normal setting, we would have had time to find out everyone's skill level. In this course, however, we take a ruthless shortcut. We do so, so that the more experienced developers are likelier to get tasks that suit their level.</p> <p>Do so by modifying the README file in the course project, assign yourself a skill level, by adding your name in the right row of the table with experience levels.</p> <p>When unsure, pick 'junior'.</p>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project/team_roles/#exercise-2-signal-a-role-you-want-to-practice","title":"Exercise 2: signal a role you want to practice","text":"<p>There are many roles in a team and you may fulfill multiple.</p> <p>If you are interested in being any of these below, let the teachers know and you'll be assigned the role if (still) vacant.</p> <ul> <li>Issue manager</li> <li>Product owner</li> <li>Requirements engineer</li> <li>Software architect</li> <li>Data manager</li> <li>Lead developer</li> </ul> <p>Do so by modifying the README file in the course project, by adding your name in the right row of the table with roles.</p> <p>When unsure, do not fill in your name and be 'just' a developer :-)</p>","tags":["Team","Role","Roles","Junior","Medior","Senior","Lead","Dev","Developer","Software architect","Data manager","Issue manager"]},{"location":"project_start/analysis_design/","title":"Planning","text":"","tags":["project","analysis"]},{"location":"project_start/analysis_design/#first-phase-analysis","title":"First Phase: Analysis","text":"<p>As you have heard the first phase in any software development is Analysis phase or Requirements phase or Inception phase (Swedish idiom \"K\u00e4rt barn har m\u00e5nga namn\"-translation \"Dearest child has many names\") in this is the phase we are focusing on in this lecture. The goal of the analysis phase is to figure out what the program should do and  what needs the program must meet. It like all other phases of modern software development is done in an iterative loop or spiral. In this early stage a focus is on Requirements sometimes also called needs determination and risk analysis. The First thing to remember and include in your analysis is the scope of your project both in time and scale so that you do not over commit both in choice of level of formalism and amount of features that you which to construct.</p>","tags":["project","analysis"]},{"location":"project_start/analysis_design/#requirements","title":"Requirements","text":"<p>Why do we need to specify requirements?</p> <p>According to Merlin Dorfman (article reproduced in chapter 1 requirements engineering) the results from the software crisis in the 1960s gave rise to the following problem \"In nearly every software project which fails to meet performance and cost goals,requirements inadequacies play a major and expensive role in project failure\"</p> <p>Richard Harwell et. al states \"Each contract specialist, lawyer, engineer, systems engineer, manager, or anyone else involved in the transition Division into product, bas his or her own definition of a requirement, With the rare exception, all are applicable and meaningful\"</p> <p>-- \"What is a Requirement?\"</p> <p>What guidance can we then gleen in what a Requirement is the above mentioned paper asses that \"if it mandates that something must be accomplished, transformed, produced, or provided, it is a requirement\"[R. Harwell et al, 1993]</p> <p>According to ISO/IEC/IEEE 29148:2018 (Systems and software engineering \u2014 Life cycle processes \u2014 Requirements engineering) Defining requirements begins with stakeholder needs (or goals, or objectives) that are refined and evolve before arriving as valid stakeholder requirements.</p> <p>What is a well formed Requirement\" (ISO/IEC/IEEE 29148:2018)?</p> <p>A well-formed specified requirement contains one or more of the following:     \u2014 it shall be met or possessed by a system to solve a problem, achieve an objective or address a stakeholder concern;     \u2014 it is qualified by measurable conditions;     \u2014 it is bounded by constraints;     \u2014 it defines the performance of the system when used by a specific stakeholder or the corresponding capability of the system but not a capability of the user, operator or other stakeholder; and     \u2014 it can be verified (e.g., the realization of the requirement in the system can be demonstrated).</p> <p>The generalize SDLC, from the IEEE Guide\u2014Adoption of ISO/IEC TR 24748-1:2010 starts with needs analysis </p> <p>Needs Gathering which is the first steps have many different names in the different software development models, usually named Use Cases or User Stories or something similar</p> <pre><code>\ngraph LR\n    classDef actor fill:#f9f,stroke:#333,stroke-width:2px\n    classDef usecase fill:#ffc,stroke:#333,stroke-width:2px\n\n    A[Lecturer &lt;&lt; Actor &gt;&gt;] -- Presents --&gt; B((Present slides on UML))\n    C[Participant &lt;&lt; Actor &gt;&gt;] -- Learns --&gt; B\n\n    class A actor;\n    class B usecase;\n    class C actor;\n</code></pre> <pre><code>graph LR\n    classDef actor fill:#f9f,stroke:#333,stroke-width:2px\n    classDef usecase fill:#ffc,stroke:#333,stroke-width:2px\n\n    A[Lecturer &lt;&lt; Actor &gt;&gt;] -- Presents --&gt; B((Present slides on UML))\n    C[Participant &lt;&lt; Actor &gt;&gt;] -- Learns --&gt; B\n\n    class A actor;\n    class B usecase;\n    class C actor;\n</code></pre> <p>Finding the needs!</p> <p>Is a process of finding the subjects and verbs of the project brief and formalize them as testable statements, once that is done we do our first iteration of risk analysis on those sets.</p> <p>Project brief</p> <p>Using the information in Bergstr\u00f6m et. al and the Data specified in the project. Do some analysis on data from an Uppsala weather station and present the result to the user in a structured manner.</p> <p><code>[Bergstr\u00f6m &amp; Moberg, 2002]</code> Bergstr\u00f6m, Hans, and Anders Moberg. \"Daily air temperature and pressure series for Uppsala (1722\u20131998).\" Climatic change 53.1 (2002): 213-252 PDF Data</p> <p>Generate the Needs for the Project</p> <p>We shall make a short description of a \"Use Case\" and the needs that that \"Use case\" generates the Needs will then be clarified as requirements</p> Where do you start? <ul> <li>project brief, if you are given a project brief or write one your self the project brief should state the problem you would like to solve and any related ideas and constraints you have on the project. This is done in plain english</li> <li>Problem statement, the problem statement is a subset of the project brief as it only describes the problem you wish to solve.</li> </ul> <p>Generate Requirements for the Project</p> <p>Using your user stories generate a requirement document in markdown that follows the below specification.</p> <p>How does a typical requirements document look like?</p> <p>A typical requirements document can be made in a spreadsheet program of your choice or as a table in a markdown document as you will see later.</p> <p>Commonly used categories of requirements</p> <ul> <li>Requirement ID</li> <li>Requirement Description</li> <li>Acceptance Criteria</li> <li>Test Cases </li> <li>Risk</li> <li>Risk type</li> <li>Risk probability</li> <li>Risk severity</li> <li>Risk value(Probability x Severity)</li> </ul> Design process document <p>A Design process document is created when the process software design and or analysis needs to be specified to keep the development on track. It is created on organizational level to make sure that all project follow a similar documentation, and analysis and Design path. (If AI is heavily used in the Analysis and Design phase this document define when and how to use the AI tools and how to document its uses.)</p> <p>Here is an example design process document:</p> <p>When gathering requirements for the program the first iteration is based on analyzing the project brief for subjects and actions, i.e nouns and verbs that will describe the possible demands the users have on the system, after the first pass pay attention to adjective and adverbials that may change a need or requirement.</p> <p>After this make a Table of requirements, from this a system use case design can begin. After the use cases have been determined, go through each use case and see how an object or action can solve this use case.</p> <p>Design a object/class diagram to reflect this possibly through a collaborations diagram.</p> Example requirements specification <p>Here is an example of the needs part of the requirements specification:</p> Requirement ID Requirement Description Acceptance Criteria Test Cases R1 Visual Display The program must display a field with particles and a visual cue to runtime settings - Verify that the program opens a graphical window or interface for displaying particles. R2 Particle Initialization Particles must be initialized with positions and speeds and constants relevant to the simulation such as gravity or energy potentials and parameters must be initialized - Confirm that each particle has a unique position and speed. and that each parameter is set R3 Particle Interaction Particles must interact with each other with at least pair wise interactions - Implement a chosen interaction (e.g., gravitational attraction, Lennard-Jones potential, or direction alignment). - Verify that particles respond to each other's presence. R4 Boundary Condition Choose a boundary condition for the field  this includes how to handle interactions across borders - Implement chosen boundary conditions (e.g., bounce, wrap, or elimination). - Confirm that particles behave according to the chosen boundary conditions. R5 Simulation Step The simulation should progress in discrete steps - Implement a mechanism to advance the simulation step by step R6 Real-time Visualization Draw each simulation step with a suitable frame rate update - Ensure that the simulation displays each step visually as it progresses. R7 Maximum Particle Limit The simulation should handle a maximum number of particles set in the runtime settings - Test the simulation with varying numbers of particles up to the maximum limit and verify that it remains stable. R8 Acceptable Framerate The simulation should maintain an acceptable framerate even at maximum number of particles - Measure and verify that the framerate remains above a defined threshold with the maximum number of particles. R9 Stop Simulation Ability to stop the simulation through interruption of the current main loop - Implement a user interface or mechanism to stop the simulation.  and check that the simulation ends when such mechanisms are invoked R10 Restart simulation A simulation should be able to restart without restarting the interface Test that the implementation of the restart function can activate after the simulation has ended R11 Test-Driven Development Develop the project using TDD - Write test cases before implementing each feature or functionality. - Ensure that the tests pass after implementing the code","tags":["project","analysis"]},{"location":"project_start/analysis_design/#risk-analysis","title":"Risk analysis","text":"<p>Risk analysis is central in some systems like RDD(Risk Driven Development), FDA(FDA-1997-D-0029) splits into two types Business risks and Technical risk. Where Business risk relates to direct requirements while technical risks are from derived requirements. One type of risk assessment is the Failure modes and effects analysis commonly abbreviated FMEA which calculate the risk in Probability of occurrence x severity of risk RISK=PxS a risk matrix is used to define what level of severity and occurrence warrants what action.</p> <p>How big should the risk analysis matrix be?</p> <p>It is common is to divide it in 5 severity categories and 5 probability levels then establishing a table as below to asses which needs are the most important to address. Risk probability goes from P1 (very unlikely to occur) - P5(Happens in all execution) Risk severity goes from S1(minor or no effect),S2(Some Impact or noticeable by user),S3(Major impact on execution of program or result with minor loss of resources at end user),S4(Prevents execution of software or cause major loss of resources to user), S5(major injury or death cause by unhandled risk)</p> Probability/Severity S1 S2 S3 S4 S5 P5 <p>5</p>Supplementary issue      <p>10</p>Issue      <p>15</p>Unacceptable      <p>20</p>Unacceptable      <p>25</p>Unacceptable      P4 <p>4</p>Acceptable      <p>8</p>Supplementary issue      <p>12</p>Issue      <p>16</p>Unacceptable      <p>20</p>Unacceptable      P3 <p>3</p>Acceptable     <p>6</p>Supplementary issue      <p>9</p>Supplementary issue      <p>12</p>Issue      <p>15</p>Unacceptable      P2 <p>2</p>Acceptable      <p>4</p>Acceptable      <p>6</p>Supplementary issue      <p>8</p>Supplementary issue      <p>10</p>issue      P1 <p>1</p>Acceptable      <p>2</p>Acceptable      <p>3</p>Acceptable      <p>4</p>Acceptable      <p>5</p>Supplementary issue      <p>Where to focus?</p> <p>Focus on the risks  that are issues or unacceptable first. Then develop towards risks that are acceptable</p> Turning Requirements and Risk matrix into actionable Feature list <p>Using the Requirements and risk matrix we can design a feature list which can be tracked using issues or project tab in Git or in a separate document. The feature list describes how to solve a requirement in plaintext english and with flowcharts This initiates a design phase in the development</p> <p>[R. Harwell et al] R. Harwell et al. from Proc. 3,dAnn. lnt' I Symp. Nat'I Council Systems Eng., 1993, pp. 17-24.</p>","tags":["project","analysis"]},{"location":"project_start/configurations/","title":"Get connected to the project repo","text":"<p>Learning outcomes of 'Get started with Git/GitHub'</p> <p>Learners</p> <ul> <li>are connected to the course repo</li> </ul> <p>Note</p> <ul> <li>Let's learn details of Git and GitHub later!</li> </ul>"},{"location":"project_start/configurations/#become-member-of-the-course-project","title":"Become member of the course project","text":"<ul> <li> <p>Join the Autumn 2025 learners' project</p> </li> <li> <p>Share your GitHub name at this issue</p> </li> </ul>"},{"location":"project_start/configurations/#vs-code-terminal","title":"VS Code terminal","text":"<ul> <li>We will work as much as possible (almost) in the VS Code graphical interface for Git</li> <li> <p>However, some things are better (or only) handled from a terminal/command line.</p> </li> <li> <p>You find the Git Bash terminal From the menu (different on mac and windows)</p> </li> </ul> <p></p>"},{"location":"project_start/configurations/#before-we-continue-we-need-to-configure-git","title":"Before we continue we need to configure Git","text":"<p>Attention</p> <ul> <li>Start VS Code</li> </ul> This should have been done already <ul> <li>We hope also that you have already done these steps   at the 'Prerequisites' page of this course</li> <li>Git and GitHub should be configured prior to the course<ul> <li>Note that Mac users may need to run a command from the terminal to be able to run <code>git</code>: <code>sudo xcodebuild -license accept</code></li> <li>Configure Git<ul> <li>like: <code>git config --global user.name \"Mona Lisa\"</code></li> <li>like: <code>git config --global user.email \"mona_lisa@gmail.com\"</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"project_start/configurations/#get-a-local-clone-of-the-project","title":"Get a local clone of the project","text":"Exercise 2a: clone course project using VS code (4 min) <ul> <li>Start VS code</li> <li> <p>Start new window</p> </li> <li> <p>In GitHub, locate the Code button, select SSH and click the copy symbol to the right</p> </li> </ul> Where is this? <p><code>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2025</code></p> How will the address to clone look like? <p><code>https://github.com/programming-formalisms/programming_formalisms_project_autunr_2025.git</code></p> <ul> <li>In VS code: Clone Git repository<ul> <li>The repo may show up automatically if you are already part of the project. Then click it.</li> <li>Otherwise paste the copied URL</li> </ul> </li> <li>Open folder where you want to have your project<ul> <li>Create a new one if necessary in the \"Open folder File explorer\"</li> </ul> </li> <li>Select as Repository Destination</li> </ul> Exercise 2b: (Alternative with command line) clone course project and create folders (4 min) <ul> <li>You may want to create a directory on your computer for this course.</li> <li>You can do it in the normal way or use your terminal, like this, in a good place (like \"Courses\" if you have that)</li> <li><code>mkdir Programming_formalisms</code></li> <li><code>cd Programming_formalisms</code></li> <li>In GitHub, locate the Code button, select SSH and click the copy symbol to the right</li> <li>Back in your terminal type <code>git clone</code> followed by pasting the copied text.</li> <li>The result shall look something like this:</li> </ul> <pre><code>git clone git@github.com:programming-formalisms/programming_formalisms_project_autumn_2025.git\n</code></pre> <p>What just happened?</p> <ul> <li><code>cd</code> the new directory that was created</li> <li>list the files with <code>ls</code></li> </ul> <p>Summary</p> <ul> <li>You should now hopefully be connected to the project and have a local copy of it!</li> </ul>"},{"location":"project_start/git_startup/","title":"Git and get started with a project","text":"<p>Learning outcomes of 'Get started with Git/GitHub'</p> <p>Learners</p> <ul> <li>are connected to the course repo</li> <li>can commit</li> <li>can write useful commit messages</li> <li>know how a local vs remote repo work</li> <li>can push/pull</li> <li>can manage conflicts</li> <li>are prepared for coming documentation</li> </ul> Instructor notes <ul> <li>Teacher gives introduction with interaction 20 m</li> <li>Studens work in groups with at least one more used to Git in each</li> </ul> <p>Prerequisites are:</p> <ul> <li>Git account</li> <li>GitHub account</li> <li>Git set up on computer</li> </ul> <p>Not needed</p> <ul> <li>Use of git before</li> </ul> <p>Did you miss to set up everything?</p> <ul> <li>Then try this in the background or ask for help?</li> <li>See the setup session this morning?</li> </ul> Already know git and GitHub? <p>If you have made 25 commits to GitHub, we assume you are already know git and GitHub.</p> <p>If there is a minority that already knows git and GitHub, then those are welcome in the simultaneous session, where we'll go a faster and further.</p>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#what-is-git-and-what-is-a-git-repository","title":"What is Git, and what is a Git repository?","text":"<ul> <li>Git is a version control system: can record/save snapshots and track the content of a folder as it changes over time.</li> <li>Every time we commit a snapshot, Git records a snapshot of the entire project, saves it, and assigns it a version.</li> <li>These snapshots are kept inside a sub-folder called <code>.git</code>.</li> <li>If we remove <code>.git</code>, we remove the repository and history (but keep the working directory!).</li> <li><code>.git</code> uses relative paths - you can move the whole thing somewhere else and it will still work</li> <li>Git doesn't do anything unless you ask it to (it does not record anything automatically).</li> <li>Multiple interfaces to Git exist (command line, graphical interfaces, web interfaces).</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#typical-workflow-for-the-course-project","title":"Typical workflow for the course project","text":"<ul> <li>students make development in local git and push to github?</li> <li>in principle centralized workflow</li> </ul> <p>This is used when you are a collaborator</p> <p></p> <p>Centralized layout</p> <ul> <li>Red is the repository on GitHub.</li> <li> <p>Blue is where all contributors work on their own computers.</p> </li> <li> <p>Centralized workflow is often used for remote collaborative work.</p> </li> <li><code>origin</code> refers to where you cloned from (but you can relocate it).</li> <li><code>origin/mybranch</code> is a read-only pointer to branch <code>mybranch</code> on <code>origin</code>.</li> <li>These read-only pointers only move when you <code>git fetch</code>/<code>git pull</code> or <code>git push</code>.</li> </ul> <p>Other workflows?</p> <ul> <li>Other workflows in Merging and contributing with code review</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#this-lesson","title":"This lesson","text":"<ul> <li>Get overview of the course project</li> <li>Get local clone of the course project</li> <li>First contribution locally</li> <li>Upload changes</li> <li>Conflicts and resolutions</li> <li>A bit about project organization</li> <li>A bit about documentation</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#vs-code-terminal","title":"VS Code terminal","text":"<ul> <li>We will work as much as possible (almost) in the VS Code graphical interface for Git</li> <li> <p>However, some things are better (or only) handled from a terminal/command line.</p> </li> <li> <p>You find the Git Bash terminal From the menu (different on mac and windows)</p> </li> </ul> <p></p>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#principles-with-git","title":"Principles with Git","text":"<p>Concepts in Git</p> <ul> <li>repository: The project, contains all data and history (commits, branches, tags).<ul> <li>Local: you computer or a server where you have full control</li> <li>Remote: server, e.g. GitHub</li> </ul> </li> <li>Working locally<ul> <li>add: Stage you files (collect what to be added to the git record \u2014 a kind of middle step)</li> <li>commit: Snapshot of the project, gets a unique identifier (e.g. <code>c7f0e8bfc718be04525847fc7ac237f470add76e</code>).</li> </ul> </li> <li>Working on Github<ul> <li>Since you can only add changes in one file at a time, there is no middle step <code>git add</code></li> <li>''Commit`` button</li> </ul> </li> <li>cloning: Copying the whole repository to your laptop - the first time. It is not necessary to download each file one by one.<ul> <li><code>git clone</code> copies everything: all commits and all branches.</li> </ul> </li> <li>We synchronize commits between local and remote with</li> <li>git fetch/pull and git push.</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#clone","title":"Clone","text":"<ul> <li>Clone to your computer<ul> <li>Buttons in VS code or a terminal, using <code>git clone</code></li> </ul> </li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#may-be-needed-if-time-goes-by-sync-from-github","title":"(May be needed if time goes by:) Sync from GitHub","text":"<ul> <li>As others are working on the same repo, there may be uploaded changes from fast collaborators.</li> <li>Do a <code>git pull</code> to get these changes locally as well.</li> <li>Do this before you start with new changes. Good practice!<ul> <li>This reduces errors or double work!</li> </ul> </li> </ul> Difference between <code>git pull</code> and <code>git fetch</code>? <p>We may cover this later. Not important now!</p> <ul> <li>Git pull copies changes from a remote repository directly into your working directory, while git fetch does not.</li> <li>The git fetch command only copies changes into your local Git repo.</li> <li>The git pull command does both.</li> <li>You Should Use git fetch When\u2026<ul> <li>You want to check if there are new updates on the remote repository but don't want to apply them immediately.</li> <li>You are working on new features and you want to avoid potential merge conflicts.</li> </ul> </li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#make-changes-locally","title":"Make changes locally","text":"<p>Tracked files can be in three states.</p> <ul> <li>Modified: You changed the file.</li> <li>Staged: You changed the file and prepared it to be snapshotted.</li> <li> <p>Committed: You took a snapshot of the entire project, and the file was part of it.</p> </li> <li> <p>On GitHub:</p> <ul> <li>Commit every file individually</li> </ul> </li> </ul> <p>Steps add changes to the git history</p> <ul> <li>make changes locally</li> <li>add and commit to the git version control<ul> <li>your changes become part of the git history</li> </ul> </li> <li>git push<ul> <li>your changes are synced to GitHub</li> </ul> </li> <li>git pull<ul> <li>changes on GitHub are synced to you existinglocal git</li> <li>good procedure to do this step before you start changes</li> </ul> </li> </ul> <p>Update the file(-s)</p> <ul> <li>Save your changes as usual on your computer (e.g. in VS code)</li> </ul> <p>Stage files (in git)</p> <p>VS CODE</p> <ul> <li>Activate the source control environment from left menu!</li> <li>\"+\" button</li> </ul> From bash terminal <ul> <li>All changed files</li> </ul> <pre><code>git add .    # &lt; -- \".\" means all files\n</code></pre> <ul> <li>Chosen files</li> </ul> <pre><code>git add &lt;file1&gt; &lt;file2&gt;    # one or several files\n</code></pre> <p>Commit</p> <ul> <li>Every time we commit a snapshot, Git records a snapshot of the entire project, saves it, and assigns it a version (Hash tag).</li> <li>BUT only what we have added to the \"staging\" area!</li> </ul> <p>VS CODE</p> <ul> <li>Activate the source control environment from left menu!</li> <li>\"Commit\" button and \"Commit message\" text</li> </ul> From bash terminal <ul> <li><code>git commit -m \"&lt;commit message&gt;\"</code></li> </ul> <p>Alternative commits</p> <ul> <li>You can also omit the <code>-m</code> option and a text editor will open.</li> <li>The first line will be your commit message.</li> <li>You can add other lines to add some more detailed info about your changes.</li> </ul> <p>Writing useful commit messages</p> <ul> <li>Each commit should stand on its own.</li> <li>Keep your commits small and independent.</li> <li>Write informative commit messages.</li> <li> <p>Each commit message should answer a question.</p> <ul> <li>Why was the commit created?</li> <li>What problem does it solve?</li> </ul> </li> <li> <p>What Not to Do</p> <ul> <li>solve multiple problems in one commit</li> <li>combining commits that have nothing in common.</li> <li>Git as a backup system: commit their changes at the end of each day</li> </ul> </li> </ul> Example Best Bad Worst [login] Fix typo in DB call Fixed typo in DB call Fix typo refactor login function for reuse Changing login function by moving declarations to parameters Code refactoring add new api for user program check adding a new api for user program check New user api <p>Source: Git Best Practices (Chap 6 in Beginning Git)</p> <p>Check this page!</p> <p>Upload to GitHub</p> <p>VS CODE</p> <ul> <li>Activate the source control environemnt from left menu!</li> <li>Click the \"Sync Changes\" button (may be just a symbol)</li> <li> <p>You can add a push message (shown on GitHub then) or leave it empty, then the last commit message will be used.</p> From bash terminal <pre><code>git push\n</code></pre> <p>GitHub is now synced with your changes</p> </li> </ul> <p>Sync from GitHub (again)</p> <ul> <li>As others are working on the same repo, there may be uploaded changes from your collaborators</li> <li>Do a <code>git pull</code> to get these changes locally as well.</li> <li>Do this before you start with new changes.<ul> <li>This reduces errors or double work!</li> </ul> </li> </ul> Git/GitHub workflow <pre><code>graph TB\n\n  P[\"Project idea\"] --&gt;|git init| Node2\n  P[\"Project idea\"] --&gt; planet.py --&gt;|git add| Node4\n  Node4 --&gt; |git commit| Node1\n  Node2 --&gt; |git push| Node5\n\n  C[Uncommited changed planet.py] --&gt;|commit button| R\n  Node5 --&gt; |\"git pull (from local git)\"| Node2\n  R --&gt; |\"git pull (from local git)\"| Node1\n  R &lt;--&gt; Node5\n\n        subgraph \"Local Git\"\n        Node2[project]\n        Node1[planet.py]\n        Node1 &lt;--&gt; Node2\n\n        end\n\n        subgraph \"staging area\"\n        Node4[planet.py]\n        end\n\n        subgraph \"GitHub\"\n        Node5[project]\n        R[planet.py]\n        end\n</code></pre>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#work-directly-on-github","title":"Work directly on GitHub","text":"<p>Working on GitHub</p> <ul> <li>You can do basically the same work at GitHub as in your local git repo</li> <li>The graphical view makes it easier to work with in everyday editing work at least.<ul> <li>Depends on your own preferences of course.</li> </ul> </li> <li>Here your commit each file at a time with the \"commit button\".<ul> <li>No staging that is.</li> <li>Be aware of that feature!</li> </ul> </li> <li>GitHub Actions are workflows defined by you, like:<ul> <li>for automatic testing after each commit (Used in the test lessons)</li> <li>for GitHub Pages, briefly covered in last session today or Extra reading: Documentation.</li> </ul> </li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#exercises","title":"Exercises","text":"","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#overview-of-the-github-project","title":"Overview of the GitHub Project","text":"<p>Groups of mixed expertise!</p> <ul> <li>3 to 4 people in each group</li> </ul> Exercise 1: \"View the GitHub project at: https://github.com/programming-formalisms/programming_formalisms_project_summer_2025 <ul> <li>Click on a folder or file in the file explorer.</li> <li>This enables the file \"Expand file tree\" button to the left of the repo name.</li> <li>Click on that and look at the file tree!</li> <li>View README.md</li> <li>View Code of conduct</li> <li>View License</li> <li>Look at the history (\"Commits\" button just above the file explorer)</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#exercise-2-make-changes-locally-first-steps-without-any-conflicts","title":"Exercise 2: Make changes locally (First steps without any conflicts!)","text":"Exercise 2: Create a folder with your name (locally) <ul> <li>Step into the <code>learners/</code> directory (VS Code)</li> <li>create a folder there, clicking the \"new directory\" icon in upper-left part</li> <li>git cannot use emptly directories</li> <li>Therefore create an empty README.md file INSIDE the created folder</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#exercise-3-stage-files-in-git","title":"Exercise 3: Stage files (in git)","text":"Exercise 3: \"Add/stage file <ul> <li>First check the status!</li> </ul> <ul> <li>There is an U (for Untracked) beside the README.md file</li> <li>You want to add the files (focus the camera) to the list of files tracked by Git.</li> <li>Git does not track any files automatically and you need make a conscious decision to add a file.</li> <li>Hoover over the Source control icon in the Left menu<ul> <li>It should say: \"1 pending changes\"</li> </ul> </li> <li>Let's do what Git hints at and add the files:</li> <li>Click the Icon and then add (stage) the file with the \"plus\" sign</li> <li>There should now be an A (for Added) beside the README.md file</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#exercise-4-commit","title":"Exercise 4: Commit","text":"<p>Let us now commit the change to the repository:</p> Exercise 4: Commit <p></p> <ul> <li> <p>Write the commit message \"add personal folder\" and click the button</p> </li> <li> <p>We can check the status by opening the bash terminal</p> </li> <li>Choose the Git-bash</li> </ul> <pre><code>$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n</code></pre>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#exercise-5-upload-to-github","title":"Exercise 5: Upload to GitHub","text":"<ul> <li>In previous path we got:</li> </ul> <pre><code>$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n   (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n</code></pre> Exercise 5: Let's push back to GitHub <ul> <li>Let's \"publish\" you commits to the common GitHub repo</li> <li>In VS Code: Click the \"Sync Changes\" button</li> </ul> <ul> <li>You may also give a message,<ul> <li>could be the commit message again or something else summarizing several commits or left empty</li> </ul> </li> </ul> From bash terminal <pre><code>git push\n</code></pre>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#exercise-6-merge-conflicts","title":"Exercise 6: Merge conflicts","text":"<ul> <li>Create a new file with a unique name for your group,   for example <code>group_anna_and_sven.txt</code></li> <li>All members of the team: get it on your local computer<ul> <li>That is: you will get several files in total, but each just locally, so far.</li> </ul> </li> </ul> How to do this? <ul> <li>Do the same steps as the exercises above in the folder Learners/ (not folder with name)</li> </ul> <ul> <li>One member add the line below at the end of that file   and does a <code>git push</code>:</li> </ul> <pre><code>This is the last line by me, Sven\n</code></pre> <ul> <li>After this, without doing a git pull,   the other group member(s) add a last line at the end   (for example, the line shown below) and does a <code>git push</code>:</li> </ul> <pre><code>This is the last line by me, Anna\n</code></pre> <ul> <li>This person will get a merge conflict. How does the file look like?</li> </ul> Answer <p>The file will look similar to this:</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is the last line by me, Sven\n======\nThis is the last line by me, Anna\n&gt;&gt;&gt;&gt;&gt;&gt; 123456789abcdef\n</code></pre> <ul> <li>How would you resolve this merge conflict?</li> </ul> Answering <p>Combining these two lines of text is up to taste. The text could be replaced by, for example:</p> <pre><code>This is the last line by us, Anna and Sven\n</code></pre> <ul> <li>Resolve the merge conflict and do a <code>git push</code></li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#optional-exercise-7","title":"(Optional) Exercise 7","text":"<ul> <li>Go back to last session and read more about a topic, like UML and/or Markdown and their syntax!</li> <li>Test out the Markdown and/or UML exercises directly in GitHub in your personal folder.</li> <li>See the rendered pages directly after saving the file(s)!</li> </ul> <p>See also</p> <ul> <li>Workshop on GitHub without command-line</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#revisit-on-directory-structure","title":"Revisit on Directory structure","text":"<p>Directory structure</p> <ul> <li> <p>Different projects should have separate folders</p> </li> <li> <p>README file</p> </li> <li>Data  (version controlled)(.gitignore)</li> <li>Processed data intermediate</li> <li>(Manuscript)</li> <li>Results  data, tables, figures (version controlled, git tags for manuscript version)</li> <li>Src  version controlled code goes here<ul> <li>License (here or in the 1st level)</li> <li>Requirements.txt</li> </ul> </li> <li>Doc</li> <li>index</li> <li>.gitignore file</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#summary","title":"Summary","text":"<p>Parts to be covered</p> <ul> <li>\u2610 Planning<ul> <li>Pseudocode</li> <li>Unified Modelling Language (UML)</li> </ul> </li> <li>\u2610 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Source/version control<ul> <li>Git intro</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>GitHub</li> </ul> </li> <li>\u2610 Reproducibility (for you and others)<ul> <li>Deployment</li> <li>Dependencies</li> <li>(Workflows)</li> </ul> </li> <li>\u2610 Sharing<ul> <li>open science</li> <li>citation</li> <li>licensing</li> </ul> </li> <li>\u2611 Documentation<ul> <li>Explanation (in code)</li> </ul> </li> </ul> <p>Keypoints</p> <ul> <li>A repository can have one or multiple remotes (we will revisit these later).</li> <li>A remote (GitHub) in this case serves as a full backup of your work.</li> <li>Code development might be easier to develop in the local git repo since you can run and test locally in an easy way.</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/git_startup/#reference-git","title":"Reference Git","text":"<ul> <li>Main git book</li> <li>Pro Git</li> <li>Tsitoara, Mariot, and Mariot Tsitoara. \"Git best practices.\" Beginning Git and GitHub: A Comprehensive Guide to Version Control, Project Management, and Teamwork for the New Developer (2020): 79-86.</li> </ul>","tags":["project","getting started","clone","start","set up","setup"]},{"location":"project_start/not_used/startup_old/","title":"Get started with a project","text":"<p>Questions</p> <ul> <li>How to get started?</li> <li>How can I use Git/GitHub?</li> </ul> <p>Content</p> <ul> <li>Get started with a git/github project</li> <li>Do the basic <code>git</code> workflow<ul> <li>create documents</li> <li>initial documentation</li> </ul> </li> </ul> <p>Learning outcomes of 'Get started with Git/GitHub'</p> <p>Learners</p> <ul> <li>can demonstrate the ability to initiate and manage a software development project using Git and GitHub.</li> <li>are connected to the course repo</li> <li>know how to do in-code documentation</li> </ul> <p>Instructor notes</p> <p>Prerequisites are:</p> <ul> <li>Git acoount</li> <li>GitHub account</li> <li>Git set up on computer</li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners can demonstrate the ability to initiate and manage a software development project using Git and GitHub.</li> </ul> <p>Lesson Plan: FIX</p> <ul> <li>Total 60 min</li> <li>Theory 20</li> <li>Exercise 300</li> <li>Discussions 10 min</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#before-we-continue-we-need-to-configure-git","title":"Before we continue we need to configure Git","text":"<p>Attention</p> <ul> <li>Start your terminal of choice</li> </ul> Did you set up git and GitHub? <ul> <li>Git and GitHub should be configured prior to the course</li> <li>We hope also that you have already done these steps:</li> </ul> <pre><code>git config --global user.name \"&lt;Your Name&gt;\"\ngit config --global user.email &lt;your GitHub-connected email address&gt;\ngit config --global init.defaultBranch \"main\"\ngit config --global core.editor nano\n</code></pre> <p>or replace nano with another editor, like in Windows: <code>notepad</code> Verify with:</p> <pre><code>config --list\n</code></pre> <p>Add also this!</p> <pre><code>git config --global credential.helper cache\ngit config --global credential.helper 'cache --timeout=36000'\n</code></pre> <ul> <li> <p>With this we don't need to use ssh and the configuration with <code>ssh-keys</code>, like below:</p> <ul> <li>Git and GitHub should be configured prior to the course</li> <li>Test: <code>ssh -T git@github.com</code></li> <li>Output should be something like this: <code>Hi bclaremar! You've successfully authenticated, but GitHub does not provide shell access.</code></li> </ul> </li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#what-is-git-and-what-is-a-git-repository","title":"What is Git, and what is a Git repository?","text":"<ul> <li>Git is a version control system: can record/save snapshots and track the content of a folder as it changes over time.</li> <li>Every time we commit a snapshot, Git records a snapshot of the entire project, saves it, and assigns it a version.</li> <li>These snapshots are kept inside a sub-folder called <code>.git</code>.</li> <li>If we remove <code>.git</code>, we remove the repository and history (but keep the working directory!).</li> <li><code>.git</code> uses relative paths - you can move the whole thing somewhere else and it will still work</li> <li>Git doesn't do anything unless you ask it to (it does not record anything automatically).</li> <li>Multiple interfaces to Git exist (command line, graphical interfaces, web interfaces).</li> </ul> <p>Concepts in Git</p> <ul> <li>repository: The project, contains all data and history (commits, branches, tags).</li> <li>add: Stage you files (collect what to be added to the git record \u2014 a kind of middle step)</li> <li>commit: Snapshot of the project, gets a unique identifier (e.g. <code>c7f0e8bfc718be04525847fc7ac237f470add76e</code>).</li> <li>cloning: Copying the whole repository to your laptop - the first time. It is not necessary to download each file one by one.<ul> <li><code>git clone</code> copies everything: all commits and all branches.</li> </ul> </li> <li>We synchronize commits between local and remote with</li> <li>git fetch/pull and git push.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#start-with-course-project","title":"Start with course project","text":"<ul> <li>We have already prepared a bit.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#view-the-project-we-will-work-with","title":"View the project we will work with","text":"View the GitHub project at: https://github.com/programming-formalisms/programming_formalisms_project_summer_2025 <ul> <li>Click on a folder or file in the file explorer.</li> <li>This enables the file \"Expand file tree\" button to the left of the repo name.</li> <li>Click on that and look at the file tree!</li> <li>View README.md</li> <li>View Code of conduct</li> <li>View License</li> <li>Look at the history (\"Commits\" button just above the file explorer)</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#clone-the-course-project","title":"Clone the course project","text":"Exercise: clone course project and create folders (3 min) <ul> <li>You may want to create a directory on your computer for this course.</li> <li>You can do it in the normal way or use your terminal, like this, in a good place (like \"Courses\" if you have that)</li> <li><code>mkdir Programming_formalisms</code></li> <li><code>cd Programming_formalisms</code></li> <li>In GitHub, locate the Code button, select SSH and click the copy symbol to the right</li> <li>Back in your terminal type <code>git clone</code> followed by pasting the copied text.</li> <li>The result shall look something like this:</li> </ul> <pre><code>git clone git@github.com:programming-formalisms/programming_formalisms_project_summer_2025.git\n</code></pre> <p>What just happened?</p> <ul> <li><code>cd</code> the new directory that was created</li> <li>list the files with <code>ls</code></li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#make-changes-locally","title":"Make changes locally","text":"<p>Steps add changes to the git history</p> <ul> <li>make changes locally</li> <li>add and commit to the git version control<ul> <li>your changes become part of the git history</li> </ul> </li> <li>git push<ul> <li>your changes are synced to GitHub</li> </ul> </li> <li>git pull<ul> <li>changes on GitHub are synced to you existinglocal git</li> <li>good procedure to do this step before you start changes</li> </ul> </li> </ul> Exercise: Create a folder with your name (locally) <ul> <li>step into (<code>cd</code>) the <code>learners/</code> directory</li> <li><code>mkdir &lt;your-name&gt;</code></li> <li>git cannot use emptly directories</li> <li>Therefore create an empty README file in the created folder</li> <li><code>cd &lt;your-name&gt;</code></li> <li><code>touch README.md</code></li> <li>go back to the root of the repo (not necessary)</li> <li>cd ../..</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#stage-files-in-git","title":"Stage files (in git)","text":"<p>track the changes</p> <ul> <li>On GitHub:<ul> <li>Commit every file individually</li> </ul> </li> <li>In local git:<ul> <li>Stage one or more (related) files and commit them together</li> </ul> </li> </ul> <p>Git Cheat sheet</p> <pre><code>git add     # add/stage file(s)\ngit commit  # commit staged file(s)\ngit status  # see what is going on\ngit log     # see history\ngit push\ngit pull\n</code></pre> Exercise: \"Add/stage file <ul> <li>First check the status!</li> </ul> <pre><code>$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        learners/bclaremar/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <ul> <li>There are untracked in the repository (directory).</li> <li>You want to add the files (focus the camera) to the list of files tracked by Git.</li> <li>Git does not track any files automatically and you need make a conscious decision to add a file.</li> <li>Let's do what Git hints at and add the files:</li> </ul> <pre><code>$ git add .    # &lt; -- \".\" means all files\n$ git status\n\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        new file:   learners/bclaremar/README.md\n</code></pre> <ul> <li>Now this change is staged and ready to be committed.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#commit","title":"Commit","text":"<ul> <li>Every time we commit a snapshot, Git records a snapshot of the entire project, saves it, and assigns it a version.</li> <li>BUT only what we have added to the \"staging\" area!</li> </ul> <p>Let us now commit the change to the repository:</p> Exercise: Commit <pre><code>$ git commit -m \"add personal folder\"\n\n[master 5914ad7] add personal folders\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 learners/bclaremar/README.md\n</code></pre> <ul> <li>Right after we query the status to get this useful command into our muscle memory:</li> </ul> <pre><code>$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n</code></pre> <p>What does the <code>-m</code> flag mean? Let us check the help page for that command:</p> <pre><code>git help commit\n</code></pre> <ul> <li>You should see a very long help page as the tool is very versatile (press q to quit).<ul> <li>Do not worry about this now but keep in mind that you can always read the help files when in doubt.</li> <li>Searching online can also be useful, but choosing search terms to find relevant information takes some practice and discussions in some online threads may be confusing.</li> <li>Note that help pages also work when you don't have a network connection!</li> </ul> </li> </ul> <p>Alternative commits</p> <ul> <li>You can also omit the <code>-m</code> option and a text editor will open.</li> <li>The first line will be your commit message.</li> <li>You can add other lines to add some more detailed info about your changes.</li> </ul> <p>Writing useful commit messages</p> <p>Check this page!</p>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#upload-to-github","title":"Upload to GitHub","text":"<ul> <li>In previous path we got:</li> </ul> <pre><code>$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n   (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n</code></pre> Exercise: Let's push back to GitHub <pre><code>git push\n</code></pre> <p>Working on GitHub</p> <ul> <li>You can do basically the same work at GitHub as in your local git repo</li> <li>The graphical view makes it easier to work with in everyday editing work at least.<ul> <li>Depends on your own preferences of course.</li> </ul> </li> <li>Here your commit each file at a time with the \"commit button\".<ul> <li>No staging that is.</li> <li>Be aware of that feature!</li> </ul> </li> <li>GitHub Actions are workflows defined by you, like:<ul> <li>for automatic testing after each commit (Used in the test lessons)</li> <li>for GitHub Pages, briefly covered in last session today or Extra reading: Documentation.</li> </ul> </li> </ul> <p>See also</p> <ul> <li>Workshop on GitHub without command-line</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#concluding-remarks","title":"Concluding remarks","text":"<ul> <li> <p>We will work more with the project repo after lunch and the rest of the week</p> <ul> <li>Code</li> <li>Documentation</li> </ul> </li> <li> <p>Get started with documentation</p> </li> <li>Before that we will cover starting git project from existing project with no version control.</li> <li>Get a personal github project</li> </ul>","tags":["project","getting started"]},{"location":"project_start/not_used/startup_old/#summary","title":"Summary","text":"<p>Parts to be covered</p> <ul> <li>\u2610 Planning<ul> <li>Pseudocode</li> <li>Unified Modelling Language (UML)</li> </ul> </li> <li>\u2610 Testing<ul> <li>Different levels</li> </ul> </li> <li>\u2611 Source/version control<ul> <li>Git intro</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>GitHub</li> </ul> </li> <li>\u2610 Reproducibility (for you and others)<ul> <li>Deployment</li> <li>Dependencies</li> <li>(Workflows)</li> </ul> </li> <li>\u2610 Sharing<ul> <li>open science</li> <li>citation</li> <li>licensing</li> </ul> </li> <li>\u2611 Documentation<ul> <li>Explanation (in code)</li> </ul> </li> </ul> <p>Learning outcomes of 'Get started with Git/GitHub'</p> <p>Learners</p> <ul> <li>can demonstrate the ability to initiate and manage a software development project using Git and GitHub.</li> <li>are connected to the course repo</li> <li>know how to do in-code documentation</li> </ul> <p>Keypoints</p> <ul> <li>A repository can have one or multiple remotes (we will revisit these later).</li> <li>A remote (GitHub) in this case serves as a full backup of your work.</li> <li>Code development might be easier to develop in the local git repo since you can run and test locally in an easy way.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/","title":"Get started with a project","text":"<p>Questions</p> <ul> <li>How to get started?</li> <li>How can I use Git/GitHub?</li> </ul> <p>Content</p> <ul> <li>Get started with a git/github project</li> <li>Do the basic <code>git</code> workflow<ul> <li>create documents</li> <li>initial documentation</li> </ul> </li> </ul> <p>Learning outcomes of 'Get started with Git/GitHub'</p> <ul> <li>Demonstrate the ability to initiate and manage a software development project using Git and GitHub.</li> </ul> <p>Instructor notes</p> <p>Prerequisites are:</p> <ul> <li>Git acoount</li> <li>GitHub account</li> <li>Git set up on computer</li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners can demonstrate the ability to initiate and manage a software development project using Git and GitHub.</li> </ul> <p>Lesson Plan: FIX</p> <ul> <li>Total 30 min</li> <li>Theory 20</li> <li>Discussions 10 min</li> </ul> <p>TOC</p> <ul> <li>A test project: Type-along on starting a project<ul> <li>REASON: have tested this step</li> </ul> </li> </ul> <ul> <li>test project (Planet)<ul> <li>code file         - git init         - add and commit</li> <li>you can also start a directory and do git init</li> <li>Intro documentation<ul> <li>order your files</li> </ul> </li> <li>README<ul> <li>license</li> </ul> </li> <li>git diff</li> <li>Start with the steps related to the project (Type-along)<ul> <li>Git locally with config and cloning</li> </ul> </li> </ul> </li> <li>mkdir user         - work in user/</li> </ul> <p>Think about:</p> <ul> <li>structure of the files and folders for the project</li> <li>documentation already</li> </ul> <p>Note</p> <ul> <li>Many projects/scripts start as something for personal use, but expands to be distributed.</li> <li>Let's start in that end and be prepared.</li> <li>The following steps can be very valuable for you in a couple of months as well as you revisit your code and don't know what it does or why you did this and that.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#before-we-continue-we-need-to-configure-git","title":"Before we continue we need to configure Git","text":"<p>Attention</p> <ul> <li>Start your terminal of choice</li> </ul> <p>Pre-requirements</p> <ul> <li>Git and GitHub should be configured prior to the course<ul> <li>Test: <code>ssh -T git@github.com</code></li> <li>Output should be something like this: <code>Hi bclaremar! You've successfully authenticated, but GitHub does not provide shell access.</code></li> </ul> </li> <li>Being comfortable with the command line. No expertise is required, but the lesson will be mostly taken from the command line.</li> <li>Students should be familiar with using a text editor on their system.</li> <li>We hope also that you have already done these steps:</li> </ul> <p><pre><code>$ git config --global user.name \"&lt;Your Name&gt;\"\n$ git config --global user.email &lt;your GitHub-connected email address&gt;\n$ git config --global init.defaultBranch \"main\"\n$ git config --global core.editor nano\n</code></pre> or replace nano with another editor, like in Windows: <code>notepad</code> Verify with: <pre><code>$ git config --list\n</code></pre></p>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#what-is-git-and-what-is-a-git-repository","title":"What is Git, and what is a Git repository?","text":"<ul> <li>Git is a version control system: can record/save snapshots and track the content of a folder as it changes over time.</li> <li>Every time we commit a snapshot, Git records a snapshot of the entire project, saves it, and assigns it a version.</li> <li>These snapshots are kept inside a sub-folder called <code>.git</code>.</li> <li>If we remove <code>.git</code>, we remove the repository and history (but keep the working directory!).</li> <li><code>.git</code> uses relative paths - you can move the whole thing somewhere else and it will still work</li> <li>Git doesn't do anything unless you ask it to (it does not record anything automatically).</li> <li>Multiple interfaces to Git exist (command line, graphical interfaces, web interfaces).</li> </ul> <p>Concepts in Git</p> <ul> <li>repository: The project, contains all data and history (commits, branches, tags).</li> <li>add: Stage you files (collect what to be added to the git record \u2014 a kind of middle step)</li> <li>commit: Snapshot of the project, gets a unique identifier (e.g. <code>c7f0e8bfc718be04525847fc7ac237f470add76e</code>).</li> <li>cloning: Copying the whole repository to your laptop - the first time. It is not necessary to download each file one by one.<ul> <li><code>git clone</code> copies everything: all commits and all branches.</li> </ul> </li> <li>Branches on the remote appear as (read-only) local branches with a prefix, e.g. <code>origin/main</code>.</li> <li>We synchronize commits between local and remote with <code>git fetch</code>/<code>git pull</code> and <code>git push</code>.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#a-test-project-started-locally","title":"A test project started locally","text":"","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#initial-code-base","title":"Initial code base","text":"<ul> <li>Let's say you have some code you have started to work with</li> </ul> Exercise: start the test project <p>Type-along or Demo</p> <p>You can also listen and try this out yourself when you have time</p> <ul> <li>Example code, <code>planets.py</code></li> </ul> <p>-</p> <pre><code>#planet\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#constants\nG=6.6743e-11\nAU=149.597871e9 # 1 astronomical unit (AU) is the mean distance between su\nAU1=150.8e9\nmj=5.97219e24\nmJ=1.899e27\nM=1.9891e30\nday=86400;\nyear=31556926;\nv0=AU*2*np.pi/year;\nFg=G*M*mj/AU**2\nag=Fg/mj\nFc=mj*v0**2/AU\nac=Fc/mj\n\nL=2\n\nx0=AU1;\ny0=0;\nu0=0;\nx=np.zeros(365*L, dtype=float);\ny=np.zeros(365*L, dtype=float);\n\nx[0]=x0;\ny[0]=y0;\nu=u0;\nv=v0;\n\nfor i in range(1,365*L):\n    print(i)\n    x[i]=x[i-1]+day*u;\n    y[i]=y[i-1]+day*v;\n    ax=-G*M/(abs(x[i]**2+y[i]**2)**[3/2])*x[i];\n    ay=-G*M/(abs(x[i]**2+y[i]**2)**[3/2])*y[i];\n    u=u+ax*day;\n    v=v+ay*day;\n\nrj=(x**2+y**2)**.5\na=max(rj)\nb=min(rj)\ne=1-2/(a/b+1)\nrel=(a/b-1)\n\n\nfig=plt.figure(1,figsize=(12,5))\nax=fig.add_subplot(1,2,1)\nax.plot(x,y)\nax.plot (0,0,'o')\n#axis equal\n\nax=fig.add_subplot(1,2,2)\nax.plot(range(0,365*2),rj)\n\nplt.savefig('../Figures/planet_earth.png', dpi=100, bbox_inches='tight')\n</code></pre> <ul> <li>Make a folder with name <code>planets</code></li> <li>BASH: <code>mkdir planets</code></li> <li>Create a folder in the <code>planets/</code> folder, called <code>Figures/</code></li> <li>Also create a folder within <code>planets/</code> folder with the name <code>code</code></li> <li>In the <code>code</code> folder, create a file.</li> <li>Copy paste the python code above into it and save as <code>planets.py</code>.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#initiate-a-project","title":"Initiate a project","text":"<p>Type-along or demo</p> <ul> <li>Be in a terminal and go to the <code>planets</code> folder, which will be the project repository (repo)</li> <li>run <code>git init</code></li> <li> <p>make sure that there is a <code>.git</code> directory created</p> </li> <li> <p>Now you have a git repo called planets</p> </li> <li>check with the command: <code>git status</code></li> <li> <p>It is always a safe command to run and in general a good idea to do when you are trying to figure out what to do next:</p> </li> <li> <p>So far, there is no content. We have to manually add the content to the repo.</p> </li> <li> <p>This is done with the commands <code>add</code> and <code>commit</code></p> </li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#staging-files","title":"Staging files","text":"<p>Demo or type-along</p> <pre><code>$ git status\n\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        Figures/\n        code/\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <ul> <li>The two files are untracked in the repository (directory).</li> <li>You want to add the files (focus the camera) to the list of files tracked by Git.</li> <li>Git does not track any files automatically and you need make a conscious decision to add a file.</li> <li>Let's do what Git hints at and add the files:</li> </ul> <p>Type-along or demo</p> <pre><code>$ git add .    # &lt; -- \".\" means all files\n$ git status\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   Figures/planet_earth.png\n        new file:   code/planet.py\n</code></pre> <p>Now this change is staged and ready to be committed.</p>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#commit","title":"Commit","text":"<ul> <li>Every time we commit a snapshot, Git records a snapshot of the entire project, saves it, and assigns it a version.</li> <li>BUT only what we have added to the \"staging\" area!</li> </ul> <p>Let us now commit the change to the repository:</p> <p>Demo or Type-along</p> <pre><code>$ git commit -m \"add folders and planet code\"\n\n[main (root-commit) 6a416b5] add folders and planet code\n 2 files changed, 58 insertions(+)\n create mode 100644 Figures/planet_earth.png\n create mode 100644 code/planet.py\n</code></pre> <p>Right after we query the status to get this useful command into our muscle memory:</p> <pre><code>$ git status\n\nOn branch master\nnothing to commit, working tree clean\n</code></pre> <p>What does the <code>-m</code> flag mean? Let us check the help page for that command:</p> <pre><code>git help commit\n</code></pre> <ul> <li>You should see a very long help page as the tool is very versatile (press q to quit).<ul> <li>Do not worry about this now but keep in mind that you can always read the help files when in doubt.</li> <li>Searching online can also be useful, but choosing search terms to find relevant information takes some practice and discussions in some online threads may be confusing.</li> <li>Note that help pages also work when you don't have a network connection!</li> </ul> </li> </ul> <p>Alternative commits</p> <ul> <li>You can also omit the <code>-m</code> option and a text editor will open.</li> <li>The first line will be your commit message.</li> <li>You can add other lines to add some more detailed info about your changes.</li> </ul> <p>Writing useful commit messages</p> <p>Check this page!</p>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#upload-to-github","title":"Upload to GitHub","text":"<p>Demo or Type-along</p> <ul> <li>Make sure that you are logged into GitHub.</li> </ul> <p> </p> <ul> <li> <p>To create a repository we either click the green button \"New\" (top right corner).</p> </li> <li> <p>Or if you see your profile page, there is a \"+\" menu (top right corner).</p> </li> </ul> <p></p> <ul> <li> <p>On this page choose a project name, e.g. <code>planets-&lt;username&gt;</code></p> <ul> <li>Add your name there so there are no clashes when/if you collaborate and fork other repositories</li> <li>Note that the name does not need to be similar to your local git project, but it is good if you can connect them \"logically\"</li> </ul> </li> <li> <p>For the sake of this exercise do NOT select \"Initialize this repository with a README\"</p> </li> <li>and NO Licence</li> </ul> <p></p> <ul> <li>Press \"Create repository\"</li> </ul> <p></p> <ul> <li>Choose SSH</li> <li>Copy-paste the code for \"\u2026or push an existing repository from the command line\"</li> <li>Go to local git terminal and go to the git project you started above</li> <li> <p>Paste the code</p> </li> <li> <p>Did it work??</p> </li> <li>Reload the GitHub page and see the fiels present locally is also present there.</li> </ul> <p>Done!</p> <ul> <li>Let's view the license!</li> <li>There is pre-written text for the different types.</li> <li>More info at Licensing</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#introduction-to-documentation","title":"Introduction to documentation","text":"","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#order-your-files","title":"Order your files","text":"<ul> <li>Think that everything is worth to be part of documentation (like GitHub directory tree)</li> <li>The parts from the software development cycle<ul> <li>The planning parts<ul> <li>Requirements:</li> <li>what should the program deliver</li> <li>dependencies</li> <li>OS platforms</li> <li>Risk analysis</li> </ul> </li> <li>Design documentation<ul> <li>Analysis: pseudo code and UML</li> </ul> </li> <li>Source code<ul> <li>with in-code documentation</li> </ul> </li> <li>README</li> <li>(Full documentation)</li> <li>(Tutorial)</li> </ul> </li> </ul> <p>Directory structure</p> <ul> <li> <p>Different projects should have separate folders</p> </li> <li> <p>ReadMe file</p> </li> <li>Data  (version controlled)(.gitignore)</li> <li>Processed data intermediate</li> <li>(Manuscript)</li> <li>Results  data, tables, figures (version controlled, git tags for manuscript version)</li> <li>Src  version controlled code goes here<ul> <li>License (here or in the 1st level)</li> <li>Requirements.txt</li> </ul> </li> <li>Doc</li> <li>index</li> <li>.gitignore file</li> </ul> <p>Note</p> <ul> <li>If software is reused in several projects it can make sense to put them in its own repo, not connected to a specific research project</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#readme-files","title":"README files","text":"<p>Advantages</p> <ul> <li>Versioned (goes with the code development)</li> <li>It is often good enough to have a <code>README.md</code> or <code>README.rst</code> along with your code/script</li> <li>If you use README files, use either<ul> <li>RST or</li> <li>Markdown</li> </ul> </li> <li>A great guide to README files: MakeaREADME</li> </ul> <p>A README file should include</p> <ul> <li>A descriptive project title</li> <li>Motivation (why the project exists)</li> <li>How to setup</li> <li>Copy-pastable quick start code example</li> <li>Recommended citation</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#cheat-sheet","title":"Cheat-sheet","text":"<pre><code>    **Cheat sheet**\n    # This is a section in Markdown\n\n    ## This is a subsection\n\n    Nothing special needed for\n    a normal paragraph.\n\n        This is a code block\n\n\n    **Bold** and *emphasized*.\n\n    A list:\n    - this is an item\n    - another item\n</code></pre> <p>See also</p> <p>We will later look at the README file, present in the Course project repository</p>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#in-code-documentation","title":"In-code documentation","text":"<ul> <li>Comments, function docstrings, ...</li> <li>Advantages<ul> <li>Good for programmers</li> <li>Version controlled alongside code</li> <li>Can be used to auto-generate documentation for functions/classes</li> </ul> </li> <li>Disadvantage<ul> <li>Probably not enough for users</li> </ul> </li> </ul> <p>Comments examples</p> <p>Let's take a look at two example comments (comments in python start with <code>#</code>):</p> <p>Comment A</p> <pre><code># Now we check if temperature is larger then -50:\nif temperature &gt; -50:\n    print('do something')\n</code></pre> <p>Comment B</p> <pre><code># We regard temperatures below -50 degrees as measurement errors\nif temperature &gt; -50:\n    print('do something')\n</code></pre> <ul> <li>Comment A describes what happens in this piece of code, whereas comment B describes why this piece of code is there, i.e. its purpose.</li> <li>Comments in the form of B are much more useful, comments of form A are redundant and we should avoid them.</li> </ul> <p>Why and not how</p>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#function-docstrings","title":"Function docstrings","text":"<p>A docstring is a structured comment associated to a segment of code (i.e. function or class)</p> <p>Good docstrings describe:</p> <pre><code>What the function does\nWhat goes in (including the type of the input variables)\nWhat goes out (including the return type)\nPython example: ``help()``\n</code></pre> <p>Example</p> <pre><code>def mean_temperature(data):\n    \"\"\"\n    Get the mean temperature\n\n    Args:\n        data (pandas.DataFrame): A pandas dataframe with air temperature measurements.\n\n    Returns:\n        The mean air temperature (float)\n    \"\"\"\n    temperatures = data['Air temperature (degC)']\n    return float(sum(temperatures)/len(temperatures))\n</code></pre> <p>Working on GitHub</p> <ul> <li>You can do basically the same work at GitHub as in your local git repo</li> <li>The graphical view makes it easier to work with in everyday editing work at least.<ul> <li>Depends on your own preferences of course.</li> </ul> </li> <li>Here your commit each file at a time with the \"commit button\".<ul> <li>No staging that is.</li> <li>Be aware of that feature!</li> </ul> </li> <li>GitHub Actions are workflows defined by you, like:<ul> <li>for automatic testing after each commit (Used in the test lessons)</li> <li>for GitHub Pages, briefly covered in last session today or Extra reading: Documentation.</li> </ul> </li> </ul> <p>See also</p> <ul> <li>Workshop on GitHub without command-line</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#add-in-code-documentation-on-github-and-pull-from-local-git","title":"Add in-code documentation on Github and pull from local git","text":"<p>Type-along: in-code docs</p> <ul> <li>Use GitHub</li> <li>Open <code>planet.py</code></li> <li>Add some documentation (comments in python start with <code>#</code>)</li> <li>Example:</li> <li>Time iteration of the postion of Earth</li> <li>Make subplots of Earth's revolution and the change of Sun\u2013Earth distance</li> <li>Commit your changes</li> <li>Note that there is no staging area on GitHub</li> <li>Go to your local git folder in a terminal to get the GitHub changes locally.</li> <li>Do <code>git pull</code> in the terminal</li> <li>Also try these commands!</li> </ul> <pre><code>$ git log\n$ git log --stat\n$ git log --oneline\n</code></pre> <p>Key points</p> <ul> <li>Comments should describe the why for your code not the what.</li> <li>Writing docstrings is an easy way to write documentation while you type code.</li> <li>Copy-pastable quick start code example</li> <li>Recommended citation</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#what-have-we-done","title":"What have we done?","text":"<pre><code>graph TB\n\nP[\"Project idea\"] --&gt;|git init| Node2\nP[\"Project idea\"] --&gt; planet.py --&gt;|git add| Node4\nNode4 --&gt; |git commit| Node1\nNode2 --&gt; |git push| Node5\n\nC[Uncommited changed planet.py] --&gt;|commit button| R\nNode5 --&gt; |\"git pull (from local git)\"| Node2\nR --&gt; |\"git pull (from local git)\"| Node1\nR &lt;--&gt; Node5\n\n        subgraph \"Local Git\"\n        Node2[project]\n        Node1[planet.py]\n        Node1 &lt;--&gt; Node2\n\n        end\n\n        subgraph \"staging area\"\n        Node4[planet.py]\n        end\n\n        subgraph \"GitHub\"\n        Node5[project]\n        R[planet.py]\n        end\n\n</code></pre>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#start-with-course-project","title":"Start with course project","text":"","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#view-the-project","title":"View the project","text":"<ul> <li> <p>View the GitHub project at: https://github.com/programming-formalisms/programming_formalisms_project_summer_2024</p> </li> <li> <p>See the tree!</p> </li> </ul> <pre><code>\u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\u251c\u2500\u2500 design\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 fairytale.md\n\u251c\u2500\u2500 learners\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 richel\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 programming_formalisms_student_team_summer_2024_logo_50.png\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 run_and_tumble.jpg\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 weather\n        \u2514\u2500\u2500 README.md\n</code></pre> <ul> <li>View README.md</li> <li>View License</li> </ul> <p>Concepts in Git</p> <ul> <li>repository: The project, contains all data and history (commits, branches, tags).</li> <li>add: Stage you files (collect what to be added to the git record \u2014 a kind of middle step)</li> <li>commit: Snapshot of the project, gets a unique identifier (e.g. <code>c7f0e8bfc718be04525847fc7ac237f470add76e</code>).</li> <li>cloning: Copying the whole repository to your laptop - the first time. It is not necessary to download each file one by one.<ul> <li><code>git clone</code> copies everything: all commits and all branches.</li> </ul> </li> <li>We synchronize commits between local and remote with</li> <li>git fetch/pull and git push.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#clone-the-course-project","title":"Clone the course project","text":"Exercise: clone course project and create folders <p>Now you and other people can clone this repository and contribute changes.</p> <ul> <li>You may want to create a directory on your computer for this course.</li> <li>You can do it in the normal way or use your terminal, like this, in a good place (like \"Courses\" if you have that)</li> <li><code>mkdir Programming_formalisms</code></li> <li><code>cd Programming_formalisms</code></li> <li>In GitHub, locate the Code button, select SSH and click the copy symbol to the right</li> <li>Back in your terminal type <code>git clone</code> followed by pasting the copied text.</li> <li>The result shall look something like this:</li> </ul> <pre><code>$ git clone git@github.com:programming-formalisms/programming_formalisms_project_summer_2024.git\n</code></pre> <p>Tip</p> <ul> <li>Using the SSH makes it very straight-forward to upload your local changes back to GitHub.</li> <li>Use HTTP if you clone repos that do not belong to you or your group.</li> </ul> <p>What just happened?</p> <ul> <li><code>cd</code> the new directory that was created</li> <li>list the files with <code>ls</code></li> </ul> <p>Create a folder with your name</p> <ul> <li>step into (<code>cd</code>) the <code>learners/</code> directory</li> <li> <p><code>mkdir &lt;your-name&gt;</code></p> </li> <li> <p>Git needs files to be able to commit.</p> </li> <li> <p>Therefore create an empty README file in the created folder</p> </li> <li> <p><code>touch README.md</code></p> </li> <li> <p>git add/commit this file</p> </li> </ul> <p>Push your changes to the GitHub repo</p> <ul> <li><code>git push</code></li> </ul> <p>When everyone are done pull the latest changes to the local git repo</p> <ul> <li><code>git pull</code></li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#typical-workflow-for-the-course-project","title":"Typical workflow for the course project","text":"<ul> <li>students make development in local git and push to github?</li> <li>in principle centralized workflow</li> </ul> <p>Centralized layout</p> <ul> <li>Red is the repository on GitHub.</li> <li> <p>Blue is where all contributors work on their own computers.</p> </li> <li> <p>Centralized workflow is often used for remote collaborative work.</p> </li> <li><code>origin</code> refers to where you cloned from (but you can relocate it).</li> <li><code>origin/mybranch</code> is a read-only pointer to branch <code>mybranch</code> on <code>origin</code>.</li> <li>These read-only pointers only move when you <code>git fetch</code>/<code>git pull</code> or <code>git push</code>.</li> </ul>","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#remarks","title":"Remarks","text":"","tags":["project","getting started"]},{"location":"project_start/spring2024/startup/#git-cheat-sheet","title":"Git Cheat sheet","text":"<pre><code>git init    # initialize new repository\ngit add     # add files or stage file(s)\ngit commit  # commit staged file(s)\ngit status  # see what is going on\ngit log     # see history\ngit diff    # show unstaged/uncommitted modifications\ngit show    # show the change for a specific commit\ngit mv      # move tracked files\ngit rm      # remove tracked files  (from repository only)\n</code></pre> <p>Goal</p> <ul> <li>[ ] Demonstrate the ability to initiate and manage a software development project using Git and GitHub.</li> </ul> <p>Keypoints</p> <ul> <li>A repository can have one or multiple remotes (we will revisit these later).</li> <li>A remote (GitHub) in this case serves as a full backup of your work.</li> <li>Code development might be easier to develop in the local git repo since you can run and test locally in an easy way.</li> </ul> <p>Parts to be covered!</p> <ul> <li>\u2611 Source/version control<ul> <li>Git</li> <li>We have a starting point!</li> <li>GitHub as remote backup</li> </ul> </li> <li>\u2610 Planning<ul> <li>UML</li> <li>Pseudocode</li> </ul> </li> <li>\u2610 Testing<ul> <li>Different levels</li> <li>We don't do this today!</li> </ul> </li> <li>\u2610 Collaboration<ul> <li>GitHub</li> </ul> </li> <li>\u2611 Sharing<ul> <li>\u2611 open science</li> <li>\u2610 citation</li> <li>\u2611 licensing</li> </ul> </li> <li>\u2610 Documentation</li> </ul>","tags":["project","getting started"]},{"location":"projects/example_project/DPAI_requirements/","title":"Requirement specification iteration 1","text":""},{"location":"projects/example_project/DPAI_requirements/#requirement-prompt-make-a-requirement-matrix-for-the-following-project-the-project-is-to-be-implemented-in-python-using-tdd-the-program-should-visually-display-a-number-of-particles-on-a-field-particles-are-initialised-with-a-certain-position-and-speed-each-particle-interacts-with-all-the-other-particles-in-a-simple-way-eg-gravitational-attraction-lennard-jones-potential-direction-alignment-implementing-a-flocking-behaviour-or-something-else-the-group-chooses-which-decide-on-a-boundary-condition-eg-bounce-or-wrap-or-eliminate-the-particle-the-simulation-is-then-stepped-forward-drawing-each-step-until-stopped-the-goal-is-to-create-a-stable-simulation-capable-of-the-maximum-number-of-particles-at-an-acceptable-framerate","title":"Requirement Prompt: make a requirement matrix for the following project the project is to be implemented in python using TDD: The program should visually display a number of particles on a field. Particles are initialised with a certain position and speed. Each particle interacts with all the other particles in a simple way, e.g. gravitational attraction, Lennard-Jones potential, direction alignment (implementing a flocking behaviour), or something else, the group chooses which. Decide on a boundary condition (e.g. bounce or wrap or eliminate the particle). The simulation is then stepped forward, drawing each step, until stopped. The goal is to create a stable simulation capable of the maximum number of particles at an acceptable framerate","text":""},{"location":"projects/example_project/DPAI_requirements/#result","title":"Result","text":"Requirement ID Requirement Description Acceptance Criteria Test Cases R1 Visual Display The program must display a field with particles - Verify that the program opens a graphical window or interface for displaying particles. R2 Particle Initialization Particles must be initialized with positions and speeds - Confirm that each particle has a unique position and speed. R3 Particle Interaction Particles must interact with each other - Implement a chosen interaction (e.g., gravitational attraction, Lennard-Jones potential, or direction alignment). - Verify that particles respond to each other's presence. R4 Boundary Condition Choose a boundary condition for the field - Implement chosen boundary conditions (e.g., bounce, wrap, or elimination). - Confirm that particles behave according to the chosen boundary conditions. R5 Simulation Step The simulation must progress in discrete steps - Implement a mechanism to advance the simulation step by step. R6 Real-time Visualization Draw each simulation step in real-time - Ensure that the simulation displays each step visually as it progresses. R7 Maximum Particle Limit The simulation should handle a maximum number of particles - Test the simulation with varying numbers of particles up to the maximum limit and verify that it remains stable. R8 Acceptable Framerate The simulation should maintain an acceptable framerate - Measure and verify that the framerate remains above a defined threshold with the maximum number of particles. R9 Stop Simulation Ability to stop the simulation - Implement a user interface or mechanism to stop the simulation. R10 Test-Driven Development Develop the project using TDD - Write test cases before implementing each feature or functionality. - Ensure that the tests pass after implementing the code. <p>From this matrix we build derived requirements using the following prompt: generate derived requirements from the requirement matrix</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-1-particle-visualization-derived-from-r1","title":"Derived Requirement 1: Particle Visualization (Derived from R1)","text":"<p>The program must display particles as small, colored circles on the field. Particles should be visually distinguishable from the field background. Particle colors must represent their properties or states (e.g., speed, type, status).</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-2-particle-initialization-derived-from-r2","title":"Derived Requirement 2: Particle Initialization (Derived from R2)","text":"<p>Particles should be initialized within a specified area of the field. Initial positions and speeds of particles should be random or configurable. Ensure that particles are evenly distributed across the field to avoid clumping.</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-3-interaction-mechanism-derived-from-r3","title":"Derived Requirement 3: Interaction Mechanism (Derived from R3)","text":"<p>Implement multiple interaction mechanisms that can be selected or combined (e.g., gravitational attraction, Lennard-Jones potential, and direction alignment). Parameters for each interaction mechanism (e.g., gravitational constant, interaction radius) should be adjustable.</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-4-boundary-conditions-derived-from-r4","title":"Derived Requirement 4: Boundary Conditions (Derived from R4)","text":"<p>Allow users to choose from multiple boundary conditions, including bounce, wrap, or elimination. Boundary conditions should be easily configurable and switchable during the simulation.</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-5-simulation-control-derived-from-r5","title":"Derived Requirement 5: Simulation Control (Derived from R5)","text":"<p>Provide simulation control options such as play, pause, step, and reset. Allow users to specify the simulation step size (e.g., time step). Ensure the simulation is responsive to user input for real-time adjustments.</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-6-performance-optimization-derived-from-r7-and-r8","title":"Derived Requirement 6: Performance Optimization (Derived from R7 and R8)","text":"<p>Implement performance optimization techniques to handle a maximum number of particles while maintaining an acceptable framerate. Define a clear threshold for an \"acceptable framerate\" and ensure that the simulation meets or exceeds it with the maximum number of particles.</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-7-user-interface-derived-from-r9","title":"Derived Requirement 7: User Interface (Derived from R9)","text":"<p>Design an intuitive user interface (UI) for starting and stopping the simulation. Include options for adjusting simulation parameters and visual settings. Provide clear feedback to users on the status of the simulation.</p>"},{"location":"projects/example_project/DPAI_requirements/#derived-requirement-8-version-control-and-collaboration-derived-from-r10","title":"Derived Requirement 8: Version Control and Collaboration (Derived from R10)","text":"<p>Use version control systems (e.g., Git) to manage the project's source code. Collaborate effectively among team members using tools like issue tracking systems and code review processes. Ensure that test cases and documentation are kept up to date as the project evolves.</p> <p>USECASE MODEL:</p> <pre><code>@startuml UserSimulation\n\n!define PARTICLE_FIELD class :Particle Field;\n!define PARTICLE class :Particle;\n!define GRAVITY class :Gravitational Interaction;\n!define BOUNDARY class :Boundary Condition;\n\n:User: -down-&gt; (Start Simulation) : Includes\n:User: -down-&gt; (Stop Simulation) : Includes\n:User: -down-&gt; (Pause Simulation) : Includes\n:User: -down-&gt; (Configure Simulation) : Includes\n:User: -down-&gt; (View Simulation) : Includes\n(Start Simulation) -down-&gt; PARTICLE_FIELD : R1\n(Configure Simulation) -down-&gt; PARTICLE : R2\n(Configure Simulation) -down-&gt; GRAVITY : R3 (Gravitational)\n(Configure Simulation) -down-&gt; BOUNDARY : R4\n(Configure Simulation) -down-&gt; (Step Simulation) : Includes\n(Pause Simulation) -down-&gt; (Resume Simulation) : Includes\n(Step Simulation) -down-&gt; (Advance Simulation) : Includes\n(Advance Simulation) -down-&gt; PARTICLE : R3 (Gravitational)\n(Advance Simulation) -down-&gt; (Collision Detection) : Includes\n(Stop Simulation) -down-&gt; (Exit Simulation) : Includes\n(View Simulation) -down-&gt; (Render Frame) : Includes\n(Render Frame) -down-&gt; PARTICLE_FIELD : R6\n(PARTICLE_FIELD) -down-&gt; PARTICLE : R3 (Gravitational)\n(PARTICLE_FIELD) -down-&gt; BOUNDARY : R4\n\n@enduml\n</code></pre> <p>```mermaid graph TD;     User((User))     StartSimulation((Start Simulation))     StopSimulation((Stop Simulation))     PauseSimulation((Pause Simulation))     ConfigureSimulation((Configure Simulation))     ViewSimulation((View Simulation))     StepSimulation((Step Simulation))     ResumeSimulation((Resume Simulation))     AdvanceSimulation((Advance Simulation))     CollisionDetection((Collision Detection))     ExitSimulation((Exit Simulation))     RenderFrame((Render Frame))     ParticleField(Particle Field)     Particle(Particle)     Gravity(Gravitational Interaction)     Boundary(Boundary Condition)</p> <pre><code>User --&gt; StartSimulation\nUser --&gt; StopSimulation\nUser --&gt; PauseSimulation\nUser --&gt; ConfigureSimulation\nUser --&gt; ViewSimulation\nStartSimulation --&gt; ParticleField\nConfigureSimulation --&gt; Particle\nConfigureSimulation --&gt; Gravity\nConfigureSimulation --&gt; Boundary\nConfigureSimulation --&gt; StepSimulation\nPauseSimulation --&gt; ResumeSimulation\nStepSimulation --&gt; AdvanceSimulation\nAdvanceSimulation --&gt; Particle\nAdvanceSimulation --&gt; CollisionDetection\nStopSimulation --&gt; ExitSimulation\nViewSimulation --&gt; RenderFrame\nRenderFrame --&gt; ParticleField\nParticleField --&gt; Particle\nParticleField --&gt; Boundary\n```\n</code></pre>"},{"location":"projects/example_project/DPD_assisted/","title":"DPD assisted","text":"<p>In an assisted process the first step is to construct a prompt for the Requirement gathering from the project brief supplied by the user and to determine and specify in the DPD which AI framework has been used in this case we will use the ChatGPT 3.5 free access LLM</p>"},{"location":"projects/example_project/DPD_unassisted/","title":"DPD unassisted","text":"<p>When gathering requirements for the program the first iteration is based on analyzing the project brief for subjects and actions, i.e nouns and verbs that will describe the possible demands the users have on the system, after the first pass pay attention to adjective and adverbials that may change a need or requirement. After this make a Table of requirements, from this a system use case design can begin. After the use cases have been determined go through each use case and see how an object or action can solve this use case. Design a object/class diagram to reflect this possibly through a collaborations diagram.</p>"},{"location":"projects/example_project/DPUA_requirementspecification/","title":"DPUA requirement specification","text":"Requirement ID Requirement Description Acceptance Criteria Test Cases R1 Visual Display The program must display a field with particles and a visual cue to runtime settings - Verify that the program opens a graphical window or interface for displaying particles. R2 Particle Initialization Particles must be initialized with positions and speeds and constants relevant to the simulation such as gravity or energy potentials and parameters must be initialized - Confirm that each particle has a unique position and speed. and that each parameter is set R3 Particle Interaction Particles must interact with each other with at least pair wise interactions - Implement a chosen interaction (e.g., gravitational attraction, Lennard-Jones potential, or direction alignment). - Verify that particles respond to each other's presence. R4 Boundary Condition Choose a boundary condition for the field  this includes how to handle interactions across borders - Implement chosen boundary conditions (e.g., bounce, wrap, or elimination). - Confirm that particles behave according to the chosen boundary conditions. R5 Simulation Step The simulation should progress in discrete steps - Implement a mechanism to advance the simulation step by step. R6 Real-time Visualization Draw each simulation step with a suitable frame rate update - Ensure that the simulation displays each step visually as it progresses. R7 Maximum Particle Limit The simulation should handle a maximum number of particles set in the runtime settings - Test the simulation with varying numbers of particles up to the maximum limit and verify that it remains stable. R8 Acceptable Framerate The simulation should maintain an acceptable framerate even at maximum number of particles - Measure and verify that the framerate remains above a defined threshold with the maximum number of particles. R9 Stop Simulation Ability to stop the simulation through interruption of the current main loop - Implement a user interface or mechanism to stop the simulation.  and check that the simulation ends when such mechanisms are invoked R10 Restart simulation A simulation should be able to restart without restarting the interface Test that the implementation of the restart function can activate after the simulation has ended R11 Test-Driven Development Develop the project using TDD - Write test cases before implementing each feature or functionality. - Ensure that the tests pass after implementing the code. <pre><code>requirementDiagram\n\nrequirement VisualDisplay {\n    id: R1\n    text: The progrma must display a field with particles and a visual cue to runtime settings.\n    risk: low\n    verifymethod: Test\n    }\n\nrequirement  Particle_Initialization{\n    id: R2\n    text: Particles must be initialized with positions and speeds and constants relevant to the simulation such as gravity or energy potentials and parameters must be initialized\n    risk: High\n    verifymethod: Test\n    }\n\nelement test_gui {\n    type: \"visual verification\"\n    docref: None\n    }\n\nelement test_settings_cue {\n    type: \"visual verification\"\n    docref: None\n    }\n\nelement test_Initialization {\n    type: \"simulation\"\n    docref: None\n    }\n\ntest_gui - satisfies -&gt; VisualDisplay\ntest_settings_cue - satisfies -&gt; VisualDisplay\ntest_Initialization - satisfies -&gt; Particle_Initialization</code></pre>"},{"location":"projects/example_project/Example_project_designProcessDocumentation/","title":"Design Process Documentation","text":"<p> The design process documentation serves to describe how the process of designing the software has been done</p> <p>During this project two examples of the design process will be described A traditional approach and a AI-assisted approach, the AI assisted approach greatly improves initial phase and can help with some of the refinement but as with all AI-assisted work, It is imperative to check the resulting parts both for completeness and correctness just as if you are doing it you do an unassisted process.  There will be two DPD(Design Process Document)s inside this project one is the unassisted DPD_unassisted.md and one assisted DPD_assisted.md During this project all files pertaining that are AI assisted will have the prefix DPAI_and all that uses no ai assistance will have the prefix DPAI_ this goes for folders as well as for files</p>"},{"location":"recursive_algorithms/","title":"Recursive algorithms","text":"<p>Learning outcomes</p> <ul> <li>Understand that functions can be recursive</li> <li>Understand that recursive functions can usually be implemented   with a for loop</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>.</li> </ul> <p>Teaching goals are:</p> <ul> <li>.</li> </ul> <p>Prior:</p> <ul> <li>.</li> </ul> <p>Lesson plans:</p> <pre><code>gantt\n  title Lesson plan pair programming 1\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 15s\n  Feedback 1: feedback_1, after exercise_1, 5s\n  Theory 2: theory_2, after feedback_1, 5s\n  Exercise 2: crit, exercise_2, after theory_2, 10s\n  Exercise 2 after the break: crit, after exercise_2, 5s</code></pre>","tags":["recursive","function","algorithm"]},{"location":"recursive_algorithms/#why","title":"Why?","text":"<p>In the real world, there are behaviors that are recursive.</p> <p>An example is this dictionary definition (from <code>[Hunter, 2021]</code>):</p> <p>Recursion, see Recursion.</p> <p>Or (also from <code>[Hunter, 2021]</code>):</p> <p>To understand recursion, you must understand recursion</p> <p>Or a Sierpi\u0144ski triangle, which repeats itself in itself:</p> <p></p> <p>The simplest example in mathematics is a factorial:</p> <code>n</code> <code>n!</code> 0 1 1 1 2 2 * 1 = 2 3 3 * 2 * 1 = 6 4 4 * 3 * 2 * 1 = 24 5 5 * <code>4!</code> <code>n</code> <code>n</code> * <code>(n-1)!</code> <p>To calculate the factorial of <code>n</code> (for <code>n</code> bigger than 1), you need the factorial of <code>n-1</code>.</p> <p>Another example is a Fibonacci sequence:</p> N 0 1 2 3 4 5 6 7 8 9 10 <code>Fn</code> 0 1 1 2 3 5 8 13 21 34 55 <p></p>","tags":["recursive","function","algorithm"]},{"location":"recursive_algorithms/#exercise-1-factorial","title":"Exercise 1: factorial","text":"<ul> <li>Develop a function to get the factorial of a number using a for-loop</li> <li>Develop a function to get the factorial of a number using recursion</li> </ul> <pre><code>assert calc_factorial_iterative(13) ==\n    calc_factorial_recursive(13)\n</code></pre> Prefer R? <pre><code>expect_equal(\n  calc_factorial_iterative(13),\n  calc_factorial_recursive(13)\n)\n</code></pre>","tags":["recursive","function","algorithm"]},{"location":"recursive_algorithms/#exercise-2-get-the-nth-value-in-the-fibonacci-sequence","title":"Exercise 2: get the nth value in the Fibonacci sequence","text":"<ul> <li>Develop a function to get the nth value in the Fibonacci sequence   using a for-loop</li> <li>Develop a function to get the nth value in the Fibonacci sequence   using recursions</li> </ul>","tags":["recursive","function","algorithm"]},{"location":"recursive_algorithms/#references","title":"References","text":"<ul> <li><code>[Hunter, 2021]</code> Hunter, David J. Essentials of discrete mathematics. Jones &amp; Bartlett Learning, 2021.</li> </ul>","tags":["recursive","function","algorithm"]},{"location":"reflections/","title":"Reflections","text":"<p>Reflections are the thoughts of teachers looking back.</p> <p>No checks here</p> <p>These reflections copy evaluation results literally. Spelling is hence not corrected on purpose.</p> Index Course 1 2023 summer 2 2023 autumn 3 2024 summer 4 2024 autumn 5 2025 summer 6 2025 autumn 7 2026 summer 8 2026 autumn","tags":["reflection","reflections"]},{"location":"reflections/2023_autumn/","title":"Reflections autumn 2023","text":"<ul> <li>Day 3 reflection</li> <li>Day 4 reflection</li> <li>Day 5 reflection</li> <li>Course reflection](course_reflection.md)</li> </ul>"},{"location":"reflections/2023_autumn/course_reflection/","title":"Course reflection autumn 2023","text":"<p>Here I reflect on the course as a whole, starting with my own thoughts, than using the Retrospective.</p> <p>I think the course is moving in the right direction: I have spent multiple hours with Jon and Lars to align our course ideas, which achieved exactly that goal.</p> <p>I regret the lack of exercises in the earlier days, which caused me to do catch-up in mine. I have -and should!- taken the hit for the team, at the cost of deepening my own materials. I need to make a list of exercises the learners need to have done on the other days. Here goes:</p> <ul> <li>Become a member of the GitHub team. Goals:    (1) to make sure all learners have a GitHub    account, (2) to make sure all learners    can work on the shared repo</li> <li>Do a basic git workflow from the    command-line. Goal: to make sure all    learners can actually push to the shared    repo: there will be things that don't work    smoothly</li> <li>Do a git workflow with branches from the    command-line. Goal: the make sure learners    can work with branches and understand what    'a pull request from a topic branch to    develop, by code review' means</li> <li>Put a use-case diagram of the shared project    on the repository. Goal: to allow the    learners to make a class diagram</li> <li>Put the class diagram of the shared project    on the repository. Goal: this allows the    learners to start programming the classes    at the same time</li> </ul> <p>The idea of gradually building up a shared repo seems The Dream to me: starting from informal development to formal.</p> <p>The order of lectures and exercises can be improved. If I would be boss:</p> <ul> <li>Pair programming first: this is the basis    of everything; helps form    a learning community (note I would like to    have formal project roles!)</li> <li>Basic git workflow and getting a    use case diagram early</li> <li>Do the social code review after having    practiced with branches</li> <li>Class design after algorithms are    programmed to work on the data structures</li> <li>Do design patterns after classes have    been programmed</li> </ul> <p>Or: as teachers, agree on exercises to be done, not which content is discussed.</p> <p>Except for these points, spending some more time with the course material will improve the course.</p> <p>Let's see what the learners thought ...</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/course_reflection/#what-went-well","title":"What went well?","text":"<ul> <li>Pair programming +3</li> <li>Provided an opportunity for more social programming, including working   in a live github repository where other people are working +1</li> <li>Good level of social interaction +1</li> <li>chatting during breaks +1</li> <li>Time for questions and answers</li> </ul> <p>It seems the social part of the course was appreciated strongly :-)</p> <ul> <li>Lots of exercises +2</li> </ul> <p>Same as last year: indeed, more exercises would be better :-)</p> <ul> <li>Hand-on demos that can be used in the future +3</li> <li>teachers are enthusiastic and seem to know what they're talking about</li> <li>Well experienced teachers +1</li> <li>providing references</li> </ul> <p>It is nice to hear we teachers seems to be competent.</p> <ul> <li>Frequent breaks +3</li> </ul> <p>My scheduling seems to be appreciated :-)</p> <ul> <li>Github workflow (CI) +2</li> </ul> <p>Unexpected that this would be appreciated that much: it is a Programming Formalisms course, so this would seem to be on the more practical side of things.</p> <ul> <li>cats +4</li> <li>Windows XP background -1</li> </ul> <p>Those cheeky students with their funky jokes :-)</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/course_reflection/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Lars rushed through the last parts of his lectures</li> <li>(Still) too many lectures -- Zoom fatigue</li> <li>Presentations</li> <li>Balance between lectures and exercises.</li> <li>Too low tempo, especially in the lectures. +1</li> </ul> <p>I feel this is not me: I feel that in my part the balance between lecturing and exercises is good. I will ignore.</p> <ul> <li>Some exercises could be explained better. We spent a lot of time just   discussing what we were supposed to do. +1</li> <li>Unclear desciption and explanation of exercises +5</li> </ul> <p>I am one of the offenders here and I agree.</p> <ul> <li>Skipping over content throughout the course; it gets confusing</li> </ul> <p>I think this is not me, as I have skipped nothing; I am most ruthless in cutting content. Will ignore.</p> <ul> <li>might be helpful to do the git stuff all together</li> </ul> <p>Agreed, I suggest that too :-)</p> <ul> <li>Some parts of the pair programming seems not needed</li> </ul> <p>Unsure what this is about ... too bad :-|</p> <ul> <li>less reading documents after Wed.</li> </ul> <p>Agreed, I was focusing on exercises and catching up. More time with course materials will improve this next time.</p> <ul> <li>Different levels of preparation, everyone does not fulfill course   prerequisites or preparations from last friday</li> </ul> <p>I think working always in pairs from the first day will help everyone get to speed quickly.</p> <ul> <li>too manny cats -6</li> <li>too often told to not point fingers :finger_gun:</li> </ul> <p>Haha :-)</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/course_reflection/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>The coures was 'top-heavy'. The beginning (in my opinion) should be more   interactive and with more utilities, like git, being taught.   After the first day, then you can bring in more and more theory.</li> </ul> <p>Agreed.</p> <ul> <li>More focus on a project to try out all the things taught in the course.   Design -&gt; Tests -&gt; Implementation -&gt; Iterations</li> </ul> <p>This is very close The Dream!</p> <ul> <li>If exercises or examples are related with published papers</li> </ul> <p>Unsure if this is on me: I do have links to the literature.</p> <ul> <li>Personally, I felt that the course was held at too low level.   I was expecting more details and technical discussion, especially   in the algorithm and data structure sections and I was familiar with most   of the course content. In the future I would suggest that you should make   it more clear what level of material to expect. +1 (but in the opposite   direction - found a lot was very technical)</li> </ul> <p>I'd agree we could have gone deeper. I have the idea it can be done, for example, would Day 3 not be a catching-up day, I would have gone deeper. OTOH, even then time was short.</p> <ul> <li>If there is an opportunity giving small group project and make presentation   at the final day</li> </ul> <p>I like this alternative idea, yet I do feel having a shared project helps feel social coding.</p> <ul> <li>The course website should be keep maintaining</li> <li>provide the correct/complete presentation PDFs on GitHub</li> </ul> <p>I agree and think this is a detail: we do maintain the course website. The only thing not done by me is to update the PDFs of the slides. Yes, we should provide these. I chose not to update these, as my lessons have exercises that practice the theory.</p> <ul> <li>No need to attempt completeness, one week is not enough -- material on top   of what is discussed in documentation on GitHub -- more exercises,   less lectures</li> </ul> <p>Agreed!</p> <ul> <li>I think when it is online, the course is limited in several certain ways.   MAybe consider on-site class?</li> </ul> <p>Impossible.</p> <ul> <li>it would be nice to survey attendees beforehand for their favourite languages   and experience with specific parts of the course - e.g some are gitmasters,   some have never used git before and found it confusing   af - and tailor classes appropriately</li> </ul> <p>More pairs would help this. AFAIK, we already survey skills of the learners...?</p> <ul> <li>Show more \"good\" github repos</li> </ul> <p>Interesting, may do.</p> <ul> <li>More examples of how these things are practiced in an academic setting</li> </ul> <p>Yup, maybe a preregistered study would be better?</p> <ul> <li>more on design of larger program projects</li> </ul> <p>Would be nice, not in my hands.</p> <ul> <li>if possible, work only on example project (no planets,no bacteria)</li> </ul> <p>Unsure. Agreed to have few repos.</p> <ul> <li>\ud83d\udc31\ud83d\udc31\ud83d\udc31 more cats \ud83d\udc31\ud83d\udc31\ud83d\udc31 +2</li> <li>additional animals +3</li> <li>Additional materials</li> <li>more dogs </li> </ul> <p>Haha!</p> <p>My final thoughts: I am happy the learners and I are on the same page. I will help convey the ideas of this cohort to the next </p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_3_reflection/","title":"Reflection day 3 autumn 2023","text":"<p>Exercises felt at better length. The learners need time to get things to work as part of the exercise and they had.</p> <p>The breaks sometimes hurt: learners were sometimes in the middle of something very fun and rewarding (this was true for the end of the exercise less frequently and in way milder form). Still, breaks are important, so I should do this. And it is nice to feel motivated to get back to work again. I will keep this, yet mention this at the start that breaks sometimes are a nuisance.</p> <p>Before the lecture I felt the need to prepare some git exercises, so the learners could catch up from Monday:</p> <ul> <li>git basic workflow: exercise fairytale basic,   #4</li> <li> <p>git with branches: exercise fairytale on branches,   #5 During the lesson, I felt doing this would not pay off enough. It followed that the team would get dozens of merge conflicts when working on the same file. This was at an annoying time, as we worked on real code they wanted to get running and in perfect style. Also here: I'd really enjoyed that this would have been done on Monday with trivial text.</p> </li> <li> <p>[ ] Do do the fairytale example on branches?</p> </li> </ul> <p>~~~Vote with learners~~~ Yes</p> <p>The CI part was disconnected from the exercises. The theory was too much and too vague. I am happy I felt that during the lecture, and I predict this was clearly noticeable.</p> <p>The unittest part was thin: it was mostly showing how to get code working. And I agree that that should be the exercise. Do show the theory though, especially more Hamcrest example. Also, show the R equivalents.</p> <p>The learners worked in 5 different duos. I let the pick manually so learners pick different partners. At the start of an exercise, this did take away time and I think that that is unfair: the exercise time should start running when all students are ready. Also, this was a bit of a search and I jumped between rooms to get the pairs formed.</p> <p>There was a bug in my scheduling script. Due to that, I (1) was interrupted while lecturing, and (2) I missed a break :-)</p> <p>I dislike my use of the word 'Conclusion' on slides, as if it is the only thing to conclude. Instead, learners should think critically ('Always document everything', really?). and be encouraged to challenge these ideas. If the points I present are challenged, I can observe I did a bad job convincing the learners. Use the word 'Discussion' as a slide title instead and write explicitly they are encouraged to be critical!</p> <p>To align with making exercise goals more clear, give the answer directly! In that way, the R developers can tag along if Python syntax is in their way.</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_3_reflection/#feedback","title":"Feedback","text":"<p>[I really wished I had had the csv with text, I will screenshots for now. This will make me overlook items :-/ !]</p> <p></p> <p>I seems many thought the balance between exercises and theory was good. And I enjoy to see that some learners find -to me!- details so fun. I should add those CI scripts live :-)</p> <p></p> <p>I am happy to see the clearly seem to have the same pain points as I either felt (e.g. manual pairing is tedious) or predicted (e.g. getting things to work) or intended (e.g. merge conflicts are annoying (hence, use branches)).</p> <ul> <li>[ ] Add to Day 1 goals: let all learners do a git basic workflow</li> <li>[ ] Add to Day 1 goals: let learners feel merge conflicts</li> <li>[ ] Add to Day 1 goals: let all learners do a git workflow with branches</li> </ul> <p>Using one IDE is a choice, will give stuff to figure out, so these are things I expect to see:</p> <ul> <li>VS code magic</li> <li>VSCode issues - but fixing these taught something</li> <li>obvious favoritism for VScode (make the terminal great again)</li> <li>VS test did not work smoothly. Would be good to have more explanations</li> <li>Visual studio code setup</li> </ul> <p>Showing multiple IDEs is possible, as well as the terminal (it is just <code>python -m unittest tests/test_*</code>), at the cost of less theory and the feedback 'Always use the same tool/IDE for the same thing'. The CLI to unittest should be mentioned, this makes VSCode less important:</p> <ul> <li>[ ] Mention <code>python -m unittest tests/test_*</code>    in course material</li> </ul> <p>Due to time, focus on things I think I should discuss and/or change:</p> <p>Exercise goals should indeed be clear. The <code>is_odd</code> exercise seems redundant if I do not share the goals. In that way, it is explicit that coding of this very similar same function was not a goal at all.</p> <ul> <li>[ ] Add exercise goals</li> </ul> <p>It should be made clear that the repo architecture is standard. However, using one file was a choice by me to get good commit disciple: if all pairs push their code every iteration, this would not have been a problem. However -and ignoring that learners needed to be added to the GitHub Team and I forgot to add that as an exercise (ideally at Day 1!)- not all learners get VSCode to work.</p> <ul> <li>[ ] Add to Day 1 goals: add all learners to the team</li> <li>[ ] Think deeper about this later</li> </ul> <p></p> <p>The learners agree with the thin unittest part and CI scripts part. I can do that better next time.</p> <ul> <li>[ ] Increase Hamcrest in unittest</li> <li>[ ] Add CI scripts live and fix with learners</li> </ul> <p>Or in general, as suggested:</p> <ul> <li>[ ] Build up the repo from scratch during the    course: it is beautifully in line with the    course; to formalize our workflow!    This can also be done as early as when    writing a faiytale and then adding the    spellchecker!</li> </ul> <p>Also, I feel the repository should always be in a valid state, so we build up pride over our exemplary work. In that way, it could help achieve learners feel that their code is 'good enough', instead of 'ugly'.</p> <ul> <li>[ ] Always keep the learners' project    repository in a valid state. Fix together.</li> </ul> <p>Adding R examples including videos is easy, as I already have these. Refer to these in exercises</p> <ul> <li>[ ] Consider having an R subteam (but what    if there are learners that cannot do R not    Python??)</li> </ul> <p>Show how to do ruff from CLI (<code>pip install ruff; ruff .</code>)</p> <p></p> <p>I should indeed add more book pictures to my lectures; references seem to feel giving to little glory  :-)</p> <ul> <li>[ ] Make sure Day 1 does what is needed for me</li> </ul>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/","title":"Reflection day 4 autumn 2023","text":"","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/#feedback-from-learners","title":"Feedback from learners","text":"","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/#what-went-well","title":"What went well?","text":"<ul> <li>The pull request part was really imprssive</li> <li>Found the pull request aspect of the practical useful +1</li> <li>Git pairing is more efficient</li> <li>.</li> <li>Hands on</li> <li>Refelcting on earlier feedback +1</li> <li>CI is quite cool. HackMD is good for discussion</li> <li>Testing proper git workflow +1</li> <li>Practising with opening issues, assigning them, opening pull requests on   GitHub, as well as dealing with merge conflicts</li> <li>Interactive</li> <li>enthusiastic teaching! +2</li> <li>Nice practice time and pair coding</li> <li>Going back to revise the pull requests. I learnt alot from that. +1</li> <li>Responded to feedback</li> <li>Frequent breaks. +1</li> </ul>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Made a mistake on a pull request and got time shortage for merge part</li> <li>PR opened when the develop branch failed seems not update automatically   when develop was fixed</li> <li>correct pull request was overwirtten</li> <li>exercise goals not always clear</li> <li>Material should be more informative</li> <li>Screensharing on linux</li> <li>[Richel moved this to here] I couldn't start my own HackMD doc for   live coding with subscribing.</li> </ul>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>Speed a litte bit to make decrease in the lecture part</li> <li>More discussion around appopriate classes/structs for solving project.</li> <li>Work with an established exercise</li> <li>I would have liked more indept discussion about data structures and   algorithms. Here you didn't say much more than   that they are concepts you can use. (+1)</li> <li>write some light program thats can actually do something,   e.g., visualize the bacteria moving?</li> <li>explain how to setup CI locally? so it automatically check   the sutomation before push</li> <li>It may sometimes make sense to be in groups of 3 (vs 2) - but   I guess this is subjective</li> <li>HackMD pages for shared coding? Maybe I missed it but I think it could be   better than screensharing. - Students get thier own mini projects to go thru   all the practices. Rather than scattered excercises.</li> <li>state goals before each break out room</li> </ul>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/#reflection-on-lesson-by-richel","title":"Reflection on lesson by Richel","text":"<p>(also today, no time to properly reflect) (nice, I have the literal text!)</p> <ul> <li>Responded to feedback</li> <li>Refelcting on earlier feedback +1</li> </ul> <p>Sharing my reflections with the students was appreciated. This was an experiment. Will keep doing so.</p> <ul> <li>Found the pull request aspect of the practical useful +1</li> <li>The pull request part was really imprssive</li> <li>Testing proper git workflow +1</li> <li>Going back to revise the pull requests. I learnt alot from that. +1</li> <li>Practising with opening issues, assigning them, opening pull requests on   GitHub, as well as dealing with merge conflicts</li> </ul> <p>During the day, I gradually made the team's workflow more formal. One can argue if this is part of a Programming Formalisms course, as it does not involve technical terms. The students do think it useful :-)</p> <ul> <li>Git pairing is more efficient pair coding</li> </ul> <p>I am happy to see at least two learners have seen the light :-)</p> <ul> <li>enthusiastic teaching! +2</li> </ul> <p>I am happy this did not backfire in this course :-)</p> <ul> <li>Nice practice time</li> <li>Hands on</li> </ul> <p>Seems like a right mix between exercises and theory then? I know Lars called the day 'Exercise-heavy' and I without discussion agree I do do more exercises. Again, it is the tension between practice and theory in the Programming Formalisms course :-)</p> <ul> <li>CI is quite cool.</li> </ul> <p>Happy to see at least one learner seen this, even though the CI lecture felt weak and misplaced to me. But yes, they saw it in actions from PRs.</p> <p>Interactive</p> <p>I did take the time for discussions. It did slow the day down!</p> <p>HackMD is good for discussion</p> <p>We did few exercises there and indeed HackMD has its place.</p> <p>Frequent breaks. +1</p> <p>I am happy people enjoy my breaks management.</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/#reflection-on-what-held-us-backreflection-on","title":"Reflection on 'What held us back?'Reflection on '","text":"<ul> <li>exercise goals not always clear</li> </ul> <p>Yup, I did add more goals to exercises, but due to last-moment changes I did not always do so. Agreed!</p> <ul> <li>Material should be more informative</li> </ul> <p>Again, indeed, show more books and go deeper.</p> <ul> <li>I couldn't start my own HackMD doc for live coding with[out] subscribing.</li> </ul> <p>Weird, AFAIR, with a GitHub account this works with a couple of clicks...?</p> <ul> <li>Made a mistake on a pull request and got time shortage for merge part</li> <li>PR opened when the develop branch failed seems not update automatically   when develop was fixed</li> <li>correct pull request was overwirtten</li> </ul> <p>Good! Real-life experience with PRs :-)</p> <ul> <li>Screensharing on linux</li> </ul> <p>Yes, this really holds one back when pair programming :-/</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_4_reflection/#reflection-on-what-can-we-improve","title":"Reflection on 'What can we improve?'","text":"<ul> <li>Speed a litte bit to make decrease in the lecture part</li> </ul> <p>Yup, the -probably faster- students agree with me that the discussions slowed down the pace. This is one learner here, where one learner appreciated the discussions, so I consider this balances.</p> <ul> <li>More discussion around appopriate classes/structs for solving project.</li> <li>I would have liked more indept discussion about data structures and   algorithms. Here you didn't say much more than that they are concepts   you can use. (+1)</li> </ul> <p>Yup, I pick to invest more time in design in my course time, even though it should have been done in the day about design. This cost me preparation (on that), lecturing and discussing deeper things. The course teacher have discussed to improve on this.</p> <ul> <li>Work with an established exercise</li> </ul> <p>Yup, exercises will mature to fit the course better. Unsure if 'established' indicates that the exercises seem too weird? As far as I see, I do have clear and relevant goals in mind.</p> <ul> <li>state goals before each break out room</li> </ul> <p>Agreed, I will try better!</p> <ul> <li>explain how to setup CI locally?   so it automatically check the automation before push</li> </ul> <p>I will at the start</p> <ul> <li>[ ] Explain how to setup CI locally:    AFAIK, one cannot try before pushing    from a .yaml file yet. But <code>ruff .</code>    works to lint :-)</li> </ul> <ul> <li>It may sometimes make sense to be in groups of 3 (vs 2) - but   I guess this is subjective</li> </ul> <p>I agree, especially when one cannot share his/her screen. Due to the random assignment of people (priority is to be quick!), this is pushed to the background</p> <ul> <li>[ ] Share</li> </ul> <ul> <li>write some light program that can actually do something,   e.g., visualize the bacteria moving?</li> </ul> <p>Ha, will do so now! We need it for profiling :-)</p> <ul> <li>HackMD pages for shared coding? Maybe I missed it but I think it could   be better than screensharing.</li> </ul> <p>This may show I did a bad job is checking that pair programming is used in all exercises! On the other hand, I do agree with the idea and I will encourage pairs to do this if they feel this is better!</p> <ul> <li>[ ] Address</li> </ul> <ul> <li>Students get their own mini projects to go through all the practices.   Rather than scattered exercises.</li> </ul> <p>We picked a shared project, for many reasons: (1) the bigger the team, the more formal procedures shine, (2) we should work on the same simple exercises tailored to everyone (i.e. imagine a learner having a string-theory quantum-black hole project :-) ). The course -I agree- is getting more cohesive, yet I agree the exercises seem scattered. We have never gotten this far with a group yet and still we need to go further: the dream is developing one project in a week that actually works!</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_5_reflection/","title":"Reflection day 5 autumn 2023","text":"<p>Before the lesson, I was already regretting the fact that such a cool topic is given on the last day of the course: I was most tired that day for the regular preparation time (from 5:00-9:00) and was least productive due to that.</p> <p>Additionally, I felt the need to spend one hour on the Retrospective by the learners and adept. I did, at the cost of other things.</p> <p>I will use the Retrospect to guide the rest of my reflection.</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_5_reflection/#only-day-5","title":"Only Day 5","text":"","tags":["reflection"]},{"location":"reflections/2023_autumn/day_5_reflection/#what-went-well","title":"What went well?","text":"<ul> <li>Pairing works much better +1</li> </ul> <p>I mentioned I/we intended to nearly-always do Pair Programming at the start of my lecture, when I discussed the Retrospective of the day before.</p> <ul> <li>Using HackMD for UML was very nice. +2</li> <li>Using HackMD to code rather than screen sharing +3</li> </ul> <p>I mentioned that any useful way to collaborate are encouraged, at the start of my lecture, when I discussed the Retrospective of the day before.</p> <ul> <li>nice too have R examples +1</li> </ul> <p>Our two R users deserved some love :-)</p> <ul> <li>learning what modules are</li> <li>Activity diagram +2</li> <li>Once it worked, plantUML in VS code was very nice</li> </ul>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_5_reflection/#what-held-us-back","title":"What held us back?","text":"<ul> <li>too little time for material and exercises of morning session</li> <li>did not finish all of morning lecture +1</li> <li>More info about use-cases/activity diagrams. Use, differences etc.</li> <li>morning exercises rushed</li> <li>maybe somewhat unclear difference between use-case and activity diagrams +1</li> <li>UML issues +3</li> <li>Still material and exercise description</li> </ul> <p>I won't discuss the morning section, as it was not me that taught it.</p> <ul> <li>The presentation is less informative to follow on</li> </ul> <p>Unsure if this was about my part. If it was about my part, unsure what it means.</p> <ul> <li>Still material and exercise description</li> </ul> <p>This applies to both halves of the day. I added explicit goals more often, yet did not always do due to choices I made regarding time management.</p> <ul> <li>profiling part was a little diffuse</li> </ul> <p>Due to I chose to go through the Retrospect of the day before, indeed, the exercise was a little diffuse.</p> <ul> <li>some changes are not staged after Git pulling. No change..</li> </ul> <p>This is a misconception and/or git feature.</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_5_reflection/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>spend more time on use-case and activity diagrams +3</li> <li>provide the uml code for diagram examples in lecture</li> <li>talk more about design patterns +1 or maybe share some nice tutorials</li> <li>Written instructions for exercises</li> <li>Be clearcut on what to do in the exercise.</li> </ul> <p>This is morning session, no comment. I copied the lines that can apply to both here below.</p> <ul> <li>Written instructions for exercises</li> <li>Be clearcut on what to do in the exercise.</li> </ul> <p>I agree, I chose not to have time to do this for all exercise.</p> <ul> <li>Have a mini start-to-end exercise after the course where we can spend half   the day running through a small piece of coding. Practise all of it.</li> </ul> <p>I think this is an interesting idea. I do think building up a shared repo is more insightful though. OTOH, for the lesson on optimization, it may be superior.</p> <ul> <li>examples for optimisation showing well- and poorly-optimised examples +1</li> </ul> <p>Great idea! I somehow lost some old examples and had not had the time to find this.</p>","tags":["reflection"]},{"location":"reflections/2023_autumn/day_5_reflection/#conclusion-day-5","title":"Conclusion Day 5","text":"<p>I am happy to see the learners and I agree on what can be improved :-)</p>","tags":["reflection"]},{"location":"reflections/2023_summer/","title":"Reflection Richel, 2023-06-02","text":"<p>(note that below there is an interview with a student)</p>"},{"location":"reflections/2023_summer/#adaptation-to-students","title":"Adaptation to students","text":"<p>My part of the course turned out to be below the level of the students. I am happy I noticed this quickly, from an exercise done at my first course session. I am happy I adapted to this immediately and I knew it would result in less well-prepared lectures, as I would not have the time to go deeper than expected.</p>"},{"location":"reflections/2023_summer/#one-central-non-biology-theme","title":"One central (non-biology) theme","text":"<p>I feel the course could be streamlined by doing a full academic research in a formal way: start with paper, then design, then code. This was the original idea as well: to do a DNA alignment. Due to us teachers adapting to the students (a good thing!), the unity of the material was ruffled up a bit.</p> <p>I will suggest to -as teachers- to work on a simple project together from start to end. I feel it should not be a biological project, but something on a simple-to-understand dataset.</p>"},{"location":"reflections/2023_summer/#practicals","title":"Practicals","text":"<p>I should let the students start working on the bigger project earlier, so they feel more comfortable working in a more formalized environment. The first session can then be spent to explain the file structure of that project.</p> <p>Next time, I should use one project: initially, I felt it was better to split up, but it would be better if the students don't move between GitHub repos all the time.</p> <p>When pair programming, always use 30 mins as a minimum: 15 minutes is too short to get a commit in.</p> <p>Make <code>ruff</code> friendlier: just use the default settings; the students felt it held them back, and in this context I agree: whitespace errors are not worth it.</p> <p>Use the bigger project earlier and more often: add a CI script for big-O and profiling, that runs from the start, so the students are comfortable using it for the part on optimizing.</p>"},{"location":"reflections/2023_summer/#academics-are-the-audience","title":"Academics are the audience","text":"<p>I agree with some students that it is the academic paper where the design starts and with other students that we should keep the industrial approach as well.</p> <p>I will volunteer to have a more streamlined course order with:</p> <ul> <li>1a Academic paper, especially a pre-registered paper as an example</li> <li>1b Industrial design of the same problem</li> <li>2 Design</li> <li>3 TDD</li> <li>4 Programming details</li> <li>5 In the end, go back to the paper again</li> </ul>"},{"location":"reflections/2023_summer/#reflections","title":"Reflections","text":"<p>I am happy we did Reflections, as these help us change the direction of the course. OTOH, due to this I asked for less feedback and I missed discussing this openly with students.</p> <p>I do feel the students have been too mild on me. Especially the last day, I wanted to hear that I was not as concise as before (as I wasn't). Due to this, I would enjoy a more ruthless and anonymous evaluation at the last day.</p> <p>I feel all teachers could have learned more would the evaluations be anonymous.</p>"},{"location":"reflections/2023_summer/#course-as-part-of-the-curriculum","title":"Course as part of the curriculum","text":"<p>I wonder if we reached our own goals. Here I evaluate, from the course description:</p> <p>This course aims to give life scientists, bioinformaticians, and other scientists with some experience in programming and scripting</p> <p>The audience is clear.</p> <p>an understanding of the underlying principles of software development, design, and programming.</p> <p>I think we did.</p> <p>The course aims to strengthen the understanding of more advanced programming concepts,</p> <p>Did I?</p> <p>ability to produce more reusable scripts through modular programming</p> <p>Was that so?</p> <p>and to enable a better understanding of how to evaluate a script or programs performance.</p> <p>This was done by me, in a meagre way.</p> <p>We will cover an introduction to Algorithms and Data structures,</p> <p>This was done by me, in a meagre way.</p> <p>Programming Paradigms especially structured and object oriented programming and to give a overview of other paradigms like functional programming.</p> <p>AFAICS, we did not.</p> <p>Modular development</p> <p>Unsure.</p> <p>and (code) reusability,</p> <p>Unsure.</p> <p>testing</p> <p>This was done by me, quite extensively.</p> <p>and optimisation.</p> <p>This was done by me, in a mediocre way.</p> <p>We will cover theory with bridging practical examples and applications</p> <p>I know the students wanted more practical examples in parts taught by other teachers.</p> <p>to enhance the theoretical understanding of the principles.</p> <p>Is this really the goal? Should it? Shouldn't is be: 'to be able to design, write, test and optimize a research project in a structured way'?</p>"},{"location":"reflections/2023_summer/#definition-of-quality","title":"Definition of quality","text":"<p>I still struggle to see how we answer the question: 'How do we teachers know we did a good job teaching?'.</p>"},{"location":"reflections/2023_summer/#ideas-for-next-year","title":"Ideas for next year","text":"<ul> <li>Add an academic starting point, e.g. start from writing a paper.    It would make the course similar to 'Tools for reproducible research',    yet more focused on how to use these.    'Programming formalisms for research/open science/preregistrations'</li> <li>As instructors, do one big project together, to align our ideas</li> <li>Add a speed profile to the big project</li> <li>Add a big-O measurement to the big project</li> <li>Get at least 1 anonymous evaluation</li> </ul>"},{"location":"reflections/2023_summer/#appendix","title":"Appendix","text":""},{"location":"reflections/2023_summer/#interview-with-a-student","title":"Interview with a student","text":"<p>I contacted a student after the course and asked some questions.</p> <p>In front of each bullet point, it can be read: 'The student thinks/suggests/feels that ...'</p> <ul> <li>It was useful to hear the names of all the concepts</li> <li>Day 1 was mostly git, which is so common that making this into a course    requirement would not have been strange</li> <li>There should be less theory. 'If there is no time for an exercise applying    a certain piece of theory, avoid talking about that piece of theory'</li> <li>Both academic and industrial practices should be mentioned</li> <li>Homework would be a good addition to the course.</li> </ul>"},{"location":"reflections/2024_autumn/","title":"Reflections autumn 2024","text":"<ul> <li>2024-11-15 by Richel</li> <li>2024-11-18 by Richel</li> <li>2024-11-19 by Richel</li> <li>2024-11-20 by Richel</li> <li>2024-11-21 by Richel</li> <li>2024-11-22 by Richel</li> </ul>"},{"location":"reflections/2024_autumn/20241115_onboarding_richel/","title":"Onboarding","text":"<p>I predict few learners, max 5 in total, with most arriving before 9:30. I predict 1 teacher is enough. Let's see...</p> <code>t</code> <code>n</code> Events 8:52 1 A joined, no talk 8:53 0 A left 9:54 0 . 9:02 0 . 9:03 1 B joined, talk with B 9:04 2 C joined 9:05 1 B left to work in silence and will come back with questions 9:06 1 C in breakout room with BC 9:07 1 . 9:14 1 . 9:15 1 B back for a question 9:16 1 C done and left 9:17 1 B leaves room to work in silence 9:18 0 . 9:21 0 . 9:22 1 D comes in, leaves 9:23 0 . 9:39 0 . 9:40 1 E joins, technical problems to get to talk 9:45 0 E was already good to go and leaves 9:46 0 . 9:59 0 . 10:00 0 . <ul> <li>Names of learners are pseudonimized to A, B, C, etc.</li> <li>Names of teachers are the standard abbreviations: BC, LE, RB</li> <li><code>t</code>: time</li> <li><code>n</code>: number of learners</li> <li>max amount of learners: 2</li> <li>amount of teachers that would have sufficed: 1</li> <li>Use <code>r</code> as number of registrations where <code>R</code> is 20</li> <li>Prediction that would be correct:<ul> <li>Amount of learners to expect: <code>r / 5</code></li> <li>Amount of learners to have questions: <code>r / 10</code></li> <li>Amount of learners to pop in and out: <code>r / 10</code></li> <li>Amount of learners expected after 9:30: <code>r / 20</code></li> <li>Amount of teachers needed: <code>r / 20</code></li> </ul> </li> </ul> <p>There were multiple learners that did not understand what was expected of them.</p> <p>-</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241118_richel/","title":"Reflection","text":"<ul> <li>Date: 2024-11-18</li> <li>Author: Richel</li> </ul> <p>Today I did not teach, I was just a technical assistant. I was, however, quite visible in the background on purpose: I always feel this first day is too much talk and too little action.</p> <p>The confidence questions did not match the course content, not everything had an exercise. I would score low on these myself.</p> <p>The learners, however, are awesome. I look forward to work with them.</p> <p>Here I take some points of the Retrospect, to see if I will do well:</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241118_richel/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<p>A: Good discussions in breakout rooms, great support, diverse experience of audience, frequent breaks</p> <p>I will do</p> <p>A:Discussion A:Discussions in breakout rooms</p> <ul> <li>A:Discussions</li> <li>A:The explanations and discussions</li> <li>A:Discussions on real-life situations</li> </ul> <p>I hope I will do</p> <p>A: Really well developed documentation with instructions and examples, hints etc</p> <p>I hope I will do</p> <p>A:Answering quickly on the team sessions to questions</p> <p>I hope I will do</p> <ul> <li>A: Having clear example on what to do help us to finish and understand the exercises better</li> </ul> <p>I hope I do.</p> <p>I hope I do.</p> <ul> <li>A: Having access to examples of done documents.</li> </ul> <p>My material is ready and tested.</p> <ul> <li>A:Interactive discussions, input from everyone.</li> </ul> <p>I hope I do.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241118_richel/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<p>A: In some cases lack of concrete examples, the project itself wasn't that integrated into some of the exercises, sometimes not clear how to apply to research, often topics are more applicable to rly large projects, lecture closely matched course document</p> <ul> <li>A:</li> <li>A:Short times in the breakout rooms</li> </ul> <p>I hope I do better.</p> <ul> <li>A: Sometimes goals werent super clear (ie how to write requirements from scratch)</li> </ul> <p>I hope I do better.</p> <ul> <li>A: Clearer documentation in some points</li> </ul> <p>I hope I do better.</p> <p>A: Not getting used to the abbreviations quick enough and then not knowing what was being discussed</p> <p>I hope this does not apply to my content.</p> <ul> <li>A: course content in the website changing when it was already needed</li> </ul> <p>Yes, indeed, the course content should have been in place before teaching. I do thing it is great that we update the course content immediately!</p> <p>A: Unclear instructions on the assignments A: No clear instruction on what to do. Having example will help. A: Unclear directions</p> <ul> <li>A: Not accurate information (links, instructions) in the course documents.</li> </ul> <p>I think I have clear instructions/directions/information, with worked-out answers and videos.</p> <ul> <li>A: For some discussions there was very limited time in breakout rooms</li> <li>A: Limited time</li> </ul> <p>I talk less, to make sure there is enough time in the breakout rooms.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241118_richel/#what-could-we-do-to-improve-learning-what-can-we-invent_1","title":"What could we do to improve learning (What can we invent)","text":"<p>A: Write a clearer documentation in some points and perhaps a \"dictionary\" for main terms</p> <p>I think my content is super clear already :-)</p> <p>A:More examples</p> <p>I feel my content has the right amount of examples :-)</p> <p>A:Write tasks more clearly (for example \"Task 1: Do this or that\")</p> <p>I hope I do.</p> <p>A: More hidden hints with correct answers</p> <p>I felt my material does not need this. But this learners is right: it should be there! I've added this. Thanks learner!</p> <p>A: Have a terminology section where abbreviations or more technical terms are defined in a clear and easy to find manner</p> <p>I think I don't use unexplained abbreviations.</p> <p>A: Separate presentation and course document, more info on how to apply to 1-person research (esp. risk section), Prepare a gold-standard requirements file so all participants can be on same page</p> <p>I think I cleanly separate presentation and exercises. I think I apply everything I show to research. I show videos as a gold standard.</p> <p>A: Since we are a small group, we could work independently and share with everyone, instead of breakout rooms</p> <p>I see the joy of silence too. I've added one hour of silence, to study. Duos are best for learning, so I will do that the second hour.</p> <p>A: Hints with instructions and directions for technical parts and possible issues</p> <p>I feel my instructions are clear. There will be many individual things going on. We'll be in a team, humans differ and I cannot even write down all future technical problems.</p> <ul> <li>A: Make a concrete example not specifically related to the exercise,   especially given a limited time to do it.</li> </ul> <p>I hope I do better.</p> <p>A: Phrase the exercises concisely already in the course website</p> <p>I think I do: I even have videos :-)</p> <p>A: Give an example before move into the assignment</p> <p>I do think this applies.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241118_richel/#more-reflecting","title":"More reflecting","text":"<p>I feel I do most already, but I will continue preparing my material with this in mind. Let's see what the learners think.</p> <p>For a first day, I expected the schedule of the week to be discussed.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/","title":"Reflection","text":"<ul> <li>Date: 2024-11-19</li> <li>Author: Richel</li> </ul> <p>Yesterday, I felt bad because I could not help as good as I could. This was because I did not know what the learners needed to do. I hope next time, the exercises are clear enough for me to be able to help.</p> <ul> <li>[x] Request worked-out examples of other teachers</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/#first-half","title":"First half","text":"<p>I started with issues, kanban board and developer experience. I talk until 10:42, then sent the learners to rooms in duos. I could see the issues come in and saw things happening at the kanban board. I checked the rooms regularily. I think this was a good enough session.</p> <p>The TDD part started explaining why it is important, how the exercise needs to be done and I put the learners in separate rooms at 11:22. I checked rooms regularily and had 4x a question. At 13:00 I will do a demo together with a learner, to show the full workflow. I think I have found a great volunteer to do TDD with.</p> <p>I think the order was incorrect:</p> <ul> <li>[x] First discuss <code>assert</code></li> </ul> <p>I wanted to do TDD first, because I feel that learners need a lot of time to read in peace and quiet. Because I felt the pressure of the limited schedule, I probably put TDD in a too early slot.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/#second-half","title":"Second half","text":"<p>As far as I could see, the simpler exercises were done successfully. Problems are the exercises to work on the project: they are too vague and/or complex. I had to tell how to create an issue and work from it.</p> <ul> <li>One solution would be to have a more pre-fabricated project,   with a simpler setup, with pre-written requirements   and issues.</li> <li>[x] Consider this</li> </ul> <p>Or: I feel the 'when do, work on the project' idea does not work well: the step is too big,</p> <p>Let's go through the Retrospect.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/#retrospect","title":"Retrospect","text":"","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Was interesting to discuss and read more, and figure it out by ourselves.</li> <li>A: Teamwork and discussions was good</li> <li>A: Having practical example really help and discuss it. Video helps too.</li> <li>A: Examples in the form of screenshots</li> <li>A: Examples in the documentation, the interaction activity between teacher and student, the discussion.</li> <li>A: Working together on problems</li> <li>A: Having examples in the information pages, and answers</li> <li>A: Better examples and clearer instructions</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: A very fast pace, at times there was too much info to absord (ie unit testing)</li> <li>A: Lack of time to complete the exercises.</li> <li>A: Little time to work on exercises after understanding all the info</li> </ul> <p>I agree, I should slow down more.</p> <ul> <li> <p>[x] Slow down, actually follow the pace of the learners   Ignore the schedule more</p> </li> <li> <p>A: Having to juggle both doing something for the project and also focusing on the exercises at the same time</p> </li> </ul> <p>I super agree! No idea how to solve this now ...</p> <ul> <li>A: Not knowing from the start exactly what to do during the exercises</li> <li>A: From simple example to applying it to project design in a short period of time is quiet challenging.</li> <li>A: Not knowing from where to start and to where to go</li> </ul> <p>Yup, the project exercises are more vague/complex.</p> <ul> <li> <p>[x] Reduce the project exercises for now</p> </li> <li> <p>A: Laggy teaching video</p> </li> <li>A: Teaching video not working properly, wasn't able to see the code properly because of this.</li> </ul> <p>Agreed, I did not check. I did not know VSCode slows down a video recording, maybe my laptop is not powerful enough?</p> <ul> <li>A: Not knowing where to find certain things (kanban board, the correct learners folder etc)</li> </ul> <p>I should fix this with more screenshots next time</p> <ul> <li> <p>[x] Describe better where to find things</p> </li> <li> <p>A: Not enough time for the exercises, not knowing the time limit for the exercises.</p> </li> </ul> <p>I can be more specific there.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<p>Slow down:</p> <ul> <li>A: Give more time to absorb information before having to apply it on a big project</li> <li>A: Focusing on less topics and working on those more deeply and with more time</li> <li>A: take into account the time that these feedback sessions need (second day that the last exercise session is cut short)</li> <li>A: Give more time</li> <li>A: Maybe more time or simpler(focused) exercises.</li> </ul> <p>Simpler exercises:</p> <ul> <li>A: Either focus on simpler exercises and learning or focus on project work</li> <li>A: Maybe more time or simpler(focused) exercises.</li> <li>A: More clear tasks</li> </ul> <p>Simpler exercises versus course project</p> <ul> <li>A: Either focus on simpler exercises and learning or focus on project work</li> </ul> <p>Video:</p> <ul> <li>A: In the teaching video show both the code and where it is being copied from, for clarity</li> </ul> <p>Time:</p> <ul> <li>A: Tell us how much time we have for completing all exercises.   Helps us to not spend too much time on just one of the exercises   and then the time is up without us knowing.</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241119_richel/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>[x] Fix video</li> <li>[x] More time (in multiple forms):<ul> <li>Discuss with team: should I/we reduce my/own content and/or remove the project?<ul> <li>RB: I volunteer to reduce content and suggest to keep the project</li> </ul> </li> </ul> </li> <li>[x] Mix of simple exercises and project work:<ul> <li>Discuss with team: should I/we remove the project or schedule it as project hours?<ul> <li>RB: I volunteer to schedule some of my hours as project hours</li> </ul> </li> </ul> </li> </ul> <p><code>[end of Retrospect]</code></p> <p>For tomorrow, I will slow down and focus on simpler exercises.</p> <p>I feel I need to rethink complex content, such as formal unit testing:</p> <ul> <li>Should I lecture more? Unsure</li> <li>Should there be exercises on the content only? Maybe</li> </ul> <p>I think the Retrospect takes too long. 3 minutes. I prefer it to be in a form where learners can leave when done.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241120_richel/","title":"Reflection","text":"<ul> <li>Date: 2024-11-20</li> <li>Author: Richel</li> </ul> <p>I am curious what the learners give back today again: yesterday there was no unambiguous feedback for Lars, where there were some clearly for me only. And I've listened, as can be seen in my lesson plans. It heavily improved my lessons!</p> <p>Before teaching, I already see that there are 17 branches and 13 Pull Requests. Bj\u00f6rn did a great job there!</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241120_richel/#during-teaching","title":"During teaching","text":"<p>I predict that getting VS Code to use tests is a thing mentioned at the Retrospect.</p> <p>I think it went well.</p> <p>I am too tired, after working too many hours yesterday.</p> <p>Let's see what the learners say, then back to work.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241120_richel/#retrospect","title":"Retrospect","text":"","tags":["reflection"]},{"location":"reflections/2024_autumn/20241120_richel/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: More time to finish exercises</li> <li>A: Working in pairs and doing exercises together</li> <li>A: Taking a longer time to do exercises and learn and understand what we are doing</li> <li>A:Very nice graphics for helping do exercises today</li> <li>A:Getting clearer examples on the formal testing</li> <li>A:Clear instructions and more time to finish.</li> <li>A:Appropriate time to complete the exercises and having goos resources by hand to check theory and examples.</li> <li>A: Having enough time to understand and to work together the exercise really help a lot to understand and finish the task.</li> <li>A: Working together, discussion, exercises.</li> <li>A: Pair programming exercise was really nice, testing documentation was great</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241120_richel/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: the pull request exercise and the pretend code review exercise were very similar.</li> <li>A: The morning lectures seem didn't explain clearly</li> </ul> <p>Not mine.</p> <ul> <li>A: Testing could've been a bit deeper. Covering things like mocking. No idea how good pair programming is supposed to look like in practice (only in theory).</li> </ul> <p>Ha, an advanced learner!</p> <p>As predicted</p> <ul> <li> <p>A: VS code not cooperating with the testing module</p> </li> <li> <p>A: Didn't know exactly how to do the formal testing in pycharm</p> </li> <li> <p>A: Such lack in code knowledge.</p> </li> <li> <p>A: Certain knowledge gaps when it comes to python coding</p> </li> <li>A: Unit testing being a difficult concept</li> <li>A: Some exercises was a bit confusing (ex Exercise 2: put example code to fit the testing framework)</li> </ul> <p>Too bad, I tried hard. Will look again later</p> <ul> <li> <p>[x] Make clearer where to put code</p> </li> <li> <p>A: Coding knowledge influence the speed to do the exercises and how much we understan.</p> </li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241120_richel/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Give more practical examples of git forking and branching and when it is appropriate to use them.</li> </ul> <p>Not mine.</p> <ul> <li>A: Make the lecture clear and concise. Better to give a practical examples than just explain the concept.</li> </ul> <p>Not mine, I think.</p> <ul> <li>A: Maybe more practical examples.</li> </ul> <p>Not mine, I think.</p> <ul> <li>A: Maybe perform a quick round of pair programming with the teachers,   to me it was not clear how to behave as navigator and I felt like I   was micromanaging and being a bad navigator. Refer to online documents for   further research in testing (maybe I just missed it). Distribute a cheat   sheet after each day summarizing most important?</li> </ul> <p>Agree. I doubted to do another demo during lesson, but did not want to disturb.</p> <ul> <li> <p>[x] Add this to the lesson, as an exercise</p> </li> <li> <p>A: Include tutorial link or something to get testing to work in another   IDE than vs code, instead of just saying \"try to get it to work in your IDE\".</p> </li> </ul> <p>We recommend VS Code. We cannot write docs for all others.</p> <ul> <li>A: Maybe have a example on testing the code.</li> </ul> <p>Agreed, no time yet</p> <ul> <li> <p>[x] Show how to get VSCode testing running in video</p> </li> <li> <p>A: More examples for each topic</p> </li> <li>A: If possible simplify things even further,   or expand on rationale behind each step not just \"big picture\"</li> <li>A:Having \"extra\" exercises that are more difficult   that one can try when done with the regular exercises.</li> </ul> <p>Unsure how to deal with this now. Need sleep first.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241120_richel/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<p>Sleep.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241121_richel/","title":"Reflection","text":"<ul> <li>Date: 2024-11-21</li> <li>Author: Richel</li> </ul> <p>I enjoyed the day a lot, I enjoyed working with our learners. I do notice that the learners are getting tired. Same for me: I should sleep ...</p> <p>But first, let's go through the retrospect:</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241121_richel/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Good with range in difficulty. Group exercises are great!</li> </ul> <p>Yay!</p> <ul> <li>A: Bigger range in difficulty of exercises</li> </ul> <p>Yay!</p> <ul> <li>A: Group learning is always fun. Frequent brakes.   The reading for a few minutes into discussion is nice if you call someone out!   otherwise it drags a bit bc no one dares to speak first</li> </ul> <p>Yup, he/she is right. I should also mention that I will do so before the reading.</p> <ul> <li>A: The tips and code snippets for helping do exercises</li> </ul> <p>If applies to me: yay!</p> <ul> <li>A: Range of difficulties help assess first the things you understand.   Pair programming really help.</li> </ul> <p>Yay!</p> <ul> <li>A: Designated time for reading is good!</li> </ul> <p>Yay!</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241121_richel/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Not following schedule is a bit confusing,   I think we worked on thursday, tuesday and wednesday today.</li> </ul> <p>Learners is right: I adapted it to the learners' pace</p> <ul> <li>A: felt like some topics were almost skipped over (obviously due to time).   But if we dont have time for them maybe we do not need to bring them up.</li> </ul> <p>I did move things, but not have skipped anything yet.</p> <ul> <li>A: The concepts themselves being very abstract and difficult</li> </ul> <p>Unsure if this applies to me.</p> <ul> <li>A: Some of the topics are hard to learn while not actually applying them.   E.g. while I think I have a good grasp of what modular programming is   I'm not sure I could recognize it.</li> </ul> <p>Does not apply to me.</p> <ul> <li>A: Applying the lesson directly to the field that you are not familiar with   kinda need more time. Additionally, just watching lecture video for a   specific topic to learn sometimes is not helpful cause there are concept   introduce that was not mentioned in class.</li> </ul> <p>Does not apply to me.</p> <ul> <li>A: Starting the day with the most difficult part of the day   (before properly waking up haha)</li> </ul> <p>Does not apply to me.</p> <ul> <li>A: The youtube lecture was a bit hard to follow,   could be better with more examples and images.</li> </ul> <p>Does not apply to me.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241121_richel/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe use the workflow: individual reading -&gt; discussion   -&gt; exercises in group for stuff like modular programming.   Also be more clear with the schedule   I got lost a few times today after zoning out.</li> </ul> <p>This is great!</p> <ul> <li>A: Give more concrete examples for the abstract concepts   (like what are objects in the programming world)</li> </ul> <p>I feel this does not appy to me.</p> <ul> <li>A: The function design discussion was nice,   maybe follow that format more.</li> </ul> <p>I feel encouraged here :-)</p> <ul> <li>A: Maybe have a table of definitions and their equivalent names in   object oriented programming and non-object-oriented, including the   relationsnhips between them. (classes, methods, functions etc)</li> </ul> <p>I volunteered to do so.</p> <ul> <li>A: Give code examples of modular programming and refactoring</li> </ul> <p>I feel this does not appy to me.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241121_richel/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>Changing schedule is a problem<ul> <li>[x] Explain we do student-centered learning on Day 1 of the course   #111</li> </ul> </li> <li>[x] Make list of definitions #112</li> <li>[x] More code examples #113</li> <li>[x] Remove YouTube video for modular programming   #114</li> <li>[x] Give more concrete examples for the abstract concepts in OOP   #115</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/","title":"Reflection","text":"<ul> <li>Date: 2024-11-22</li> <li>Author: Richel</li> </ul> <p>I was happy to be with the learners, but too tired to enjoy it. I did not like talking so much: I'd prefer to have have done an exercise instead. I decided to go through the theory, but I could have re-organize the content, making it more exercise focussed.</p> <ul> <li>[x] Make more exercise-focussed</li> </ul> <p>I also could have done better: the speed optimization misconceptions could be done in small groups and discussed.</p> <p>Also, the references to the literature are too diffuse/sprinked: I want to see big lists everywhere :-)</p> <ul> <li>[x] Copy refs</li> </ul> <p>Also, I am unconvinced about the use of Big O in its current form: it should have been about predictions. It should be scheduled after run-time speed optimization.</p> <ul> <li>[x] Schedule big O after run-time speed optimization</li> </ul> <p>I predicted I would be tired at the end of the course and I predicted these would be my worst lectures, as I felt the same in earlier iterations of the course.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#whole-course","title":"Whole course","text":"<p>I feel I did a reasonable job. We all (teachers and learners) helped create a warm atmosphere in the course.</p> <p>My favorite improvement was my exercises: thanks to the Retrospect at day 1, I suddenly understood what was needed. 'No plan surives first contact with the enemy', they say, for me it was more that the retrospect made me prioritize better.</p> <p>I would now say that a good exercise is:</p> <ul> <li>Clearly described what to do</li> <li>Has a worked-out solution</li> <li>If possible: has multiple skill levels</li> </ul> <p>I want to have this in all my exercises, before next course iteration.</p> <ul> <li>[x] Make all exercises like that</li> </ul> <p>I enjoyed the team of teachers. My favorite is how we can flat-out disagree, without any drama.</p> <p>The course is a complex beast, with many dependencies between lessons. I wonder why we do not have written a script to check if our schedule holds?</p> <ul> <li>[x] Make stub of script, to be used in CI</li> </ul> <p>I've added domain-specific knowledge, in the form of biology. I think it should be general things we have exercises of</p> <ul> <li>[x] Remove biology things</li> </ul> <p>I think the project should be worked on more and be simplified. Maybe start with a proper/pre-fab requirements list. Branch of from the main function more.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#evaluation-results","title":"Evaluation results","text":"","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#what-did-richel-do-well","title":"What did Richel do well?","text":"<ul> <li>I think Rich\u00e8l carry this course. He explained well his lectures and give very good exercises. He asked good questions that challenges our thinking. He seems very prepare everyday and always there to help. Additionally, he listens to comments and give really good insight.</li> <li>Involving everyone with the discussions</li> <li>Explain everything super well and be very positive about everything</li> <li>Really great engagement and explanations. Calling people out for discussion greatly improved flow. Really felt like his heart was in the course.</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#what-could-richel-improve","title":"What could Rich\u00e8l Improve","text":"<ul> <li>He is really good already. Just continue it.</li> <li>Clearer exercises. This became clearer as the course went along</li> <li>Remake the video that was in one of the days that lagged</li> <li>Tbh I'm really not finding anything.</li> </ul> <p>Uhhh, are they too friendly? Let's compare:</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#what-did-bjorn-do-well","title":"What did Bj\u00f6rn do well","text":"<ul> <li>I like his lecture in git and giving nice exercise on that.</li> <li>Clear theory parts on the subjects</li> <li>Explain very vague concepts in an understandable way</li> <li>Good help during the exercises.</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#what-could-bjorn-improve","title":"What could Bj\u00f6rn Improve","text":"<ul> <li>I think next time avoid just reading the page.   Simplify things and asks questions and encourage student to answer.</li> <li>Clearer exercises</li> <li>When asking questions,   make them more specific so that people are more apt to answer</li> <li>Was at points difficult to follow the lectures,   because he just read the course material out loud.   Could benefit from a more free style of lecturing!</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#what-did-lars-do-well","title":"What did Lars do well","text":"<ul> <li>Lars really give good insight most of the time   while in lecture or even in the side.</li> <li>Giving helpful tips when needed</li> <li>Give a lot of extra knowledge that was not always in the website</li> <li>Great knowledge, really helpful.</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#what-could-lars-improve","title":"What could Lars Improve","text":"<ul> <li>I think the exercises, maybe make it more understandable   and assess the time needed to accomplish it.   Also, there is a room for improvement in the lecture.</li> <li>Clearer exercises</li> <li>Give a lot more real-life practical examples when explaining concepts,   that would help a lot</li> <li>Feel like it would be great to see him do a pair-programming exercise   together with another lecturer.   Got the impression that he's someone who can showcase how to be a navigator.</li> </ul> <p>Ah, the learners can indeed be critical. Let's go back to mine:</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#again-what-did-richel-do-well","title":"Again: What did Richel do well?","text":"<ul> <li>I think Rich\u00e8l carry this course.   He explained well his lectures and give very good exercises.   He asked good questions that challenges our thinking.   He seems very prepare everyday and always there to help.   Additionally, he listens to comments and give really good insight</li> <li>Involving everyone with the discussions</li> <li>Explain everything super well and be very positive about everything</li> <li>Really great engagement and explanations.   Calling people out for discussion greatly improved flow.   Really felt like his heart was in the course.</li> </ul> <p>That is some heartwarming feedback.</p> <p>I am happy to read I came across as prepared, even though it was a wild ride to do so. I am happy that this group does enjoy to be called out.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#again-what-could-richel-improve","title":"Again: What could Rich\u00e8l Improve","text":"<ul> <li>He is really good already. Just continue it.</li> <li>Clearer exercises. This became clearer as the course went along</li> <li>Remake the video that was in one of the days that lagged</li> <li>Tbh I'm really not finding anything.</li> </ul> <p>I am happy to learn my exercises improved! And indeed, the lagging video is on my todo list :-)</p> <p>I took a closer look at the intake form:</p> Column Verdict Timestamp Automatic, hence keep Your name Vital Your email Vital Affiliation Not worth it Which scripting and programming languages do you use? Not worth it Briefly describe your background and experience in programming Not worth it What do you expect to learn from this course? Not worth it How did you learn about this course? Not worth it Do you plan to follow the entire course? Not worth it Email address Duplicate <p>I will suggest to keep only the name and email. I feel it is not worth to bother the learners with things that are not essential.</p>","tags":["reflection"]},{"location":"reflections/2024_autumn/20241122_richel/#confidences","title":"Confidences","text":"Day Average confidence Monday 7.01/10.0 = 70% Tuesday 4.13/5.0 = 82.6% Wednesday 7.01/10.0 = 70% Thursday 7.16/10 = 72% Friday 8.55/10 = 86% <p>Tuesday:</p> <pre><code>I understand why `assert` is important,3.625\nI can use TDD to develop functions,3.75\nI can name at least three roles that are present in a team,4.125\nI understand why TDD is important,4.5\nI can use a kanban board,4.75\nI understand why a kanban board is important,4.875\nI can create, assign and close an issue,5\nI understand why issues are important,5\n</code></pre> <p>I agree, it was why I changed the order: <code>assert</code> will come first next time.</p> <p>Happy to see that this matches!</p> <p>Wednesday:</p> <pre><code>I understand what continuous integration is,4\nI can write tests using a formal testing framework,7.333333333333333\nI can pair program,8.555555555555555\nI feel confidence and motivation in making my code open-source,8.333333333333334\nI can put the files of my code in the right locations,8.88888888888889\nfor the testing framework to find them,8.88888888888889\nI understand what good pair programming looks like,9\nI understand the benefit of using a testing framework,9.222222222222221\nI understand why pair programming is important,9.444444444444445\n</code></pre> <p>At that day, I moved CI to the next day. For the testing framework, I improve the exercises for the day after.</p> <p>Thursday:</p> <pre><code>I inderstand difference between composition and aggregation,6.4\nI understand the type of relation 'inheritance' is,7.4\nI can write a class to express what the data it contains,7.6\nI understand the type of relation 'composition' is,7.6\nI can criticise functions,8.4\nI can give a function a proper name,9\nI can give some features of good function design,9.2\nI understand why function design is important,9.2\n</code></pre> <p>Great: I did not discuss the difference between composition and aggregation much, as it was not a teaching goal and I wanted to avoid discussing aggregation.</p> <p>It was the design part that was most unclear. As this overlaps with Lars' work, I hope he can help getting these values up.</p> <pre><code>I can create a Big O profile of my project,7.333333333333333\nI understand how to methodically optimize the runtime speed of my code,7.833333333333333\nI can create a runtime speed profile,8.833333333333334\nI understand what Big O is,9.166666666666666\nI can read a runtime speed profile,9.333333333333334\n</code></pre> <p>This is great again: there was no Big-O exercise. I could really use one!</p> <ul> <li>[x] Create exercises for optimization</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_summer/","title":"Reflections","text":"<p>Reflections are the thoughts of teachers looking back.</p> <p>No checks here</p> <p>These reflections copy evaluation results literally. Spelling is hence not corrected on purpose.</p> <ul> <li>2024-04-22 by Richel</li> <li>2024-04-23 by Richel</li> <li>2024-04-24 by Richel</li> <li>2024-04-25 by Richel</li> <li>2024-04-26 by Richel</li> </ul>"},{"location":"reflections/2024_summer/20240422_richel/","title":"Reflection 2024-02-22 Day 1 by Richel","text":"<p>This day, I was only a helper, except for the Retrospect.</p> <p>I am unhappy with the Retrospect, maybe because I felt I could not copy Jon. What is it that Jon did differently? I forgot to mention to the learners that the results will be stored as-is on the course repo, so they can see we actually read (and respond to) those.</p> <p>Also the discussion of the Retrospect: the last item is 'Action points'. I feel these were more discussion results. Maybe Jon would have done better by pushing for an action...?</p> <p>I was happy that the teacher had more time for exercises.</p> <p>I was happy to see one of my colleagues dared to point to random learners to give an answer to a question.</p> <p>We teachers had a discussion on what to include in the course material what should be in and what should not: what algorithm should we used?</p> <p>Mine:</p> <pre><code>Only discuss theory that ...\n\n- is (and can be) checked by an exercise\n- is needed for the shared project\n\nWhen in doubt, remove.\n</code></pre> <p>I am happy we discussed this, it shows we are open to discussing our ideas.</p> <p>A list of things that my algorithm suggests to move/remove are:</p> <ul> <li>risk analysis: no exercise, not needed for shared project</li> <li>use of ChatGPT to generate design documents: no exercise,   not needed for shared project (as the learners create the   documents themselves)</li> <li>object orientation on Monday and Tuesday:   no exercise, not needed for shared project,   maybe do this at the OOP lecture on Friday</li> <li>inheritance on Monday and Tuesday:   no exercise, not needed for shared project,   maybe do this at the OOP lecture on Friday</li> <li>creating an own local GitHub repo: not needed for shared project</li> <li>markdown markup: no exercise, not needed for shared project,   maybe do this at the documentation lecture on Friday</li> <li>mermaid markup on Monday: no exercise,   but I think it is important for class design on Tuesday</li> <li>putting Mermaid in a README on Tuesday during class design:   no exercise, maybe do this at earlier</li> <li>optimization, not vital to the shared project</li> <li>documentation on Monday: no exercise,   instead do this at the documentation lecture on Friday</li> <li>pseudocode: no exercise, not needed for shared project</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_summer/20240423_richel/","title":"Reflection 2024-02-23 Day 2 by Richel","text":"<p>This was the schedule taken from my lesson plan:</p> When What Status TU 13:00-14:00 Pair programming 1 Draft of content, draft of exercises TU 14:00-14:45 Pair programming 2 Draft of content, draft of exercises TU 15:00-15:45 TDD 1 [1] Draft of content, draft of exercises <p>I started at 13:00 sharp with 7 students. There would be 2 more learners in a couple of minutes. I started by showing the 'Who is Richel' presentation on my <code>teaching</code> repo. I think it is dull, yet it felt useful enough. I asked for questions and I did get one, that I rejected, as it was unrelated to teaching. I regret that I had to reject it, so next time I will ask 'Are there question on this way of teaching?', as this is more precisely what I mean.</p> <p>I felt it would be a good to start with a course overview, to remind the learners of the big picture. This felt useful.</p> <p>The pair programming session started with a 'Prior Knowledge', which was unavoidably shallow. I still feel it was useful to stick to a Mike Bell teaching cycle. A quick poll showed none had ever pair programmed (however, I think my question was too vague, as some stated to have pair programmed in the past).</p> <p>The 'Present' was short, describing they why. I did a literature check in the early morning and added the doubt surrounding the effectiveness of pair programming in developing code. I feel it made it stronger that it is such a great tool for teaching.</p> <p>The 'Challenge' was a literature read: I felt that is more useful then me reading out loud the literature. During the description of the exercise, I had mixed feelings when one learner said it was the first clear exercise in this course, but hey, my exercise came across as clear :-) The timing of that exercise was perfect!</p> <p>In the 'Feedback' phase I was struggling a bit with picking from options. I fumbled with asking again the same questions as in the 'Prior' to see a difference. I quickly went to the answers I'd written down, which seemed to be a good idea.</p> <p>In general, I think the 'Feedback' phase is now my weakest.</p> <p>As I want to prepare the next sessions, I'll speed up a bit now:</p> <p>Pair programming exercises 1 and 2 felt unnatural, as these had no logical cycles. Next time, do TDD in isolation first, then in pairs!</p> <ul> <li>[ ] Next course iteration, do TDD in isolation first for at least 3 cycles,       then start pair programming</li> </ul> <p>Learners still struggled with git. I feel this should be dealt with on day 1.</p> <ul> <li>[ ] Next course iteration, strongly encourage the git teacher to discuss       and cause merge conflicts, as they do happen in the basic       git workflow when duos work on one file</li> </ul> <p>Creating empty classes should be done in isolation, ideally during the basic git workflow session.</p> <ul> <li>[ ] Next course iteration, encourage the git teacher to create       empty classes</li> </ul> <p>I discussed the code for TDD, including exceptions. Exceptions are part of function design. TDD and function design go hand-in-hand, yet I wonder if I can improve the flow.</p>","tags":["reflection"]},{"location":"reflections/2024_summer/20240424_richel/","title":"Reflection 2024-02-24 Day 3 by Richel","text":"<p>Looking at the course material I see things that add fluff to the course in my opinion.</p> <pre><code>Only discuss theory that ...\n\n- is (and can be) checked by an exercise\n- is needed for the shared project\n\nWhen in doubt, remove.\n</code></pre> <ul> <li>creating an own local GitHub repo: not needed for shared project</li> <li>Forking: not needed for shared project</li> </ul> <p>I add to the rule:</p> <pre><code>Only discuss theory that ...\n\n- is (and can be) checked by an exercise\n- is needed for the shared project\n\nWhen in doubt, remove.\n\nIf there are two ways to do something,\npick the way which involves the least amount of new concepts.\n</code></pre> <ul> <li><code>git init</code>: not needed for shared project, can be done on GitHub</li> <li><code>git branch -c</code>: can be done on GitHub</li> <li><code>git graph</code>: can be done on GitHub</li> <li><code>git diff</code>: can be done on GitHub</li> <li><code>git show</code>: no exercise</li> <li><code>git log</code>: no exercise, can be done on GitHub</li> <li><code>git mv</code>: no exercise</li> <li><code>git rm</code>: no exercise</li> <li>big code examples: can be simplified to a 'Hello world' program</li> <li>use multiple files: can be simplified to one file</li> <li>use big files: can be simplified to short files</li> <li>use complex commit graphs: can be simplified to simple commit graphs</li> <li>using more repos: can be simplified to only use the shared repo</li> <li>using git plugin: can be simplified by using GitHub view</li> <li>using GitHub templates: not needed for shared project</li> <li>using protected branches: not needed for shared project</li> <li>add using Issues: we do use these in the shared project!</li> <li>using command-line: if possible with GitHub</li> </ul> <p>I add to the rule some green and red flags</p> <pre><code>Only discuss theory that ...\n\n- is (and can be) checked by an exercise\n- is needed for the shared project\n\nWhen in doubt, remove.\n\nIf there are two ways to do something,\npick the way which involves the least amount of new concepts.\n\nGreen flags:\n- 'You need this'\n\nRed flags:\n- 'maybe this is useful'\n- 'if you have the time, you may want to take a look at ...'\n</code></pre> <ul> <li>[x] Settle on <code>git switch</code> and <code>git checkout</code>: which one is better?   <code>git checkout</code> as there was one learner that could not use the   alternative, as he had an older git version</li> </ul> <p>Regarding my teaching:</p> <ul> <li>I am happy with how it went: I spoke little,   I think I never spoke longer than 20 minutes,   adapted to the needs/pace of the learners,   had interactions with all of them,   with some minor teaching in the BO rooms.   I think the exercises were clear, as never was I asked for clarification.</li> <li>Even though I have a lot of time for exercises,   it still feels to short.   I wish earlier in the course, the learners had already practiced basic   git things such as merging; I had to adapt to what the learners could do</li> <li> <p>Judging from the git commits, I see the pair programming and TDD   has watered down. I will need to practice this tomorrow again</p> </li> <li> <p>[ ] Next course iteration, schedule 3 hours for TDD</p> </li> </ul> <p>For the earlier hours, me and a colleague teamed up: the colleague would theory for one session, after which I would do an exercise. I did expect the colleague to also have exercises in his part. This turned out to be false. Next course iteration, I will suggest to split up differently: within one session, the colleague talks for maximally 20 minutes, after which I will do the exercise. BAD IDEA, as the exercise determines the teaching content. I predict a setup like that will never work.</p>","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/","title":"Reflection 2024-02-25 Day 4 by Richel","text":"","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/#preparation","title":"Preparation","text":"<p>'Pingpong pair programming' is a term I should mention again.</p> <p>Added 'GitHub Issues and Project', it could be used earlier.</p>","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/#during","title":"During","text":"","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/#hour-1","title":"Hour 1","text":"<p>All members of all three groups have committed on the group branch.</p> <p>I felt this (third) hour (of TDD) was useful and should have been done earlier.</p> <ul> <li>[ ] Next iteration: schedule 4 hours of TDD</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/#hour-2","title":"Hour 2","text":"<p>I put in more time for individual reading in silence. One learner put this in a Retrospective and I was eager to try it out. This session has 10 minutes to read in silence, during which I will not disturb either (hence time to work on this reflection :-) ).</p>","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/#hour-3","title":"Hour 3","text":"<p>I forgot to do a Prior.</p> <p>I had no material, but I think I improvised well enough. Instead of lecturing, discussions in BO rooms is superior :-)</p>","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/#hour-4","title":"Hour 4","text":"<p>I really enjoy our learners finally being able to do what they should have been taught earlier. Due to this, next hour will also be working on Issues...</p>","tags":["reflection"]},{"location":"reflections/2024_summer/20240425_richel/#hour-5","title":"Hour 5","text":"<p>I struggled how to do code reviews. Now we let the learners fake it. Ideally, it should be me or a helper. Next time, schedule a helper to do code reviews.</p> <ul> <li>[ ] Next iteration, schedule a helper to do code reviews.</li> </ul>","tags":["reflection"]},{"location":"reflections/2024_summer/20240426_richel/","title":"Reflection 2024-04-26 Day 5 by Richel","text":"<p>A reorder: I think UML relations should have been done on Tuesday</p> <p>Suggest: use standard UML examples. Use simple UML examples. Do not make up   UML example</p> <p>Suggest: worked-out examples, these have a high effect size according to   [Hattie, 2022]</p> <p>Suggest: remove aggregation, as we don't use it in the project</p> <pre><code>classDiagram\n\n  namespace weather {\n    class Simulation {\n      - model\n    }\n    class Model {\n\n    }\n    class Parameters {\n\n    }\n    class HelperFunctions {\n      run(parameters_filename, results_filename) Do an experiment\n    }\n  }\n\n  note for Simulation \"Runs a model\"\n\n    Simulation *-- Model\n    Model *-- Parameters\n\n\n  note for HelperFunctions \"These are free functions\"</code></pre> <p>Suggest: remove describing what one can do in <code>__init__.py</code>,   as we only use it to fix linter errors.</p> <p>I have no idea when to use <code>BacteriumInterface</code> and <code>Bacterium</code>, instead I understand to use <code>Bacterium</code> and <code>BacteriumImpl</code>. Where has one read to use the word 'Interface' in the class name?</p> <p>Saying that something is important never convinces me. I'd enjoy to hear why something is important. In figures. With short code examples.</p> <ul> <li>Describe what containers are, do not compare the types</li> <li>Remove build systems, not needed for the project</li> <li>No virtual environments, not needed for the project</li> <li>No venv comparisons usage for different OSes, not needed for project</li> <li>No venv usage, not needed for project</li> <li>In-code documentation: either earlier, else not:   it is not needed for the project now, no formal terminology</li> <li>Documenting outside code: not needed for the project, no formal terminology</li> <li>Licensing: not needed for the project</li> <li>Static HTML website generator: not needed for the project</li> <li>I think making a package and using it is a good idea   and suggest to do it</li> <li>No wiki: not needed for the project, no formal terminology</li> </ul>","tags":["reflection"]},{"location":"reflections/2025_autumn/","title":"Reflections Autumn 2025","text":"Day Reflections 1 Reflection 2 Reflection 3 Reflection 4 Reflection 5 Reflection All Reflection"},{"location":"reflections/2025_autumn/20251023/","title":"2025-10-23","text":"<ul> <li>Day 1</li> <li>Author: Richel</li> </ul> <p>I enjoyed working with our learners and have been able to talk one-on-one-ish with 6 out of 7 learners.</p> <p>I do not like it when we break our own promises: it makes my team look needlessly unreliable. Examples:</p> <ul> <li>If the email states we start at 9:00 sharp,   I think we should not start at 9:02</li> <li>If the schedule states a break at a certain time,   I think we should not start a   new thread of discussion at that time</li> <li>We decided to use VSCode instead of the terminal,   I think we should not discuss the terminal commands</li> <li>We decided no homework.   I think we should not ask our learners   to read course material in the evening</li> </ul> <p>I do not like it when we talk instead of teach: it makes my team look needlessly long-winded. Instead, when we use a simplified definition of teaching, such as 'teaching is talking and monitoring the progress of our learners', it would help all of us to be more effective teachers.</p>"},{"location":"reflections/2025_autumn/20251023/#based-on-retrospect","title":"Based on Retrospect","text":"<p>I agree that the website of the course should be discussed.</p> <ul> <li>[ ] Suggest to add time to the schedule to show the website</li> </ul> <p>I agree that VSCode should have been discussed more or taught in such a way that the learners feel they have time to figure it out.</p> <p>I think we should also have discussed the course project website.</p> <ul> <li>[ ] Suggest to add time to the schedule to show the course project website</li> </ul>"},{"location":"reflections/2025_autumn/20251024/","title":"2025-10-24","text":"<ul> <li>Day 2</li> <li>Author: Richel</li> </ul> <p>I think we do not do object-oriented programming, yet I heard it both today and yesterday. Checking the meeting notes, I see no decision on this. On the other hand, I do not have time for doing OOP in my sessions. I suggest to reduce the mentioning of OOP.</p> <p>For the rest of the day, in my part, I tried out breakout rooms of 1 person. I felt uncomfortable doing so, as I worried the learners would feel alone. But after some visits, the learners seemed to be fine with it. There was plenty of opportunity to have a bit longer talks with learners.</p> <p>During the day, I never rushed, even though there was more on the schedule, which felt the right choice.</p> <p>[Edit from the future] I feel the session about issues and kanban board was given too early: it should be discussed after using them when working as a team</p> <ul> <li>[ ] Schedule issues and kanban board after working as a team</li> </ul>"},{"location":"reflections/2025_autumn/20251024/#day-2","title":"Day 2","text":""},{"location":"reflections/2025_autumn/20251024/#retrospect","title":"Retrospect","text":""},{"location":"reflections/2025_autumn/20251024/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Interaction during explanations</li> <li>A: Better instructions for exercises compared to yesterday</li> <li>A: The practical exercises were really great !</li> <li>A: Richel's enthusiasm :-)</li> <li>A: Individual feedback for exercises</li> <li>A: nice explanations and instructions for the tutorials, easy to follow, always there for questions</li> <li>A: The exercises were helpful! Practising it and getting feedback is good!</li> <li>A: The live examples. It was helpful to get an explanation of the structure   of the lesson before starting.   Having a chance to ask questions in the individual breaking room.</li> </ul>"},{"location":"reflections/2025_autumn/20251024/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Sometimes the assignements are unclear</li> </ul> <p>I wish I knew which ones. I commonly ask if my exercises are clear and I always get a 'yes'. Sure, I expect a bias for 'yes', yet I have nothing to go on to suspect it would be my assignments.</p> <ul> <li>A: No live examples for TDD, I would have appreciated   at least one live demonstration of the methods before the exercises,   and not just discussing it theoretically - it is a bit counterintuitive.</li> </ul> <p>I can imagine. I wondered about that too. I've added it to the course material that strongly reminds me to do so.</p> <ul> <li>A: Too little knowledge in python to be able to feel confident in writing   tests correctly - are you sure the initial requirements for the course   are really enough?</li> </ul> <p>I can imagine one feels like this. I am confident he/she can do this (sure, that does not take away his/her self-doubt). I have seen R programmers being able to do this. I do supply all the needed Python code that needs to be used, so I feel: yes, this is doable. I hope I can get a 1-on-1 about this with him/her. Additionally, we will do pair programming next day: this may help him/her regain her confidence and/or motivation. I will couple him/her with someone that is patient and confident in Python.</p> <ul> <li>A: rather similar examples, not really sure how this expand (especially TDD)   to more complex settings, How easy is it to find tests then?</li> </ul> <p>My bad: the goal was to drill TDD, with simple examples (i.e. no focus on complex code at all). I've added a question box to each exercise, forcing me to write down why each exercise seems repetitive. Due to this, I removed one out of 5 exercises. Thanks!</p> <ul> <li>A: I got issues with git in VS code   but that probably comes down to my inexperience.</li> </ul> <p>I've seen him/her struggle. We teachers picked VSCode to reduce this struggle, so it is painful to see how it still fails. I agree with him/her, that this will fix itself with some more experience, together with some patient help from us teachers. I will couple him/her with someone that has shown his/her confidence with the VSCode IDE :-)</p>"},{"location":"reflections/2025_autumn/20251024/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Better defined assignements ?</li> </ul> <p>Agreed!</p> <ul> <li>A: Give at least one live example of TDD before letting the students   tackle the challenge by themselves.   Or maybe suggest to watch one of the videos first?</li> </ul> <p>Done!</p> <ul> <li>A: Maybe a bit more hands-on exercise is good. Something a little complex.</li> </ul> <p>Added an extra and more free exercise with this.</p> <ul> <li>A: Also, how to relate these good practices in our programming for   our disciplines, for example assert and stuff won't work   for simulations and other programming.</li> </ul> <p>This is a misconception I should deal with next day: everything I taught works for all code.</p> <ul> <li>A: Do the first TDD example as a team and not individually - one good   example would save from waisting time on pracitising the wrong method</li> </ul> <p>Done!</p> <ul> <li>A: Showcasing an exemplary more complex example</li> </ul> <p>Added!</p> <ul> <li>A: A way to communicate with the teacher when inside breakout rooms!</li> </ul> <p>I agree that this sometimes can feel clumsy. I have no way to fix this. As far as I know, some Zoom setups have a button to ask for help, but I do not if we have it. As I schedule a visit every 5 minutes, I hope that is not too much of a problem, but I agree that this is clumsy :-/</p> <ul> <li>A: 3 minutes for the retrospective questions is too long,   we always end up answering the next questions during the first one :).   maybe 2min? 2:30?</li> </ul> <p>I assume Lars reads this. Taking a peek down: yes he does :-)</p> <ul> <li>A:A bit more use case discussion on issues - like a how does it look like   for a sample/real life project</li> </ul> <p>Done!</p>"},{"location":"reflections/2025_autumn/20251024/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>Lars clearify excersises</li> </ul> <p>This is on Lars :-)</p> <ul> <li>Time management, make morning session more hands on less theory</li> </ul> <p>This is on Lars :-)</p> <ul> <li>Change from twice a year to only spring. to allow for more prep time for teachers.</li> </ul> <p>For me, the frequency is fine.</p> <ul> <li>Define clear roles before.</li> </ul> <p>Unsure what this applies to ...?</p> <p>My action points for next lesson:</p> <ul> <li>[ ] Go through this reflection with the learners</li> <li>[x] Make pairs that will help get the less confident learnes thrive</li> </ul> <p>Taking a look at the learning outcomes below, we see that the harder topics resulted in the lower confidences:</p> Learning outcome Average confidence I can use TDD to develop functions 2.8 I understand why TDD is important 3.8 I can use a kanban board 4 I understand why <code>assert</code> is important 4.2 I can create assign and close an issue 4.4 I understand why a kanban board is important 4.6 I understand why issues are important 4.8 How does that look as a plot? <p></p> <p>On Monday, I will need to show how TDD scales up to a harder setting. I have done so with 'Dream development'. I see that this session uses objects, so I will write something from fresh, applied to the weather project.</p>"},{"location":"reflections/2025_autumn/20251027/","title":"2025-10-27","text":"<ul> <li>Day 3</li> <li>Author: Richel</li> </ul> <p>I added a session, called 'TDD at a larger scale', as this was implicitly requested by the learners. On the one hand, this takes away time from other sessions, yet on the other hand, it shows that I listen to the learners. Let's see if there is anything about this in the Retrospect.</p> <p>I am unsure about the form of the first hour, 'TDD at a larger scale'. It was more talking than I am used to, although I did interacted with the learners after each couple of minutes. Let's see what they say on the Retrospect.</p> <p>For pair programming, I was happy to use a learner as a volunteer: it is most fun and insightful.</p> <p>I enjoyed working with the group. I've paired them up in a way that would allow everyone to thrive. I have some ideas for tomorrow too: it would be nice to mix them up :-)</p> <p>I broke my rule of breaks at the scheduled point in time: instead, I had both of my breaks earlier. I feel moving breaks to earlier is fine, where I feel moving breaks to later is not. I think this is fine.</p>"},{"location":"reflections/2025_autumn/20251027/#retrospect","title":"Retrospect","text":""},{"location":"reflections/2025_autumn/20251027/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:The live-examples and the exercises were very helpful.   I appreciated the example from big to small programming.   (I also appreciate the breaks!)</li> <li>A: I was happy with the pair programming concepts   and the last group exercises.</li> <li>A: Live examples and pair programming very funny !</li> <li>A: pair exercises and live examples</li> <li>A:Exercises in pairs</li> <li>A:Thorough explanation of TDD method to create the weather code</li> <li>A:Good way to learn TDD through Pair programming!</li> <li>A:Today's session had more pratical exercises which helped us learn hands-on!   Good job to the instructors!</li> </ul>"},{"location":"reflections/2025_autumn/20251027/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Nothing to declare.</li> <li>A: I can't think of anything</li> <li>A: Still some issues with VSCode, but it worked in the end.   Time for group exercises and off topic questions were a bit short.</li> </ul> <p>I agree here.</p> <ul> <li>A: Technical issue in the morning with Git website rendering -   don't know how that could be avoided though</li> </ul> <p>This is because I was right: it really takes several minutes to update. There was a misconception here: the deployment step indeed takes seconds. However, deploying the website takes two steps, the first one is about creating the HTML version, which takes minutes.</p> <ul> <li>A: Using GitHub web interface and git commands and VS code,   I think we should agree on one single method, or at least mostly use one</li> </ul> <p>I agree. Not my session.</p> <ul> <li>A: Maybe some more time with the group exercises would be appreciated!</li> </ul> <p>Let's do it.</p>"},{"location":"reflections/2025_autumn/20251027/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe bit more on how to integrate these in our discipline specific   programming would be appreciated, like some of us work on data   analysis/exploration where the data might not be a specific value but a   dataframe or numpy array, how do we integrate the assert to such cases?   Also, most of us work involves data cleaning and others,   but how do we check if the data is cleaned or not?</li> </ul> <p>Let's discuss this!</p> <ul> <li>A: Maybe some more clarity in stating the purpose/methods to be used   in the morning exercises - but it might as well just be me not   functioning on Monday morning</li> </ul> <p>I agree. Not my session.</p> <ul> <li>A: Can't think of anything</li> <li>A: Was a good session!</li> <li>A: Good session overall!</li> </ul>"},{"location":"reflections/2025_autumn/20251027/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>[ ] Add an extra session with group exercises</li> <li>[ ] Clarify how to work with messy data</li> </ul>"},{"location":"reflections/2025_autumn/20251027/#confidences","title":"Confidences","text":""},{"location":"reflections/2025_autumn/20251028/","title":"2025-10-28","text":"<ul> <li>Day 4</li> <li>Author: Richel</li> </ul> <p>I decided to change the lesson plan and at the start send this in the Zoom chat:</p> <ul> <li>[ ] Go over the reflection at https://uppmax.github.io/programming_formalisms/reflections/2025_autumn/20251027/</li> <li>[ ] Add an extra session with group exercises   Do so by starting with continuous integration.   Here they can learn how to write clean enough code</li> <li>[ ] After CI, do testing framework</li> <li>[ ] After that, continue with regular schedule</li> <li>[ ] Clarify how to work with messy data</li> </ul> <p>The first two hours were spend on CI. I think that was a good idea as I feel that the learners now know how to write code that is Good Enough. I had prepared 3 groups of 2 for the CI exercises, however, one learner was absent, which resulted in 1 group of 3. I was unhappy about this imbalance. However, the group seemed to work quite well and when I offered to do 1-on-1 with a volunteer learner, this offer was rejected.</p> <p>In the third hour, Lars taught about object-oriented design. It was unfortunate in some ways, as Lars assumed I would have taught class design already. Also, his session started 15 minutes later, as I was unaware of this irregularity in the schedule.</p> <p>After his teaching, me and Lars discussed this. I said sorry to Lars for taking 15 minutes too mucg :-) . We decided to switch things around, with me teaching 'Class design' for one hour, after which he has the remaining time. I am happy how we dealt with this.</p> <p>The fourth hour (i.e. the first after lunch) I had my last session and here we were with 6 learners. I made the dream groups I had prepared. And it seemed to work out perfectly! At around 13:40, 2 out of 3 groups had written a class, where the remaining group had a wonderful dynamics that I did not want to disturb. I collected the 2 groups that were done in 1 room, where I discussed code coverage. It was a bit rushed, but I felt it was worth it.</p> <p>It has its pros and cons to actually listen to the learners. On the other hands, I do feel I picked the right things: that what I chose to skip is -I feel- less important.</p>"},{"location":"reflections/2025_autumn/20251028/#observation-lars","title":"Observation Lars","text":"<p>I decided to make an activity diagram:</p> Time Activity Duration 14:15 Monologue 2 14:17 Discussion 3 14:20 Introduce exercise 5 14:25 Exercise ongoing, room M 2 14:27 Exercise ongoing, room 1 &lt;15 14:?? Exercise ongoing, room 2 ? 14:42 Exercise ongoing, room M/3 19 15:01 Monologue 14 15:15 Exercise ongoing, room M 2 15:17 Exercise ongoing, room 1 1 15:18 Exercise ongoing, room 2 0 15:18 Exercise ongoing, room 3 9 15:27 Exercise ongoing, room M 2 15:29 Exercise ongoing, room 1 1 15:30 Exercise ongoing, room 2 2 15:32 Exercise ongoing, room 1 1 15:33 Exercise ongoing, room 3 8 15:41 Exercise ongoing, room M 1 15:42 Monologue 9 15:51 Retrospect ."},{"location":"reflections/2025_autumn/20251028/#retrospect","title":"Retrospect","text":""},{"location":"reflections/2025_autumn/20251028/#what-helped-us-learn-let-us-move-forward-2-min","title":"What helped us learn (let us move forward) 2 min","text":"<ul> <li>A: As usual, group exercises</li> <li>A: The possibility to ask questions and get extensive answers. Thank you for your patience!</li> <li>A: Group work, practical exercises</li> <li>A: Continous Integration and group work</li> <li>A: Nice group work.</li> <li>A: The team exercises, in particular for writing clases. The session on automated testing workflows within GitHub (and locally) were very interesting.</li> <li>A: the testing exercise was good! Finding out the options to automate the testing was nice.</li> <li>A: Ruff - was a good extension</li> </ul>"},{"location":"reflections/2025_autumn/20251028/#what-stopped-us-from-learning-what-held-us-back-2-min","title":"What stopped us from learning (What held us back) 2 min","text":"<ul> <li>A: Maybe the schedule was a bit messy today, I would gladly have had class design before OOD</li> </ul> <p>Agreed, we found out too late</p> <ul> <li>A: I found some text, in particular the Object-oriented programming section,   hard to read because of typos.   I wish it wasn't so much like bullet points.   It often asks us about a concept and only give bullet points   but we have to go to some alternative reading material to find the answer.   Many concepts were remain a bit abstract even after the explanations...   I also got lost with many exercises because they were a bit vague   or use terms before getting explanations about it (e.g., refactoring)</li> </ul> <p>I assume this will be picked up :-)</p> <ul> <li>A: Maybe some more clarifications about object oriented programming   would have been helpful. Less theory and more examples.</li> </ul> <p>I assume this will be picked up :-)</p> <ul> <li>A: assignments were not always clear,   confused about what we should actually do...</li> </ul> <p>I am unsure if this applies to my session.</p> <ul> <li>A: a bit confused about the reverseb classroom situtation,   since we didn't have time to read up upon it before   (and text didn't alwyas provide the answers that were asked there)</li> </ul> <p>I assume this will be picked up :-)</p> <ul> <li>A: Most concepts introduced today was a hard to intrepret   in our discipline specific examples</li> </ul> <p>I wish I understood what this is about :-/</p> <ul> <li>A: The concepts of object and class were a little hard.</li> </ul> <p>I am unsure if this applies to my session.</p> <ul> <li>A: Time, short answers, no too deep explainations and typos in documentation.</li> </ul> <p>I am unsure if this applies to my session.</p> <ul> <li>A: Unit test lessons were unclear</li> </ul> <p>Yes, this was the rushed session.</p> <ul> <li>A: Little time to complete all the exercises,   would have appreciated less to do but with more time to focus</li> </ul> <p>I am unsure if this applies to my session.</p>"},{"location":"reflections/2025_autumn/20251028/#what-could-we-do-to-improve-learning-what-can-we-invent-2-min","title":"What could we do to improve learning (What can we invent) 2 min","text":"<ul> <li>A: I think in general it would be beneficial to focus on easier tasks   and not too much on the weather exercise, with more discussion.   Baby steps and more time to digest.</li> </ul> <p>Yes, I can imagine that some people would prefer this.  Me too, I am sometimes in doubt about this too. And it would be simpler to not have a bigger project</p> <ul> <li> <p>[ ] Discuss with teachers to remove working on a bigger project</p> </li> <li> <p>A: Better material with less bullet points   and more structure and explanations would help</p> </li> </ul> <p>I am unsure if this applies to my session: I feel not ..?</p> <ul> <li>A: As much as I appreciate working with teams,   sometimes I wish I could read on my own without other people around.   I find it distracting because I feel pressure to finish faster.   I prefer when we get examples explained by the teacher   before diving into the exercises.</li> </ul> <p>I understand this point of view. I do think the team is now ready to work in groups of 1 again. So let's go back to that again, where I leave it an option for me to ask learners to help out.</p> <ul> <li> <p>[ ] Remember to do 1 person per breakout room again</p> </li> <li> <p>A: more explanation of terms and basic \"vocabulary\",   more straigth forward assignments, clearer instructions</p> </li> </ul> <p>I am unsure if this applies to my session: I feel not ..?</p> <ul> <li>A: More examples before working on our own,   sometimes it is hard to figure out everything on your own</li> </ul> <p>I am unsure if this applies to my session: I feel not ..?</p> <ul> <li>A: Also, sometimes the concepts are too simple and feels difficult   to relate to our discipline,   maybe more examples to show how it looks would be appreciated</li> </ul> <p>I can imagine this being the case for the 'Class design' examples.</p> <ul> <li>[ ] Add a more complex example in 'Class design'</li> </ul> <p>On the other hand, I am unimpressed with the usefulness of 'Class design'.</p> <ul> <li>A: Maybe a solid example/exercises on object &amp; class diagrams would be good</li> </ul> <p>Not my session.</p> <ul> <li>A: More self-contained examples with answers that we can revisit later on.   Add more links to external videos on hands-on   coding for every or most concepts.</li> </ul> <p>I agree: it would help us focus.</p>"},{"location":"reflections/2025_autumn/20251028/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>[ ] Discuss with teachers to remove working on a bigger project</li> <li>[ ] Discuss with teachers to remove object oriented programming</li> <li>[ ] Add a more complex example in 'Class design'</li> <li>[ ] Remember to do 1 person per breakout room again</li> </ul>"},{"location":"reflections/2025_autumn/20251028/#confidences","title":"Confidences","text":""},{"location":"reflections/2025_autumn/20251029/","title":"2025-10-29","text":"<ul> <li>Day 5</li> <li>Author: Richel</li> </ul> <p>I am happy with how the morning went. I let the learners work individually and I think that went fine: it gave me the time to have multiple more in-depth 1-on-1 discussions.</p> <p>In the first session, there was an unexpected problem with uploading the package to PyPI, I will need to check for the next time.</p> <ul> <li>[ ] Update the session on creating a package</li> </ul> <p>In the first session, I could have gone a bit more in-depth, although I do feel it was the most efficient use of time: I feel the duration of the session was good</p> <p>The second session went fine I think, although I could have easily spent more time on its discussion. Although, also here, I do feel it was the most efficient use of time: I feel the duration of the session was good</p> <p>At the end of my last session, I thanked the learners. This felt good to do.</p> <p>As I did so yesterday with Lars, I decided to make an activity diagram too:</p> Time Activity Duration 9:02 Monologue 5 9:07 Exercise start 0 9:07 Round in BO rooms 3 9:10 Wait . 9:12 Round in BO rooms 5 9:17 Wait . 9:20 Round in BO rooms 5 9:25 Wait . 9:27 Round in BO rooms 1 9:28 Wait . 9:30 Round in BO rooms 7 9:37 Discussion 8 9:45 Break . 10:00 Monologue 11 10:11 Exercise start 0 10:11 Round in BO rooms 1 10:12 Wait . 10:16 Round in BO rooms 4 10:20 Wait . 10:23 Round in BO rooms 1 10:24 Wait . 10:28 Round in BO rooms 6 10:34 Wait . 10:36 Round in BO rooms 7 10:43 Wait . 10:45 Discussion 15 11:00 End ."},{"location":"reflections/2025_autumn/20251029/#retrospect","title":"Retrospect","text":""},{"location":"reflections/2025_autumn/20251029/#evaluation","title":"Evaluation","text":"<ul> <li>Date: 2025-10-29</li> <li>Day: 5</li> </ul>"},{"location":"reflections/2025_autumn/20251029/#analysis","title":"Analysis","text":"<ul> <li>Learning outcomes in a better readable format</li> <li>Analysis script</li> <li>The calculated average confidences</li> <li>Success score by Richel: 86%</li> </ul>"},{"location":"reflections/2025_autumn/20251029/#day-5-retrospect","title":"Day 5 Retrospect","text":""},{"location":"reflections/2025_autumn/20251029/#what-helped-us-learn-let-us-move-forward-2-min","title":"What helped us learn (let us move forward) 2 min","text":"<p>-A: Exercises, specially the testing time with cprofile.   I liked hearing about creating packages,   and also about ReadTheDocs and similar options.</p> <p>Great!</p> <p>-A: create and upload a package to pypi</p> <p>Great!</p> <p>-A: As always, the exercises: they help staying active</p> <p>Great!</p> <p>-A: Testing the performance of the code with the cprofile was useful!   Along with their rules - super useful in improving our programming!</p> <p>Great!</p> <p>-A: The group exercise were helpful! Documentation tasks,   Licensing, README documentations were super helpful.</p> <p>Glory to BC!</p>"},{"location":"reflections/2025_autumn/20251029/#what-stopped-us-from-learning-what-held-us-back-2-min","title":"What stopped us from learning (What held us back) 2 min","text":"<p>-A: In general, I think it would be better if some more actual explanation   was introduced, together with practical examples,   instead of reading and highlighting the online material.   Sometimes attention is hard to keep for prolonged time,   if the teacher is reading.</p> <p>I am unsure if this applies to my session.</p> <p>-A: Hard to grasp some concepts on build.</p> <p>I agree: especially the TOML file could have been better explained.</p> <ul> <li>[ ] Explain better the TOML file</li> <li>[ ] Explain better what a 'build' is</li> </ul> <p>-A: I had the feelings sometimes the teacher were distracted   or not sure \"what was next\" (but honestly, aren't we all tired?)</p> <p>I am unsure if this applies to my session. I assume so, as the plural is used. However, I do feel I was undistracted ...?</p> <p>-A: Some teachers seem to be in a rush all the time.   They explain at a superficial level.</p> <p>I am unsure if this applies to my session. I assume so, as the plural is used. However, I do feel that in the majority of the sessions, I was happy with the time. Also, I have the impression that I did ask some deeper questions. But, too bad, I can only guess :-/</p> <p>-A: very time-constrained course; it feels like virtual environments   are introduced very late in the course,   even though they would be already useful in the beginning   (before installing anything in base, helps also in cleaning   up after the course is done); it often felt like the teachers are just   reading the page and then run out of time for questions/exercises</p> <p>I agree that time is tight in this course. However, I do have the impression that my sessions were completed in full (i.e. I do not skip sections), in time (i.e. I sometimes started the break earlier) and properly (i.e. there was a discussion at the end).</p> <p>Interesting that this learner thinks virtual environments are useful. I think they are not worth it and I think this is not part of the goal of this course. I predict if we add it, that this will be a chaotic session. But let's see what the team decides :-)</p> <p>I feel reading the page does not apply to me, or at least, applies least: I absolutely read the section why things are important. I do that on purpose: it should be super clear why things are important. I hope that this is not too much reading of the page and I wish that could be confirmed :-/</p> <p>-A: Short time for some tasks/topics</p> <p>I am unsure if this applies to my session: my sessions did have most time for exercises.</p>"},{"location":"reflections/2025_autumn/20251029/#what-could-we-do-to-improve-learning-what-can-we-invent-2-min","title":"What could we do to improve learning (What can we invent) 2 min","text":"<p>-A: Perhaps because I've wrote READMEs for my GitHub repositories before,   I wish less time had been spent on that,   and instead I wish we could hear more about   creating Wikis and ReadTheDocs-like documentation.   I was also often confused with the exercises instructions.</p> <p>I am unsure if this applies to my session: my exercise instructions seemed to be clear.</p> <p>It seems that MkDocs is popular:</p> <ul> <li>[ ] Suggest to add MkDocs website at deployment</li> </ul> <p>-A: Be prepared to teach, no just read.    In every section, I got something like   \"we do not have time to cover the topic A, so we move on\"</p> <p>I agree! I hope the sections that are skipped will be deleted.</p> <p>-A: better time management, I think it would actually be more helpful   to spend time more time on basics with going through examples   and thorough explanations and time for questions than rushing   through that we can cover all the topics that are planned   (because the content is anyway on the page and   you can just refer to it and if people are interested   can have a look on their own and ask about it   because there is the additional time to do so)</p> <p>I agree! And I have been guilty on this on Thursday. And I predicted/hoped/assumed that people would give this back to us, that that session was rushed. </p> <p>-A: Quite time-constrained, maybe having a the course for   2 days in week for 3/4 weeks would be great!</p> <p>I agree. I think this can be solved by teaching less. Like I did :-)</p> <p>-A: I would have liked to see less reading and more interaction,   more space for questions and active discussion on exercises.   Sometimes how exercises were introduced was still unclear   (but better than previous sessions). </p> <p>I agree. I feel that my sessions were the most interactive and that my sessions had the clearest exercises, but I will never be sure :-/</p> <p>-A: Some discipline specific examples would be appreciated,   for example with simulation data or codes</p> <p>I think this would be fun to do: to pick examples from more disciplines. On day 1, the learners wrote down some things: analysis of data, workflows, tools for processing data, workflows and modelling, statistics, simulations, applied nuclear physics, language modeling and statistical analysis. Let me branch out here</p> <ul> <li>[ ] Distribute the different fields over the examples examples,   especially add a simulation </li> </ul> <p>-A: More interactive sessions or handsn exercises rather   than reading (which can be pre-read before the lectures)</p> <p>I agree. I feel that my sessions were the most interactive and that my sessions had the clearest exercises, but I will never be sure :-/</p> <p>-A: Really liked the group exercises, which we can increase in the future!</p> <p>It is an open question for us how to deal with people that prefer to work alone versus people that prefer to work in groups.</p> <ul> <li>[ ] Read up on the literature</li> </ul>"},{"location":"reflections/2025_autumn/20251029/#extended-questions-10-min","title":"Extended questions (10 min)","text":"<ul> <li>Imagine you are boss. How would you improve the Programming Formalisms course? Do consider that if you want more of something, what would you want less of?</li> </ul> <p>-A: More:: Add some text about good practices about writing classes.   Explain more with some examples about composition, inherence, etc. - Provide more links to video tutorials.  - Creating video contents that students can watch to complement the training.    Less:: Teachers reading what everyone at this level can read.   Use the text as a guide.  -A: First of all I wanted to thank you all for this great course!   All the following critics are just small to make the course even better.   There was a lot of group work where it was actually not needed,   I don't need to be in a breakout room with someone just to ask questions,   seems a bit unnecessary.    Also an time expectation of the real group work and a better outline   of what we should actually do would be great   (for some of the tasks that is actually already very well implemented).   Some of the topics are actually falling short,   e.g. about classes/object oriented programming and modules   I didn't really catch the grip and feel similarly unsure about it   than before the course (also the course page is rather short and doesn't   really provide further information).    Time could definitely be saved when not only the pages get read to us   and the teachers stumble upon mistakes   but just by either reciting it shortly or letting us read ourselves.   Also a proper flipped classroom could work,   just tell us to read up on a topic the day before   and then discuss it or do exercises   (I mean we are all voluntarily taking this course   and want to learn something,   so I think it wouldn't be an issue to put the extra time in.) -A: I really enjoyed the course! Thank you all for that!   But I learned more through the hands-on exercises than reading,   so maybe I would arrange more group sessions where the teams worked together,   so that they can fail and learn!   Pushing them into the project first   (maybe give them some resources to read on first)   and then letting them review their project work would be my approach.   Maybe also, ask the students to bring their own data   (discipline specific data) and work on them and review them in group,   so that students can understand how to use these tools/tips   in their discipline data. -A: Thank you for the course.   I think I would in general increase the prerequisites   for taking the course to a higher level.   I started the course with the exact python/git requirements   as stated in the UPPMAX web page,   but I still found some sessions quite hard - or maybe too advanced for   my level, or that they served a purpose that is too advanced   for what I am working on at the moment.   I took the course early in my phd thanks to the suggestion   of my supervisor and of a fellow phd student,   but maybe it would have been more useful to take it   with more pior experience in programming in general.    That said, it was very useful to see how software development works   in a formal way.   It's super useful to see that there are guidelines/good practises   to be followed, which could be good to learn very early in my career.   Also, I am very happy that I can go back to the course materiak   and revise topics.    What I personally found the most useful as a beginner was   collaborating on git, understanding how to use tests and asserts   to make code stronger from the beginning, continuous integration and classes.   I wished we had seen more function design as well.    Regarding teaching style, I really appreciated exercises,   as they really help tpo stay focus.   Sometimes I wished we had clearer instructions before each exercise,   but I think this got better during the course.   I also liked the video tutorials when available,   as they helped a lot when a full example was needed   before practising hands-on.   What I think could be improved were some explanations and timing.   Topics were often skipped, not covered or covered too fast.   It may be good to reduce the course content a bit   and focus on the most appreciated/needed sessions.   Something I didn't understand fully was the purpose of having   the 'weather project'.   I guess it is to provide a full-cycle software development example,   but since we ended up not really working on that,   I would have rather had more small exercises,   which help strenghtening the broad understanding.    Last, I suggest adding a video tutorial on the use of VS code with git,   and then always stick to that method.   Or always work from terminal.   It can become confusiong if people use different methods.</p>"},{"location":"reflections/2025_autumn/20251030_total_course/","title":"2025-10-30","text":"<ul> <li>Total course</li> <li>Author: Richel</li> </ul>"},{"location":"reflections/2025_autumn/20251030_total_course/#course-as-a-whole","title":"Course as a whole","text":"<p>Here I mark changes we made to this course:</p> Day Time Teacher Subject Friday 09:00-10:00 Lars Software development life cycle Friday 10:15-11:00 Richel Issues and kanban board Friday 11:15-12:00 Richel assert Friday 13:00-14:00 Richel TDD 1 Friday 14:15-15:00 Richel TDD 2 Friday 15:00-15:40 Richel Formal testing framework -&gt; TDD at a bigger scale Friday 15:40-16:00 Lars Confidence and retrospect Monday 09:00-10:00 Bj\u00f6rn Formal git workflow, branches Monday 10:15-11:00 Bj\u00f6rn Formal git workflow, merge Monday 11:15-12:00 Bj\u00f6rn Formal git workflow, contribute &amp; Social coding and sharing Monday 13:00-14:00 Richel Pair programming Monday 14:15-15:00 Richel Pair programming Monday 15:15-15:40 Richel Formal testing framework -&gt; Pair programming Monday 15:40-16:00 Lars Confidence and retrospect Tuesday 09:00-09:45 Richel Function design -&gt; Continuous integration Tuesday 10:00-10:45 -&gt; 10:00-11:00 Richel Expressive data type -&gt; Continuous integration Tuesday 11:00-12:00 -&gt; 11:15-12:00 Lars Object-oriented design Tuesday 13:00-14:00 Richel Has-a relation and class design -&gt; class design Tuesday 14:15-15:00 Lars Modular programming Tuesday 15:15-15:40 Richel -&gt; Lars Continuous integration -&gt; Modular programming Tuesday 15:40-16:00 Lars Confidence and retrospect Wednesday 09:00-09:45 Richel Implement the project as a package Wednesday 10:00-11:00 Richel Runtime speed profiles, Improve run-time speed -&gt; Runtime speed profiles Wednesday 11:15-12:00 Bj\u00f6rn Deployment Wednesday 13:00-13:30 Bj\u00f6rn Deployment Wednesday 13:30-13:50 Bj\u00f6rn Documentation Wednesday 14:05-15:00 Bj\u00f6rn Documentation Wednesday 15:15-15:40 Lars Wrap-up Wednesday 15:40-16:00 Lars Confidence and retrospect <ul> <li>[x] Consider menioning pyOpenSci:   it results in a paper!</li> </ul>"},{"location":"reflections/2025_autumn/20251030_total_course/#commits-of-teachers","title":"Commits of teachers","text":"<ul> <li>Analysis script</li> </ul> <p>I was interested in the commits: who of us committed when?</p> <p></p> <p></p> <p>I see that some of us work outside of working hours and in the weekends. Maybe this puts too much stress on us?</p> <p>On the other hand: I am super happy with working at my weirder hours :-)</p>"},{"location":"reflections/2025_autumn/20251030_total_course/#commits-of-learners","title":"Commits of learners","text":"<ul> <li>Analysis script</li> </ul> <p>I was interested in the commits: who of us committed when?</p> <p></p> <p></p> <p></p> <p>I am happy to see no learners worked in the weekend and most commit under course hours :-)</p>"},{"location":"reflections/2025_autumn/20251030_total_course/#to-discuss-at-a-meeting","title":"To discuss at a meeting","text":"<p>If a coordinator does not have the proper time to do his/her job, consider reducing the amount of teaching hours for that teacher, so he/she has the time to do so.</p> <p>If a teacher does not have the proper time to prepare, consider reducing the amount of teaching hours for that teacher, so he/she has the time to focus on those fewer hours.</p> <p>I think all of us should follow the NBIS 'Train the Trainer' course, as I think some more knowledge on teaching would help us prepare our lessons better.</p> <p>If a teacher does not read the evaluation results, lets not bother the learners by asking those questions.</p> <p>As we do not actually work on a project, I suggest to remove pretending to do so or add more time for this. In any case, I do think we should keep working on a shared repository.</p> <p>As we do not use issues in practice, I suggest to remove the session on issues.</p> <p>As we do not use the kanban board in practice, I suggest to remove the session on kanban board.</p> <p>As we do not use the risk assessment in practice, I suggest to remove that section.</p> <p>As we do not use the requirements document in practice, I suggest to remove that section.</p> <p>As our learners are academics, I suggest to replace a requirements document by a draft paper.</p> <p>As we do not apply the content of 'Modularity' in practice, I suggest to remove this session.</p> <p>As I think there is too big of a gap between the content of 'Object oriented development' and all other lectures, I suggest to rewrite or remove it.</p> <p>As I think there should be enough time for function design, I suggest to remove all sessions on OOP, unless functions can be discussed properly.</p>"},{"location":"reflections/2025_summer/","title":"Reflections Summer 2025","text":"Day Reflections 1 Reflection 2 Reflection 3 Reflection 4 Reflection 5 Reflection"},{"location":"reflections/2025_summer/20250505/","title":"2025-05-05","text":"<p>Reflections are the thoughts of teachers looking back.</p> <p>No checks here</p> <p>These reflections copy evaluation results literally. Spelling is hence not corrected on purpose.</p> <ul> <li>[ ] Suggest to remove introduction, use that time for <code>git</code> instead</li> <li>[ ] Suggest to add time for learners to be added to the GitHub team</li> <li>[ ] Suggest to use VSCode only</li> <li>[ ] Suggest to use exactly 1 way to clone a repo, using an URL in VSCode</li> </ul>"},{"location":"reflections/2025_summer/20250506/","title":"2025-05-06","text":"<ul> <li>Day 2</li> <li>Author: Richel</li> </ul> <p>I went to sleep directly after teaching, hence did not reflect. As I will be teaching today, let's be short.</p> <p>These are things I already wrote down:</p> <ul> <li>RB improves feedback on exercises</li> <li>RB also wants to experiment with a 5-mins-to-read   exercise</li> <li>Mix theory and practice more</li> </ul> <p>From this feedback ...</p> <ul> <li>A: I like the theorical background, a bit more would be neat</li> </ul> <p>... and my own feelings, I feel now theory is indeed thin. I start to see this now. I still think practicing skills have their place, but I could add more theoretical sessions. Maybe a response to other pure-theory sessions..?</p> <p>From this feedback ...</p> <ul> <li>A: the requirements for the project are a bit unclear to me, so creating suitable issues was challenging</li> <li>A: I think there are two requirements/design files?</li> <li>A: Have a clear (and finished) file for the project requirements</li> </ul> <p>I will use the requirements that I prepared</p> <p>This feedback, however, is new and I am quite thankful for it ...</p> <ul> <li>A: Not so much feedback on exercises</li> <li>A: Could be good with a summary session to see that everyone got the important points from the exercises</li> <li>A: Could have been useful with a recap after the exercises</li> </ul> <p>... as I know how important feedback is! My lessons have 'warped' from being round to having feedback with pre-given answers.</p> <p>Also time for digestion is new ...</p> <ul> <li>A: not enough time to digest/review</li> <li>A: Have some time reserved in the schedule for self study and QA</li> <li>A: Extend the course time or crop the program a bit to give more time for labs/digesting/lecturing</li> </ul> <p>... and I am unsure how to deal with this.</p> <p>About the first hour:</p> <ul> <li>Exercise 1   took 30 minutes, instead of the scheduled 10 minutes. Although the exercise   was intended to be plenary, it was mostly the teacher talking   and 1 learner talking. I think I've already seen an idea to restructure   this exercise, after seeing it did not work out as expected</li> <li>Exercise 2   asks to practice mermaid. Nowhere it is mentioned what it is and   why this is important. Also, nowhere is it described of why   making a flowchart of the requirements is important. I guess it is called   a 'User story' or 'Use case', consider explaining first what it is   and why it is useful</li> <li>Exercise 3   asks to produce a feature list. Nowhere it is mentioned what it is and   why this is important. Consider explaining first what it is   and why it is useful</li> </ul>"},{"location":"reflections/2025_summer/20250507/","title":"2025-05-07","text":"<ul> <li>Day 3</li> <li> <p>Author: Richel</p> </li> <li> <p>I think we should not teach command-line <code>git</code>:   instead, I feeel we should teach how to use version control, branches, etc.   in VS Code</p> </li> </ul>"},{"location":"reflections/2025_summer/20250508/","title":"2025-05-08","text":"<ul> <li>Day 4</li> <li>Author: Richel</li> </ul>"},{"location":"reflections/2025_summer/20250509/","title":"2025-05-09","text":"<ul> <li>Day 5</li> <li>Author: Richel</li> </ul>"},{"location":"shared_documents/","title":"Shared documents","text":"<p>These are the previous shared documents used in the course.</p> Where is the shared document used today? <p>It can be found at the 'Shared document' page</p> Index Shared document 6 2025 autumn 5 Did not use any 4 2024 autumn 3 2024 summer 2 2023 autumn 1 .","tags":["shared","documents","HackMDs"]},{"location":"shared_documents/2023_autumn/","title":"Autumn 2023 shared documents","text":"<p>These are the shared documents used in this course iteration.</p> Day Shared document 1 Shared document 2 Shared document 3 Shared document 4 Shared document 5 Shared document"},{"location":"shared_documents/2023_autumn/day_1/","title":"Day one Q&amp;A Fall 2023","text":"<ul> <li>Zoom: https://uu-se.zoom.us/j/66409709879 Passcode: 583470</li> <li>Material: https://uppmax.github.io/programming_formalisms_intro/index.html</li> </ul>"},{"location":"shared_documents/2023_autumn/day_1/#icebreaker-questions","title":"Icebreaker questions","text":"<p>What topic do you work with?</p> <ul> <li>Precision Medicine</li> <li>Deep learning for image reconstruction</li> <li>Proteomics and Mass spectrometry</li> <li>Evolutionary genomics, mostly focused on fungi</li> <li>Electromagnetics</li> <li>Metagenomics</li> <li>Eukaryotic genomics &amp; virology</li> <li>Bioinformatics (lineage tracing)</li> <li>Gut Microbiome</li> <li>Computational genomics</li> <li>Planet formation</li> <li>Biological image analysis</li> <li>Quantum chemistry</li> <li>Omics method development</li> </ul> <p>Questions:</p> <ul> <li>Q: Is it possible to get some proof of participation for the course?<ul> <li>A: yes, Lars Eklund is tasked to do that. One can ask by sending him an email to lars.eklund@uppmax.uu.se or (if he needs a reminder) to support@uppmax.uu.se :-) -A: yes I will issue Official signed pdf certificates of participation through the course next week Once we have had all the lectures. If  you send an email to me on friday I will have the return mail needed.</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_1/#coffee-break-until-1010","title":"Coffee break until 10.10","text":"<ul> <li>Q: Can these be mixed?<ul> <li>A: by Richel: unsure what is meant meant by 'these'. As far as I remember when seeing this comment, it was about functional versus object oriented: yes, these can be mixed; it is called a multi-paradigm language (C++ is an example) :-)</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_1/#planning-document","title":"Planning document","text":""},{"location":"shared_documents/2023_autumn/day_1/#plantuml-part","title":"PlantUML part","text":"<ul> <li>Extension: https://github.com/marcozaccari/markdown-diagrams-browser-extension</li> </ul> <pre><code>@startuml\n\nstart\n\n:define some parameters;\n:initialize earth (and Jupiter);\n\nrepeat\n  :calculate acceleration;\n  :calculate velocity in two dimensions;\n\nrepeat while (simulation time is met) is (no)\n-&gt;yes;\n:figure plotting;\nstop\n\n@enduml\n</code></pre>"},{"location":"shared_documents/2023_autumn/day_1/#day-one-general-discussion","title":"Day one General Discussion","text":"<p>Discussions in general will go here I remind you that these documents will be uploaded to the repository branch that will be created and that the NBIS training code of conduct should be followed. Be respectfull to eachother so you do not edit others posts. Hack md alows for simultaions editing. /Lars Eklund</p>"},{"location":"shared_documents/2023_autumn/day_1/#note-on-activating-environment-on-windows","title":"Note on activating environment on windows","text":"<p>for me, running in VS on windows, the default terminal was powershell which didn't recognize the command \"source\". Running in a bash terminal solved the issue.</p>"},{"location":"shared_documents/2023_autumn/day_1/#daily-questions-technical-questions","title":"Daily questions (Technical questions)","text":"<ul> <li>Q:<ul> <li>A:</li> </ul> </li> <li>Q: Can PlantUML generate horizontal diagrams? (to be used in papers or theses)<ul> <li>A: there are diagram types that allow a horizontal flow</li> <li>A: plantuml can in most diagrams be told which direction to place realtionships , https://plantuml.com/use-case-diagram#d551e48d272b2b07</li> </ul> </li> <li>Q: Which HTML generators would you suggest for building a personal website?</li> </ul>"},{"location":"shared_documents/2023_autumn/day_1/#have-you-distributed-your-software-how","title":"Have you distributed your software? How?","text":"<ul> <li> <p>Q: Have you distributed your software?     How?</p> </li> <li> <p>Q: Which of these documentations is about input/output descriptions?</p> </li> </ul> <p>Note: UML diagrams can be used to descibe all UML diagrams, the top of introduction diagrams made with Graphviz program, can be viewd as a USECASE diagram with interacting usecases.</p>"},{"location":"shared_documents/2023_autumn/day_1/#group-discussions-uml-and-diagrams","title":"GROUP DISCUSSIONS UML and Diagrams","text":""},{"location":"shared_documents/2023_autumn/day_1/#room-1","title":"ROOM 1","text":""},{"location":"shared_documents/2023_autumn/day_1/#room-2","title":"ROOM 2","text":""},{"location":"shared_documents/2023_autumn/day_1/#room-3","title":"ROOM 3","text":""},{"location":"shared_documents/2023_autumn/day_1/#room-4","title":"ROOM 4","text":""},{"location":"shared_documents/2023_autumn/day_1/#room-5","title":"ROOM 5","text":""},{"location":"shared_documents/2023_autumn/day_1/#version-control","title":"Version control","text":"<p>[Broken link]</p>"},{"location":"shared_documents/2023_autumn/day_1/#copy-right-and-licensing","title":"copy right and licensing","text":"<ul> <li>Q: What settings do one needs for getting name + surname displayed by default in the MIT license file, rather than github username? Ex. \"Copyright (c) 2023 Bob Smith\" and not \"Copyright (c) 2023 bobby\"<ul> <li>A: I (Richel) thinks it uses you GitHub name if you filled it in in your profile.   I assume so as I create licenses on GitHub regularily</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_1/#why-should-we-document-code","title":"Why should we document code?","text":""},{"location":"shared_documents/2023_autumn/day_1/#what-is-your-impression-about-documentation","title":"What is your impression about documentation?","text":"<ul> <li>A:</li> </ul>"},{"location":"shared_documents/2023_autumn/day_1/#participant-questions","title":"PARTICIPANT QUESTIONS","text":"<ul> <li> <p>Q: Was it possible to render the plantUML directly on GitHub? How?</p> <ul> <li>A: This answer is for md. files and if you have the markdown plugin enabled this should display them in the browser. Git currently support another     software that does not need this plugin and that is mermaid, the reason we use PlantUML is that it fits our needs for diagram types.                               https://www.dandoescode.com/blog/plantuml-vs-mermaid goes through the diffrences.</li> </ul> <pre><code>@startumlbob-&gt;Alice:Hello\nstart\n:some action;\nstop\n\n@enduml\n</code></pre> <ul> <li>A [Richel]: nope, it is not yet supported natively in GitHub, but it is on the way!</li> </ul> </li> <li> <p>Q: Is there any Github examples or journals that runs WRF model with this workflow please?</p> <ul> <li>A [Richel]: yes, at https://github.com/wrf-model/WRF#wrf-arw-modeling-system I find a link to https://www2.mmm.ucar.edu/wrf/users/</li> </ul> </li> <li> <p>Q: There is a slight inconsistency in the \"Create a first version of the python code\" type-along. It is suggested to create a directory \"Figure\", but the \"plt.savefig\" command saves to a \"Figures\" folder.</p> <ul> <li>A [Richel]: Thanks for noticing, I created an Issue at https://github.com/UPPMAX/programming_formalisms/issues/19 :-)</li> </ul> </li> <li> <p>Q: pipx vs venv,virtualenv</p> <ul> <li>A: Pipx is for enduser environmet rather than developing <code>[Broken link]</code>     while venv and virtualenv is focused on generating a shared coding environmet for you and your team. This is of course only applical to     python development. Other languages and environments are setup differently, but having a automated deployment and development environment     is a recomended practice in all cases.</li> </ul> </li> <li> <p>Q: What are the differences between using conda and pip to create virtual environment?</p> <ul> <li>A [Richel]: they achieve similar things (and venv also is exists to do the same :-) ).   The differences are better explained in articles such as https://pythonspeed.com/articles/conda-vs-pip/</li> </ul> </li> <li> <p>Q: When working in HPC, sometimes I use some of the pre-installed modules. Should I be reinstalling these locally in my virtual environment (using up more disk space)? What are the best practices for reproducibility when sharing my code with others (pip freeze wouldn't include globally installed modules right?)</p> <ul> <li>A [Richel]: Ideally you have a similar environment installed someplace else too, which can     be local or on a GitHub Action script (more on that Wednesdays), so you can     run test that can run on any other computer than your own HPC environment.     Best practices for reproducible research are at     the NBIS 'Tools for Reproducible Research',     this course (especially Wednesdays) will give plenty of best practices     that are a subset of these practices. For example, using git and GitHub     and tests and Continuous Integration allows one to achieve reproducible research.     Another question is how reproducible you want/can get your workflow.     Ideally (in my opinion), you upload a Singularity container (not discussed in this course)     that can be used to redo your experiment easily.     I, Richel, care about Reproducible Research and Open Science, so ask me more!</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_1/#questions-above-this-line","title":"Questions above this line","text":""},{"location":"shared_documents/2023_autumn/day_2/","title":"Day Two Q&amp;A Fall 2023","text":"<ul> <li>Zoom: https://uu-se.zoom.us/j/66409709879 Passcode: 583470</li> <li>Material: https://uppmax.github.io/programming_formalisms/index.html</li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#general-and-technical-questions","title":"General and technical questions","text":"<ul> <li>Q: Does the SDLC apply to academia as well?<ul> <li>A: [Lars]: Yes, usually done implicitly</li> <li>A: [Richel] Yes, usually done implicitly. The draft of your paper are kind of a Need/Requirement Analysis. Also being clear about the End Of Life of your software will be social: it may prevent a poor PhD/postdoc/researcher being forced to be dependent on your code by his/her professor; where you do not have the time to help that PhD (I have had this; it cost me!)</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#what-is-software","title":"What is Software?","text":"<ul> <li>A:</li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#general-questions","title":"General Questions","text":"<ul> <li>Q:<ul> <li>A:</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#sdlc-and-methods","title":"SDLC and methods","text":"<ul> <li>Q:<ul> <li>A:</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#uml","title":"UML","text":"<ul> <li> <p>Q: what is the difference between \":\" and \"-\" at the beginning of a statement in an activity diagram?</p> <ul> <li>A: - is a connector and :is a general node start if you have parantheses in the text you wish to have on your node : will not work</li> </ul> </li> <li> <p>Q: I'm not able to render the plantUML diagrams, but get the error \"No PlantUML server, specify one with \"plantuml.server\".\" Any idea on how to fix this?</p> <ul> <li>A [Lars]: Which extension are you using</li> <li>C: PlantUML and PlantUML previewer. Also Markdown and Markdown All in One. Do I need any more? -A [Lars]: What browser, you could try running this https://github.com/marcozaccari/markdown-diagrams-browser-extension instead of PlantUML previewer -A [Lars]:remember the plantUML desktop jar file needs graphviz to render -A [Lars]:Planttext.com is a online renderer that works well and lets you easyl change style -A [Richel] I cannot get it to render in my browser (Ubuntu, nor Firefox nor Chrome). Instead I use planttext.com or a Visual Studio Code extention (search 'PlantUML', first one, then press CTRL-D when having a .puml file open)</li> </ul> </li> <li> <p>Q: Is it possible to have nested diagram? Like that a new more detailed one come up when you click on a function</p> <ul> <li>A:In most software for UML, yes for plantuml you can use !include this will include the contents from the other file into the current file.</li> </ul> </li> <li> <p>Q: Is it possible to generate a UML from actual (e.g. Python) code?</p> <ul> <li>A [Richel]: Yes, for example, Doxygen      makes a class diagram from documentation, but there are more ways, e.g. Stack Overflow. I predict that ChatGPT can do a reasonable job.</li> <li>A: [Lars]ChatGPT can do a reasonable job as well, there are also other more specialiced software that deal with this issue it is called Reverse Engeneering      and is nowadays a much more complete proces. When you then develop new diagrams from this that influcese the code it is what is called Roundtrip Engineering</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#social-coding","title":"Social coding","text":"<ul> <li> <p>Q:  understand that the coder is coding, but what is the driver actually doing? Does the driver sit next to the coder and give instructions?</p> <ul> <li>A [Richel]: the driver is coding, the navigator actively questions what the driver is doing. This is needed: they need to switch roles later, hence the navigator needs to know what to do in the future.</li> </ul> </li> <li> <p>Q:  Who is more responsible?</p> <ul> <li>A [Richel]: equally, as the driver and navigator switch roles all the time</li> </ul> </li> <li> <p>Q: What is the assertion statement <code>assert sum() == 3</code></p> <ul> <li>A: [Lars]: Assertion is a conditional statement that raises an AssertionError. An unhandeld Assertion will generate a system exit     Assertion should always end the program but preferably in a ordered manner     https://www.w3schools.com/python/ref_keyword_assert.asp <code>https://documentation.help/Python-PEP/assert.html</code> (now a broken link)</li> <li>A: [Richel] <code>assert</code> is used for debugging. <code>assert sum() == 3</code> is the same as</li> </ul> </li> </ul> <pre><code># if (![what is the assert]): exit()\nif (!(sum() == 3)): exit()\n</code></pre>"},{"location":"shared_documents/2023_autumn/day_2/#questions-above-this-line","title":"Questions above this line","text":""},{"location":"shared_documents/2023_autumn/day_2/#day-3-feedback","title":"Day 3 feedback","text":""},{"location":"shared_documents/2023_autumn/day_2/#what-went-well","title":"What went well?","text":"<ul> <li>Interactive activities were great hands-on experience</li> <li>Nice to live-view pair programming! +2</li> <li>Right amount of content in lectures, not too dense</li> <li>pair programming is fun +1</li> <li>Exposure myself to the new environment(pair-programming) +1</li> <li>More theories and practice of software development</li> <li>Pair programming</li> <li>Pair programming has a lot of fun!</li> <li>I think it is nice to try out with people from different field. +1</li> <li>More interactivity, less pure lecturing</li> <li>presentation slides available</li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Some of the lectures were too long with little opportunity to discuss<ul> <li>Thanks for the feed back, this is somthing we will be working on</li> </ul> </li> <li>Still a bit too little practice time +2</li> <li>It was a bit difficult to follow the slides on pair programming</li> <li>Technichal issues (sharing code, )</li> <li>I couldn't find the slides for pair programming (PDF)</li> <li>First time forking repo during pair programming exercise +1</li> <li>As a beginner, fixing the environmnt and knowlage gap for pair-programming.</li> <li>No time for exercise 2 and 3 during the morning +1<ul> <li>Thank you this is one of the main issues I will look into</li> </ul> </li> <li>Less detailed documentation on GitHub than yesterday, though topics more complex</li> <li>Pair-programming exercise could have been better guided (suggest platforms before sending to breakout rooms)</li> </ul>"},{"location":"shared_documents/2023_autumn/day_2/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>When discussing programming paradigms in the morning, it would be interesting to hear about how the different strategies are viewed and have been viewed by programmers over time, especially since they are to some extent not compatible with each other.</li> <li>Tell exactly where to find the material on github (-1)</li> <li>SSH stopped working for me :(</li> <li>The content from the lectures this morning looked interesting but too dense for beginners. I think a reduced version would have been more effective.</li> <li>Some of the 'handover' for the activities were unclear. We spent 5 minutes or so trying to figure what we were supposed to be doing. (+1)</li> <li>Summary of content from slides, key takeaway points.</li> <li>Have a summary session in the end of each day? I was absent for a session and would be good to know. (-1)</li> <li>Would be good to have more bathroom breaks (+2)</li> <li>If there is a an on and off suppervision, which can facilitate or enhance the coding in abetter way.</li> <li>Some breakout rooms could be cut in favor of longer discussions, alternatively menti first and discussions afterward</li> <li>make it clear when we are moving to Menti</li> </ul> <p>x</p>"},{"location":"shared_documents/2023_autumn/day_3/","title":"Day 3 Q&amp;A","text":"<ul> <li>Zoom: https://uu-se.zoom.us/j/66409709879 Passcode: 583470</li> <li>Material:</li> </ul> <p>Course GitHub repo: https://github.com/UPPMAX/programming_formalisms</p> <p>Shared document (HackMD) for today (this doc): https://hackmd.io/@LarsEklundScilifeLife/DayThreeHT2023</p> <p>Link to lecture:</p> <ul> <li>PDF: <code>[Broken link]</code></li> <li>QMD: <code>[Broken link]</code></li> </ul> <p>Join the team of the Student project: https://github.com/programming-formalisms/programming_formalisms_project_autumn_2023/issues/3</p>"},{"location":"shared_documents/2023_autumn/day_3/#tdd","title":"TDD","text":""},{"location":"shared_documents/2023_autumn/day_3/#how-do-you-grow-your-code","title":"How do you grow your code?","text":"<ul> <li>Look at pre-existing (relevant) code and sketch by hand (flow chart)</li> <li>Often start with a prototype in Jupyter to solve a specific problem, then turn it into a script or a program if I need to use it often.</li> <li>Top-down, start were appropriate and hopefully end up where intended ;)</li> <li>Prioritize steps aka having a meeting with the memebrs within the project.Then split the works and reiterate all of the steps.</li> <li>Top-down in the beginning and then filling in with more features if needed</li> <li>steal from stack overflow/other forums</li> </ul>"},{"location":"shared_documents/2023_autumn/day_3/#testing","title":"Testing","text":""},{"location":"shared_documents/2023_autumn/day_3/#how-to-work-together-well","title":"How to work together well?","text":"<ul> <li>.</li> <li>.</li> </ul>"},{"location":"shared_documents/2023_autumn/day_3/#other-questions","title":"Other questions","text":"<ul> <li>Q:<ul> <li>A:</li> </ul> </li> <li>Q:<ul> <li>A:</li> </ul> </li> <li>Q:<ul> <li>A:</li> </ul> </li> <li>Q:<ul> <li>A:</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_3/#testing_1","title":"Testing","text":"<ul> <li>Q:<ul> <li>A:</li> </ul> </li> <li>Q:<ul> <li>A:</li> </ul> </li> <li>Q:<ul> <li>A:</li> </ul> </li> <li>Q:<ul> <li>A:</li> </ul> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_3/#questions-above-this-line","title":"Questions above this line","text":""},{"location":"shared_documents/2023_autumn/day_3/#day-3-feedback-retrospective","title":"Day 3 feedback Retrospective","text":""},{"location":"shared_documents/2023_autumn/day_3/#what-did-work-well","title":"What did work well","text":""},{"location":"shared_documents/2023_autumn/day_3/#-","title":"-","text":"<p>-</p>"},{"location":"shared_documents/2023_autumn/day_3/#what-do-we-need-to-stop","title":"What do we need to stop","text":""},{"location":"shared_documents/2023_autumn/day_3/#-_1","title":"-","text":"<p>-</p>"},{"location":"shared_documents/2023_autumn/day_3/#what-can-we-develop","title":"What can we develop","text":""},{"location":"shared_documents/2023_autumn/day_3/#-_2","title":"-","text":"<p>-</p>"},{"location":"shared_documents/2023_autumn/day_4/","title":"Day 4 Q&amp;A","text":"<ul> <li>Zoom: https://uu-se.zoom.us/j/66409709879 Passcode: 583470</li> <li>Material:</li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#a-coordinate-in-3-dimensions","title":"A coordinate in 3 dimensions","text":"<p>What are their elements?</p> <ul> <li>Richel: left, right, personnumber</li> <li>Camille: cartesian or polar or spherical system of coordinates? You can pick, maybe a coordinathas x, y, z, system?</li> <li>Pontus: x, y, z.</li> <li>Harald: x, y, z/radius, azimuth, elevation</li> <li>Jesper: x,y,z</li> <li> <p>.</p> </li> <li> <p>x,y,z</p> </li> <li>[x,y,z]</li> <li> </li> <li> </li> <li> </li> <li>ah: x, y, z</li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#urs-x-y-z-struct","title":"Urs: x, y, z (struct)","text":""},{"location":"shared_documents/2023_autumn/day_4/#rjd-xyz","title":"RJD : [x,y,z]","text":""},{"location":"shared_documents/2023_autumn/day_4/#bz-x-y-z","title":"bz: x, y, z","text":""},{"location":"shared_documents/2023_autumn/day_4/#a-speed-in-two-dimensions","title":"A speed in two dimensions","text":"<ul> <li>Jesper: x,y; like a vector from origo (struct)</li> <li>Pontus: x, y. ~~Class (x &gt; 0, y &gt; 0) ~~</li> <li>RJD: direction, velocity, acceleration;</li> <li>direction, dx\\/dt, dy\\/dt</li> <li>Urs: v (&gt; 0, class)</li> <li>Harald: v_x, v_y / angle, amplitude</li> <li>Veector X, Vector y</li> <li>v_x, v_y, both class</li> <li> </li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#ah-x-y-speedvelocity","title":"ah: x, y, speed/velocity","text":""},{"location":"shared_documents/2023_autumn/day_4/#-","title":"-","text":""},{"location":"shared_documents/2023_autumn/day_4/#-_1","title":"-","text":""},{"location":"shared_documents/2023_autumn/day_4/#a-circle","title":"A circle","text":"<ul> <li>RJD: radius (non-negative, class); coord of centre (structure)</li> <li>Camille: coordinates of the center (reusing the first class of the exercise?), radius &gt; 0 --&gt; class</li> <li>Jesper: radius (&gt;0), position of center (x,y) (class)</li> <li>Pontus: radius &gt; 0. Class</li> <li>Urs: radius (&gt; 0, class) + center coordinates x, y (struct)</li> <li>Radius &amp; center, class due to non-negative radius</li> <li>Harald: center coordinate, radius (class) / list of coordinates (class?)</li> <li>center (x, y), radius (r)</li> <li>radius (diameter), x, y</li> <li>radius (&gt;0), origin (x,y)</li> <li>A list of arbertrary coordinates that are on the rim of the circle[Lars trhowing a spanner in the works]</li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#a-square","title":"A square","text":"<ul> <li>Camille: position of one corner + which corner + length of 1 side (&gt;0) --&gt; class</li> <li>Urs: side length (&gt; 0, class) + coordinates of a corner or the center x, y (struct)</li> <li>position (x,y), side length (&gt;0) (class)</li> <li>coords for the four ends, restrictions on distance between points, non-negative distances or area so class</li> <li>length, center</li> <li>Pontus: width, height &gt; 0. Class</li> <li>corner point (x,y), length, width</li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#class-design","title":"Class design?","text":"<p>Which classes does the project need? Together:</p> <ul> <li>make an alphabetic list of structures in the shared document</li> <li>add exactly 1 maintainer to each struct</li> </ul> <p>Put the list on the GitHub project repository</p> <p>Form:</p> <ul> <li>Bacteria (Bacterium): Camille - it looks like there is a duplicate below, isn't it? +1</li> <li>BactParam: bacterial characteristics - in case of different species e.g no of flagella, wall thickness, sugar preference (alex)</li> <li>Bacterium (class): Pontus</li> <li>Coordinate (x, y): Pontus</li> <li>Environment (Space, nutrients, bacteria, temperature), Harald</li> <li>Food concentration (class), Cormac - we have this redundantly (nutrients)</li> <li>Motion type (run/tumble, timer): Jesper</li> <li>Nutrients (coordinates, concentration), Urs</li> <li>Run (length, direction, rotation), Josefine</li> <li>Spin direction, Thanadol</li> <li>Speed: Camille</li> <li>Shape: Shape, size of the bacteria, Yuhe</li> <li>Threshold : RJD: concentration threshold for initiating tumble</li> <li>Tempreture put in enviromnt?, Harald</li> <li>Tumble (direction, rotation), Josefine</li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#day-4-feedback","title":"Day 4 feedback","text":""},{"location":"shared_documents/2023_autumn/day_4/#what-went-well","title":"What went well?","text":"<ul> <li>The pull request part was really imprssive</li> <li>Found the pull request aspect of the practical useful +1</li> <li>Git pairing is more efficient</li> <li>.</li> <li>Hands on</li> <li>Refelcting on earlier feedback +1</li> <li>CI is quite cool. HackMD is good for discussion</li> <li>Testing proper git workflow +1</li> <li>Practising with opening issues, assigning them, opening pull requests on GitHub, as well as dealing with merge conflicts</li> <li>Interactive</li> <li>enthusiastic teaching! +2</li> <li>Nice practice time and pair coding</li> <li>Going back to revise the pull requests. I learnt alot from that. +1</li> <li>Responded to feedback</li> <li>Frequent breaks. +1</li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Made a mistake on a pull request and got time shortage for merge part</li> <li>PR opened when the develop branch failed seems not update automatically when develop was fixed</li> <li>correct pull request was overwirtten</li> <li>exercise goals not always clear</li> <li>Material should be more informative</li> <li>Screensharing on linux</li> <li>[Richel moved this to here] I couldn't start my own HackMD doc for live coding with subscribing.</li> </ul>"},{"location":"shared_documents/2023_autumn/day_4/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>Speed a litte bit to make decrease in the lecture part</li> <li>More discussion around appopriate classes/structs for solving project.</li> <li>Work with an established exercise</li> <li>I would have liked more indept discussion about data structures and algorithms. Here you didn't say much more than that they are concepts you can use. (+1)</li> <li>write some light program thats can actually do something, e.g., visualize the bacteria moving?</li> <li>explain how to setup CI locally? so it automatically check the sutomation before push</li> <li>It may sometimes make sense to be in groups of 3 (vs 2) - but I guess this is subjective</li> <li>HackMD pages for shared coding? Maybe I missed it but I think it could be better than screensharing. - Students get thier own mini projects to go thru all the practices. Rather than scattered excercises.</li> <li>state goals before each break out room</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/","title":"Day 5 Q&amp;A","text":"<ul> <li>Zoom: https://uu-se.zoom.us/j/66409709879 Passcode: 583470</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#optimization","title":"Optimization","text":""},{"location":"shared_documents/2023_autumn/day_5/#q-what-would-be-bad-advice-to-improve-the-run-time-speed-of-a-program","title":"Q: What would be bad advice to improve the run-time speed of a program?","text":"<ul> <li>Assume you can put everything in memory</li> <li>Store intermediate/stepwise parameters</li> <li>Use many for-loops in Python</li> <li>Implement a GPU-suitable version of your code anyways</li> <li>Buy a better CPU</li> <li>Comment out lines that take a lot of time/memory- Hard</li> <li>too many print</li> <li>Hardcode end result</li> <li>don't bother looking for a function that already exists, your own will always be faster</li> <li>you can do it simpler without using OOD</li> <li>Just write a lookuptable for it</li> <li>Remove all tests to gain speed (Lars)</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#q-what-would-be-good-advice-to-improve-the-run-time-speed-of-a-program","title":"Q: What would be good advice to improve the run-time speed of a program?","text":"<ul> <li>[good advices here]</li> <li>(Python) Rely on NumPy for operations involving matrices</li> <li>parallelise</li> <li>Use a compiled language rather than an interpreted language</li> <li>Investigate code that takes most time</li> <li>Keep it simple -&gt; efficiency</li> <li>parallellize</li> <li>Test code regularly</li> <li>identify the bottle neck (most time consuming part) and focus on optimizing that</li> <li>interact with users as little as possible</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#q-when-to-optimize-for-speed","title":"Q: When to optimize for speed?","text":"<ul> <li>[good advice here]</li> <li>.</li> <li>.</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#what-was-the-most-usefulinteresting-in-the-course","title":"What was the most useful/interesting in the course?","text":"<ul> <li>Design and pairing are fun.</li> <li>.</li> <li>I haven't thought so much about using testing and TDD before.</li> <li>Social usage of git with pull requests and issues, as well as tools for continuous integration. Also nice with good practices for clarifying/organizing the tasks with UML</li> <li>design, UML, calculate big O,Git +1</li> <li>social programming good</li> <li>TDD +3</li> <li>Planning the software +1</li> <li>SDLC</li> <li>Social programming +3</li> <li>TDD and planning ahead of coding +3</li> <li>Development models</li> <li>Most parts of the git  +1</li> <li>requirement analysis</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#questions-above-this-line","title":"Questions above this line","text":""},{"location":"shared_documents/2023_autumn/day_5/#day-5-retrospective","title":"Day 5 Retrospective","text":"<p>Only Day 5 here :-)</p> <p>Please, no pointing fingers (I am sure Jon would want me to say that :-) )</p>"},{"location":"shared_documents/2023_autumn/day_5/#what-went-well","title":"What went well?","text":"<ul> <li>Pairing works much better +1</li> <li>Using HackMD for UML was very nice. +2</li> <li>learning what modules are</li> <li>nice too have R examples +1</li> <li>Using HackMD to code rather than screen sharing +3</li> <li>Activity diagram +2</li> <li>Once it worked, plantUML in VS code was very nice</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#what-held-us-back","title":"What held us back?","text":"<ul> <li>Still material and exercise description</li> <li>The presentation is less informative to follow on</li> <li>did not finish all of morning lecture +1</li> <li>some changes are not staged after Git pulling. No change..</li> <li>More info about use-cases/activity diagrams. Use, differences etc.</li> <li>morning exercises rushed</li> <li>maybe somewhat unclear difference between use-case and activity diagrams +1</li> <li>UML issues +3</li> <li>too little time for material and exercises of morning session</li> <li>profiling part was a little diffuse</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#what-can-we-improve","title":"What can we improve?","text":"<ul> <li>spend more time on use-case and activity diagrams +3</li> <li>provide the uml code for diagram examples in lecture</li> <li>Written instructions for exercises</li> <li>talk more about design patterns +1 or maybe share some nice tutorials</li> <li>Have a mini start-to-end exercise after the course where we can spend half the day running through a small piece of coding. Practise all of it.</li> <li>Be clearcut on what to do in the exercise.</li> <li>examples for optimisation showing well- and poorly-optimised examples +1</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#course-retrospective","title":"Course Retrospective","text":"<p>Here we have a Retrospective on the course as a whole.</p> <p>Please, no pointing fingers (I am sure Jon would want me to say that :-) )</p>"},{"location":"shared_documents/2023_autumn/day_5/#what-went-well_1","title":"What went well?","text":"<ul> <li>Pair programming +3</li> <li>Lots of exercises +2</li> <li>Windows XP background -1</li> <li>Github workflow (CI) +2</li> <li>Hand-on demos that can be used in the future +3</li> <li>Provided an opportunity for more social programming, including working in a live github repository where other people are working +1</li> <li>Frequent breaks +3</li> <li>Time for questions and answers</li> <li>teachers are enthusiastic and seem to know what they're talking about</li> <li>Good level of social interaction +1</li> <li>Well expereicned teachers +1</li> <li>chatting during breaks +1</li> <li>cats +4</li> <li>providing references</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#what-held-us-back_1","title":"What held us back?","text":"<ul> <li>Lars rushed through the last parts of his lectures</li> <li>Too low tempo, especially in the lectures. +1</li> <li>Some excercises could be explained better. We spent a lot of time just discussing what we were supposed to do. +1</li> <li>Unclear desciption and explanation of exercises +5</li> <li>(Still) too many lectures -- Zoom fatigue</li> <li>Some parts of the pair programming seems not needed</li> <li>Presentations</li> <li>Balance between lectures and exercises.</li> <li>Skipping over content throughout the course; it gets confusing</li> <li>might be helfpul to do the git stuff all together</li> <li>too often told to not point fingers :finger_gun:</li> <li>less reading documents after Wed.</li> <li>too manny cats -6</li> <li>Different levels of preparation, everyone does not fulfill course prerequisites or preparations from last friday</li> </ul>"},{"location":"shared_documents/2023_autumn/day_5/#what-can-we-improve_1","title":"What can we improve?","text":"<ul> <li>If exercises or examples are related with published papers</li> <li>Personally, I felt that the course was held at too low level. I was expecting more details and technical discussion, especially in the algorithm and data structure sections and I was familiar with most of the course content. In the future I would suggest that you should make it more clear what level of material to expect. +1 (but in the opposite direction - found a lot was very technical)</li> <li>More focus on a project to try out all the things taught in the course. Design -&gt; Tests -&gt; Implementation -&gt; Iterations</li> <li>If there is an opportunity giving small group project and make presentation at the final day</li> <li>The course website should be keep maintaining</li> <li>No need to attempt completeness, one week is not enough -- material on top of what is discussed in documentation on GitHub -- more exercises, less lectures</li> <li>provide the correct/complete presentation PDFs on GitHub</li> <li>The coures was 'top-heavy'. The beginning (in my opinion) should be more interactive and with more utilities, like git, being taught. After the first day, then you can bring in more and more theory.</li> <li>I think when it is online, the course is limited in several certain ways. MAybe consider on-sote class?</li> <li>it would be nice to survey attendees beforehand for their favourite languages and experience with specific parts of the course - e.g some are gitmasters, some have never used git before and found it confusing af - and tailor classes appropriately</li> <li>Show more \"good\" github repos</li> <li>\ud83d\udc31\ud83d\udc31\ud83d\udc31 more cats \ud83d\udc31\ud83d\udc31\ud83d\udc31 +2</li> <li>additional animals +3</li> <li>Additional materials</li> <li>more dogs </li> <li>more on design of larger program projects</li> <li> <p>More examples of how these things are practiced in an academic setting</p> </li> <li> <p>if possible, work only on example project (no planets,no bacteria)</p> </li> </ul>"},{"location":"shared_documents/2024_autumn/","title":"Autumn 2024 shared documents","text":"<p>These are the shared documents used in this course iteration.</p> Day Shared document 1 Shared document 2 Shared document 3 Shared document 4 Shared document 5 Shared document"},{"location":"shared_documents/2024_autumn/20241118/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li> <p>Zoom:  https://uu-se.zoom.us/j/66734860266</p> <ul> <li>Passcode: 195328</li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2024</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#monday","title":"Monday","text":""},{"location":"shared_documents/2024_autumn/20241118/#intro","title":"Intro","text":"<p>Icebreaker</p> <ul> <li>Q: What is your scientific field</li> <li>A: Plant systems biology PhD (Fabian)</li> <li>A: Biophysics/Bioinformatics (P\u00e2mella)</li> <li>A: Bioinformatics in translational breast cancer (Emilia)</li> <li>A: Radiation physics</li> <li>A: Astrophysics</li> <li>A: Atmospheric Physics (Lloyd)</li> <li>A: Neuroscience and Ageing</li> <li>A: Computational chemistry (drug discovery)-Bruna</li> <li>A: Radiation physics</li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#questions","title":"Questions","text":"<ul> <li>Q: What is 1+1?</li> <li>A: 2</li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#get-started-with-git","title":"Get started with Git","text":"<ul> <li> <p>Q: I cannot push</p> <ul> <li>A: You may have cloned the https address instead of SSH</li> <li>A: you can update the \"remote\" with the line below somewhere in your local git repo<ul> <li><code>git remote set-url origin git@github.com:programming-formalisms/programming_formalisms_project_autumn_2024.git</code></li> <li>Then <code>git pull</code>, since you should be in phase with updates on the remote GitHub</li> <li><code>git push</code> should then work!</li> </ul> </li> </ul> </li> <li> <p>Q:</p> </li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#intro-to-software-analysis-and-design","title":"Intro to software analysis and design","text":"<ul> <li>Q:</li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#confidence-report-menti","title":"Confidence Report Menti","text":""},{"location":"shared_documents/2024_autumn/20241118/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241118/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:Good discussions in breakout rooms, great support, diverse experience of audience, frequent breaks</li> <li>A:Discussion</li> <li>A:Discussions in breakout rooms</li> <li>A: Really well developed documentation with instructions and examples, hints etc</li> <li>A:Discussions</li> <li>A:The explanations and discussions</li> <li>A:Answering quickly on the team sessions to questions</li> <li>A: Having clear example on what to do help us to finish and understand the exercises better</li> <li>A:Discussions on real-life situations</li> <li>A:Having access to examples of done documents.</li> <li>A:Interactive discussions, input from everyone.</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: In some cases lack of concrete examples, the project itself wasn't that integrated into some of the exercises, sometimes not clear how to apply to research, often topics are more applicable to rly large projects, lecture closely matched course document</li> <li>A:</li> <li>A:Short times in the breakout rooms</li> <li>A: Sometimes goals werent super clear (ie how to write requirements from scratch)</li> <li>A:Clearer documentation in some points</li> <li>A:Not getting used to the abbreviations quick enough and then not knowing what was being discussed</li> <li>A: course content in the website changing when it was already needed</li> <li>A:Unclear instructions on the assignments<ul> <li> <ul> <li>A: No clear instruction on what to do. Having example will help.</li> </ul> </li> </ul> </li> <li>A:Unclear directions</li> <li>A: For some discussions there was very limited time in breakout rooms</li> <li>A: Limited time</li> <li>A: Not accurate information (links, instructions) in the course documents.</li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A:Write a clearer documentation in some points and perhaps a \"dictionary\" for main terms</li> <li>A:More examples</li> <li>A:Write tasks more clearly (for example \"Task 1: Do this or that\")</li> <li>A: More hidden hints with correct answers</li> <li>A: Have a terminology section where abbreviations or more technical terms are defined in a clear and easy to find manner</li> <li>A:Separate presentation and course document, more info on how to apply to 1-person research (esp. risk section), Prepare a gold-standard requirements file so all participants can be on same page</li> <li>A: Since we are a small group, we could work independently and share with everyone, instead of breakout rooms</li> <li>A: Hints with instructions and directions for technical parts and possible issues</li> <li>A: Make a concrete example not specifically related to the exercise, especially given a limited time to do it.</li> <li>A:Phrase the exercises concisely already in the course website</li> <li>A:Give an example before move into the assignment</li> </ul>"},{"location":"shared_documents/2024_autumn/20241118/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<p>[Lars] - Go back to separate Lecture and Website documentation [Lars] - Double check Formatting of website markdown [Lars] - Add examples directly into hints. [Lars] - Clear tasks with hidden do a, then b then c. [Lars] - clearer links to example documentation gold-standard project. [Lars] add examples of how this helps if you are a solo developer.(Long term, as current examples are more team focused) [Lars] relate to more concrete resarch focused examples. [Lars] Examples don't need to read the text.</p>"},{"location":"shared_documents/2024_autumn/20241119/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li> <p>Zoom:  https://uu-se.zoom.us/j/66734860266</p> <ul> <li>Passcode: 195328</li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2024</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#monday","title":"Monday","text":""},{"location":"shared_documents/2024_autumn/20241119/#intro","title":"Intro","text":"<p>Icebreaker</p> <ul> <li>Q: What is your scientific field</li> <li>A: Plant systems biology PhD (Fabian)</li> <li>A: Biophysics/Bioinformatics (P\u00e2mella)</li> <li>A: Bioinformatics in translational breast cancer (Emilia)</li> <li>A: Radiation physics</li> <li>A: Astrophysics</li> <li>A: Atmospheric Physics (Lloyd)</li> <li>A: Neuroscience and Ageing</li> <li>A: Computational chemistry (drug discovery)-Bruna</li> <li>A: Radiation physics</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#questions","title":"Questions","text":"<ul> <li>Q: What is 1+1?</li> <li>A: 2</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#get-started-with-git","title":"Get started with Git","text":"<ul> <li> <p>Q: I cannot push</p> <ul> <li>A: You may have cloned the https address instead of SSH</li> <li>A: you can update the \"remote\" with the line below somewhere in your local git repo<ul> <li><code>git remote set-url origin git@github.com:programming-formalisms/programming_formalisms_project_autumn_2024.git</code></li> <li>Then <code>git pull</code>, since you should be in phase with updates on the remote GitHub</li> <li><code>git push</code> should then work!</li> </ul> </li> </ul> </li> <li> <p>Q:</p> </li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#intro-to-software-analysis-and-design","title":"Intro to software analysis and design","text":"<ul> <li>Q:</li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#confidence-report-menti","title":"Confidence Report Menti","text":""},{"location":"shared_documents/2024_autumn/20241119/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241119/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:Good discussions in breakout rooms, great support, diverse experience of audience, frequent breaks</li> <li>A:Discussion</li> <li>A:Discussions in breakout rooms</li> <li>A: Really well developed documentation with instructions and examples, hints etc</li> <li>A:Discussions</li> <li>A:The explanations and discussions</li> <li>A:Answering quickly on the team sessions to questions</li> <li>A: Having clear example on what to do help us to finish and understand the exercises better</li> <li>A:Discussions on real-life situations</li> <li>A:Having access to examples of done documents.</li> <li>A:Interactive discussions, input from everyone.</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: In some cases lack of concrete examples, the project itself wasn't that integrated into some of the exercises, sometimes not clear how to apply to research, often topics are more applicable to rly large projects, lecture closely matched course document</li> <li>A:</li> <li>A:Short times in the breakout rooms</li> <li>A: Sometimes goals werent super clear (ie how to write requirements from scratch)</li> <li>A:Clearer documentation in some points</li> <li>A:Not getting used to the abbreviations quick enough and then not knowing what was being discussed</li> <li>A: course content in the website changing when it was already needed</li> <li>A:Unclear instructions on the assignments<ul> <li> <ul> <li>A: No clear instruction on what to do. Having example will help.</li> </ul> </li> </ul> </li> <li>A:Unclear directions</li> <li>A: For some discussions there was very limited time in breakout rooms</li> <li>A: Limited time</li> <li>A: Not accurate information (links, instructions) in the course documents.</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A:Write a clearer documentation in some points and perhaps a \"dictionary\" for main terms</li> <li>A:More examples</li> <li>A:Write tasks more clearly (for example \"Task 1: Do this or that\")</li> <li>A: More hidden hints with correct answers</li> <li>A: Have a terminology section where abbreviations or more technical terms are defined in a clear and easy to find manner</li> <li>A:Separate presentation and course document, more info on how to apply to 1-person research (esp. risk section), Prepare a gold-standard requirements file so all participants can be on same page</li> <li>A: Since we are a small group, we could work independently and share with everyone, instead of breakout rooms</li> <li>A: Hints with instructions and directions for technical parts and possible issues</li> <li>A: Make a concrete example not specifically related to the exercise, especially given a limited time to do it.</li> <li>A:Phrase the exercises concisely already in the course website</li> <li>A:Give an example before move into the assignment</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<p>[Lars] - Go back to separate Lecture and Website documentation [Lars] - Double check Formatting of website markdown [Lars] - Add examples directly into hints. [Lars] - Clear tasks with hidden do a, then b then c. [Lars] - clearer links to example documentation gold-standard project. [Lars] add examples of how this helps if you are a solo developer.(Long term, as current examples are more team focused) [Lars] relate to more concrete resarch focused examples. [Lars] Examples don't need to read the text.</p>"},{"location":"shared_documents/2024_autumn/20241119/#tuseday","title":"Tuseday","text":""},{"location":"shared_documents/2024_autumn/20241119/#confidence-report-menti_1","title":"Confidence Report Menti","text":""},{"location":"shared_documents/2024_autumn/20241119/#retrospect_1","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241119/#what-helped-us-learn-let-us-move-forward_1","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Was interesting to discuss and read more, and figure it out by ourselves.</li> <li>A: Teamwork and discussions was good</li> <li>A: Having practical example really help and discuss it. Video helps too.</li> <li>A:</li> <li>A: Examples in the form of screenshots</li> <li>A: Examples in the documentation, the interaction activity between teacher and student, the discussion.</li> <li>A:</li> <li>A: Working together on problems</li> <li>A: Having examples in the information pages, and answers</li> <li>A: Better examples and clearer instructions</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#what-stopped-us-from-learning-what-held-us-back_1","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: A very fast pace, at times there was too much info to absord (ie unit testing)</li> <li>Having to juggle both doing something for the project and also focusing on the exercises at the same time</li> <li>A: Lack of time to complete the exercises.</li> <li>A:Not knowing form the start exactly what to do during the exercises</li> <li>A: Little time to work on exercises after understanding all the info</li> <li>A: Laggy teaching video</li> <li>A: From simple example to applying it to project design in a short period of time is quiet challenging.</li> <li>A: Not knowing where to find certain things (kambam board, the correct learners folder etc)</li> <li>A: Not knowing from where to start and to where to go</li> <li>A: Not enough time for the exercises, not knowing the time limit for the exercises.</li> <li>A: Teaching video not working properly, wasn't able to see the code properly because of this.</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#what-could-we-do-to-improve-learning-what-can-we-invent_1","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Give more time to absorb information before having to apply it on a big project</li> <li>A: Either focus on simpler exercises and learning or focus on project work</li> <li>A: More clear tasks</li> <li>A: Focusing on less topics and working on those more deeply and with more time</li> <li>A: take into account the time that these feedback sessions need (second day that the last exercise session is cut short)</li> <li>A: In the teaching video show both the code and where it is being copied from, for clarity</li> <li>A: Give more time</li> <li>A: Maybe more time or simpler(focused) exercises.</li> <li>A:</li> <li>A: Tell us how much time we have for completing all exercises. Helps us to not spend too much time on just one of the exercises and then the time is up without us knowing.</li> </ul>"},{"location":"shared_documents/2024_autumn/20241119/#what-will-we-doact-teachers-only_1","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>[ ] Fix video</li> <li>[ ] More time (in multiple forms):<ul> <li>Discuss with team: should I/we reduce my/own content and/or remove the project?<ul> <li>RB: I volunteer to reduce content and suggest to keep the project</li> </ul> </li> </ul> </li> <li>[ ] Mix of simple exercises and project work:<ul> <li>Discuss with team: should I/we remove the project or schedule it as project hours?<ul> <li>RB: I volunteer to schedule some of my hours as project hours</li> </ul> </li> </ul> </li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li> <p>Zoom:  https://uu-se.zoom.us/j/66734860266</p> <ul> <li>Passcode: 195328</li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2024</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#tuseday","title":"Tuseday","text":""},{"location":"shared_documents/2024_autumn/20241120/#confidence-report-menti","title":"Confidence Report Menti","text":""},{"location":"shared_documents/2024_autumn/20241120/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241120/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Was interesting to discuss and read more, and figure it out by ourselves.</li> <li>A: Teamwork and discussions was good</li> <li>A: Having practical example really help and discuss it. Video helps too.</li> <li>A:</li> <li>A: Examples in the form of screenshots</li> <li>A: Examples in the documentation, the interaction activity between teacher and student, the discussion.</li> <li>A:</li> <li>A: Working together on problems</li> <li>A: Having examples in the information pages, and answers</li> <li>A: Better examples and clearer instructions</li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: A very fast pace, at times there was too much info to absord (ie unit testing)</li> <li>Having to juggle both doing something for the project and also focusing on the exercises at the same time</li> <li>A: Lack of time to complete the exercises.</li> <li>A:Not knowing form the start exactly what to do during the exercises</li> <li>A: Little time to work on exercises after understanding all the info</li> <li>A: Laggy teaching video</li> <li>A: From simple example to applying it to project design in a short period of time is quiet challenging.</li> <li>A: Not knowing where to find certain things (kambam board, the correct learners folder etc)</li> <li>A: Not knowing from where to start and to where to go</li> <li>A: Not enough time for the exercises, not knowing the time limit for the exercises.</li> <li>A: Teaching video not working properly, wasn't able to see the code properly because of this.</li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Give more time to absorb information before having to apply it on a big project</li> <li>A: Either focus on simpler exercises and learning or focus on project work</li> <li>A: More clear tasks</li> <li>A: Focusing on less topics and working on those more deeply and with more time</li> <li>A: take into account the time that these feedback sessions need (second day that the last exercise session is cut short)</li> <li>A: In the teaching video show both the code and where it is being copied from, for clarity</li> <li>A: Give more time</li> <li>A:Maybe more time or simpler(focused) exercises.</li> <li>A:</li> <li>A: Tell us how much time we have for completing all exercises. Helps us to not spend too much time on just one of the exercises and then the time is up without us knowing.</li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>A: In the teaching video show both the code and where it is being copied from, for clarity</li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#wednesday","title":"Wednesday","text":""},{"location":"shared_documents/2024_autumn/20241120/#confidence-report-menti_1","title":"Confidence Report Menti","text":""},{"location":"shared_documents/2024_autumn/20241120/#retrospect_1","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241120/#what-helped-us-learn-let-us-move-forward_1","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: More time to finish exercises</li> <li>A: Working in pairs and doing exercises together</li> <li>A: Taking a longer time to do exercises and learn and understand what we are doing</li> <li>A:Very nice graphics for helping do exercises today</li> <li>A:Getting clearer examples on the formal testing</li> <li>A:Clear instructions and more time to finish.</li> <li>A:Appropriate time to complete the exercises and having goos resources by hand to check theory and examples.</li> <li>A: Having enough time to understand and to work together the exercise really help a lot to understand and finish the task.</li> <li>A: Working together, discussion, exercises.</li> <li>A: Pair programming exercise was really nice, testing documentation was great</li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#what-stopped-us-from-learning-what-held-us-back_1","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Testing could've been a bit deeper. Covering things like mocking. No idea how good pair programming is supposed to look like in practice (only in theory).</li> <li>A: Such lack in code knowledge.</li> <li>A: Didn't know exactly how to do the formal testing in pycharm</li> <li>A: Certain knowledge gaps when it comes to python coding</li> <li>A: Unit testing being a difficult concept</li> <li>A: the pull request exercise and the pretend code review exercise were very similar.</li> <li>A: VS code not cooperating with the testing module</li> <li>A: Some exercises was a bit confusing (ex Exercise 2: put example code to fit the testing framework)</li> <li>A: Coding knowledge influence the speed to do the exercises and how much we understan.</li> <li>A: The morning lectures seem didn't explain clearly</li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#what-could-we-do-to-improve-learning-what-can-we-invent_1","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe perform a quick round of pair programming with the teachers, to me it was not clear how to behave as navigator and I felt like I was micromanaging and being a bad navigator. Refer to online documents for further research in testing (maybe I just missed it). Distribute a cheat sheet after each day summarizing most important?</li> <li>A: Include tutorial link or something to get testing to work in another IDE than vs code, instead of just saying \"try to get it to work in your IDE\".</li> <li>A:</li> <li>A: More examples for each topic</li> <li>A: If possible simplify things even further, or expand on rationale behind each step not just \"big picture\"</li> <li>A: Maybe have a example on testing the code.</li> <li>A:Having \"extra\" exercises that are more difficult that one can try when done with the regular exercises.</li> <li>A: Make the lecture clear and concise. Better to give a practical examples than just explain the concept.</li> <li>A: Give more practical examples of git forking and branching and when it is appropriate to use them.</li> <li>A: Maybe more practical examples.</li> </ul>"},{"location":"shared_documents/2024_autumn/20241120/#what-will-we-doact-teachers-only_1","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li> <p>Zoom:  https://uu-se.zoom.us/j/66734860266</p> <ul> <li>Passcode: 195328</li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2024</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241121/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":""},{"location":"shared_documents/2024_autumn/20241121/#thursday","title":"Thursday","text":""},{"location":"shared_documents/2024_autumn/20241121/#retrospect_1","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241121/#what-helped-us-learn-let-us-move-forward_1","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Good with range in difficulty. Group exercises are great!</li> <li>A:Bigger range in difficulty of exercises</li> <li>A: Group learning is always fun. Frequent brakes. The reading for a few minutes into discussion is nice if you call someone out! otherwise it drags a bit bc no one dares to speak first.</li> <li>A:</li> <li>A: The tips and code snippets for helping do exercises</li> <li>A: Range of difficulties help assess first the things you understand. Pair programming really help.</li> <li>A:Designated time for reading is good!</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/#what-stopped-us-from-learning-what-held-us-back_1","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Not following schedule is a bit confusing, I think we worked on thursday, tuesday and wednesday today.</li> <li>A: felt like some topics were almost skipped over (obviously due to time). But if we dont have time for them maybe we do not need to bring them up.</li> <li>A: The concepts themselves being very abstract and difficult</li> <li>A: Some of the topics are hard to learn while not actually applying them. E.g. while I think I have a good grasp of what modular programming is I'm not sure I could recognize it.</li> <li>A: Applying the lesson directly to the field that you are not familiar with kinda need more time. Additionally, just watching lecture video for a specific topic to learn sometimes is not helpful cause there are concept introduce that was not mentioned in class.</li> <li>A: Starting the day with the most difficult part of the day (before properly waking up haha)</li> <li>A: The youtube lecture was a bit hard to follow, could be better with more examples and images.</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/#what-could-we-do-to-improve-learning-what-can-we-invent_1","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe use the workflow: individual reading -&gt; discussion -&gt; exercises in group for stuff like modular programming. Also be more clear with the schedule I got lost a few times today after zoning out.</li> <li>A: Give more concrete examples for the abstract concepts (like what are objects in the programming world)</li> <li>A: The function design discussion was nice, maybe follow that format more.</li> <li>A: Maybe have a table of definitions and their equivalent names in object oriented programming and non-object-oriented, including the relationsnhips between them. (classes, methods, functions etc)</li> <li>A:</li> <li>A: Give code examples of modular programming and refactoring</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241121/#what-will-we-doact-teachers-only_1","title":"What will we do(Act) [Teachers only]","text":""},{"location":"shared_documents/2024_autumn/20241122/","title":"Programming formalisms \u2014 Shared document Nov 2024","text":"<ul> <li> <p>Zoom:  https://uu-se.zoom.us/j/66734860266</p> <ul> <li>Passcode: 195328</li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2024</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_autumn/20241122/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241122/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241122/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241122/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241122/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":""},{"location":"shared_documents/2024_autumn/20241122/#friday","title":"Friday","text":""},{"location":"shared_documents/2024_autumn/20241122/#retrospect_1","title":"Retrospect","text":""},{"location":"shared_documents/2024_autumn/20241122/#what-helped-us-learn-let-us-move-forward_1","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Great references for future use</li> <li>A: Exercises, group work</li> <li>A: Having the code snippets up on the course website to use and those snippets having explanations too.</li> <li>A:</li> <li>A: The exercises help me understand the lectures. Working in groups is really good.</li> <li>A: Working in groups to test out the theory was super useful</li> <li>A: Working in groups, the examples and discussions.</li> <li>A: Group work</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241122/#what-stopped-us-from-learning-what-held-us-back_1","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Windows code snippets not working, took a lot of time from the exercises</li> <li>A: Not all the commands working on Windows</li> <li>A: Not knowing where to make the exercise files, was not specified in instructions</li> <li>A: Some of the  provided commands did not seem to work for windows. Had to improvise.</li> <li>A: Felt like the goals were not as clear today. Difficult to transfer the topics from today in a lecture. Felt like the project was not complex/functional enough to write proper documentation</li> <li>A: Unclear guide in the exercises (specifically in the documentation)</li> <li>A:</li> <li>A: Some things were very fast for me.</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241122/#what-could-we-do-to-improve-learning-what-can-we-invent_1","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Have a more functional project for which writing documentation actually provides worth. Installation/requirements/etc were not extensive enough for the exercises imo. Also maybe resetting the state of the project Github so everyone is on same page?</li> <li>A:</li> <li>A: Adding commands that work on windows as well as mac/linux</li> <li>A:</li> <li>A: Put everything practical that we are supposed to do within the exercises. It's a bit confusing when some parts are in the \"theory part\" with code that we are supposed to use and some parts are in \"exercises\"</li> <li>A: Have more realizable project. Make the guide much clearer.</li> <li>A: Early on ask about experience level amongst the group and group people based on their experience to enable more difficult exercises to be done.</li> <li>A: More clear exercises, specifying some points such as direction, folder etc. Something like step-by-step as well as in some examples and exercises.</li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_autumn/20241122/#teacher-improvment-google-form","title":"Teacher improvment google form","text":"<pre><code>https://forms.gle/wf8ohmsgSEBJc93c6\n</code></pre>"},{"location":"shared_documents/2024_autumn/20241122/#certification-will-not-be-published-on-github","title":"Certification Will not be published on Github","text":"<p>follow this link and add your full name and email and if you also need a discription with your course certificate.</p>"},{"location":"shared_documents/2024_autumn/20241122/#what-will-we-doact-teachers-only_1","title":"What will we do(Act) [Teachers only]","text":""},{"location":"shared_documents/2024_summer/","title":"Summer 2024 shared documents","text":"<p>These are the shared documents used in this course iteration.</p> Day Shared document 1 Shared document 2 Shared document 3 Shared document 4 Shared document 5 Shared document"},{"location":"shared_documents/2024_summer/20240422/","title":"20240422","text":""},{"location":"shared_documents/2024_summer/20240422/#retrospective","title":"Retrospective","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>"},{"location":"shared_documents/2024_summer/20240422/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>The content of all lectures was great and the starting level was perfect (for me at least).</li> <li>Really clear material, easy to follow. I really enjoyed the exercises in the breakout rooms, it makes it easier to work and put in practice what we learnt today.</li> <li>It was clear instructions and easy to follow the lectures. Very interesting content.</li> <li>Learned how to find the requirements for the software development from a particular topic.</li> <li>Breakout room exercises and discussions</li> <li>Orientations on the course. structure of the course, format of the organization. theory combine with practice. interactive teaching is also good.</li> <li>I have learned a lot in the first day. The instruction was very well.</li> <li>Exercises with breakout rooms, setting up group github repository</li> <li>Clear instructions on the course materials</li> </ul>"},{"location":"shared_documents/2024_summer/20240422/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>Time allocation works fine for all sections</li> <li>The schedule was fine.</li> <li>The schedule was ok, we had enough time.</li> <li>The exercises were well scheduled.</li> <li>more time for break.</li> <li>Every section had ample time</li> </ul>"},{"location":"shared_documents/2024_summer/20240422/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>some technical issues with connecting github account to the course.</li> <li>More reading materials and relevant recipes for exercises</li> <li>I have enough time to understand all session</li> </ul>"},{"location":"shared_documents/2024_summer/20240422/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<ul> <li>More content on the HPC workflow management?</li> <li>Yes I agree with that, some more on how to write workflows</li> <li>Maybe present the exercise before a break so we have the time to read the intructions on what to do? It was kind of hard to grasp on the fly what to do. At least for the last one. However, the breakout room session compensated for it because the things that I did not get my breakout roomies explained to me and vice versa.</li> <li>Agre with the upper comment on the exercise instructions.</li> <li>More exercises and materials</li> <li>Instructions on combining different languages into one software</li> <li>How to use pytest</li> <li>Actually there was a lot of information to consume in a certain time is kinda hard and Every topic is very importent. so sometime it takes a lot of effort to take it all in that time.</li> </ul>"},{"location":"shared_documents/2024_summer/20240422/#action-points-by-teachers","title":"Action points by teachers","text":"<ul> <li>We agree that breaks should be for breaks</li> <li>We think it would be good that learners don't read instructions in breaks</li> <li>Already done: session 'Deployment' has HPC, where one does not have sudo rights</li> <li>Already done: session 'Testing' uses a testing framework ('unittest' instead   of PyTest, but hey, it's a formal testing framework)</li> <li>We don't have workflows in the course yet.   We often discuss what to put in yes/no   and we feel now the other topics are even more important</li> <li>We don't have instructions on combining different languages in the course yet.   We often discuss what to put in yes/no   and we feel now the other topics are even more important</li> <li>There is indeed a lot of information.   We often discuss what to put in yes/no.   We could not settle on an algorithm to determine what is to be in the content.   The 'why'/'what'/'when'/'where' should be there</li> </ul>"},{"location":"shared_documents/2024_summer/20240423/","title":"Retrospective 2024-04-23","text":""},{"location":"shared_documents/2024_summer/20240423/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Pair programming</li> <li>Exercises sessions were dynamic and fun</li> <li>Pair programming was very instructive and fun.</li> <li>All the parts were a new way of seeing the process take form   so I think all the exercises went well.</li> <li>Really fun with pair programming and learn from eachother.</li> </ul>"},{"location":"shared_documents/2024_summer/20240423/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>All was okay</li> <li>All exercises were very stressful since you have to do a reset/context switching everytime we change breakout rooms.   Spend time on finding correct files and material.</li> </ul>"},{"location":"shared_documents/2024_summer/20240423/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>I didnt feel anything hold us back today</li> <li>Maybe too simple of exercises</li> <li>Technical issues. Not so much time to spend on the actual exercise.</li> </ul>"},{"location":"shared_documents/2024_summer/20240423/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<ul> <li>A small section about what merge conflicts are and how to resolve them</li> <li>I didnt have any issue that has to be inprove.It went well.</li> <li>I think the first pair programming exercise was a little confusing   since we did not have to both work on a same document.   Maybe task to create a simple for loop where we individually   have to contribute to a single def?</li> <li>Add some complementary exercises if there is available time</li> <li>I think it was very interesting</li> <li>More time to read through the exercise.</li> </ul>"},{"location":"shared_documents/2024_summer/20240423/#action-points-by-teachers","title":"Action points by teachers","text":"<ol> <li>All exercises were very stressful since you have to do a reset/context switching everytime we change breakout rooms. Spend time on finding correct files and material.</li> <li>More time to read through the exercise.</li> </ol> <p>We understand that this can be felt like that. We do think this is worth it above the alternative of not using different partners. Maybe we should have been more clear that it is perfectly fine and expected that it tales to find the correct files and material..</p> <ul> <li>TODO: Richel mentions this tomorrow</li> </ul> <ol> <li>Maybe too simple of exercises</li> <li>Add some complementary exercises if there is available time</li> </ol> <p>We wonder what this is about. Here we discuss for each teacher:</p> <ul> <li>Lars: more complex design structure would water down the exercise</li> <li>Richel: I am happy to hear this! My exercises should be simple,   as it is the workflow (indeed, with many technical problems)   that is the goal of the exercise</li> </ul> <p>We do agree that one can feel that the exercises too simple!</p> <ul> <li>[ ] TODO: Richel mentions this tomorrow</li> <li>[ ] TODO: Lars adds a second tier of exercises</li> </ul> <ul> <li>A small section about what merge conflicts are and how to resolve them</li> </ul> <p>We agree, this should have been discussed on Monday</p> <ul> <li>[ ] TODO: Bj\u00f6rn: consider discussing merge conflicts on Monday</li> </ul> <p>I think the first pair programming exercise was a little confusing since we did not have to both work on a same document. Maybe task to create a simple for loop where we individually have to contribute to a single def?</p> <p>Completely agree! Richel will restructure this better, as indeed, it feels (and he said so too!) unnatural.</p>"},{"location":"shared_documents/2024_summer/20240424/","title":"Programming formalisms \u2014 Course April 2024","text":"<ul> <li>Zoom:  https://uu-se.zoom.us/j/61013274662<ul> <li>Passcode: 202277</li> </ul> </li> <li>Course material:<ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_summer_2024</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_summer/20240424/#today","title":"Today","text":"<ul> <li>Q: Is there a way to visualise the git graph in VS-Code</li> <li> <p>A: Yes in VS code there is a popular extention git graph which will give you a nice visual graph of your branches https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph (Lars)</p> </li> <li> <p>Q: What \"origin\" means in the git push context?</p> </li> <li> <p>A: it is the source of your repository. For us, the origin is the GitHub repo</p> </li> <li> <p>Q: How does git remote works? Can you configure it to multiple online servers apart from Github?</p> </li> <li> <p>A: git remotes allow you to do a <code>git push</code> to some remote. In our case, the GitHub repo is the remote</p> </li> <li> <p>Q:Line endings in git</p> </li> <li> <p>A:https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings</p> </li> <li> <p>Q:</p> </li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li> <p>A:</p> </li> <li> <p>Q:</p> </li> <li>A:</li> </ul>"},{"location":"shared_documents/2024_summer/20240424/#retrospective","title":"Retrospective","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>"},{"location":"shared_documents/2024_summer/20240424/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Creating and using branches on github</li> <li>Github repetitions was good practice</li> <li>Working with branches on git and how to deal with conflicts.</li> <li>Doing testing. Listening to awesome lectures. Learning new things!</li> <li>Can unsderstand well the git workflow now and enjoy how to doing test</li> </ul>"},{"location":"shared_documents/2024_summer/20240424/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":""},{"location":"shared_documents/2024_summer/20240424/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>Switching between VS-code and github caused some trouble in updating the branches on the terminal, causing some confusion in merging branches (solving conflicts). -Short time for unittesting exercise, felt rushed</li> <li>Switching between users in pair-programming takes time. So maybe more time might be needed.</li> <li>More time for the testing exercises, not enough time to really try the testing.</li> <li>Need to pratise more in the testing exercises</li> </ul>"},{"location":"shared_documents/2024_summer/20240424/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":""},{"location":"shared_documents/2024_summer/20240424/#action-points-by-teachers","title":"Action points by teachers","text":"<p>Only for teachers! Thanks for filling in!</p>"},{"location":"shared_documents/2024_summer/20240425/","title":"Programming formalisms \u2014 Course April 2024","text":"<ul> <li>Zoom:  https://uu-se.zoom.us/j/61013274662<ul> <li>Passcode: 202277</li> </ul> </li> <li>Course material:<ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_summer_2024</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_summer/20240425/#today-26-april","title":"Today 26 April","text":""},{"location":"shared_documents/2024_summer/20240425/#retrospective","title":"Retrospective","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>"},{"location":"shared_documents/2024_summer/20240425/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Most of the pair programming and TDD went well. Really enjoyed todays topics and exercises. I just had a great day with learning (from both teachers and other learners). WE really got a chance to practice the workflow.</li> <li>Exercises were really fun, I really enjoyed today's exercises. I really appreciate that we had more time for hands-on exercises.</li> <li>...</li> <li>...</li> <li>...</li> <li>Good lectures and a lot of good exercices to get use to GitHub</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240425/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>I think we had enough time for most exercises. However, at this point you also know when it is fine to not finish an exercise.</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240425/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>The groups were switched too often, which in turn, broke the continuity of lessons since everyone was doing somewhat different things.</li> <li>Expected to have more on Data structures and algorithms</li> <li>Too much GitHub, interesting but maybe it should be a separate course</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240425/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<ul> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240425/#action-points-by-teachers","title":"Action points by teachers","text":"<p>Only for teachers! Thanks for filling in!</p>"},{"location":"shared_documents/2024_summer/20240426/","title":"20240426","text":""},{"location":"shared_documents/2024_summer/20240426/#retrospective-day-5","title":"Retrospective Day 5","text":"<p>Teachers are learners too. Please help us improve by sharing your opinion. Ideally, it is something fixable, e.g. 'My camera did not work' is something we cannot fix, but 'I had no way to interact (as my camera did not work) and the Zoom chat was not listened to' is.</p>"},{"location":"shared_documents/2024_summer/20240426/#continue-what-went-well","title":"Continue: What went well?","text":"<ul> <li>Mixing teachers and topics during the last day. At least I feel that my brain is a bit soaked in information so it was nice to have this last day with different topiscs so you could stay alert.</li> <li>Everything went well</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li> </li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240426/#_1","title":"...","text":"-"},{"location":"shared_documents/2024_summer/20240426/#improve-which-sections-scheduled-enough-time-for-exercises","title":"Improve: Which section(s) scheduled enough time for exercises?","text":"<ul> <li>I think we had enough time to at least get the concept of each exercise even if we could do more.</li> <li>...</li> <li>...</li> <li>...</li> <li>I think we had enough time.</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240426/#question-should-a-github-course-be-a-prerequisite","title":"Question: should a GitHub course be a prerequisite?","text":"<p>In the course we spend a lot of time on GitHub as we use/need it. However, there are plenty of GitHub courses (e.g. NBIS has one). Should having followed a GitHub course be a prerequisite?</p> <ul> <li>...Yes, but then reduce the load of GitHub exercises</li> <li>..Maybe its a good idea to at least write in the pre-req that github will be used a lot.</li> <li>...Yes, at least the basic stuff (how to create an issue, create a branch, etc.).</li> <li>Probably, but it might be a reducing factor for applicants. I can only take one course per year. So having another course as a pre-requisite would probably make it a bit hard for me to attend.</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240426/#stop-what-held-us-back","title":"Stop: What held us back?","text":"<ul> <li>...For me it was too many new tools and I didn\u00b4t have enough time during the exercises to switch between mermaid and github ..</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240426/#invent-what-can-we-improve","title":"Invent: What can we improve?","text":"<ul> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> <li>...</li> </ul>"},{"location":"shared_documents/2024_summer/20240426/#course-evaluation","title":"Course evaluation","text":"<p>&amp;TLDR: write something about the course</p> <p>The course motto is 'turning scripters into computer scientists', by 'adding theory to bolster already present practical skills'. The purpose of the shared project is to give a realistic/complex environment where the theoretical concepts can be experienced (e.g. branching, code reviews).</p> <ul> <li>How can we better achieve those goals?<ul> <li>The course was very good overall and gave a good perspective on software design, but I missed some other application outside developing a package, such as how to apply those software development techniques to developing analysis workflows. For example, should we use TDD for workflows? or are classes also useful in workflow contexts?</li> </ul> </li> <li>Where did we do a good job and where could we do better?<ul> <li>The course structure was very good. We can do better for exercises.</li> <li>It was a very good course with very clear documentation. The exercises were also very good eventhough there was not always enough time.</li> <li>I think it could be more clearly stated in the beginning of the course that we were not supposed to actually build a complete software. The first days I got really stressed when I didn't finished the exercises and when I couldn't handle all the new tools. After a couple of days I figured out that that was not purpose. Then I could relax a bit and focus more on learning instead of stressing about the practical parts.</li> </ul> </li> <li>What would you keep and what would you change?<ul> <li>Love all the practical exercises, but the GitHub was a bit too much. Would have focuses on the software design exercise more.</li> <li>I enjoyed all the git-hubbing but I have some experience from before so it mostly gave me the tools to develop my already exixstig skills.</li> </ul> </li> <li>If you want to do more of something, what should be done less of?<ul> <li>Modularity and data structure, less practice about git issue</li> <li>More testing, less flowcharts.</li> </ul> </li> </ul>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-1","title":"Write something about the course 1","text":"<p>I enjoyed the course. Now I have more background to able to code a program for others who can use. I love the pair programming. This is more interecting than I think. Thank you very much!</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-2","title":"Write something about the course 2","text":"<p>The course was very good. Really nice material and easy to follow. There has been a lot of information to digest but I think it will be easy to later go to the website and read through again all the excellent material. The pair programming was really fun and very instructive, I really enjoyed it. I think everything went fine during the course but sometime we didn't have enought time to complete the exercises, it felt a bit rushed. In terms of content, I missed more practical exercises on how to optimise the code. But as a summary a really nice course :) ...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-3","title":"Write something about the course 3","text":"<p>...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-4","title":"Write something about the course 4","text":"<p>...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-5","title":"Write something about the course 5","text":"<p>...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-6","title":"Write something about the course 6","text":"<p>...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-7","title":"Write something about the course 7","text":"<p>...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-8","title":"Write something about the course 8","text":"<p>...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-9","title":"Write something about the course 9","text":"<p>...</p>"},{"location":"shared_documents/2024_summer/20240426/#write-something-about-the-course-10","title":"Write something about the course 10","text":"<p>...</p>"},{"location":"shared_documents/2025_autumn/","title":"Autumn 2025 shared documents","text":"<p>These are the shared documents used in this course iteration.</p> Day Shared document 1 Shared document 2 Shared document 3 Shared document 4 Shared document 5 Shared document"},{"location":"shared_documents/2025_autumn/20251023/","title":"Programming formalisms \u2014 Shared document Oct 2025","text":"<ul> <li> <p>Zoom: <code>[removed]</code></p> <ul> <li>Passcode: <code>[removed]</code></li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2025</li> </ul> </li> </ul>"},{"location":"shared_documents/2025_autumn/20251023/#day-1","title":"Day 1","text":""},{"location":"shared_documents/2025_autumn/20251023/#introduction","title":"Introduction","text":""},{"location":"shared_documents/2025_autumn/20251023/#what-do-you-develop-for","title":"What do you develop for?","text":"<ul> <li>Bj\u00f6rn: Analysis, modelling</li> <li>Richel: analysis of data (Python and R), tools for process of data, workflows, modelling/simulation<ul> <li>theoretical biology, e.g. C++</li> <li>phylogenetics, e.g. the babette and pirouette R packages</li> <li>immunology</li> </ul> </li> <li>Lorena: analysis of data, workflows, tools for processing data (simple ones ...)</li> <li>Anna-Lena: analysis of data, modelling</li> <li>Alice: analysis of data, modelling</li> <li>Carlos: Analysis of data, workflows and modelling</li> <li>Cibi Sundaram : data analysis, statistics, simulations<ul> <li>applied nuclear physics at UU</li> <li>python, SERPENT, MCNP</li> <li>mainly working with simulation data and data from reactors</li> </ul> </li> <li>Hyewon: language modeling and statistical analysis</li> </ul>"},{"location":"shared_documents/2025_autumn/20251023/#markdown-tests","title":"Markdown tests","text":""},{"location":"shared_documents/2025_autumn/20251023/#example-by-sven","title":"Example by Sven","text":"<p>Bold and emphasized.</p> A B C 1 x y 2 m n"},{"location":"shared_documents/2025_autumn/20251023/#uml-tests-optional","title":"UML tests (optional)","text":""},{"location":"shared_documents/2025_autumn/20251023/#example","title":"Example","text":"<pre><code>flowchart TD\n      unit_tests[Unit test]\n      unit_tests --&gt; |As many times as necessary| unit_tests\n      unit_tests --&gt; |worst bugs fixed| alpha\n      alpha[Alpha release]\n      alpha --&gt; |As many times as necessary| unit_tests\n      alpha --&gt; |worst bugs fixed| beta\n      beta[Beta release]\n      beta --&gt; |As many times as necessary| alpha\n      beta --&gt; |minor bugs fixed| done\n      done[Finished program]</code></pre>"},{"location":"shared_documents/2025_autumn/20251023/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2025_autumn/20251023/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Real examples to explain the the theory. Small size groups</li> <li>A:</li> <li>A:Real-life examples and practicals</li> <li>A:</li> <li>A:Examples and direct explanations, Exercises</li> <li>A:</li> <li>A:Real examples and exercises/explanations</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251023/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Technical issues with git/VS, having to check own VS and shared zoom window at the same time (on one screen), never used VS before, too little use of terminal. Assigments not discussed together/explained too well before delving into them.</li> <li>A:Unfamiliar with VSCode, confusing git intro because everyone tried to commit at the same time</li> <li>A:</li> <li>A:</li> <li>A:I appreciate the industry examples but sometimes I find it hard to translate it into the academic context. x2 the unfamiliarity with VS Code. I would rather see the raw <code>git</code> commands first rather than getting lost in the many options of the graphical interphase.</li> <li>A:</li> <li>A: Sometimes the assignements are unclear (most of the time they are though)</li> <li>A:Too fast on the first git commit as I had to create a new branch cause someone had already commited and pushed changes</li> <li>A: Some examples/concepts are clear for SWE but when I applied to AI/ML/stats projects it is not as inuitive</li> <li>A: Sometimes the pace is too fast in the small groups</li> </ul>"},{"location":"shared_documents/2025_autumn/20251023/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: State clearly what the assigment is before letting the students delve into it, use terminal instead of VS code.Otherwise, explain the VS interface at least once before using it. A bit confusing as well with the GitHub notes instead of more structured course material - like slides.</li> <li>A:Explain the structure of the repo before hand. I think the people that ended up in the \"advanced\" git session were not explained that there was a \"learners\" folder and that became confusing later on. 5</li> <li>A: </li> <li>A:Sometimes it is difficult to follow because people are on different levels, would need better explanation. Intro to VSCode, not everyone is familiar</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251023/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>Lars clearify excersises</li> <li>Time management, make morning session more hands on less theory</li> <li>Change from twice a year to only spring. to allow for more prep time for teachers.</li> <li>Define clear roles before.</li> </ul>"},{"location":"shared_documents/2025_autumn/20251023/#confidence-report-10min","title":"Confidence Report: (10min)","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can connect to the course repo:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:5</li> <li>A:</li> <li>A:</li> </ul> <p>I can find the needs/buissnes requirments:</p> <ul> <li>A: 1</li> <li>A: 3</li> <li>A: 3</li> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 2</li> <li>A: 4</li> <li>A: 2</li> <li>A: 3</li> </ul> <p>I can do a simple FMEA:</p> <ul> <li>A: 2</li> <li>A: 2</li> <li>A:2</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what FMEA stands for:</p> <ul> <li>A: 0</li> <li>A: 4</li> <li>A:4</li> <li>A:4</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I can make an issue in the project:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A:5</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know basic Git:</p> <ul> <li>A: 5</li> <li>A: 4</li> <li>A:5</li> <li>A:5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what a Requirement is:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 3</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know how to write a formal requiremnts documentation:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know how a remote repo works: </p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 4</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know why we specify requirments:</p> <ul> <li>A: 4</li> <li>A: 5</li> <li>A: 4</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know the purpose of formalism in Computer Science:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what are the outcomes of a program:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what are the steps of development:</p> <ul> <li>A: 4</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what is the Software development life cycle:</p> <ul> <li>A: 3</li> <li>A: 3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what is the importance of Documentation:</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what is the different kinds of documentation:</p> <ul> <li>A: 3</li> <li>A: 4</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251024/","title":"Programming formalisms \u2014 Shared document Oct 2025","text":"<ul> <li> <p>Zoom: <code>[removed]</code></p> <ul> <li>Passcode: <code>[removed]</code></li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2025</li> </ul> </li> </ul> <p>(RJCB: I removed the day 1 part)</p>"},{"location":"shared_documents/2025_autumn/20251024/#day-2","title":"Day 2","text":""},{"location":"shared_documents/2025_autumn/20251024/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2025_autumn/20251024/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A: Interaction during explanations</li> <li>A: Better instructions for exercises compared to yesterday</li> <li>A:The practical exercises were really great !</li> <li>A: Richel's enthusiasm :-)</li> <li>A: Individual feedback for exercises</li> <li>A:nice explanations and instructions for the tutorials, easy to follow, always there for questions</li> <li>A:The exercises were helpful! Practising it and getting feedback is good!</li> <li>A:</li> <li>A:The live examples. It was helpful to get an explanation of the structure of the lesson before starting. Having a chance to ask questions in the individual breaking room.</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251024/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A: Sometimes the assignements are unclear</li> <li>A: No live examples for TDD, I would have appreciated at least one live demonstration of the methods before the exercises, and not just discussing it theoretically - it is a bit counterintuitive.</li> <li>A: Too little knowledge in python to be able to feel confident in writing tests correctly - are you sure the initial requirements for the course are really enough?</li> <li>A: rather similar examples, not really sure how this expand (especially TDD) to more complex settings, How easy is it to find tests then?</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: I got issues with git in VS code but that probably comes down to my inexperience.</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251024/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Better defined assignements ?</li> <li>A: Give at least one live example of TDD before letting the students tackle the challenge by themselves. Or maybe suggest to watch one of the videos first? </li> <li>A:Maybe a bit more hands-on exercise is good. Something a little complex.</li> <li>A:Also, how to relate these good practices in our programming for our disciplines, for example assert and stuff won't work for simulations and other programming.</li> <li>A: Do the first TDD example as a team and not individually - one good example would save from waisting time on pracitising the wrong method</li> <li>A: Showcasing an exemplary more complex example</li> <li>A: </li> <li>A:A way to communicate with the teacher when inside breakout rooms!</li> <li>A: </li> <li>A:</li> <li>A:3 minutes for the retrospective questions is too long, we always end up answering the next questions during the first one :). maybe 2min? 2:30?</li> <li>A:A bit more use case discussion on issues - like a how does it look like for a sample/real life project</li> <li></li> </ul>"},{"location":"shared_documents/2025_autumn/20251024/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":"<ul> <li>Lars clearify excersises</li> <li>Time management, make morning session more hands on less theory</li> <li>Change from twice a year to only spring. to allow for more prep time for teachers.</li> <li>Define clear roles before.</li> </ul>"},{"location":"shared_documents/2025_autumn/20251024/#confidence-report-10min","title":"Confidence Report: (10min)","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can create, assign and close an issue\"</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 3</li> <li>A: 5</li> <li>A:4</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I can use TDD to develop functions</p> <ul> <li>A: 3</li> <li>A: 2</li> <li>A: 4</li> <li>A:</li> <li>A:3</li> <li>A:</li> <li>A: 2</li> <li>A:</li> <li>A:</li> </ul> <p>I can use a kanban board</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 3</li> <li>A: 4</li> <li>A:3</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know how to  make a risk for a requirment</p> <ul> <li>A: 2 (but I missed that part unfortunately)</li> <li>A: 3</li> <li>A: 3</li> <li>A: 2</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know the major parts of a development cycle</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A:</li> <li>A:4</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know the major technical risks with a SW project</p> <ul> <li>A: 2 (also missed that part)</li> <li>A: </li> <li>A: 3</li> <li>A: 2</li> <li>A:2</li> <li>A: what does SW stand for, again? </li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know where to find the 'latest' best practices</p> <ul> <li>A: 2</li> <li>A: 1</li> <li>A: 2</li> <li>A: 4</li> <li>A:</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I understand what SDLC is</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 3</li> <li>A: 3</li> <li>A:2</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I know what a Feature is</p> <ul> <li>A: 4</li> <li>A: 3</li> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A:3</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I understand how features relate to Requirments</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A: 4</li> <li>A:</li> <li>A:4</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I understand why TDD is important</p> <ul> <li>A: 4</li> <li>A: 4</li> <li>A: 2</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:4</li> <li>A:</li> </ul> <p>I understand why <code>assert</code> is important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:3</li> <li>A:</li> <li>A: 3</li> <li>A:</li> <li>A:</li> </ul> <p>I understand why a kanban board is important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:3</li> <li>A: 5</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul> <p>I understand why issues are important</p> <ul> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A: 5</li> <li>A:</li> <li>A:4</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251027/","title":"Programming formalisms \u2014 Shared document Oct 2025","text":"<ul> <li> <p>Zoom: <code>[removed]</code></p> <ul> <li>Passcode: <code>[removed]</code></li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2025</li> </ul> </li> </ul>"},{"location":"shared_documents/2025_autumn/20251027/#day-3","title":"day 3","text":""},{"location":"shared_documents/2025_autumn/20251027/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2025_autumn/20251027/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:</li> <li>A:The live-examples and the exercises were very helpful. I appreciated the example from big to small programming. (I also appreciate the breaks!)</li> <li>A:</li> <li>A: I was happy with the pair programming concepts and the last group exercises.</li> <li>A: Live examples and pair programming very funny !</li> <li>A: pair exercises and live examples</li> <li>A:</li> <li>A:Exercises in pairs</li> <li>A:Thorough explanation of TDD method to create the weather code</li> <li>A:</li> <li>A:Good way to learn TDD through Pair programming!</li> <li>A:Today's session had more pratical exercises which helped us learn hands-on! Good job to the instructors!</li> </ul>"},{"location":"shared_documents/2025_autumn/20251027/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A:</li> <li>A: Nothing to declare.</li> <li>A:</li> <li>A: I can't think of anything </li> <li>A: Still some issues with VSCode, but it worked in the end. Time for group exercises and off topic questions were a bit short. </li> <li>A: Technical issue in the morning with Git website rendering - don't know how that could be avoided though</li> <li>A: Using GitHub web interface and git commands and VS code, I think we should agree on one single method, or at least mostly use one</li> <li>A:</li> <li>A: Maybe some more time with the group exercises would be appreciated!</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251027/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe bit more on how to integrate these in our discipline specific programming would be appreciated, like some of us work on data analysis/exploration where the data might not be a spefic value but a dataframe or numpy array, how do we integrate the assert to such cases? Also, most of us work involves data cleaning and others, but how do we check if the data is cleaned or not?</li> <li>A:</li> <li>A: Maybe some more clarity in stating the purpose/methods to be used in the morning exercises - but it might as well just be me not functioning on Monday morning </li> <li>A:</li> <li>A: Can't think of anything</li> <li>A:</li> <li>A: Was a good session!</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: Good session overall!</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251027/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":""},{"location":"shared_documents/2025_autumn/20251027/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can create, switch and delete a git branch locally</p> <pre><code>- A: 5\n- A: 5\n- A:5\n- A: 5\n- A: 5\n- A:\n- A:\n</code></pre> <p>I can do Pull requests</p> <pre><code>- A: 5\n- A: 5\n- A: 5\n- A:5\n- A:5\n- A:\n- A:\n</code></pre> <p>I can do a code review (in GitHub)</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:4\n- A:\n- A:4\n</code></pre> <p>I can explain and evaluate the usefulness of branches</p> <pre><code>- A: 5\n- A: 5\n- A: 4\n- A:4\n- A:\n- A:4\n- A:\n</code></pre> <p>I can manage merge conflicts locally</p> <pre><code>- A: 5\n- A:\n- A: 5\n- A: 3\n- A:5\n- A:\n- A:4\n</code></pre> <p>I can manage merge conflicts on GitHub</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:5\n- A:\n- A:4\n</code></pre> <p>I can merge locally</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:5\n- A:4\n- A:\n</code></pre> <p>I can merge on GitHub</p> <pre><code>- A: 5\n- A:\n- A: 4\n- A: 4\n- A:5\n- A:\n- A:4\n</code></pre> <p>I feel confidence and motivation in making my code open-source</p> <pre><code>- A: 5\n- A: 4\n- A: 5\n- A:\n- A:5\n- A:5\n- A:\n</code></pre> <p>I have an idea about how to contribute as an external contributor</p> <pre><code>- A: 4\n- A: 5\n- A: 4\n- A:\n- A:4\n- A:4\n- A:\n</code></pre> <p>I understand when a forked workflow is recommended</p> <pre><code>- A: 5\n- A: 5\n- A:4\n- A: 4\n- A:4\n- A:\n- A:\n</code></pre> <p>I understand how to do TDD at a larger scale</p> <pre><code>- A: 4\n- A: 4\n- A:4\n- A: 2\n- A:5\n- A:\n- A:\n</code></pre> <p>I understand why pair programming is important</p> <pre><code>- A: 5\n- A: 5\n- A: 4\n- A:5\n- A:\n- A:\n- A:4\n</code></pre> <p>I understand what good pair programming looks like</p> <pre><code>- A: 4\n- A: 4\n- A: 4\n- A:\n- A:3\n- A:4\n- A:\n</code></pre>"},{"location":"shared_documents/2025_autumn/20251028/","title":"Programming formalisms \u2014 Shared document Oct 2025","text":"<ul> <li> <p>Zoom: <code>[removed]</code></p> <ul> <li>Passcode: <code>[removed]</code></li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2025</li> </ul> </li> </ul>"},{"location":"shared_documents/2025_autumn/20251028/#day-1","title":"Day 1","text":""},{"location":"shared_documents/2025_autumn/20251028/#introduction","title":"Introduction","text":""},{"location":"shared_documents/2025_autumn/20251028/#what-do-you-develop-for","title":"What do you develop for?","text":"<ul> <li>Bj\u00f6rn: Analysis, modelling</li> <li>Richel: analysis of data (Python and R), tools for process of data, workflows, modelling/simulation<ul> <li>theoretical biology, e.g. C++</li> <li>phylogenetics, e.g. the babette and pirouette R packages</li> <li>immunology</li> </ul> </li> <li>Lorena: analysis of data, workflows, tools for processing data (simple ones ...)</li> <li>Anna-Lena: analysis of data, modelling</li> <li>Alice: analysis of data, modelling</li> <li>Carlos: Analysis of data, workflows and modelling</li> <li>Cibi Sundaram : data analysis, statistics, simulations<ul> <li>applied nuclear physics at UU</li> <li>python, SERPENT, MCNP</li> <li>mainly working with simulation data and data from reactors</li> </ul> </li> <li>Hyewon: language modeling and statistical analysis</li> </ul>"},{"location":"shared_documents/2025_autumn/20251028/#markdown-tests","title":"Markdown tests","text":""},{"location":"shared_documents/2025_autumn/20251028/#example-by-sven","title":"Example by Sven","text":"<p>Bold and emphasized.</p> A B C 1 x y 2 m n"},{"location":"shared_documents/2025_autumn/20251028/#uml-tests-optional","title":"UML tests (optional)","text":""},{"location":"shared_documents/2025_autumn/20251028/#example","title":"Example","text":"<pre><code>flowchart TD\n      unit_tests[Unit test]\n      unit_tests --&gt; |As many times as necessary| unit_tests\n      unit_tests --&gt; |worst bugs fixed| alpha\n      alpha[Alpha release]\n      alpha --&gt; |As many times as necessary| unit_tests\n      alpha --&gt; |worst bugs fixed| beta\n      beta[Beta release]\n      beta --&gt; |As many times as necessary| alpha\n      beta --&gt; |minor bugs fixed| done\n      done[Finished program]</code></pre>"},{"location":"shared_documents/2025_autumn/20251028/#_1","title":"Programming formalisms \u2014 Shared document Oct 2025","text":""},{"location":"shared_documents/2025_autumn/20251028/#day-3","title":"day 3","text":""},{"location":"shared_documents/2025_autumn/20251028/#retrospect","title":"Retrospect","text":""},{"location":"shared_documents/2025_autumn/20251028/#what-helped-us-learn-let-us-move-forward","title":"What helped us learn (let us move forward)","text":"<ul> <li>A:</li> <li>A:The live-examples and the exercises were very helpful. I appreciated the example from big to small programming. (I also appreciate the breaks!)</li> <li>A:</li> <li>A: I was happy with the pair programming concepts and the last group exercises.</li> <li>A: Live examples and pair programming very funny !</li> <li>A: pair exercises and live examples</li> <li>A:</li> <li>A:Exercises in pairs</li> <li>A:Thorough explanation of TDD method to create the weather code</li> <li>A:</li> <li>A:Good way to learn TDD through Pair programming!</li> <li>A:Today's session had more pratical exercises which helped us learn hands-on! Good job to the instructors!</li> </ul>"},{"location":"shared_documents/2025_autumn/20251028/#what-stopped-us-from-learning-what-held-us-back","title":"What stopped us from learning (What held us back)","text":"<ul> <li>A:</li> <li>A: Nothing to declare.</li> <li>A:</li> <li>A: I can't think of anything </li> <li>A: Still some issues with VSCode, but it worked in the end. Time for group exercises and off topic questions were a bit short. </li> <li>A: Technical issue in the morning with Git website rendering - don't know how that could be avoided though</li> <li>A: Using GitHub web interface and git commands and VS code, I think we should agree on one single method, or at least mostly use one</li> <li>A:</li> <li>A: Maybe some more time with the group exercises would be appreciated!</li> <li>A:</li> <li>A:</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251028/#what-could-we-do-to-improve-learning-what-can-we-invent","title":"What could we do to improve learning (What can we invent)","text":"<ul> <li>A: Maybe bit more on how to integrate these in our discipline specific programming would be appreciated, like some of us work on data analysis/exploration where the data might not be a spefic value but a dataframe or numpy array, how do we integrate the assert to such cases? Also, most of us work involves data cleaning and others, but how do we check if the data is cleaned or not?</li> <li>A:</li> <li>A: Maybe some more clarity in stating the purpose/methods to be used in the morning exercises - but it might as well just be me not functioning on Monday morning </li> <li>A:</li> <li>A: Can't think of anything</li> <li>A:</li> <li>A: Was a good session!</li> <li>A:</li> <li>A:</li> <li>A:</li> <li>A: Good session overall!</li> <li>A:</li> </ul>"},{"location":"shared_documents/2025_autumn/20251028/#what-will-we-doact-teachers-only","title":"What will we do(Act) [Teachers only]","text":""},{"location":"shared_documents/2025_autumn/20251028/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I can create, switch and delete a git branch locally</p> <pre><code>- A: 5\n- A: 5\n- A:5\n- A: 5\n- A: 5\n- A:\n- A:\n</code></pre> <p>I can do Pull requests</p> <pre><code>- A: 5\n- A: 5\n- A: 5\n- A:5\n- A:5\n- A:\n- A:\n</code></pre> <p>I can do a code review (in GitHub)</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:4\n- A:\n- A:4\n</code></pre> <p>I can explain and evaluate the usefulness of branches</p> <pre><code>- A: 5\n- A: 5\n- A: 4\n- A:4\n- A:\n- A:4\n- A:\n</code></pre> <p>I can manage merge conflicts locally</p> <pre><code>- A: 5\n- A:\n- A: 5\n- A: 3\n- A:5\n- A:\n- A:4\n</code></pre> <p>I can manage merge conflicts on GitHub</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:5\n- A:\n- A:4\n</code></pre> <p>I can merge locally</p> <pre><code>- A: 5\n- A: 4\n- A: 4\n- A:\n- A:5\n- A:4\n- A:\n</code></pre> <p>I can merge on GitHub</p> <pre><code>- A: 5\n- A:\n- A: 4\n- A: 4\n- A:5\n- A:\n- A:4\n</code></pre> <p>I feel confidence and motivation in making my code open-source</p> <pre><code>- A: 5\n- A: 4\n- A: 5\n- A:\n- A:5\n- A:5\n- A:\n</code></pre> <p>I have an idea about how to contribute as an external contributor</p> <pre><code>- A: 4\n- A: 5\n- A: 4\n- A:\n- A:4\n- A:4\n- A:\n</code></pre> <p>I understand when a forked workflow is recommended</p> <pre><code>- A: 5\n- A: 5\n- A:4\n- A: 4\n- A:4\n- A:\n- A:\n</code></pre> <p>I understand how to do TDD at a larger scale</p> <pre><code>- A: 4\n- A: 4\n- A:4\n- A: 2\n- A:5\n- A:\n- A:\n</code></pre> <p>I understand why pair programming is important</p> <pre><code>- A: 5\n- A: 5\n- A: 4\n- A:5\n- A:\n- A:\n- A:4\n</code></pre> <p>I understand what good pair programming looks like</p> <pre><code>- A: 4\n- A: 4\n- A: 4\n- A:\n- A:3\n- A:4\n- A:\n</code></pre>"},{"location":"shared_documents/2025_autumn/20251028/#_2","title":"Programming formalisms \u2014 Shared document Oct 2025","text":""},{"location":"shared_documents/2025_autumn/20251028/#day-4","title":"day 4","text":"<p>What helped us learn (let us move forward) 2 min</p> <pre><code>- A: As usual, group exercises\n- A: The possibility to ask questions and get extensive answers. Thank you for your patience!\n- A: \n- A:Group work, practical exercises\n- A: \n- A: Continous Integration and group work\n- A: Nice group work.\n- A: The team exercises, in particular for writing clases. The session on automated testing workflows within GitHub (and locally) were very interesting.\n- A: \n- A:\n- A: the testing exercise was good! Finding out the options to automate the testing was nice.\n- A: Ruff - was a good extension\n</code></pre> <p>What stopped us from learning (What held us back) 2 min\u00b6</p> <pre><code>- A: Maybe the schedule was a bit messy today, I would gladly have had class design before OOD\n- A:\n- A: I found some text, in particular the Object-oriented programming section, hard to read because of typos. I wish it wasn't so much like bullet points. It often asks us about a concept and only give bullet points but we have to go to some alternative reading material to find the answer. Many concepts were remain a bit abstract even after the explanations...I also got lost with many exercises because they were a bit vague or use terms before getting explanations about it (e.g., refactoring)\n- A: Maybe some more clarifications about object oriented programming would have been helpful. Less theory and more examples.\n- A:\n- A: assignments were not always clear, confused about what we should actually do...\n- A: a bit confused about the reverseb classroom situtation, since we didn't have time to read up upon it before (and text didn't alwyas provide the answers that were asked there)\n- A:\n- A: Most concepts introduced today was a hard to intrepret in our discipline specific examples\n- A: The concepts of object and class were a little hard.\n- A: Time, short answers, no too deep explainations and typos in documentation.\n-A: \n- A: Unit test lessons were unclear\n- A: Little time to complete all the exercises, would have appreciated less to do but with more time to focus\n</code></pre> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <pre><code>- A: I think in general it would be beneficial to focus on easier tasks and not too much on the weather exercise, with more discussion. Baby steps and more time to digest.\n- A:\n- A: Better material with less bullet points and more structure and explanations would help\n- A: As much as I appreciate working with teams, sometimes I wish I could read on my own without other people around. I find it distracting because I feel pressure to finish faster. I prefer when we get examples explained by the teacher before diving into the exercises.\n- A: more explanation of terms and basic \"vocabulary\", more straigth forward assignments, clearer instructions\n- A:\n- A: More examples before working on our own, sometimes it is hard to figure out everything on your own\n- A:\n- A: Also, sometimes the concepts are too simple and feels difficult to relate to our discipline, maybe more examples to show how it looks would be appreciated\n- A: Maybe a solid example/exercises on object &amp; class diagrams would be good\n- A:\n- A: More self-contained examples with answers that we can revisit later on. Add more links to external videos on hands-on coding for every or most concepts.\n</code></pre> <p>What will we do(Act) [Teachers only]\u00b6 -Lars Imporve learning material especially eplanatory sections of the excercise, more theory in the material. -Lars Introduce concepts both in material and in \"lecture\" -Lars don't be afraid to lift things to plenum if it seems to be of general intrest. -Lars Ask for spelling correction, spell checker not enough (Dyslexia issue) (for example in places where markdown formatting may make the text unreadable for the lexical) -Lars Add more and deeper text, discipline specific examples, how to apply in real world. (Extend and rework the examples on class design(weather staion example) Show how the object design corresponds to the actual weatherstation example and how to arrive at those conclusions. Show where each concept ties in to the example not just the finnished product but how I think which principles I apply when I do the objects.</p>"},{"location":"shared_documents/2025_autumn/20251028/#confidence-report-maximum-10min-you-can-leave-when-you-are-done_1","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I understand why Continuous Integration is useful</p> <pre><code>- A: 5\n- A: 5\n- A: 5\n- A:\n- A: 3\n- A:\n- A:\n- A:\n- A:\n- A:\n- A:\n- A: 4\n</code></pre> <p>I can find the error messages given by the Continuous Integration tests</p> <pre><code>- A: 5\n- A: 5\n- A: 5\n- A:\n- A:4\n- A:\n- A:\n- A:\n- A:\n- A:\n- A:\n- A: 5\n</code></pre> <p>I can (choose to) write code that is Good Enough</p> <pre><code>- A: 4\n- A: 3\n- A: 4\n- A:\n- A:\n- A:3\n- A:\n- A:\n- A:\n- A:\n- A: 5\n- A:\n</code></pre> <p>I understand what a Semantic gap is?</p> <pre><code>- A: 4\n- A: 1\n- A: 3\n- A:\n- A:1\n- A:\n- A:\n- A:\n- A:\n- A: 3\n- A:\n- A:\n</code></pre> <p>I Comprehend the principles of object-oriented development, such as information hiding</p> <pre><code>- A: 5\n- A:\n- A: 4\n- A:\n- A: 3\n- A: 3\n- A:\n- A:2\n- A:\n- A:\n- A:\n- A:\n</code></pre> <p>I know what modular programming is</p> <pre><code>- A: 3\n- A: 5\n- A: 3\n- A:\n- A: 3\n- A:\n- A:\n- A:3\n- A:\n- A:\n- A:\n- A:\n</code></pre> <p>I have an idea when use classes is worth it (and when not)</p> <pre><code>- A: 3\n- A:\n- A: 4\n- A: 3\n- A: 4\n- A:\n- A:2\n- A:\n- A:\n- A:\n- A:\n- A:\n</code></pre> <p>I can give some features of good class design</p> <pre><code>- A: 4\n- A: 2\n- A:\n- A:\n- A: 2\n- A:\n- A: 2\n- A:\n- A:2\n- A:\n- A:\n- A:\n</code></pre> <p>I can write a simple class</p> <pre><code>- A: 4\n- A: 3\n- A:\n- A:\n- A:3\n- A:\n- A: 3\n- A:\n- A:\n- A: 4\n- A:\n- A:\n</code></pre> <p>I understand the type of relation 'composition'</p> <pre><code>- A: 3\n- A:\n- A: 2\n- A:\n- A:2\n- A:\n- A: 2\n- A:\n- A:\n- A: 1\n- A:\n- A:\n</code></pre> <p>Iterative refactoring</p> <pre><code>- A: 5\n- A: 2\n- A:\n- A:2\n- A:\n- A: 1\n- A:\n- A: 3\n- A:\n- A:\n- A:\n- A:\n</code></pre> <p>Learn about common interfaces, protocols, and their role in modular programming.</p> <pre><code>- A: 3\n- A:\n- A:\n- A: 1\n- A:\n- A:  1\n- A:\n- A:1\n- A:\n- A: 1\n- A:\n- A:\n</code></pre> <p>Learn the definition and characteristics of an object, </p> <pre><code>- A: 5\n- A:\n- A: 3\n- A:\n- A: 3\n- A:\n- A: 4 (after intensive discussion with Lars)\n- A:\n- A:2\n- A:\n- A:\n- A:\n</code></pre> <p>Recognize and address tight coupling in code to improve modularity.</p> <pre><code>- A: 3\n- A:\n- A:\n- A: 2\n- A:\n- A: 3\n- A:\n- A: 1\n- A:2\n- A:\n- A:\n- A:\n</code></pre> <p>Recognize the importance of relationships between classes including coposition and association</p> <pre><code>- A: 4\n- A:\n- A:\n- A: 1\n- A: 1\n- A:\n- A: 2\n- A:2\n- A:\n- A:\n- A:\n- A:\n</code></pre> <p>Understand the benefits of object-oriented development</p> <pre><code>- A: 4\n- A:\n- A: 3\n- A:\n- A:\n- A: 4\n- A:\n- A:2\n- A:\n- A:\n- A:\n- A:\n</code></pre> <p>Understand the concept of code smells and design smells</p> <pre><code>- A: 5\n- A: 4\n- A:\n- A: 3\n- A:\n- A: 2\n- A:\n- A:\n- A:2\n- A:\n- A:\n- A:\n</code></pre> <p>Understand the definition and structure of a class as a collection of objects </p> <pre><code>- A: 5\n- A:\n- A:\n- A: 2\n- A:\n- A: 4\n- A: 2\n- A:\n- A:\n- A:2\n- A:\n- A:\n</code></pre>"},{"location":"shared_documents/2025_autumn/20251029/","title":"Programming formalisms \u2014 Shared document Oct 2025","text":"<ul> <li> <p>Zoom: <code>[removed]</code></p> <ul> <li>Passcode: <code>[removed]</code></li> </ul> </li> <li> <p>Course material:</p> <ul> <li>https://uppmax.github.io/programming_formalisms</li> </ul> </li> <li>Shared project:<ul> <li>https://github.com/programming-formalisms/programming_formalisms_project_autumn_2025</li> </ul> </li> </ul>"},{"location":"shared_documents/2025_autumn/20251029/#i-want-a-certificate-for-the-course","title":"I want a certificate for the course","text":"<p>Name|Email 1:<code>[removed]</code> 2:<code>[removed]</code> 3:<code>[removed]</code> 4:<code>[removed]</code> 5: 6: 7:</p>"},{"location":"shared_documents/2025_autumn/20251029/#day-5-retrospect","title":"Day 5 Retrospect","text":"<p>What helped us learn (let us move forward) 2 min</p> <p>-A: -A: -A: Exercises, specially the testing time with cprofile. I liked hearing about creating packages, and also about ReadTheDocs and similar options. -A: create and upload a package to pypi -A:  -A: As always, the exercises: they help staying active -A: -A:Testing the performance of the code with the cprofile was useful! Along with their rules - super useful in improving our programming! -A:The group exercise were helpful! Documentation tasks, Licensing, README documentations were super helpful.</p> <p>What stopped us from learning (What held us back) 2 min\u00b6</p> <p>-A:In general, I think it would be better if some more actual explanation was introduced, together with practical examples, instead of reading and highlighting the online material. Sometimes attention is hard to keep for prolonged time, if the teacher is reading. -A:Hard to grasp some concepts on build. -A: I had the feelings sometimes the teacher were distracted or not sure \"what was next\" (but honestly, aren't we all tired?) -A: Some teachers seem to be in a rush all the time. They explain at a superficial level. -A: -A: very time-constrained course; it feels like virtual environments are introduced very late in the course, even though they would be already useful in the beginning (before installing anything in base, helps also in cleaning up after the course is done); it often felt like the teachers are just reading the page and then run out of time for questions/exercises -A: Short time for some tasks/topics</p> <p>What could we do to improve learning (What can we invent) 2 min\u00b6</p> <p>-A: Perhaps because I've wrote READMEs for my GitHub repositories before, I wish less time had been spent on that, and instead I wish we could hear more about creating Wikis and ReadTheDocs-like documentation. I was also often confused with the exercises instructions. -A: Be prepared to teach, no just read.  In every section, I got something like \"we do not have time to cover the topic A, so we move on\" -A: -A: better time management, I think it would actually be more helpful to spend time more time on basics with going through examples and thorough explanations and time for questions than rushing through that we can cover all the topics that are planned (because the content is anyway on the page and you can just refer to it and if people are interested can have a look on their own and ask about it because there is the additional time to do so) -A:Quite time-constrained, maybe having a the course for 2 days in week for 3/4 weeks would be great! -A: I would have liked to see less reading and more interaction, more space for questions and active discussion on exercises. Sometimes how exercises were introduced was still unclear (but better than previous sessions).  -A: Some discipline specific examples would be appreciated, for example with simulation data or codes -A: More interactive sessions or handsn exercises rather than reading (which can be pre-read before the lectures) -A: Really liked the group exercises, which we can increase in the future!</p> <p>What will we do(Act) [Teachers only]\u00b6</p> <p>-A: -A: -A: -A: -A: -A: -A:</p>"},{"location":"shared_documents/2025_autumn/20251029/#confidence-report-maximum-10min-you-can-leave-when-you-are-done","title":"Confidence Report: (maximum 10min) You can leave when you are done.","text":"<p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>I am confidant that...:</p> <ul> <li> <p>I can put the code of a project into a Python package -A: 4 -A: 4 -A: 5 -A: 5 -A: -A: -A:4</p> </li> <li> <p>I can upload my Python package on PyPI -A: 4 -A: -A: 4 -A: 5 -A: 5 -A: -A:4</p> </li> <li> <p>I can methodically optimize the runtime speed of my code -A: -A: 3 -A: -A: 4 -A: 4 -A: 4 -A:4</p> </li> <li> <p>I can create a runtime speed profile -A: -A:  5 -A: 4 -A: 5 -A: 4 -A:4 -A:</p> </li> <li> <p>I can read a runtime speed profile -A: 5 -A: -A: 5 -A: 5 -A: 5 -A: -A:4</p> </li> <li> <p>I am able to distinguish bad from good advice regarding runtime speed optimization -A: -A: 4 -A:4 -A: 3 -A: 4 -A: -A: 5</p> </li> <li> <p>I can mentalize the installation needs from the users' perspective:</p> </li> </ul> <p>-A: 3 -A:4 -A: 5 -A: -A: 4 -A: 5 -A:</p> <ul> <li>I can initialize a new project:</li> </ul> <p>-A: -A: 4 -A: 5 -A: 5 -A:4 -A: 3 -A:</p> <ul> <li>I know the most important sections for a full public README:</li> </ul> <p>-A: 5 -A: -A: 5 -A: 4 -A: 3 -A:4 -A:</p> <ul> <li>I can make an installation instruction for potential users:</li> </ul> <p>-A: 3 -A:4 -A:  -A: 4 -A: -A: 5 -A:</p> <ul> <li>I can make citation info:</li> </ul> <p>-A: -A: 3 -A: 3 -A: 3 -A: -A:4 -A:</p> <ul> <li>I know how to find instruction of going to more sophisticated documentation: The course met my expectations:</li> </ul> <p>-A: -A: 2 -A: -A: 4 -A: 2 -A: -A:4</p> <ul> <li>I learned a lot of new things about software development as a process:</li> </ul> <p>-A: -A: 5 -A: 5 -A: 5 -A: 5 -A: -A:4</p> <ul> <li>I will use what I learned in my projects:</li> </ul> <p>-A: -A: 5 -A: 5 -A: 5 -A: 4 -A:5 -A:</p>"},{"location":"shared_documents/2025_autumn/20251029/#extended-questions-10-min","title":"Extended questions (10 min)","text":"<ul> <li>Imagine you are boss. How would you improve the Programming Formalisms course? Do consider that if you want more of something, what would you want less of?</li> </ul> <p>-A: More:: Add some text about good practices about writing classes. Explain more with some examples about composition, inherence, etc. - Provide more links to video tutorials.  - Creating video contents that students can watch to complement the training. </p> <p>Less:: Teachers reading what everyone at this level can read. Use the text as a guide. </p> <p>-A: First of all I wanted to thank you all for this great course! All the following critics are just small to make the course even better. There was a lot of group work where it was actually not needed, I don't need to be in a breakout room with someone just to ask questions, seems a bit unnecessary.  Also an time expectation of the real group work and a better outline of what we should actually do would be great (for some of the tasks that is actually already very well implemented). Some of the topics are actually falling short, e.g. about classes/object oriented programming and modules I didn't really catch the grip and feel similarly unsure about it than before the course (also the course page is rather short and doesn't really provide further information).  Time could definitely be saved when not only the pages get read to us and the teachers stumble upon mistakes but just by either reciting it shortly or letting us read ourselves. Also a proper flipped classroom could work, just tell us to read up on a topic the day before and then discuss it or do exercises (I mean we are all voluntarily taking this course and want to learn something, so I think it wouldn't be an issue to put the extra time in.)</p> <p>-A: I really enjoyed the course! Thank you all for that! But I learned more through the hands-on exercises than reading, so maybe I would arrange more group sessions where the teams worked together, so that they can fail and learn! Pushing them into the project first (maybe give them some resources to read on first) and then letting them review their project work would be my approach. Maybe also, ask the students to bring their own data (discipline specific data) and work on them and review them in group, so that students can understand how to use these tools/tips in their discipline data.</p> <p>-A: Thank you for the course.  I think I would in general increase the prerequisites for taking the course to a higher level. I started the course with the exact python/git requirements as stated in the UPPMAX web page, but I still found some sessions quite hard - or maybe too advanced for my level, or that they served a purpose that is too advanced for what I am working on at the moment. I took the course early in my phd thanks to the suggestion of my supervisor and of a fellow phd student, but maybe it  would have been more useful to take it with more pior experience in programming in general.  That said, it was very useful to see how software development works in a formal way. It's super useful to see that there are guidelines/ good practises to be followed, which could be good to learn very early in my career. Also, I am very happy that I can go back to the course materiak and revise topics.  What I personally found the most useful as a beginner was collaborating on git, understanding how to use tests and asserts to make code stronger from the beginning,  continuous integration and classes. I wished we had seen more function design as well.  Regarding teaching style, I really appreciated exercises, as they really help tpo stay focus. Sometimes I wished we had clearer instructions before each exercise, but I think this got better during the course. I also liked the video tutorials when available, as they helped a lot when a full example was needed before practising hands-on. What I think could be improved were some explanations and timing. Topics were often skipped, not covered or covered too fast. It may be good to reduce the course content a bit and focus on the most appreciated/needed sessions. Something I didn't understand fully was the purpose of having the 'weather project'. I guess it is to provide a full-cycle software development example, but since we ended up not really working on that, I would have rather had more small exercises, which help strenghtening the broad understanding.  Last, I suggest adding a video tutorial on the use of VS code with git, and then always stick to that method. Or always work from terminal. It can become confusiong if people use different methods.</p>"},{"location":"social_coding/social_coding/","title":"Social coding","text":"<p>Learning outcomes of 'Social coding'</p> <p>Learners</p> <ul> <li>have an overview of motivations, benefits, but also risks of sharing and reusing code.</li> </ul> <p>Note</p> <ul> <li>This material is based on the Social Coding lecture by Code Refinery:</li> <li> <p>Social coding by CodeRefinery is licensed under CC BY 4.0.</p> </li> <li> <p>The Open Science movement encourages researchers to share research output beyond the contents of a published academic article (and possibly supplementary information).</p> </li> <li>Open-source license is a type of license for computer software and other products that allows the source code, blueprint or design to be used, modified and/or shared under defined terms and conditions.</li> </ul> <p>FAIR</p> <p>The current buzzword for data management</p> <ul> <li> <p>You may be asked about it in, for example, making data management plans for grants:</p> </li> <li> <p>Findable</p> <ul> <li>Will anyone else know that your data exists?</li> <li>Solutions: put it in a standard repository, or at least a description of the data. Get a digital object identifier (DOI).</li> </ul> </li> <li>Accessible<ul> <li>Once someone knows that the data exists, can they get it?</li> <li>Usually solved by being in a repository, but for non-open data, may require more procedures.</li> </ul> </li> <li>Inter-operable<ul> <li>Is your data in a format that can be used by others, like csv instead of PDF?</li> <li>Or better than csv. Example: 5-star open data</li> </ul> </li> <li>Reusable<ul> <li>Is there a license allowing others to re-use?</li> </ul> </li> </ul>","tags":["social","coding"]},{"location":"social_coding/social_coding/#opening-discussions","title":"Opening discussions","text":"<p>Info</p> <p>Choose one or several!</p> 1: Why would I want to share my scripts/code/data? <ul> <li>A: Easier to find and reproduce (scientific reproducibility)</li> <li>B: More trustworthy: others can verify correctness and find and report bugs</li> <li>C: Enables others to build on top of your code   (derivative work, provided the license allows it)</li> <li>D: Others can submit features/improvements</li> <li>E: Others can help fixing bugs</li> <li>F: Many tools and apps are free for open source, so no financial cost for this   (GitHub, GitLab, Appveyor, Read the Docs)</li> <li>G: Good for your CV: you can show what you have built</li> <li>H: Discourages competitors. If others can't build on your work,   they will make competing work</li> <li>I: When publicly shared, usually we timestamp or set a version,   so it is easier to refer to a specific version</li> <li>J: You can reuse your own code later after change of job or affiliation</li> <li>K: It encourages me to code properly from the start</li> </ul> 2: The most concerning thing for me, If I share my software now <ul> <li>A: It will be scooped (stolen) by someone else</li> <li>B: It will expose my \"ugly code\"</li> <li>C: Others may find bugs and mistakes. What if the algorithm is wrong?</li> <li>D: I will get too many questions, I do not have time for that</li> <li>E: Losing control over the direction of the project</li> <li>F: Low quality copies will appear</li> <li>G: I won't be able to sell this later. Someone else will make money from it</li> <li>H: It is too early, I am just prototyping, I will write version to distribute later</li> <li>I: Worried about licensing and legal matters, as they are very complicated</li> </ul>","tags":["social","coding"]},{"location":"social_coding/social_coding/#sharing-code-and-citation","title":"Sharing code and Citation","text":"<p>Citation as one form of academic credit to motivate sharing papers.</p> <p>Sharing papers and academic credit:</p> <ul> <li>The goal is maximum visibility and maximum reuse.</li> <li>The more interesting science is done referencing my paper, the better for me.</li> <li>Nobody actively tries to limit the reach of their papers.</li> </ul> <p>Different ways we can benefit from sharing code.</p> <p>Sharing code:</p> <ul> <li>\"I did all the ground work and they get to do the interesting science?\"</li> <li>Sharing code and encouraging derivative work may boost your academic impact.</li> <li>But will your work be visible if it is used two levels deep down?</li> </ul>","tags":["social","coding"]},{"location":"social_coding/social_coding/#journal-policies-as-motivation-for-sharing","title":"Journal policies as motivation for sharing","text":"From Science editorial policy <p>\"We require that all computer code used for modeling and/or data analysis that is not commercially available be deposited in a publicly accessible repository upon publication. In rare exceptional cases where security concerns or competing commercial interests pose a conflict, code-sharing arrangements that still facilitate reproduction of the work should be discussed with your Editor no later than the revision stage.\"</p> From Nature editorial policy <p>\"An inherent principle of publication is that others should be able to replicate and build upon the authors' published claims. A condition of publication in a Nature Research journal is that authors are required to make materials, data, code, and associated protocols promptly available to readers without undue qualifications. Any restrictions on the availability of materials or information must be disclosed to the editors at the time of submission. Any restrictions must also be disclosed in the submitted manuscript.\"</p> <p>However a study showed that despite these policies, many people still do not share their code \ud83d\ude1e.</p> <p>Motivation for open source software</p> <ul> <li>Enable derivative work</li> <li>Do not lock yourself out of own code</li> <li>Attract developers who want to be able to show the coding work on their CVs</li> <li>Tightly regulated domains require open source</li> <li>Open-source software (OSS) can lead to more engagement from industry which may lead to more impact</li> <li>If it's not open, it is not likely to become standard</li> </ul> Sharing software is also scary. Why? (And solutions) <ul> <li>Fear of being scooped <p>A license can avoid it, and you can release when you are ready. Anyway, it is very unlikely that others will understand your code and publish before you without involving you in a collaboration. Sharing is a form of publishing.</p> </li> <li>Exposes possibly \"ugly code\" <p>In practice almost nobody will judge the quality of your code. \"Software, once written, is never really finished\" (N. Asparouhova).</p> </li> <li>Others may find bugs and mistakes <p>Isn't this good? Would you not like to use a code which gives people the chance to locate bugs? If you don't release, people will assume there are bugs anyway.</p> </li> <li>Others may require support and ask too many questions <p>This can become a problem: use tools and community and protect your time. You aren't required to support anyone. You can also \"archive\" a repository to disable most forms of interaction (issues, PRs). Also a note in README on support level helps.</p> </li> <li>Fear of losing control over the direction of the project <p>Open source does not mean everybody can change your version.</p> </li> <li>\"Bad\" derivative projects may appear <p>It will be clear which is the official version.</p> </li> </ul>","tags":["social","coding"]},{"location":"social_coding/social_coding/#code-reusability","title":"Code reusability","text":"<p>Should you reuse things that others have done?</p> <p>Types of things that can be reused:</p> <ul> <li>Main libraries (e.g. NumPy, SciPy)</li> <li>Special scientific libraries</li> <li>Random code from website</li> <li>Copying from Stack Overflow</li> </ul> <p>Do you want others to reuse what you make? How do you turn your own small project into the next NumPy? Do you want to?</p>","tags":["social","coding"]},{"location":"social_coding/social_coding/#what-contributes-to-reusability","title":"What contributes to reusability?\"","text":"3: When you find a repository with code/library you would like to reuse, what are the things you look at to decide whether you use it? <ul> <li>Date of last code change <p>... is the project abandoned?</p> </li> <li>Release history <p>... how about stability and backwards-compatibility?</p> </li> <li>Versioning <p>... will it be painful to upgrade?</p> </li> <li>Number of open pull requests and issues <p>... are they followed-up?</p> </li> <li>Installation instructions <p>... will it be difficult to get it running?</p> </li> <li>Example <p>... will it be difficult to get started?</p> </li> <li>License <p>... am I allowed to use it?</p> </li> <li>Contribution guide <p>... how to contribute and decision process?</p> </li> <li>Code of conduct <p>... how to make clear which behaviors are unacceptable and discouraged? How violations of Code of conduct will be handled?</p> </li> <li>Trust and community <p>... somebody you trust recommended it?</p> </li> </ul> <p>... most of which you have or will learn during the CodeRefinery workshop!</p>","tags":["social","coding"]},{"location":"social_coding/social_coding/#sharing-or-not-sharing","title":"Sharing or not sharing?","text":"<p>Whether and what we can share depends on how we obtained the components.</p> <ul> <li>Our work depends on outputs from others. Research of others depends on our outputs.</li> <li>Whether you can share your output depends on how you obtained your input.</li> <li>A repository that is private today might become public one day.</li> <li>Sometimes \"OTHERS\" are you yourself in the future in a different group/job.</li> <li>Software licenses matter. And this is what we will discuss the last day.</li> </ul>","tags":["social","coding"]},{"location":"social_coding/social_coding/#sharing-data","title":"Sharing data","text":"<p>https://coderefinery.github.io/social-coding/sharing-data/</p> <p>The Turing Way</p> <ul> <li>The Turing Way is an open science, open collaboration, and community-driven project.</li> <li>We involve and support a diverse community of contributors to make data science accessible, comprehensible and effective for everyone.</li> <li>Our goal is to provide all the information that researchers, data scientists, software engineers, policymakers, and other practitioners in academia, industry, government and the public sector need to ensure that the projects they work on are easy to reproduce and reuse.</li> <li>The Turing Way Handbook</li> </ul>","tags":["social","coding"]},{"location":"tdd/","title":"Test-driven development","text":"<p>Learning outcomes</p> <ul> <li>Understand what test-driven development is</li> <li>Be able to do test-driven development</li> </ul> For teachers <p>Video durations:</p> <ul> <li>Lecture: 4:48</li> <li><code>is_zero</code>: 8:19</li> </ul> <p>Prerequisites are:</p> <ul> <li>Learners have practiced pair programming</li> <li>Learners can do the git basic workflow on <code>master</code></li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners understand what TDD is</li> <li>Learners understand why TDD is important</li> <li>Learners have done multiple TDD cycles</li> </ul> <p>Teaching form used:</p> <ul> <li>Individual work</li> <li><code>main</code> branch</li> </ul> <p>Prior knowledge questions:</p> <ul> <li>How do you grow/develop your code?</li> <li>How do others grow/develop their code?</li> <li>Why would it be important to have a formal way to grow/develop your code?</li> <li>When have you tested your code enough? Is it ever enough?</li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#1-why-use-test-driven-development","title":"1. Why use test-driven development?","text":"Prefer this lecture as video? <p>See it on YouTube.</p> <p>The requirements (and hence code) of a project changes. You want to change code methodically in a time-efficient way.</p>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#2-what-is-test-driven-development","title":"2. What is test-driven development?","text":"<p>Test-driven development (TDD) is a systematic way to grow code, used in academia and industry. It works <code>[Martin, 2011]</code>!</p> <p></p> <p>A TDD developer</p> <p>When doing TDD, you do TDD cycles:</p> <p></p> <p>The TDD cycle</p> <p>The cycle has three phases:</p> <ul> <li>Red: you write a test that fails</li> <li>Green: you make the test pass</li> <li>Blue/refactor: you refactor the code, you clean up the code,   you push the code</li> </ul> <p>Every cycle adds a (facet of) a new feature, so it is a way to add features. Alternatively, the test that fails can be an exposed bug. In this case, there is no feature added, but a bug is removed permanently instead. The TDD cycles end when you cannot break your function anymore <code>[Beck, 2022][Langr, 2013]</code>.</p> <p>The three laws of TDD ensure each cycle is short <code>[Martin, 2007]</code>:</p> <ul> <li>You may not write production code until you have written a failing unit test</li> <li>You may not write more of a unit test than is sufficient to fail,   and not compiling is failing</li> <li>You may not write more production code than is sufficient to pass   the currently failing test</li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#live-demo","title":"Live demo","text":"<p>Give a live demo here, as suggested at a Retrospect of this day.</p>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#3-features-of-tdd","title":"3. Features of TDD","text":"<p>Advantages of TDD are:</p> <ul> <li>TDD makes developers more productive <code>[Erdogmus &amp; Morisio, 2005]</code></li> <li>TDD increases quality of the code   <code>[Erdogmus &amp; Morisio, 2005][Alkaoud &amp; Walcott, 2018][Janzen &amp; Saiedian, 2006]</code><ul> <li>There are plenty of costly programming mistakes documented!</li> </ul> </li> <li>TDD helps shape the project architecture <code>[Mayr, 2005]</code></li> <li>TDD helps better modularisation <code>[Madeyski et al., 2010]</code></li> </ul> <p>Developers do really do this <code>[Beck, 2022][Langr, 2013]</code>, even though TDD takes longer (but note <code>[Martin, 2017][Uncle Bob, 2024]</code> for the same example that it is faster, but feels slower):</p> Study Extra time Effect <code>[George &amp; Williams, 2004]</code> 16% 18% more black-box tests pass <code>[Bhat &amp; Nagappan, 2006]</code> 15% 2x higher code quality <code>[Nagappan et al., 2008]</code> 15-35% 40%-90% less defects <p>We will discuss formal testing later, but now note that testing is not about finding bugs <code>[Thomas &amp; Hunt, 2019, tip 66]</code>, instead a test is the first user of your code <code>[Thomas &amp; Hunt, 2019, tip 67]</code>.</p>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#4-express-yourself-in-python","title":"4. Express yourself in Python","text":"<p>This course does not teach Python. To save time, here are English statements and their Python (more-or-less) equivalent.</p>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#41-i-assume-my_function-to-have-documentation","title":"4.1. I assume <code>my_function</code> to have documentation","text":"<pre><code>assert my_function.__doc__\n</code></pre>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#42-my-function-has-documentation","title":"4.2. My function has documentation","text":"<pre><code>def my_function():\n    \"\"\"This is documentation\"\"\"\n</code></pre>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#43-i-assume-my_function-to-return-a-value-eg-42","title":"4.3. I assume <code>my_function</code> to return a value, e.g. <code>42</code>","text":"<pre><code>assert my_function() == 42\n</code></pre>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#44-my-function-returns-a-number-eg-42","title":"4.4. My function returns a number, e.g. `42","text":"<pre><code>def my_function():\n    return 42\n</code></pre>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#45-my-function-returns-not-a-number-eg-not-42","title":"4.5. My function returns not a number, e.g. not `42","text":"<pre><code>assert not my_function() == 42\n</code></pre>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#46-i-assume-my_function-raises-an-exception-when-given-nonsense-input","title":"4.6. I assume <code>my_function</code> raises an exception when given nonsense input","text":"<pre><code>has_thrown = False\ntry:\n    my_function(\"nonsense\")\nexcept:\n    has_thrown = True\nassert has_thrown\n</code></pre> What is all this code? <p>We call this code 'scaffolding'. Like when repairing a building, there are scaffolds being built, it is about the building and not the scaffolding.</p> <p>In our case, the scaffolding is built around this line:</p> <pre><code>my_function(\"nonsense\")\n</code></pre> <p>This function should raise an exception. Raising an exception causes our tests to crash, so we need to 'catch' (this is a formal Python term!) the exception. This would change our code to:</p> <pre><code>try:\n    my_function(\"nonsense\")\nexcept:\n    # Do nothing\n</code></pre> <p>Now the function <code>my_function</code> may or may not raise an exception. We want the test the function to raise an exception. The next step would be to store that is did:</p> <pre><code>try:\n    my_function(\"nonsense\")\nexcept:\n    has_raised = True # Yay!\n</code></pre> <p>And we want to test that indeed the exception is raised:</p> <pre><code>try:\n    my_function(\"nonsense\")\nexcept:\n    has_raised = True # Yay!\n\nassert has_raised == True\n</code></pre> <p>This would not compile, as <code>has_raised</code> has not been declared before the <code>try-except</code> block, so we make it into:</p> <pre><code>has_raised = False\ntry:\n    my_function(\"nonsense\")\nexcept:\n    has_raised = True # Yay!\n\nassert has_raised == True\n</code></pre> <p>We initialize <code>has_raised</code> with <code>False</code>, as, well, no exception has been raised yet.</p> <p>If no exceptions is raised, <code>has_raised</code> will remain <code>False</code> and our test fails.</p>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#47-my-function-raises-an-exception-when-the-input-x-is-not-integer","title":"4.7. My function raises an exception when the input <code>x</code> is not integer","text":"<pre><code>def my_function(x):\n    if not isinstance(x, int):\n        raise TypeError(\"'x' must be of type int\")\n</code></pre>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#5-exercises","title":"5. Exercises","text":"<p>Below are some TDD exercise, with the goal of practicing TDD.</p> <p>Work in the <code>src/learners</code> folder and create a file named after you, e.g. <code>sven.py</code>.</p> <p>If you use R and it would help, at the 'Videos' subsection, you can find videos of doing the same in R. After seeing such a video, try to write the Python code (i.e. do not stick with writing R, how annoying this may feel).</p> <p>If you feel comfortable enough with TDD, move to the next session.</p>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#51-exercise-1-is_zero","title":"5.1. Exercise 1: <code>is_zero</code>","text":"<ul> <li>If you are more used to R than Python,   consider watching this video, 'R and TDD: is_one'</li> <li>Watch this video called   'Programming Formalisms, session TDD, exercise 1: <code>is_zero</code>'   until you understand the thought process of TDD</li> <li>If you want to know more about <code>assert</code>, you can peek at   the session about 'assert'</li> <li>Develop the function <code>is_zero</code> (see specifications below)   yourself, using TDD   To prove you've done so in an exemplary way,   do a <code>git push</code> at each blue/refactor phase.</li> </ul> <p><code>is_zero</code></p> <ul> <li>Function name: <code>is_zero</code></li> <li>Output:<ul> <li>Returns <code>True</code> if the input is zero</li> <li>Returns <code>False</code> if the input is not zero</li> <li> Gives an error when the input is not a number</li> </ul> </li> </ul> Answer <p>Note that the practice of TDD is the goal of the exercise, not the exact outcome.</p> <p>Here is a possible solution:</p> <pre><code>def is_zero(x):\n    \"\"\"Determines if the input is one integer that is zero\"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"'x' must be of type int\")\n    if x == 0:\n        return True\n    return False\n\nassert is_zero.__doc__\nassert is_zero(0)\nassert not is_zero(1)\n\nhas_thrown = False\ntry:\n    is_zero(\"nonsense\")\nexcept TypeError:\n    has_thrown = True\nassert has_thrown\n</code></pre>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#52-exercise-2-is_even","title":"5.2. Exercise 2: <code>is_even</code>","text":"<p>Develop a function called <code>is_even</code>:</p> <code>is_even</code> <ul> <li>Function name: <code>is_even</code></li> <li>Output:<ul> <li>Returns <code>True</code> if the input is even</li> <li>Returns <code>False</code> if the input is not even</li> <li> Gives an error when the input is not a number</li> </ul> </li> </ul> That is quite similar to the previous exercise, isn't it? <p>Yes.</p> <p>The goal of the previous exercise is to have a first try-out of examplary TDD. Most learners make a mistake in that exercise, as TDD is quite counter-intuitive to some, such as:</p> <ul> <li>use <code>print</code> instead of <code>assert</code></li> <li>forgetting to push their code in the blue phase</li> </ul> <p>The goal of this exercise is to be a second chance to get it right, without adding too much new Python syntax.</p> Answer <p>Note that the practice of TDD is the goal of the exercise, not the exact outcome.</p> <p>Here is a possible solution:</p> <pre><code>def is_even(x):\n    if not isinstance(x, int):\n        raise TypeError(\"'x' must be of type int\")\n    \"\"\"Determine if the input is one integer that is even\"\"\"\n    return x % 2 == 0\n\nassert is_even.__doc__\nassert is_even(2)\nassert not is_even(1)\n\n# 'is_even(\"nonsense\")' throws a TypeError\n# because of the modulo operator\n\nhas_thrown = False\ntry:\n    is_even(0.0)\nexcept TypeError:\n    has_thrown = True\nassert has_thrown\n</code></pre> Need a video? <p>Here are a videos that show how to develop <code>is_even</code>:</p> <ul> <li>Python</li> <li>R</li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#53-exercise-3-is_odd","title":"5.3. Exercise 3: <code>is_odd</code>","text":"<p>Develop a function called <code>is_odd</code>:</p> That is quite similar to the previous exercise, isn't it? <p>Yes.</p> <p>The goal of the previous exercise is to have second chance to get it right, without adding too much new Python syntax.</p> <p>The goal of this exercise is to be the first chance to go fast, without adding too much new Python syntax.</p> <code>is_odd</code> <ul> <li>Function name: <code>is_odd</code></li> <li>Output:<ul> <li>Returns <code>True</code> if the input is odd</li> <li>Returns <code>False</code> if the input is not odd</li> <li> Gives an error when the input is not a number</li> </ul> </li> </ul> <p>Consider using the <code>is_even</code> function.</p> Answer <p>Note that the practice of TDD is the goal of the exercise, not the exact outcome.</p> <p>Here is a possible solution:</p> <pre><code>def is_even(x):\n    \"\"\"Determine if the input is one integer that is even\"\"\"\n    if not isinstance(x, int):\n        raise TypeError(\"'x' must be of type int\")\n    return x % 2 == 0\n\nassert is_even.__doc__\nassert is_even(2)\nassert not is_even(1)\n\n# 'is_even(\"nonsense\")' throws a TypeError\n# because of the modulo operator\n\nhas_thrown = False\ntry:\n    is_even(0.0)\nexcept TypeError:\n    has_thrown = True\nassert has_thrown\n\ndef is_odd(x):\n    \"\"\"Determine if the input is one integer that is odd\"\"\"\n    return not is_even(x)\n\nassert is_odd.__doc__\nassert is_odd(1)\n\n# Already passes, consider not putting it in\n# assert not is_odd(2)\n\n# Already passes, consider not putting it in\n# has_thrown = False\n# try:\n#     is_odd(0.0)\n# except TypeError:\n#     has_thrown = True\n# assert has_thrown\n</code></pre> Need a video? <p>Here is a videos that show how to develop <code>is_odd</code>:</p> <ul> <li>Python</li> <li>R</li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#54-exercise-4-is_prime","title":"5.4. Exercise 4: <code>is_prime</code>","text":"<p>Develop a function called <code>is_prime</code>.</p> That is quite similar to the previous exercise, isn't it? <p>Yes.</p> <p>The goal of the previous exercise is to go fast, without adding too much new Python syntax.</p> <p>The goal of this exercise is to tackle a more complex problem and discover how few tests are needed here.</p> <p><code>is_prime</code></p> <ul> <li>Function name: <code>is_prime</code></li> <li>Output:<ul> <li>Returns <code>True</code> if the input is a prime number.</li> <li>Returns <code>False</code> if the input is not a prime number.</li> <li> Gives an error when the input is not one number</li> </ul> </li> </ul> Need a video? <p>Here is a videos that show how to develop <code>is_prime</code>:</p> <ul> <li>Python</li> <li>R</li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#55-exercise-5-your-function","title":"5.5. Exercise 5: your function","text":"<p>Think of a function you want to write, or pick one of the many example TDD functions.</p> Does this still work for complex functions? <p>Yes. TDD can always be applied.</p> Could you show me an example of well-tested complex functions? <p>Yes.</p> <p>Here are some:</p> <ul> <li>Tests for a C++ chess game</li> <li>Tests for an R phylenetics tool</li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#6-conclusion","title":"6. Conclusion","text":"<ul> <li>This session, we wrote unit tests</li> <li>It is only those your boss may read</li> <li>The literature assumes a responsible programmer writes tests,     in C++ <code>[Stroustrup &amp; Sutter, 2017]</code>,     R <code>[Wickham, 2019]</code> and Python <code>[PEP 8]</code></li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#7-discussion","title":"7. Discussion","text":"<ul> <li>We only test manually</li> <li>We only test on our own computer</li> <li>We are not sure if our functions are tested completely</li> <li>We do not test the code for style</li> <li>We should consider using a testing framework</li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#videos","title":"Videos","text":"Title Length YouTube TDD 1/3: TDD 5 mins Python TDD 2/3: <code>is_zero</code> 16 mins Python TDD 3/3: Introduce <code>is_even</code> 3 mins Python Solution <code>is_even</code> 12 mins Python . 12 mins R TDD 2: introduce <code>is_odd</code> 7 mins Python Solution <code>is_odd</code> 7 mins Python . 12 mins R TDD 3: TDD bottom line 4 mins Python Solution <code>is_prime</code> 9 mins Python . . R","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd/#references","title":"References","text":"<ul> <li><code>[Alkaoud &amp; Walcott, 2018]</code> Alkaoud, Hessah, and Kristen R. Walcott.   \"Quality metrics of test suites in test-driven designed applications.\"   International Journal of Software Engineering Applications (IJSEA)   2018 (2018).</li> </ul> <ul> <li><code>[Beck, 2022]</code> Beck, Kent. Test driven development: By example.   Addison-Wesley Professional, 2022.</li> <li><code>[Bhat &amp; Nagappan, 2006]</code> Bhat, Thirumalesh, and Nachiappan Nagappan.   \"Evaluating the efficacy of test-driven development: industrial case   studies.\" Proceedings of the 2006 ACM/IEEE international symposium on   Empirical software engineering. 2006.</li> <li><code>[Erdogmus &amp; Morisio, 2005]</code> Erdogmus, Hakan, Maurizio Morisio, and   Marco Torchiano. \"On the effectiveness of the test-first approach to   programming.\" IEEE Transactions on software Engineering 31.3 (2005): 226-237.</li> <li><code>[George &amp; Williams, 2004]</code> George, Boby, and Laurie Williams.   \"A structured experiment of test-driven development.\"   Information and software Technology 46.5 (2004): 337-342.</li> <li><code>[Janzen &amp; Saiedian, 2006]</code> Janzen, David S., and Hossein Saiedian.   \"Test-driven learning: intrinsic integration of testing into the CS/SE   curriculum.\" Acm Sigcse Bulletin 38.1 (2006): 254-258.</li> </ul> <ul> <li><code>[Langr, 2013]</code> Langr, Jeff. Better, Code, and Sleep Better.   \"Modern C++ Programming with Test-Driven Development.\" (2013).</li> <li><code>[Madeyski et al., 2010]</code> Madeyski, Lech, and   Gesti\u00f3n de sistemas de informaci\u00f3n.   Test-driven development: An empirical evaluation of agile practice.   Heidelberg: Springer, 2010.</li> <li><code>[Martin, 2007]</code> Martin, Robert C.   \"Professionalism and test-driven development.\"   IEEE Software 24.3 (2007): 32-36.</li> <li><code>[Martin, 2009]</code> Martin, Robert C.   Clean code: a handbook of agile software craftsmanship.   Pearson Education, 2009.</li> </ul> <ul> <li><code>[Martin, 2011]</code> Martin, Robert C.   The clean coder: a code of conduct for professional programmers.   Pearson Education, 2011.</li> <li><code>[Martin, 2017]</code> Martin, Robert C. \"Clean architecture.\" 12 Sep. 2017,</li> <li><code>[Mayr, 2005]</code> Mayr, Herwig.   Projekt Engineering: Ingenieurm\u00e4\u00dfige Softwareentwicklung in Projektgruppen.   Hanser Verlag, 2005.</li> <li><code>[Nagappan et al., 2008]</code> Nagappan, Nachiappan, et al.   \"Realizing quality improvement through test driven development:   results and experiences of four industrial teams.\"   Empirical Software Engineering 13 (2008): 289-302.</li> <li><code>[PEP 8]</code> Van Rossum, Guido, Barry Warsaw, and Nick Coghlan.   \"PEP 8\u2013style guide for python code.\" Python. org 1565 (2001): 28.</li> <li><code>[Stroustrup &amp; Sutter, 2017]</code>   Stroustrup, Bjarne, and Herb Sutter.   \"C++ Core Guidelines (2017).\"   Website.   (Cited on pages 100 and 103) (2015).</li> <li><code>[study I cannot find]</code> in one of the classics, there was a bar chart that   showed developers write functions such as <code>is_prime</code> with and without TDD   and showed that TDD was twice as fast. TODO: find this reference</li> </ul> <ul> <li><code>[Thomas &amp; Hunt, 2019]</code> Thomas, David, and Andrew Hunt.   The Pragmatic Programmer: your journey to mastery.   Addison-Wesley Professional, 2019.</li> <li><code>[Wickham, 2019]</code> Wickham, Hadley. Advanced R. Chapman and Hall/CRC, 2019.</li> </ul> <ul> <li><code>[Yuan et al., 2014]</code>   Yuan, Ding, et al.   \"Simple testing can prevent most critical failures:   An analysis of production failures in distributed data-intensive systems.\"   11th USENIX Symposium on Operating Systems Design and Implementation   (OSDI 14). 2014.</li> <li> <p><code>[Zen of Python]</code> Zen Of Python: 'Errors should never pass silently'</p> </li> <li> <p><code>[Uncle Bob, 2024]</code> YouTube video 'Is Test Driven Development Slow?' by Uncle Bob</p> </li> </ul>","tags":["TDD","Test-driven development","is_zero","is_even","is_odd","is_probability"]},{"location":"tdd_at_bigger_scale/","title":"TDD at a bigger scale","text":"<p>Learning outcomes</p> <ul> <li>Understand end-to-end development</li> <li>Understand how to develop with TDD at a bigger scale</li> <li>Be able to develop with TDD at a bigger scale</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>Learners can have practiced TDD</li> </ul> <p>Teaching goals are:</p> <ul> <li>.</li> </ul> <p>Teaching form used:</p> <ul> <li>Individual work</li> <li><code>main</code> branch</li> </ul> <p>Prior knowledge questions:</p> <ul> <li>How can TDD be used for bigger projects?</li> <li>How does one test more complex functions?</li> </ul>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#1-why-use-test-driven-development-at-a-bigger-scale","title":"1. Why use test-driven development at a bigger scale?","text":"<p>Again, test-driven development (TDD) is a systematic way to grow code, used in academia and industry. There are many benefits to use TDD (see the session on TDD for references) and they apply to big code too.</p>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#2-end-to-end-development","title":"2. End-to-end development","text":"<p>There are multiple ways to find a part where to begin development of a project:</p> Type Description Features Small-to-big Start with the core function and build the rest around it Natural starting point for beginners. Easy to get lost in details and lose overview. Software architecture typically clumsy Big-to-small Start with high-level code and gradually add details Feels unnatural for a beginner. Bad architectural decisions postponed until the low-level functions are developed End-to-end Start with big to small, yet develop more detailed functions when encountered naturally Recommended. A good mix between high-level thinking to ensure overview is maintained, yet the low-level functions are tested early enough to detect architectural mistakes <p>In the example below we go end-to-end, starting at a high-level function called <code>do_analysis</code> until the low-level function called <code>read_data</code>. The functions in that example can be displayed as the figure below:</p> <pre><code>flowchart TD\n\n  subgraph do_analysis\n    create_figure\n    subgraph create_statistics_file\n      subgraph calc_p_value\n        subgraph get_first_third_temperatures\n          read_data\n        end\n      end\n    end\n  end</code></pre>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#3-an-example","title":"3. An example","text":"","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#31-draft-paper","title":"3.1. Draft paper","text":"<p>Imagine that you are part of a team that works on writing a paper on the weather project data. Part of the draft paper is as below:</p> <p>Part of the paper</p> <p>Research question</p> <p>Have temperatures risen in Uppsala in the period 1722 to 2022?</p> <p>Hypotheses</p> <p>Hypothesis: temperatures remain the same</p> <p>Methods</p> <p>We test our hypothesis by comparing the average yearly temperatures at the start and end of our measurement period. To prevent that the temperatures are too related, we compare the first third of the measurements (i.e. 1722-1822) with the last third of the measurements (i.e. 1922-2022) and ignoring the measurements in between. We only consider years that are measured completely, to remove seasonal effects, which means that the first year (1722) will be ignored.</p> <p>We compare these yearly average tempares with a two-sided Kolmogorov-Smirnov test (so to avoid assuming an increase/decrease, nor a distribution on these average temperatures), with the null hypothesis that these distributions are identical. We use an alpha value of 0.05. If the measured p value is below the alpha, then we reject the null hypothesis that the distributions are identical and we conclude that the temperatures have changed.</p> <p>Results</p> <p></p> <p>Figure: temperature distribution</p>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#32-small-to-big","title":"3.2. Small to big","text":"<p>A caricature of a small-to-big developer may write the following test early:</p> <pre><code># Use super different values, so the difference is significant\nassert ks_test([10, 12, 11], [1000, 1002, 1001]) &lt; 0.05\n\nplot_boxplot([1.9, 2.3, 1.8], [0.1, -4.1, 2.8], \"test_figure.png\")\nassert file_exists(\"test_figure.png\")\n</code></pre> <p>These tests introduce three functions that need to be written. Although these tests may be reasonably fine (as the problem is simple enough), it is the timing that can be improved.</p>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#33-starting-point","title":"3.3. Starting point","text":"<p>Here is a superior starting point:</p> <pre><code>do_analysis()\nassert do_analysis.__doc__\nassert file_exists(\"figure.png\")\nassert file_exists(\"statistics_results.txt\")\n</code></pre> <p>It is important to, as a team, agree on the tests. The tests should make sense.</p> How do these tests make sense? <p>Because their English equivalents make sense:</p> <p></p> Test English <code>assert do_analysis.__doc__</code> The function should have documentation <code>assert file_exists(\"figure.png\")</code> After the analysis, there should be a file of the saved plot <code>assert file_exists(\"statistics_results.txt\")</code> After the analysis, there should be a file with the statistics results Do you see the weakness in these test? <p>One weakness in these tests, is that it does not guarantee that the files are recreated: if these are created once, then these tests will continue to pass. It would be better to check if these files exist before the test, and delete these if they do.</p> <p>Another weakness in these tests, is that the filenames are hardcoded: one needs to know that <code>do_analysis</code> creates these files. It would be better to supply these filename as arguments to <code>do_analysis</code>, for example:</p> <pre><code>def do_analysis(plot_filename, statistics_filename):\n    # ...\n    # At the end of the code:\n    assert file_exists(plot_filename)\n    assert file_exists(statistics_filename)\n</code></pre> <p>Below is an example test that does not make sense:</p> <pre><code>assert file_exists(\"figure.png\", \"1722-1822\", 0.05)\n</code></pre> How do this tests not make sense? <p>Because its English equivalent does not make sense:</p> <p></p> Test English <code>assert file_exists(\"figure.png\", \"1722-1822\", 0.05)</code> After the analysis, there should be a file with some text with some significance level <p>It will be easy to make these tests pass:</p> <pre><code>def do_analysis():\n    \"\"\"Do the analysis as described in the paper.\"\"\"\n    figure_file = open(\"figure.png\", \"w\")\n    figure_file.close()\n\n    statistics_file = open(\"statistics_results.txt\", \"w\")\n    statistics_file.close()\n\ndo_analysis()\nassert file_exists(\"figure.png\")\nassert file_exists(\"statistics_results.txt\")\n</code></pre> Should <code>do_analysis</code> check if it has created its files? <p>Indeed, <code>do_analysis</code> can check if it has created its files:</p> <pre><code>def do_analysis():\n    # ...\n    assert file_exists(\"figure.png\")\n    assert file_exists(\"statistics_results.txt\")\n</code></pre> <p>One can argue that this is good: we assume that these files are created at the end of the function.</p> <p>One can also argue that this is bad: we have our tests that check this (this assumes we do TDD!), so there is no need to check twice.</p> <p>Because both reasonings are valid, it is up to taste and context what to do.</p> <p>I have seen cases where I have added these <code>assert</code>s and I've seen cases where I have removed these <code>assert</code>s, both for good reasons.</p> <p>Although it may feel you have not done anything useful, you actually have: you've sketched the outline of the analysis. Sure, things will change and even this architecture already has its flaws, it is Good Enough.</p>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#34-first-iteration","title":"3.4. First iteration","text":"<p>There are many ways to go forward here and multiple ways are equally fine.</p> <p>The thing that annoys me most is that <code>do_analysis</code> already uses two variables: one for each file. Also, these variables live longer than they need (i.e. nothing stops me from re-opening the first file and working on it again). I feel there is no need that these variables are in the same function. Hence, I will split up the function:</p> <pre><code>def do_analysis():\n    \"\"\"Do the analysis as described in the paper.\"\"\"\n    create_figure()\n    create_statistics_file()\n\nassert create_figure.__doc__\ncreate_figure()\nassert file_exists(\"figure.png\")\n\nassert create_statistics_file.__doc__\ncreate_statistics_file()\nassert file_exists(\"statistics_results.txt\")\n</code></pre> <p>This refactoring consists of moving code around:</p> <pre><code>def create_figure():\n    \"\"\"Create the boxplot of temperatures.\"\"\"\n    file = open(\"figure.png\", \"w\")\n    file.close()\n\ndef create_statistics_file():\n    \"\"\"Create the file with the statistics needed.\"\"\"\n    file = open(\"statistics_results.txt\", \"w\")\n    file.close()\n</code></pre> <p>Note that I can shorten the variables names <code>figure_file</code> and <code>statistics_file</code> now: each function now has its own <code>file</code> variable. Variable that have a life that is as short as needed is a good idea.</p>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#35-second-iteration","title":"3.5. Second iteration","text":"<p>There are many ways to go forward here and multiple ways are equally fine.</p> <p>I think working on the statistics file is the best way forward: I can imagine that I can test if a file contains a line of text with a p-value (e.g. <code>p-value: 0.123</code>). Images are harder to test, hence I try to avoid writing tests on images. I even predict I will not even need to write such a test in the end...</p> <p>I feel writing a p-value to the statistics file is a good start:</p> <pre><code>def create_statistics_file():\n    \"\"\"Create the file with the statistics needed.\"\"\"\n    file = open(\"statistics_results.txt\", \"w\")\n    p_value = calc_p_value()\n    assert p_value &gt;= 0.0\n    assert p_value &lt;= 1.0\n    file.write(\"p value:\" + str(p_value))\n    file.close()\n\n\nassert calc_p_value.__doc__\nassert calc_p_value() &gt;= 0.0\nassert calc_p_value() &lt;= 1.0\n</code></pre> <p>This would be a good enough stub for <code>calc_p_value</code>:</p> <pre><code>def calc_p_value():\n    \"\"\"Create the p value of the statistics test.\"\"\"\n    return 0.5\n</code></pre>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#36-third-iteration","title":"3.6. Third iteration","text":"<p>There are many ways to go forward here and multiple ways are equally fine.</p> <p>I feel making the <code>calc_p_value</code> function actually do something would be most useful. Also, it annoys me that <code>calc_p_value</code> has no arguments: how can I test such a function? Let's first make the function testable: a Good Idea!</p> <p>So I start with writing a test, that forces me to improve <code>calc_p_value</code>:</p> <pre><code>assert calc_p_value([1, 2, 3], [4, 5, 6]) &gt;= 0.0\n</code></pre> <p>Remembering the second law of TDD ('You may not write more of a unit test than is sufficient to fail, and not compiling is failing' <code>[Martin, 2007]</code>) I know I am on the right track: the code will give a syntax error.</p> <p>The code will give a syntax error, because I have two tests that conflict:</p> <pre><code># Earlier\nassert calc_p_value.__doc__\nassert calc_p_value() &gt;= 0.0\nassert calc_p_value() &lt;= 1.0\n\n# Newer\nassert calc_p_value([1, 2, 3], [4, 5, 6]) &gt;= 0.0\n</code></pre> <p>The earlier tests assume that there are default values for all function arguments. That can be fixed:</p> <pre><code>def calc_p_value(values_1 = [1.2, 3.4, 5.6], values_2 = [7.8, 9.0, 1.2]):\n    \"\"\"Create the p value of the statistics test.\"\"\"\n    return 0.5\n</code></pre>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#37-fourth-iteration","title":"3.7. Fourth iteration","text":"<p>There are many ways to go forward here and multiple ways are equally fine.</p> <p>I feel making the <code>calc_p_value</code> function actually do something would be most useful. Now we can!</p> <p>I add these tests:</p> <pre><code>expected_p_value = 0.0326 # From https://agentcalc.com/kolmogorov-smirnov-test-calculator\nassert calc_p_value([1, 2, 3], [4, 5, 6]) &gt;= expected_p_value - 0.001\nassert calc_p_value([1, 2, 3], [4, 5, 6]) &lt;= expected_p_value + 0.001\n</code></pre> <p>I obtained the expected p-value from an online Kolmogorov-Smirnov test calculator. I assume this online calculator is correct.</p> <p>This forces me to write a useful <code>calc_p_value</code> function. To write it, I searched the web for <code>Python Kolmogorov Smirnov test</code> and found documentation to an implementation, from which I conclude that this may work:</p> <pre><code>def calc_p_value(values_1 = [1.2, 3.4, 5.6], values_2 = [7.8, 9.0, 1.2]):\n    \"\"\"Create the p value of the statistics test.\"\"\"\n    from scipy import stats\n    return stats.kstest(values_1, values_2).pvalue\n</code></pre> <p>When running this code, my tests failed!</p> <p>This means there is a mismatch between the Python implementation and the website. Luckily, the website has a worked-out example:</p> <p>Worked Example</p> <p>Consider two manufacturing processes that produce slightly different measurements for a critical component. Suppose sample A consists of the diameters [5.01, 4.98, 5.03, 5.00, 5.02] millimeters, while sample B produces [4.97, 4.99, 5.04, 5.01, 4.96]. When these values are entered into the calculator, the sorted ECDFs reveal a maximum deviation of D. With both samples containing five observations, the approximation above yields a p\u2011value around 0.70.</p> <p>We change the tests to the worked-out example:</p> <pre><code>expected_p_value = 0.0326 # From https://agentcalc.com/kolmogorov-smirnov-test-calculator\nvalues_1 = [5.01, 4.98, 5.03, 5.00, 5.02]\nvalues_2 = [4.97, 4.99, 5.04, 5.01, 4.96]\nassert calc_p_value(values_1, values_2) &gt;= expected_p_value - 0.001\nassert calc_p_value(values_1, values_2) &lt;= expected_p_value + 0.001\n</code></pre> <p>Also these tests fail! Adding a <code>print</code> statement ...</p> <pre><code>print(calc_p_value(values_1, values_2))\n</code></pre> <p>... reveals that the actually generated p-value is around 0.87.</p> <p>Let's check another online Kolmogorov Smirnov calculator, which does not even give us a p-value: the sample size is too small! It seems our test must include at least 10 values. Let's update our test:</p> <pre><code>expected_p_value = 0.8810 # From https://agentcalc.com/kolmogorov-smirnov-test-calculator\n# expected_p_value = 0.8659 # From https://www.statskingdom.com/kolmogorov-smirnov-two-calculator.html\n\nvalues_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvalues_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nprint(calc_p_value(values_1, values_2))\nassert calc_p_value(values_1, values_2) &gt;= expected_p_value - 0.1\nassert calc_p_value(values_1, values_2) &lt;= expected_p_value + 0.1\n</code></pre> <p>This prints a value of around 0.84, which we consider good enough. It seems that there are multiple implementations of this algorithm and it seems like we are doing well enough.</p> <p>I feel that this is good enough for now and I will create an issue to remind myself to double-check this calculation with another set of values.</p>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#38-fifth-iteration","title":"3.8. Fifth iteration","text":"<p>There are many ways to go forward here and multiple ways are equally fine.</p> <p>I feel making the <code>calc_p_value</code> function use the actual values from the dataset would be most useful. Here I rewrite <code>calc_p_value</code>:</p> <pre><code>def calc_p_value(values_1 = get_first_third_temperatures(), values_2 = get_last_third_temperatures()):\n    # Function body stays the same\n</code></pre> <p>Remembering the second law of TDD ('You may not write more of a unit test than is sufficient to fail, and not compiling is failing' <code>[Martin, 2007]</code>) I know I am on the right track: the code will give an error that <code>get_first_third_temperatures</code> and <code>get_last_third_temperatures</code> are missing. Let's implement these:</p> <pre><code>def get_first_third_temperatures():\n    return [1.2, 3.4, 5.6]\n\ndef get_last_third_temperatures():\n    return [7.8, 9.0, 1.2]\n</code></pre> <p>All tests pass again!</p>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#39-sixth-iteration","title":"3.9. Sixth iteration","text":"<p>There are many ways to go forward here and multiple ways are equally fine.</p> <p>I feel making the <code>get_first_third_temperatures</code> function use the actual values from the dataset would be most useful. Here I write the tests for <code>get_first_third_temperatures</code>:</p> <pre><code>assert get_first_third_temperatures.__doc__\nassert len(get_first_third_temperatures()) &gt; 10\n</code></pre> <p>This is good enough to make me work on <code>get_first_third_temperatures</code>:</p> <pre><code>def get_first_third_temperatures():\n    \"\"\"Get the first third of temperatures.\n    This excludes the year 1722, as this year is not completely measured.\"\"\"\n    table = read_data()\n\n    # Assert 'table' is a table\n    # Assert 'table' has a column called 'Year'\n\n    table = table[table[\"Year\"] &gt; 1722 &amp;&amp; table[\"Year\"] &lt;= 1822]\n\n    # Assert 'table' has a column called 'Temperature'\n\n    return table[\"Temperature\"]                          \n</code></pre> <p>And here we finally get into the more technical things, such as reading a table and selecting rows and columns from it!</p> Could you show me the complete code? <p>Here is the complete code, except for the last version of <code>collect_first_third_temperatures</code>:</p> <pre><code>def collect_first_third_temperatures():\n    return range(1, 100)\n\ndef get_first_third_temperatures():\n    \"\"\"Get the first third of temperatures.\n    This excludes the year 1722, as this year is not completely measured.\"\"\"\n    return collect_first_third_temperatures()\n\nassert len(get_first_third_temperatures()) &gt; 10\n\ndef get_last_third_temperatures():\n    return [7.8, 9.0, 1.2]\n\ndef calc_p_value(values_1 = get_first_third_temperatures(), values_2 = get_last_third_temperatures()):\n    \"\"\"Create the p value of the statistics test.\"\"\"\n    from scipy import stats\n    return stats.kstest(values_1, values_2).pvalue\n\n\nexpected_p_value = 0.8810 # From https://agentcalc.com/kolmogorov-smirnov-test-calculator\n# expected_p_value = 0.8659 # From https://www.statskingdom.com/kolmogorov-smirnov-two-calculator.html\n\nvalues_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nvalues_2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert calc_p_value(values_1, values_2) &gt;= expected_p_value - 0.1\nassert calc_p_value(values_1, values_2) &lt;= expected_p_value + 0.1\n\ndef file_exists(filename):\n    return True\n\n\ndef create_figure():\n    \"\"\"Create the boxplot of temperatures.\"\"\"\n    file = open(\"figure.png\", \"w\")\n    file.close()\n\nassert create_figure.__doc__\ncreate_figure()\nassert file_exists(\"figure.png\")\n\ndef create_statistics_file():\n    \"\"\"Create the file with the statistics needed.\"\"\"\n    file = open(\"statistics_results.txt\", \"w\")\n    p_value = calc_p_value()\n    assert p_value &gt;= 0.0\n    assert p_value &lt;= 1.0\n    file.write(\"p value:\" + str(p_value))\n    file.close()\n\n\nassert create_statistics_file.__doc__\ncreate_statistics_file()\nassert file_exists(\"statistics_results.txt\")\n\ndef do_analysis():\n    \"\"\"Do the analysis as described in the paper.\"\"\"\n    create_figure()\n    create_statistics_file()\n\ndo_analysis()\nassert do_analysis.__doc__\nassert file_exists(\"figure.png\")\nassert file_exists(\"statistics_results.txt\")\n</code></pre>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#5-exercises","title":"5. Exercises","text":"","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#51-discuss-the-steps-shown","title":"5.1. Discuss the steps shown","text":"<p>Go through the steps shown above together. Make sure you follow along with the code on your own screen, as in each little discussion, there will be no screen shared.</p> <ul> <li>Do you agree that the steps taken are reasonable? If not, why?</li> <li>Do you think a mistake has been made? If yes, where?</li> <li>Would you trust the results of this analysis? Why?</li> </ul>","tags":["TDD","Test-driven development","big","complex"]},{"location":"tdd_at_bigger_scale/#references","title":"References","text":"<ul> <li><code>[Alkaoud &amp; Walcott, 2018]</code> Alkaoud, Hessah, and Kristen R. Walcott.   \"Quality metrics of test suites in test-driven designed applications.\"   International Journal of Software Engineering Applications (IJSEA)   2018 (2018).</li> <li><code>[Beck, 2022]</code> Beck, Kent. Test driven development: By example.   Addison-Wesley Professional, 2022.</li> <li><code>[Bhat &amp; Nagappan, 2006]</code> Bhat, Thirumalesh, and Nachiappan Nagappan.   \"Evaluating the efficacy of test-driven development: industrial case   studies.\" Proceedings of the 2006 ACM/IEEE international symposium on   Empirical software engineering. 2006.</li> <li><code>[Erdogmus &amp; Morisio, 2005]</code> Erdogmus, Hakan, Maurizio Morisio, and   Marco Torchiano. \"On the effectiveness of the test-first approach to   programming.\" IEEE Transactions on software Engineering 31.3 (2005): 226-237.</li> <li><code>[George &amp; Williams, 2004]</code> George, Boby, and Laurie Williams.   \"A structured experiment of test-driven development.\"   Information and software Technology 46.5 (2004): 337-342.</li> <li><code>[Janzen &amp; Saiedian, 2006]</code> Janzen, David S., and Hossein Saiedian.   \"Test-driven learning: intrinsic integration of testing into the CS/SE   curriculum.\" Acm Sigcse Bulletin 38.1 (2006): 254-258.</li> <li><code>[Langr, 2013]</code> Langr, Jeff. Better, Code, and Sleep Better.   \"Modern C++ Programming with Test-Driven Development.\" (2013).</li> <li><code>[Madeyski et al., 2010]</code> Madeyski, Lech, and   Gesti\u00f3n de sistemas de informaci\u00f3n.   Test-driven development: An empirical evaluation of agile practice.   Heidelberg: Springer, 2010.</li> <li><code>[Martin, 2007]</code> Martin, Robert C.   \"Professionalism and test-driven development.\"   IEEE Software 24.3 (2007): 32-36.</li> <li><code>[Martin, 2009]</code> Martin, Robert C.   Clean code: a handbook of agile software craftsmanship.   Pearson Education, 2009.</li> <li><code>[Martin, 2011]</code> Martin, Robert C.   The clean coder: a code of conduct for professional programmers.   Pearson Education, 2011.</li> <li><code>[Martin, 2017]</code> Martin, Robert C. \"Clean architecture.\" 12 Sep. 2017,</li> <li><code>[Mayr, 2005]</code> Mayr, Herwig.   Projekt Engineering: Ingenieurm\u00e4\u00dfige Softwareentwicklung in Projektgruppen.   Hanser Verlag, 2005.</li> <li><code>[Nagappan et al., 2008]</code> Nagappan, Nachiappan, et al.   \"Realizing quality improvement through test driven development:   results and experiences of four industrial teams.\"   Empirical Software Engineering 13 (2008): 289-302.</li> <li><code>[PEP 8]</code> Van Rossum, Guido, Barry Warsaw, and Nick Coghlan.   \"PEP 8\u2013style guide for python code.\" Python. org 1565 (2001): 28.</li> <li><code>[Stroustrup &amp; Sutter, 2017]</code>   Stroustrup, Bjarne, and Herb Sutter.   \"C++ Core Guidelines (2017).\"   Website.   (Cited on pages 100 and 103) (2015).</li> <li><code>[study I cannot find]</code> in one of the classics, there was a bar chart that   showed developers write functions such as <code>is_prime</code> with and without TDD   and showed that TDD was twice as fast. TODO: find this reference</li> <li><code>[Thomas &amp; Hunt, 2019]</code> Thomas, David, and Andrew Hunt.   The Pragmatic Programmer: your journey to mastery.   Addison-Wesley Professional, 2019.</li> <li><code>[Wickham, 2019]</code> Wickham, Hadley. Advanced R. Chapman and Hall/CRC, 2019.</li> </ul> <ul> <li><code>[Yuan et al., 2014]</code>   Yuan, Ding, et al.   \"Simple testing can prevent most critical failures:   An analysis of production failures in distributed data-intensive systems.\"   11th USENIX Symposium on Operating Systems Design and Implementation   (OSDI 14). 2014.</li> <li><code>[Zen of Python]</code> Zen Of Python: 'Errors should never pass silently'</li> <li><code>[Uncle Bob, 2024]</code> YouTube video 'Is Test Driven Development Slow?' by Uncle Bob</li> </ul>","tags":["TDD","Test-driven development","big","complex"]},{"location":"testing/testing_framework/","title":"Using a formal testing framework","text":"<p>Learning outcomes</p> <ul> <li>understand the benefit of using a testing framework</li> <li>put the files of my code in the right locations</li> <li>write tests using a formal testing framework</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>Learners have some idea of the benefit of using a testing framework</li> <li>Learners have practiced writing tests within a formal testing framework</li> </ul> <pre><code>gantt\n  title Lesson plan using a testing framework\n  dateFormat X\n  axisFormat %s\n  Introduction: intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 25s\n  Feedback 1: feedback_1, after exercise_1, 10s</code></pre> <p>Prior questions:</p> <ul> <li>When do you trust your code?</li> <li>When do you trust code written by others?</li> <li>How do you convince other developers of a bug?</li> </ul>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#1-why-use-tests","title":"1. Why use tests?","text":"Prefer this lecture as a video? <p>See this YouTube video</p> <p>Testing helps ensure the correctness of code.</p> <ul> <li>Coding errors are extremely common <code>[Baggerly &amp; Coombes, 2009]</code></li> <li>Contribute to the reproducibility crisis in science <code>[Vable et al., 2021]</code>,   e.g. <code>[Rahman &amp; Farhana, 2020]</code></li> <li>Simple testing can prevent most critical failures <code>[Yuan et al., 2014]</code></li> </ul>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#2-levels-of-testing","title":"2. Levels of testing","text":"Test Description Unit test Tests 1 unit, e.g. a function Integration test Tests multiple units together, i.e. a part of the system System test Tests the system as a whole","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#3-why-use-a-testing-framework","title":"3. Why use a testing framework?","text":"<p>You want to write tests in the recommended way and put their files in a recommended place. You want your tests to be found by most of the tools in the Python ecosystem.</p>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#4-testing-framework","title":"4. Testing framework","text":"<p>There are multiple testing frameworks, here is an incomplete overview:</p> Testing framework Features <code>unittest</code> Part of Python standard library, heavily used, VSCode can find it, allows Hamcrest notation, needs scaffolding <code>pytest</code> Uses <code>assert</code>, minimal scaffolding <code>nose</code> Extends <code>unittest</code> <p>In this project, we use a testing framework, because:</p> <ul> <li>A formal way to write tests</li> <li>Failed tests give better error messages</li> </ul> <p>Drawback of <code>unittest</code> (and many other testing frameworks):</p> <ul> <li>Takes some scaffolding</li> </ul>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#41-example-test-test-if-something-is-true","title":"4.1. Example test: test if something is true","text":"<p>No testing framework:</p> <pre><code>assert 1 + 1 == 2\n</code></pre> <p>Using <code>unittest</code>:</p> <pre><code>import unittest\n\nclass TestSmall(unittest.TestCase):\n    def test_is_true(self):\n        self.assertIsTrue(1 + 1 == 2)\n</code></pre> <p>Mostly scaffolding here...</p>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#42-example-test-test-if-something-is-equal","title":"4.2. Example test: test if something is equal","text":"<p>No testing framework:</p> <pre><code>assert 1 + 1 == 2\n</code></pre> <p>Using <code>unittest</code>:</p> <pre><code>import unittest\n\nclass TestSmall(unittest.TestCase):\n    def test_is_equal(self):\n        self.assertEqual(1 + 1, 2)\n</code></pre> <p>Hamcrest notation can give better error message.</p>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#43-example-test-test-if-something-raises-an-exception","title":"4.3. Example test: test if something raises an exception","text":"<p>No testing framework:</p> <pre><code>def raise_error():\n    raise RunType(\"Raise an error!\")\n\nhas_raised = False\ntry:\n    raise_error()\nexcept:\n    has_raised = True\nassert has_raised\n</code></pre> <p>Using <code>unittest</code>:</p> <pre><code>import unittest\n\nclass TestSmall(unittest.TestCase):\n    def test_raises(self):\n        self.assertRaises(RunTimeError, raise_error)\n</code></pre> <p>Here using a formal testing framework saves typing.</p>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#5-file-setup","title":"5. File setup","text":"<p>A testing framework needs files to be in standarized places.</p> <p>One can search the web for this, or use an existing project as reference.</p> <p>For the <code>unittest</code> framework, the actual functions are put in the <code>src/[package_name]</code> folder, for example <code>src/weather/sven_utils.py</code>. With or without a testing framework, source code should be put in the <code>src</code> folder <code>[Wilson et al, 2017]</code>.</p> How does this look like in VSCode? <p></p> How does such a file look like? <p>Here is how such a file could look like:</p> <pre><code>\"\"\"Sven's utility functions\"\"\"\n\ndef is_zero(x):\n    \"\"\"Determine if `x` is zero.\n\n    If `x` is not a number, a `TypeError` is raised.\n\n    Returns `True` if `x` is zero\n    \"\"\"\n    if not isinstance(x, (int, float)):\n        msg = \"'number' must be a number. \"\n        raise TypeError(\n            msg,\n            \"Actual type of 'number': \", type(x),\n        )\n    return x == 0\n</code></pre> <p>The testing functions are put in the <code>tests</code> folder and all files have <code>test_</code> added. For example, the file to test <code>src/weather/richel_utils.py</code> is called <code>tests/test_richel_utils.py</code>.</p> How does this look like in VSCode? <p></p> How does such a file look like? <p>Here is how such a file could look like:</p> <pre><code>\"\"\"Tests all function in src.weather.richel_utils.\"\"\"\nimport unittest\n\nfrom src.weather.richel_utils import is_zero\n\nclass TestRichelUtils(unittest.TestCase):\n\n    \"\"\"Class to test the functions in src.weather.richel_utils.\"\"\"\n\n    def test_is_zero(self):\n        \"\"\"Test 'is_zero'.\"\"\"\n        self.assertIsNotNone(is_zero.__doc__)\n        self.assertTrue(is_zero(0))\n        self.assertTrue(is_zero(0.0))\n        self.assertFalse(is_zero(1))\n        self.assertRaises(TypeError, is_zero, {1, 2})\n        self.assertRaises(TypeError, is_zero, \"I am a string\")\n</code></pre>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#6-running-a-test","title":"6. Running a test","text":"Get error <code>ModuleNotFoundError: No module named 'src'</code>? <p>You will get the error <code>ModuleNotFoundError: No module named 'src'</code> when you click 'Run' on your file with tests.</p> <p></p> <p>Clicking on 'Run' (see the red rectangle at the top-left) for a file that has tests will give the error <code>ModuleNotFoundError: No module named 'src'</code>. Click the green 'Testing' tab at the right instead.</p> <p>Instead, click on the green 'Testing' tab at the right.</p> <p>Click on the 'Testing' tab (with the erlenmeyer flask) at the right.</p> <p>If you do this for the first time, you get some blue buttons.</p> How does that look like? <p></p> <p>Click on 'Configure Python Tests'.</p> How does that look like? <p></p> <p>Select 'unittest Standard Python test framework'</p> How does that look like? <p></p> <p>Select <code>tests</code> as the testing folder.</p> How does that look like? <p></p> <p>Select <code>test_*.py</code> as the test file pattern.</p> How does that look like? <p></p> <p>Now the tests are present at the left side in a folded up state. One can unfold these.</p> How does that look like? <p></p> <p>Clicking on the 'Run'/'Play' button to run the tests.</p> Something went wrong? <p>An easy fix is to delete the file <code>.vscode/setting.json</code> and restart VS Code</p>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#7-exercises","title":"7. Exercises","text":"","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#71-exercise-1-get-the-existing-tests-to-work","title":"7.1. Exercise 1: get the existing tests to work","text":"<p>In this exercise, we get the tests to work within our IDE.</p> Don't use VS Code? <p>If you do not use VS Code, try to get it to run on your IDE. The steps for VS Code may be simular to those in your IDE.</p> <ul> <li>Follow the steps at running a test</li> <li>Run all the tests of the package</li> <li>Are all tests passing? If not, can you see the error message?</li> </ul> <p>Fixing the failing tests is beyond the scope of this exercise.</p>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#72-exercise-2-put-example-code-to-fit-the-testing-framework","title":"7.2. Exercise 2: put example code to fit the testing framework","text":"<p>In this exercise, we will put worked-out code at the right spots. This code is known to work, so our package will keep working.</p> <ul> <li>Create a file for the actual code, called, e.g. <code>src/weather/[name]_utils.py</code>,   e.g. <code>src/weather/sven_utils.py</code></li> <li>Copy-paste the following (familiar) code in that file:</li> </ul> <pre><code>def is_zero(number):\n    \"\"\"Testing if the number is zero.\"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"'number' must be of type int.\")\n    if number == 0:\n        return True\n    return False\n</code></pre> <ul> <li>Create a file for the tests of that code, called,   e.g. <code>tests/test_[name]_utils.py</code>, e.g. <code>tests/test_sven_utils.py</code></li> <li>Copy-paste the following (familiar) code in that file:</li> </ul> <pre><code>\"\"\"Tests all code in src.weather.sven_utils.\"\"\"\nimport unittest\n\nfrom src.weather.sven_utils import is_zero\n\nclass TestSvenUtils(unittest.TestCase):\n\n    \"\"\"Class to test the code in src.weather.sven_utils.\"\"\"\n\n    def test_is_zero_has_documentation(self):\n        \"\"\"The function 'is_zero' has documentation.\"\"\"\n        self.assertTrue(is_zero.__doc__)\n        self.assertIsNotNone(is_zero.__doc__)\n\n    def test_is_zero_responds_correctly_to_ints(self):\n        \"\"\"The function 'is_zero' responds correctly to integers.\"\"\"\n        self.assertTrue(is_zero(0))\n        self.assertFalse(is_zero(1))\n\n    def test_is_zero_raises_an_exception_upon_non_ints(self):\n        \"\"\"The function 'is_zero' raises an exception upon non-ints.\"\"\"\n        self.assertRaises(TypeError, is_zero, {1, 2})\n        self.assertRaises(TypeError, is_zero, \"I am a string\")\n</code></pre> <ul> <li>In that code, replace <code>sven</code> and <code>Sven</code> by your name</li> <li>Refresh the tests</li> <li>Run all tests</li> <li>Confirm that your new tests show up</li> <li>Confirm that your new tests passes</li> <li>If your tests pass, push it to the GitHub repo</li> </ul>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#73-exercise-3-put-example-code-to-fit-the-testing-framework","title":"7.3. Exercise 3: put example code to fit the testing framework","text":"<p>In this exercise, we convert some pre-programmed code to fit the testing framework.</p> <p>We use this code (from pythonpool):</p> <pre><code>def isprime(num):\n    for n in range(2,int(num**0.5)+1):\n        if num%n==0:\n            return False\n    return True\nprint(isprime(7))\nprint(isprime(8))\n</code></pre> <ul> <li>Copy paste the function and put it in your file called,   e.g. <code>src/weather/[name]_utils.py</code>, e.g. <code>src/weather/sven_utils.py</code></li> </ul> Answer <p>Copy-paste the following text to your file, e.g. <code>src/weather/[name]_utils.py</code>, e.g. <code>src/weather/sven_utils.py</code>:</p> <pre><code>def isprime(num):\n    for n in range(2,int(num**0.5)+1):\n        if num%n==0:\n            return False\n    return True\n</code></pre> <ul> <li>The example code has two wannabe tests. How would you convert these   to asserts?</li> </ul> Answer <p>These would be reasonable asserts:</p> <pre><code>assert isprime(7) == True\nassert isprime(8) == False\n</code></pre> <ul> <li>Use the file for the tests of that code,   e.g. <code>tests/test_[name]_utils.py</code>, e.g. <code>tests/test_sven_utils.py</code>.   Add tests using the testing framework.</li> </ul> Answer <p>This is how the file should look like:</p> <pre><code>\"\"\"Tests all code in src.weather.sven_utils.\"\"\"\nimport unittest\n\n# Other imports\nfrom src.weather.sven_utils import isprime\n\nclass TestSvenUtils(unittest.TestCase):\n\n    # Other tests\n\n    def test_isprime(self):\n        \"\"\"The function 'isprime' is correct.\"\"\"\n        self.assertTrue(isprime(7))\n        self.assertFalse(isprime(8))\n</code></pre> <ul> <li>Can you break the <code>isprime</code> function?</li> </ul> Answer <p>There are multiple ways.</p> <p>You may reasonably assume that the function is documented:</p> <pre><code>self.assertTrue(is_zero.__doc__)\n</code></pre> <p>But this seems like a test that should work:</p> <pre><code>self.assertFalse(isprime(-1))\n</code></pre> <p>Both tests fail.</p> <p>It is beyond the scope of this exercise to fix this function :-)</p>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#74-exercise-4-convert-your-code-to-fit-the-testing-framework","title":"7.4. Exercise 4: convert your code to fit the testing framework","text":"<p>In this course, you've written some functions yourself.</p> <ul> <li>Pick the favorite function you've written</li> <li>Add it to the package, in the same files</li> </ul>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_framework/#references","title":"References","text":"<ul> <li><code>[Baggerly &amp; Coombes, 2009]</code> Baggerly, Keith A., and Kevin R. Coombes.   \"Deriving chemosensitivity from cell lines: forensic bioinformatics and   reproducible research in high-throughput biology.\"   The Annals of Applied Statistics (2009): 1309-1334.</li> <li><code>[Rahman &amp; Farhana, 2020]</code> Rahman, Akond, and Effat Farhana.   \"An exploratory characterization of bugs in COVID-19 software projects.\"   arXiv preprint arXiv:2006.00586 (2020).</li> <li><code>[Vable et al., 2021]</code> Vable, Anusha M., Scott F. Diehl, and M. Maria Glymour.   \"Code review as a simple trick to enhance reproducibility, accelerate   learning, and improve the quality of your team\u2019s research.\"   American Journal of Epidemiology 190.10 (2021): 2172-2177.</li> <li><code>[Wilson et al, 2017]</code> Wilson, Greg, et al.   \"Good enough practices in scientific computing.\"   PLoS computational biology 13.6 (2017): e1005510.   Article</li> <li><code>[Yuan et al., 2014]</code>   Yuan, Ding, et al.   \"Simple testing can prevent most critical failures:   An analysis of production failures in distributed data-intensive systems.\"   11th USENIX Symposium on Operating Systems Design and Implementation   (OSDI 14). 2014.</li> <li><code>[Zen of Python]</code> Zen Of Python: 'Errors should never pass silently'</li> </ul>","tags":["Test","Testing","Testing framework","unittest","Unit test","Unit tests","Unit testing"]},{"location":"testing/testing_in_a_team/","title":"Testing in a team","text":"<p>Learning outcomes</p> <ul> <li>understand .</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>Learners have .</li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners .</li> </ul> <p>Teaching form used:</p> <ul> <li>.</li> </ul> <p>Lesson plan:</p> <ul> <li> <p>5 mins: prior knowledge</p> <ul> <li>When one works in a team, how to make sure my code keeps doing the same?</li> <li>Test everything? If no, what to test?</li> </ul> </li> <li> <p>5 mins: presentation</p> </li> <li>10 mins: demonstration <code>is_zero</code></li> <li>25 mins: challenge</li> <li>10 mins: feedback</li> </ul>","tags":["Test","Testing","Team","Collaborative"]},{"location":"testing/testing_in_a_team/#tests-in-a-team","title":"Tests in a team","text":"<p>If all tests pass, we are -by definition- happy.</p> <p>Programming team tresinformal</p>","tags":["Test","Testing","Team","Collaborative"]},{"location":"testing/testing_in_a_team/#problem","title":"Problem","text":"<p>Q: When one works in a team, how to make sure my code keeps doing the same?</p> <pre><code>def get_test_dna_sequence():\n  \"\"\"Get a DNA sequence to be used in testing\"\"\"\n  return \"ACGTACGT\"\n</code></pre> <p>. . .</p> <p>A: Apply the Beyonc\u00e9 Rule</p>","tags":["Test","Testing","Team","Collaborative"]},{"location":"testing/testing_in_a_team/#beyonce-rule","title":"Beyonc\u00e9 rule","text":"<p>'If you like it, then you gotta put a test on it'</p> <pre><code>assert get_test_dna_sequence() == \"ACGTACGT\"\n</code></pre> <p>Teams should be reluctant to change tests: this will likely break other code.</p> <p></p> <p>Source: Wikimedia</p>","tags":["Test","Testing","Team","Collaborative"]},{"location":"testing/testing_in_a_team/#untestable-functions","title":"Untestable functions","text":"<p>Q: How to test this function?</p> <pre><code>def print_hello():\n    print(\"Hello world\")\n</code></pre> <p>. . .</p> <p>A: Never write untestable functions</p>","tags":["Test","Testing","Team","Collaborative"]},{"location":"testing/testing_in_a_team/#making-untestable-functions-testable","title":"Making untestable functions testable","text":"<p>Q: How to make this function testable?</p> <pre><code>def print_hello():\n    print(\"Hello world\")\n</code></pre> <p>. . .</p> <pre><code>def get_hello_world_text():\n    return \"Hello world\"\n</code></pre>","tags":["Test","Testing","Team","Collaborative"]},{"location":"testing/testing_in_a_team/#testing-graphical-functions","title":"Testing graphical functions","text":"<p>Q: How to test this function thoroughly:</p> <ul> <li>Plot looks pretty</li> <li>Colors are correct</li> <li>Trend line is drawn</li> </ul> <pre><code>def save_plot(filename, x_y_data):\n    \"\"\"Save the X-Y data as a scatter plot\"\"\"\n</code></pre> <p>. . .</p> <p>A: usually: use a human, e.g. a code reviewer</p> <p>In most cases, graphical analysis tools and/or AI are overkill. If you are stubborn: try!</p>","tags":["Test","Testing","Team","Collaborative"]},{"location":"testing/testing_indeterminate_functions/","title":"Indeterminate functions","text":"<p>Learning outcomes</p> <ul> <li>practice writing tests for indeterminate functions   within a formal testing framework</li> </ul> For teachers <p>Prerequisites are:</p> <ul> <li>Learners have .</li> </ul> <p>Teaching goals are:</p> <ul> <li>Learners .</li> </ul> <p>Teaching form used:</p> <ul> <li>.</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge<ul> <li>When do you trust your code?</li> <li>When do you trust code written by others?</li> <li>How do you convince other developers of a bug?</li> </ul> </li> <li>5 mins: presentation</li> <li>10 mins: demonstration <code>is_zero</code></li> <li>25 mins: challenge</li> <li>10 mins: feedback</li> </ul>","tags":["Test","Testing","Indeterminate","Random"]},{"location":"testing/testing_indeterminate_functions/#testing-indeterministic-functions","title":"Testing indeterministic functions","text":"<p>Functions that do not always return the same values.</p> <pre><code>def flip_coin():\n    \"\"\"Produce a random boolean.\"\"\"\n    return random.randint(0, 1) &gt; 0\n</code></pre> <p>How to test these?</p>","tags":["Test","Testing","Indeterminate","Random"]},{"location":"testing/testing_indeterminate_functions/#randomness","title":"Randomness","text":"<p>A Random Number Generator ('RNG') produces the same random values after setting the same RNG seed.</p> <pre><code>import random\nrandom.seed(5)\nassert flip_coin()\nrandom.seed(2)\nassert not flip_coin()\n</code></pre>","tags":["Test","Testing","Indeterminate","Random"]},{"location":"testing/testing_indeterminate_functions/#exercises","title":"Exercises","text":"","tags":["Test","Testing","Indeterminate","Random"]},{"location":"testing/testing_indeterminate_functions/#exercise-1-first-attempt","title":"Exercise 1: first attempt","text":"Learning outcomes <ul> <li>practice writing tests for indeterminate functions   within a formal testing framework</li> </ul> <p>In pairs, develop a function using TDD using the <code>unittest</code> framework.</p> <p>The function is a function which returns the result of a dice throw: a random integer value from 1 to and including 6.</p> <p>The function</p> <ul> <li>Function name: <code>get_dice_throw_value_[names]</code>,   for example, <code>get_dice_throw_value_anna_and_sven</code></li> <li>Output:<ul> <li>Returns a random integer value from 1 to and including 6.</li> </ul> </li> </ul> <p>Social</p> <ul> <li>Ping-Pong Pair programming</li> <li>Discuss how and when to switch roles first!</li> <li>Decide who is the first driver,   e.g. the person with first name first in alphabet</li> <li>Try to be an exemplary duo</li> </ul> <p>Technical</p> <ul> <li>Create a topic branch for your pair. Branch of from <code>develop</code></li> <li>Work within scaffolding of the learners project<ul> <li>Functions are in <code>src/[package_name]/</code>.   Call the file <code>utils_[names].py</code>, e.g. <code>utils_anna_and_sven.py</code></li> <li>Tests are in <code>tests/</code>.   Call the file <code>test_utils_[names].py</code>,   e.g. <code>test_utils_anna_and_sven.py</code></li> </ul> </li> <li>When done, create a Pull Request to <code>develop</code>. Do not merge!</li> </ul>","tags":["Test","Testing","Indeterminate","Random"]},{"location":"testing/testing_indeterminate_functions/#exercise-2-second-attempt","title":"Exercise 2: second attempt","text":"Learning outcomes <ul> <li>practice writing tests for indeterminate functions   within a formal testing framework</li> </ul> <p>In pairs, develop an indeterminate function using TDD using the <code>unittest</code> framework.</p> <p>Use the same setup as exercise 1.</p> <p>However, decide upon an interesting function at your estimated level. When disagreeing: pick the easiest function.</p> <p>If needed, this function is suggested:</p> <p>The function</p> <ul> <li>Function name: <code>get_lottery_values_[names]</code>,   for example, <code>get_lottery_values_anna_and_sven</code></li> <li>Input: the highest value that can be drawn,   e.g. 45, which is common in lottry games</li> <li>Output: Returns a list of six random numbers,   in range [1, <code>highest_value</code>] (i.e. including   one and the highest value that can be drawn). Each number must be unique.   The numbers need not to be sorted.   Assuming a highest value of 45, them:<ul> <li>Valid examples: <code>[1, 2, 3, 4, 5, 6]</code>, <code>[6, 5, 4, 3, 2, 1]</code></li> <li>Invalid examples: <code>[1, 1, 1, 1, 1, 1]</code> (due to duplicates),   <code>[1, 2, 3, 4, 5, 46]</code> (last value is heigher than 45),</li> </ul> </li> <li>If the input is not one integer that is at least 6,   a <code>TypeError</code> is raised.</li> </ul>","tags":["Test","Testing","Indeterminate","Random"]},{"location":"watching/","title":"Watching","text":"<p>Learning outcomes</p> <ul> <li>Understand why watching a repository is useful</li> <li>Be able to unwatch a repository</li> </ul> For teachers <p>Prior:</p> <ul> <li>Someone made a change to the repository and breaks the code.   How do you find out?</li> </ul> <p>Lesson plans:</p> <pre><code>gantt\n  title Lesson plan pair programming 1\n  dateFormat X\n  axisFormat %s\n  Introduction : intro, 0, 5s\n  Theory 1: theory_1, after intro, 5s\n  Exercise 1: crit, exercise_1, after theory_1, 15s\n  Feedback 1: feedback_1, after exercise_1, 5s\n  Theory 2: theory_2, after feedback_1, 5s\n  Exercise 2: crit, exercise_2, after theory_2, 10s\n  Exercise 2 after the break: crit, after exercise_2, 5s</code></pre>","tags":["watch","unwatch","watching"]},{"location":"watching/#why","title":"Why?","text":"<p>You want to be notified of certain things, but not of all things.</p>","tags":["watch","unwatch","watching"]},{"location":"watching/#introduction","title":"Introduction","text":"<p>At the start of the course, you'll be added to the learners' project. By default, it is assumed you want to be informed on any event: when the code breaks or when you are mentioned.</p> <p>You can see this at the repository: at the top-right, there is a button with an eye and the text 'Unwatch'. This means you are watching all activity of the repository.</p> <p></p> <p>Watching all activity of the repository</p> <p>The chance that you want to see all activity is low. Probably, you only want to be notified when you are mentioned in an issue.</p> <p>To do so, click on the button with the eye and the text 'Unwatch'.</p> <p></p> <p>Change what you are watching</p> <p>Click on 'Participating and mentions'.</p> <p>Now, you are not watching all activity of the repository.</p> <p></p> <p>Not watching all activity of the repository</p>","tags":["watch","unwatch","watching"]},{"location":"watching/#exercises","title":"Exercises","text":"","tags":["watch","unwatch","watching"]},{"location":"watching/#exercise-1-not-watching-all-activity-of-the-learners-repository","title":"Exercise 1: not watching all activity of the learners' repository","text":"<ul> <li>Read the text above</li> <li>Change the watching to only respond to 'Participating and mentions'</li> </ul>","tags":["watch","unwatch","watching"]}]}