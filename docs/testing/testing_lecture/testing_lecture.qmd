---
title: "Testing"
author: "Richèl Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
bibliography: testing_lecture.bib
csl: vancouver.csl
css: styles.css
slide-number: true
number-sections: true
---

# The Big Picture ![](CC-BY-NC-SA.png)

<https://github.com/UPPMAX/programming_formalisms/blob/main/tdd/tdd_lecture/tdd_lecture.qmd>

![](programming_formalism_logo_25_cropped.png)

## Breaks

Please take breaks: these are important for learning. Ideally, do something boring @newport2016deep!

## Schedule

| Day | From  | To    | What                          |
|-----|-------|-------|-------------------------------|
| Wed | 12:00 | 13:00 | Lunch                         |
| Wed | 13:00 | 13:45 | Testing, `is_prime_[names]`   |
| Wed | 13:45 | 14:00 | Break                         |
| Wed | 14:00 | 14:45 | Testing, `flip_coin_[names]`  |
| Wed | 14:45 | 15:00 | Break                         |
| Wed | 15:00 | 15:30 | Testing, `get_digits_[names]` |
| Wed | 15:30 | 16:00 | Reflection                    |

# Testing

## Problems

When do you trust your code?

. . .

When do you trust code written by others?

. . .

How do you convince other developers of a bug?

## Testing

-   Coding errors are extremely common @baggerly2009deriving
-   Contribute to the reproducibility crisis in science @vable2021code, e.g. @rahman2020exploratory

Testing *helps* ensure the correctness of code.

![](beck_tdd_by_example.jpg) ![](langr_tdd.jpg) ![](thomas_and_hunt_the_pragmatic_programmer.jpg)

## Testing framework

-   **`unittest`**, `pytest`, `nose`, etc.
-   Makes it easier to write unit tests
-   Takes some scaffolding
-   Failed tests give a better error message

## Test if something is true

No testing framework:

```{python}
#| echo: true
#| eval: true
assert 1 + 1 == 2
```

Using `unittest`:

```{python}
#| echo: true
#| eval: true
import unittest

class TestSmall(unittest.TestCase):
    def test_is_true(self):
        self.assertIsTrue(1 + 1 == 2)
```

:neutral_face: Mostly scaffolding here

## Test if something is equal

No testing framework:

```{python}
#| echo: true
#| eval: true
assert 1 + 1 == 2
```

Using `unittest`:

```{python}
#| echo: true
#| eval: true
import unittest

class TestSmall(unittest.TestCase):
    def test_is_equal(self):
        self.assertEqual(1 + 1, 2)
```

:monocle_face: Hamcrest notation can give better error message.

## Test if something raises an exception

No testing framework:

```{python}
#| echo: true
#| eval: true
def raise_error():
    raise RunType("Raise an error!")

has_raised = False
try:
    raise_error() 
except:
    has_raised = True
assert has_raised
```

Using `unittest`:

```{python}
#| echo: true
#| eval: true
import unittest

class TestSmall(unittest.TestCase):
    def test_raises(self):
        self.assertRaises(RunTimeError, raise_error)
```

:smile: here it pays off.

# Example exercise: `is_prime`

-   Only observe, no type-along!
-   Ask questions on the go! When in doubt: ask that question!
-   Time: 30 minutes

## Exercise: `is_prime`

-   Function name: `is_prime_[name]`, for example, `is_prime_richel`
-   Output:
    -   Returns `True` if the input is prime
    -   Returns `False` if the input is not prime
    -   Gives an error when the input is not an integer

## Exercise: `is_prime`, social

-   Ping-Pong Pair programming
-   Discuss how and when to switch roles first!
-   Person with first name first in alphabet starts
-   Try to be **an exemplary duo**

## Exercise: `is_prime`, technical

-   Work within scaffolding of the learners project
    -   Functions are in `src/[package_name]/testing.py`
    -   Tests are in `tests/test_testing.py`
-   Work on the main branch only, share code using `git push` and `git pull`
-   order the `is_prime_[name]` functions and tests alphabetically, e.g. `is_prime_lars` comes before `is_prime_richel`

## Live demo (30 minutes)

-   Or videos: [YouTube](https://youtu.be/jwAyMlaODfo) [download (.ogv)](https://richelbilderbeek.nl/tdd_python_is_prime_unittest_fork.ogv)

# Exercise 1: `is_prime`

-   Time: 30 minutes
-   Do the same exercise in pairs
-   There are multiple ways to do this: pick the way you feel is most natural

# Continuous integration

## Problem

How to work together well?

. . .

Encourage/enforce:

-   Code must pass all tests
-   High code coverage
-   Uniform coding style
-   URL links are valid
-   Correct spelling

## Continuous Integration

Scripts that are triggered when `push`ing code.

Assures quality:

-   Tests pass
-   Code has consistent style
-   Links are valid (i.e. not broken)
-   Spelling is correct
-   \[your check here\]

## Continuous Integration

-   CI significantly increase the number of bugs exposed @vasilescu2015
-   CI increases the speed at which new features are added @vasilescu2015

-\> Demo on learners repo

## Code coverage

-   Percentage of code tested
-   Correlates with code quality @horgan1994 @del1995correlation
-   100% mandatory to pass a code peer-review by rOpenSci @ram2018community

## Coding style

-   Following a consistent coding style improves software quality @fang2001
    -   Python: PEP8 @van2001pep
    -   R: Tidyverse @wickham2019advanced
-   May include cyclomatic complexity
    -   More complex code, more bugs @abd2018calculating @chen2019empirical @zimmermann2008predicting

## Coding style tools

-   Linter: program that tests code for style.

In Python: `ruff`, Sonar, `pytype`, Black, Codacy, Pylint, Flake8, `autopep8`, Pychecker, Pylama

## Disable a `ruff` test

```{python}
#| echo: true
#| eval: true
import random
i = random.randint(0, 1) # noqa: S311
```

You will need to defend this in a code review.

## Testing indeterministic functions

Functions that do not always return the same values.

```{python}
#| echo: true
#| eval: true
def flip_coin():
    """Produce a random boolean."""
    return random.randint(0, 1) > 0
```

How to test these?

## Randomness

A Random Number Generator ('RNG') produces the same random values after setting the same RNG seed.

```{python}
#| echo: true
#| eval: true
import random
random.seed(5)
assert flip_coin()
random.seed(2)
assert not flip_coin()
```

# Exercise 2: `flip_coin`

-   Time: 45 minutes

## Exercise 2: `flip_coin`

-   Function name: `flip_coin_[name]`, for example, `flip_coin_richel`
-   Input: none
-   Output: Returns `True` in 50% of all cases, else returns `False`
-   **Get all CI scripts to pass**

## Exercise 2: `flip_coin`, social

-   Ping-Pong Pair programming
-   Discuss how and when to switch roles first!
-   Person with first name first in alphabet starts
-   Try to be **an exemplary duo**

## Exercise 2: `flip_coin`, technical

-   Work within scaffolding of the learners project
    -   Functions are in `src/[package_name]/testing.py`
    -   Tests are in `tests/test_testing.py`
-   Work on the main branch only, share code using `git push` and `git pull`
-   order the `flip_coin_[name]` functions and tests alphabetically, e.g. `flip_coin_lars` comes before `flip_coin_richel`

# Tests in a team

> If all tests pass, we are -by definition- happy.
>
> Programming team [tresinformal](https://github.com/tresinformal)

## Problem

Q: When one works in a team, how to make sure my code keeps doing the same?

```{python}
#| echo: true
#| eval: true
def get_test_dna_sequence():
  """Get a DNA sequence to be used in testing"""
  return "ACGTACGT"
```

. . .

A: Apply the Beyoncé Rule

## Beyoncé rule

'If you like it, then you gotta put a test on it'

```{python}
#| echo: true
#| eval: true
assert get_test_dna_sequence() == "ACGTACGT"
```

Teams should be reluctant to change tests: this will likely break other code.

![Beyoncé](beyonce.png)

> Source: [Wikimedia](https://commons.wikimedia.org/wiki/Category:Beyonc%C3%A9_Knowles_in_2020#/media/File:Beyonc%C3%A9_Black_Is_King_Still.png)

## Untestable functions

Q: How to test this function?

```{python}
#| echo: true
#| eval: true
def print_hello():
    print("Hello world")
```

. . .

A: Never write untestable functions

## Making untestable functions testable

Q: How to make this function testable?

```{python}
#| echo: true
#| eval: true
def print_hello():
    print("Hello world")
```

. . .

```{python}
#| echo: true
#| eval: true
def get_hello_world_text():
    return "Hello world"
```

## Testing graphical functions

Q: How to test this function thoroughly:

-   Plot looks pretty
-   Colors are correct
-   Trend line is drawn

```{python}
#| echo: true
#| eval: true
def save_plot(filename, x_y_data):
    """Save the X-Y data as a scatter plot"""
```

. . .

A: usually: use **a human**, e.g. a code reviewer

In most cases, graphical analysis tools and/or AI are overkill. If you are stubborn: try!

# Exercise 3: `get_digits`

-   Time: 45 minutes

## Exercise 3: `get_digits`

-   Function name: `get_digits_[name]`, for example, `get_digits_richel`
-   Input: a positive number
-   Output:
    -   Returns the number split into a list of digits, e.g. `314` become `[3, 1, 4]`
    -   Gives an error when the input is not a positive integer
-   **Get all CI scripts to pass**

## Exercise 3: `get_digits`, social

-   Ping-Pong Pair programming
-   Discuss how and when to switch roles first!
-   Person with first name first in alphabet starts
-   Try to be **an exemplary duo**

## Exercise 3: `get_digits`, technical

-   Work within scaffolding of the learners project
    -   Functions are in `src/[package_name]/testing.py`
    -   Tests are in `tests/test_testing.py`
-   Work on the main branch only, share code using `git push` and `git pull`
-   order the `get_digits_[name]` functions and tests alphabetically, e.g. `get_digits_lars` comes before `get_digits_richel`

## Exercise 3: solution

`get_digits` video:

-   [download (.ogv)](https://richelbilderbeek.nl/tdd_python_get_digits.ogv)
-   [YouTube](https://youtu.be/vmRuSWhdA7c)

# Recap

-   Testing helps code correctness
    -   Use the Beyoncé Rule on precious behavior
-   Testing + CI:
    -   Helps teaching
    -   Helps bug reporting

## Weaknesses

-   We developed only simple algorithms
-   We only use simple data structures
-   We ignore if code is fast \[\*\]

This will be addressed in the next lectures :-)

-   \[\*\] vague wording on purpose

## Questions?

Questions?

## The End

![](dilbert_tdd_4.png)

## Links

-   [Former lecture on testing](https://uppmax.github.io/programming_formalism-automated_testing/)
-   [Hypermodern Python Cookiecutter](https://cookiecutter-hypermodern-python.readthedocs.io/en/2022.6.3.post1/)
-   [Scikit-HEP project info for developers](https://scikit-hep.org/developer)

# Breaks

I put the break slides in the end

## Break 1: 13:45-14:00

![](dilbert_agile_2.png)

## Break 2: 14:45-15:00

![](dilbert_agile_1.png)

## Done: 16:00

![](dilbert_tdd_3.png)

## References
